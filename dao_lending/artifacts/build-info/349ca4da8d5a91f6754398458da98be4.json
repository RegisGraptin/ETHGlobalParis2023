{"id":"349ca4da8d5a91f6754398458da98be4","_format":"hh-sol-build-info-1","solcVersion":"0.8.19","solcLongVersion":"0.8.19+commit.7dd6d404","input":{"language":"Solidity","sources":{"@aragon/osx/core/dao/IDAO.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.8;\n\n/// @title IDAO\n/// @author Aragon Association - 2022-2023\n/// @notice The interface required for DAOs within the Aragon App DAO framework.\ninterface IDAO {\n    /// @notice The action struct to be consumed by the DAO's `execute` function resulting in an external call.\n    /// @param to The address to call.\n    /// @param value The native token value to be sent with the call.\n    /// @param data The bytes-encoded function selector and calldata for the call.\n    struct Action {\n        address to;\n        uint256 value;\n        bytes data;\n    }\n\n    /// @notice Checks if an address has permission on a contract via a permission identifier and considers if `ANY_ADDRESS` was used in the granting process.\n    /// @param _where The address of the contract.\n    /// @param _who The address of a EOA or contract to give the permissions.\n    /// @param _permissionId The permission identifier.\n    /// @param _data The optional data passed to the `PermissionCondition` registered.\n    /// @return Returns true if the address has permission, false if not.\n    function hasPermission(\n        address _where,\n        address _who,\n        bytes32 _permissionId,\n        bytes memory _data\n    ) external view returns (bool);\n\n    /// @notice Updates the DAO metadata (e.g., an IPFS hash).\n    /// @param _metadata The IPFS hash of the new metadata object.\n    function setMetadata(bytes calldata _metadata) external;\n\n    /// @notice Emitted when the DAO metadata is updated.\n    /// @param metadata The IPFS hash of the new metadata object.\n    event MetadataSet(bytes metadata);\n\n    /// @notice Executes a list of actions. If a zero allow-failure map is provided, a failing action reverts the entire execution. If a non-zero allow-failure map is provided, allowed actions can fail without the entire call being reverted.\n    /// @param _callId The ID of the call. The definition of the value of `callId` is up to the calling contract and can be used, e.g., as a nonce.\n    /// @param _actions The array of actions.\n    /// @param _allowFailureMap A bitmap allowing execution to succeed, even if individual actions might revert. If the bit at index `i` is 1, the execution succeeds even if the `i`th action reverts. A failure map value of 0 requires every action to not revert.\n    /// @return The array of results obtained from the executed actions in `bytes`.\n    /// @return The resulting failure map containing the actions have actually failed.\n    function execute(\n        bytes32 _callId,\n        Action[] memory _actions,\n        uint256 _allowFailureMap\n    ) external returns (bytes[] memory, uint256);\n\n    /// @notice Emitted when a proposal is executed.\n    /// @param actor The address of the caller.\n    /// @param callId The ID of the call.\n    /// @param actions The array of actions executed.\n    /// @param allowFailureMap The allow failure map encoding which actions are allowed to fail.\n    /// @param failureMap The failure map encoding which actions have failed.\n    /// @param execResults The array with the results of the executed actions.\n    /// @dev The value of `callId` is defined by the component/contract calling the execute function. A `Plugin` implementation can use it, for example, as a nonce.\n    event Executed(\n        address indexed actor,\n        bytes32 callId,\n        Action[] actions,\n        uint256 allowFailureMap,\n        uint256 failureMap,\n        bytes[] execResults\n    );\n\n    /// @notice Emitted when a standard callback is registered.\n    /// @param interfaceId The ID of the interface.\n    /// @param callbackSelector The selector of the callback function.\n    /// @param magicNumber The magic number to be registered for the callback function selector.\n    event StandardCallbackRegistered(\n        bytes4 interfaceId,\n        bytes4 callbackSelector,\n        bytes4 magicNumber\n    );\n\n    /// @notice Deposits (native) tokens to the DAO contract with a reference string.\n    /// @param _token The address of the token or address(0) in case of the native token.\n    /// @param _amount The amount of tokens to deposit.\n    /// @param _reference The reference describing the deposit reason.\n    function deposit(address _token, uint256 _amount, string calldata _reference) external payable;\n\n    /// @notice Emitted when a token deposit has been made to the DAO.\n    /// @param sender The address of the sender.\n    /// @param token The address of the deposited token.\n    /// @param amount The amount of tokens deposited.\n    /// @param _reference The reference describing the deposit reason.\n    event Deposited(\n        address indexed sender,\n        address indexed token,\n        uint256 amount,\n        string _reference\n    );\n\n    /// @notice Emitted when a native token deposit has been made to the DAO.\n    /// @dev This event is intended to be emitted in the `receive` function and is therefore bound by the gas limitations for `send`/`transfer` calls introduced by [ERC-2929](https://eips.ethereum.org/EIPS/eip-2929).\n    /// @param sender The address of the sender.\n    /// @param amount The amount of native tokens deposited.\n    event NativeTokenDeposited(address sender, uint256 amount);\n\n    /// @notice Setter for the trusted forwarder verifying the meta transaction.\n    /// @param _trustedForwarder The trusted forwarder address.\n    function setTrustedForwarder(address _trustedForwarder) external;\n\n    /// @notice Getter for the trusted forwarder verifying the meta transaction.\n    /// @return The trusted forwarder address.\n    function getTrustedForwarder() external view returns (address);\n\n    /// @notice Emitted when a new TrustedForwarder is set on the DAO.\n    /// @param forwarder the new forwarder address.\n    event TrustedForwarderSet(address forwarder);\n\n    /// @notice Setter for the [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract.\n    /// @param _signatureValidator The address of the signature validator.\n    function setSignatureValidator(address _signatureValidator) external;\n\n    /// @notice Emitted when the signature validator address is updated.\n    /// @param signatureValidator The address of the signature validator.\n    event SignatureValidatorSet(address signatureValidator);\n\n    /// @notice Checks whether a signature is valid for the provided hash by forwarding the call to the set [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract.\n    /// @param _hash The hash of the data to be signed.\n    /// @param _signature The signature byte array associated with `_hash`.\n    /// @return Returns the `bytes4` magic value `0x1626ba7e` if the signature is valid.\n    function isValidSignature(bytes32 _hash, bytes memory _signature) external returns (bytes4);\n\n    /// @notice Registers an ERC standard having a callback by registering its [ERC-165](https://eips.ethereum.org/EIPS/eip-165) interface ID and callback function signature.\n    /// @param _interfaceId The ID of the interface.\n    /// @param _callbackSelector The selector of the callback function.\n    /// @param _magicNumber The magic number to be registered for the function signature.\n    function registerStandardCallback(\n        bytes4 _interfaceId,\n        bytes4 _callbackSelector,\n        bytes4 _magicNumber\n    ) external;\n}\n"},"@aragon/osx/core/permission/PermissionLib.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.8;\n\n/// @title PermissionLib\n/// @author Aragon Association - 2021-2023\n/// @notice A library containing objects for permission processing.\nlibrary PermissionLib {\n    /// @notice A constant expressing that no condition is applied to a permission.\n    address public constant NO_CONDITION = address(0);\n\n    /// @notice The types of permission operations available in the `PermissionManager`.\n    /// @param Grant The grant operation setting a permission without a condition.\n    /// @param Revoke The revoke operation removing a permission (that was granted with or without a condition).\n    /// @param GrantWithCondition The grant operation setting a permission with a condition.\n    enum Operation {\n        Grant,\n        Revoke,\n        GrantWithCondition\n    }\n\n    /// @notice A struct containing the information for a permission to be applied on a single target contract without a condition.\n    /// @param operation The permission operation type.\n    /// @param who The address (EOA or contract) receiving the permission.\n    /// @param permissionId The permission identifier.\n    struct SingleTargetPermission {\n        Operation operation;\n        address who;\n        bytes32 permissionId;\n    }\n\n    /// @notice A struct containing the information for a permission to be applied on multiple target contracts, optionally, with a condition.\n    /// @param operation The permission operation type.\n    /// @param where The address of the target contract for which `who` receives permission.\n    /// @param who The address (EOA or contract) receiving the permission.\n    /// @param condition The `PermissionCondition` that will be asked for authorization on calls connected to the specified permission identifier.\n    /// @param permissionId The permission identifier.\n    struct MultiTargetPermission {\n        Operation operation;\n        address where;\n        address who;\n        address condition;\n        bytes32 permissionId;\n    }\n}\n"},"@aragon/osx/core/plugin/dao-authorizable/DaoAuthorizable.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.8;\n\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\nimport {IDAO} from \"../../dao/IDAO.sol\";\nimport {_auth} from \"../../utils/auth.sol\";\n\n/// @title DaoAuthorizable\n/// @author Aragon Association - 2022-2023\n/// @notice An abstract contract providing a meta-transaction compatible modifier for non-upgradeable contracts instantiated via the `new` keyword to authorize function calls through an associated DAO.\nabstract contract DaoAuthorizable is Context {\n    /// @notice The associated DAO managing the permissions of inheriting contracts.\n    IDAO private immutable dao_;\n\n    /// @notice Constructs the contract by setting the associated DAO.\n    /// @param _dao The associated DAO address.\n    constructor(IDAO _dao) {\n        dao_ = _dao;\n    }\n\n    /// @notice Returns the DAO contract.\n    /// @return The DAO contract.\n    function dao() public view returns (IDAO) {\n        return dao_;\n    }\n\n    /// @notice A modifier to make functions on inheriting contracts authorized. Permissions to call the function are checked through the associated DAO's permission manager.\n    /// @param _permissionId The permission identifier required to call the method this modifier is applied to.\n    modifier auth(bytes32 _permissionId) {\n        _auth(dao_, address(this), _msgSender(), _permissionId, _msgData());\n        _;\n    }\n}\n"},"@aragon/osx/core/plugin/IPlugin.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.8;\n\n/// @title IPlugin\n/// @author Aragon Association - 2022-2023\n/// @notice An interface defining the traits of a plugin.\ninterface IPlugin {\n    enum PluginType {\n        UUPS,\n        Cloneable,\n        Constructable\n    }\n\n    /// @notice Returns the plugin's type\n    function pluginType() external view returns (PluginType);\n}\n"},"@aragon/osx/core/plugin/Plugin.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.8;\n\nimport {ERC165} from \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\nimport {IDAO} from \"../dao/IDAO.sol\";\nimport {DaoAuthorizable} from \"./dao-authorizable/DaoAuthorizable.sol\";\nimport {IPlugin} from \"./IPlugin.sol\";\n\n/// @title Plugin\n/// @author Aragon Association - 2022-2023\n/// @notice An abstract, non-upgradeable contract to inherit from when creating a plugin being deployed via the `new` keyword.\nabstract contract Plugin is IPlugin, ERC165, DaoAuthorizable {\n    /// @notice Constructs the plugin by storing the associated DAO.\n    /// @param _dao The DAO contract.\n    constructor(IDAO _dao) DaoAuthorizable(_dao) {}\n\n    /// @inheritdoc IPlugin\n    function pluginType() public pure override returns (PluginType) {\n        return PluginType.Constructable;\n    }\n\n    /// @notice Checks if this or the parent contract supports an interface by its ID.\n    /// @param _interfaceId The ID of the interface.\n    /// @return Returns `true` if the interface is supported.\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\n        return _interfaceId == type(IPlugin).interfaceId || super.supportsInterface(_interfaceId);\n    }\n}\n"},"@aragon/osx/core/utils/auth.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.8;\n\nimport {IDAO} from \"../dao/IDAO.sol\";\n\n/// @notice Thrown if a call is unauthorized in the associated DAO.\n/// @param dao The associated DAO.\n/// @param where The context in which the authorization reverted.\n/// @param who The address (EOA or contract) missing the permission.\n/// @param permissionId The permission identifier.\nerror DaoUnauthorized(address dao, address where, address who, bytes32 permissionId);\n\n/// @notice A free function checking if a caller is granted permissions on a target contract via a permission identifier that redirects the approval to a `PermissionCondition` if this was specified in the setup.\n/// @param _where The address of the target contract for which `who` receives permission.\n/// @param _who The address (EOA or contract) owning the permission.\n/// @param _permissionId The permission identifier.\n/// @param _data The optional data passed to the `PermissionCondition` registered.\nfunction _auth(\n    IDAO _dao,\n    address _where,\n    address _who,\n    bytes32 _permissionId,\n    bytes calldata _data\n) view {\n    if (!_dao.hasPermission(_where, _who, _permissionId, _data))\n        revert DaoUnauthorized({\n            dao: address(_dao),\n            where: _where,\n            who: _who,\n            permissionId: _permissionId\n        });\n}\n"},"@aragon/osx/framework/plugin/setup/IPluginSetup.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.8;\n\nimport {PermissionLib} from \"../../../core/permission/PermissionLib.sol\";\nimport {IDAO} from \"../../../core/dao/IDAO.sol\";\n\n/// @title IPluginSetup\n/// @author Aragon Association - 2022-2023\n/// @notice The interface required for a plugin setup contract to be consumed by the `PluginSetupProcessor` for plugin installations, updates, and uninstallations.\ninterface IPluginSetup {\n    /// @notice The data associated with a prepared setup.\n    /// @param helpers The address array of helpers (contracts or EOAs) associated with this plugin version after the installation or update.\n    /// @param permissions The array of multi-targeted permission operations to be applied by the `PluginSetupProcessor` to the installing or updating DAO.\n    struct PreparedSetupData {\n        address[] helpers;\n        PermissionLib.MultiTargetPermission[] permissions;\n    }\n\n    /// @notice The payload for plugin updates and uninstallations containing the existing contracts as well as optional data to be consumed by the plugin setup.\n    /// @param plugin The address of the `Plugin`.\n    /// @param currentHelpers The address array of all current helpers (contracts or EOAs) associated with the plugin to update from.\n    /// @param data The bytes-encoded data containing the input parameters for the preparation of update/uninstall as specified in the corresponding ABI on the version's metadata.\n    struct SetupPayload {\n        address plugin;\n        address[] currentHelpers;\n        bytes data;\n    }\n\n    /// @notice Prepares the installation of a plugin.\n    /// @param _dao The address of the installing DAO.\n    /// @param _data The bytes-encoded data containing the input parameters for the installation as specified in the plugin's build metadata JSON file.\n    /// @return plugin The address of the `Plugin` contract being prepared for installation.\n    /// @return preparedSetupData The deployed plugin's relevant data which consists of helpers and permissions.\n    function prepareInstallation(\n        address _dao,\n        bytes calldata _data\n    ) external returns (address plugin, PreparedSetupData memory preparedSetupData);\n\n    /// @notice Prepares the update of a plugin.\n    /// @param _dao The address of the updating DAO.\n    /// @param _currentBuild The build number of the plugin to update from.\n    /// @param _payload The relevant data necessary for the `prepareUpdate`. See above.\n    /// @return initData The initialization data to be passed to upgradeable contracts when the update is applied in the `PluginSetupProcessor`.\n    /// @return preparedSetupData The deployed plugin's relevant data which consists of helpers and permissions.\n    function prepareUpdate(\n        address _dao,\n        uint16 _currentBuild,\n        SetupPayload calldata _payload\n    ) external returns (bytes memory initData, PreparedSetupData memory preparedSetupData);\n\n    /// @notice Prepares the uninstallation of a plugin.\n    /// @param _dao The address of the uninstalling DAO.\n    /// @param _payload The relevant data necessary for the `prepareUninstallation`. See above.\n    /// @return permissions The array of multi-targeted permission operations to be applied by the `PluginSetupProcessor` to the uninstalling DAO.\n    function prepareUninstallation(\n        address _dao,\n        SetupPayload calldata _payload\n    ) external returns (PermissionLib.MultiTargetPermission[] memory permissions);\n\n    /// @notice Returns the plugin implementation address.\n    /// @return The address of the plugin implementation contract.\n    /// @dev The implementation can be instantiated via the `new` keyword, cloned via the minimal clones pattern (see [ERC-1167](https://eips.ethereum.org/EIPS/eip-1167)), or proxied via the UUPS pattern (see [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822)).\n    function implementation() external view returns (address);\n}\n"},"@aragon/osx/framework/plugin/setup/PluginSetup.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.8;\n\nimport {ERC165} from \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport {ERC165Checker} from \"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\";\nimport {Clones} from \"@openzeppelin/contracts/proxy/Clones.sol\";\n\nimport {PermissionLib} from \"../../../core/permission/PermissionLib.sol\";\nimport {createERC1967Proxy as createERC1967} from \"../../../utils/Proxy.sol\";\nimport {IPluginSetup} from \"./IPluginSetup.sol\";\n\n/// @title PluginSetup\n/// @author Aragon Association - 2022-2023\n/// @notice An abstract contract that developers have to inherit from to write the setup of a plugin.\nabstract contract PluginSetup is ERC165, IPluginSetup {\n    /// @inheritdoc IPluginSetup\n    function prepareUpdate(\n        address _dao,\n        uint16 _currentBuild,\n        SetupPayload calldata _payload\n    )\n        external\n        virtual\n        override\n        returns (bytes memory initData, PreparedSetupData memory preparedSetupData)\n    {}\n\n    /// @notice A convenience function to create an [ERC-1967](https://eips.ethereum.org/EIPS/eip-1967) proxy contract pointing to an implementation and being associated to a DAO.\n    /// @param _implementation The address of the implementation contract to which the proxy is pointing to.\n    /// @param _data The data to initialize the storage of the proxy contract.\n    /// @return The address of the created proxy contract.\n    function createERC1967Proxy(\n        address _implementation,\n        bytes memory _data\n    ) internal returns (address) {\n        return createERC1967(_implementation, _data);\n    }\n\n    /// @notice Checks if this or the parent contract supports an interface by its ID.\n    /// @param _interfaceId The ID of the interface.\n    /// @return Returns `true` if the interface is supported.\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\n        return\n            _interfaceId == type(IPluginSetup).interfaceId || super.supportsInterface(_interfaceId);\n    }\n}\n"},"@aragon/osx/utils/Proxy.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.8;\n\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\n\n/// @notice Free function to create a [ERC-1967](https://eips.ethereum.org/EIPS/eip-1967) proxy contract based on the passed base contract address.\n/// @param _logic The base contract address.\n/// @param _data The constructor arguments for this contract.\n/// @return The address of the proxy contract created.\n/// @dev Initializes the upgradeable proxy with an initial implementation specified by _logic. If _data is non-empty, it’s used as data in a delegate call to _logic. This will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity constructor (see [OpenZeppelin ERC1967Proxy-constructor](https://docs.openzeppelin.com/contracts/4.x/api/proxy#ERC1967Proxy-constructor-address-bytes-)).\nfunction createERC1967Proxy(address _logic, bytes memory _data) returns (address) {\n    return address(new ERC1967Proxy(_logic, _data));\n}\n"},"@openzeppelin/contracts/interfaces/draft-IERC1822.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts/interfaces/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n"},"@openzeppelin/contracts/interfaces/IERC1967.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967 {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"},"@openzeppelin/contracts/interfaces/IERC4906.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4906.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\nimport \"./IERC721.sol\";\n\n/// @title EIP-721 Metadata Update Extension\ninterface IERC4906 is IERC165, IERC721 {\n    /// @dev This event emits when the metadata of a token is changed.\n    /// So that the third-party platforms such as NFT market could\n    /// timely update the images and related attributes of the NFT.\n    event MetadataUpdate(uint256 _tokenId);\n\n    /// @dev This event emits when the metadata of a range of tokens is changed.\n    /// So that the third-party platforms such as NFT market could\n    /// timely update the images and related attributes of the NFTs.\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\n}\n"},"@openzeppelin/contracts/interfaces/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC721/IERC721.sol\";\n"},"@openzeppelin/contracts/proxy/beacon/IBeacon.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"},"@openzeppelin/contracts/proxy/Clones.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n * deploying minimal proxy contracts, also known as \"clones\".\n *\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n *\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n * deterministic method.\n *\n * _Available since v3.4._\n */\nlibrary Clones {\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create opcode, which should never revert.\n     */\n    function clone(address implementation) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create(0, 0x09, 0x37)\n        }\n        require(instance != address(0), \"ERC1167: create failed\");\n    }\n\n    /**\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n     *\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\n     * the clones cannot be deployed twice at the same address.\n     */\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\n            // of the `implementation` address with the bytecode before the address.\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\n            instance := create2(0, 0x09, 0x37, salt)\n        }\n        require(instance != address(0), \"ERC1167: create2 failed\");\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt,\n        address deployer\n    ) internal pure returns (address predicted) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(add(ptr, 0x38), deployer)\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\n            mstore(add(ptr, 0x14), implementation)\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\n            mstore(add(ptr, 0x58), salt)\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\n            predicted := keccak256(add(ptr, 0x43), 0x55)\n        }\n    }\n\n    /**\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n     */\n    function predictDeterministicAddress(\n        address implementation,\n        bytes32 salt\n    ) internal view returns (address predicted) {\n        return predictDeterministicAddress(implementation, salt, address(this));\n    }\n}\n"},"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"},"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/IERC1967.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967Upgrade is IERC1967 {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"},"@openzeppelin/contracts/proxy/Proxy.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\n\n    /**\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n     *\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\n     * that `ownerOf(tokenId)` is `a`.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\n        _balances[account] += amount;\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/extensions/ERC721URIStorage.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC721.sol\";\nimport \"../../../interfaces/IERC4906.sol\";\n\n/**\n * @dev ERC721 token with storage based token URI management.\n */\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\n    using Strings for uint256;\n\n    // Optional mapping for token URIs\n    mapping(uint256 => string) private _tokenURIs;\n\n    /**\n     * @dev See {IERC165-supportsInterface}\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\n        return interfaceId == bytes4(0x49064906) || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory _tokenURI = _tokenURIs[tokenId];\n        string memory base = _baseURI();\n\n        // If there is no base URI, return the token URI.\n        if (bytes(base).length == 0) {\n            return _tokenURI;\n        }\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n        if (bytes(_tokenURI).length > 0) {\n            return string(abi.encodePacked(base, _tokenURI));\n        }\n\n        return super.tokenURI(tokenId);\n    }\n\n    /**\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n     *\n     * Emits {MetadataUpdate}.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n        require(_exists(tokenId), \"ERC721URIStorage: URI set of nonexistent token\");\n        _tokenURIs[tokenId] = _tokenURI;\n\n        emit MetadataUpdate(tokenId);\n    }\n\n    /**\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\n     * the storage mapping.\n     */\n    function _burn(uint256 tokenId) internal virtual override {\n        super._burn(tokenId);\n\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\n            delete _tokenURIs[tokenId];\n        }\n    }\n}\n"},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/Counters.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/introspection/ERC165Checker.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Library used to query support of an interface declared via {IERC165}.\n *\n * Note that these functions return the actual result of the query: they do not\n * `revert` if an interface is not supported. It is up to the caller to decide\n * what to do in these cases.\n */\nlibrary ERC165Checker {\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\n\n    /**\n     * @dev Returns true if `account` supports the {IERC165} interface.\n     */\n    function supportsERC165(address account) internal view returns (bool) {\n        // Any contract that implements ERC165 must explicitly indicate support of\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\n        return\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\n    }\n\n    /**\n     * @dev Returns true if `account` supports the interface defined by\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\n        // query support of both ERC165 as per the spec and support of _interfaceId\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\n    }\n\n    /**\n     * @dev Returns a boolean array where each value corresponds to the\n     * interfaces passed in and whether they're supported or not. This allows\n     * you to batch check interfaces for a contract where your expectation\n     * is that some interfaces may not be supported.\n     *\n     * See {IERC165-supportsInterface}.\n     *\n     * _Available since v3.4._\n     */\n    function getSupportedInterfaces(\n        address account,\n        bytes4[] memory interfaceIds\n    ) internal view returns (bool[] memory) {\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\n\n        // query support of ERC165 itself\n        if (supportsERC165(account)) {\n            // query support of each interface in interfaceIds\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\n            }\n        }\n\n        return interfaceIdsSupported;\n    }\n\n    /**\n     * @dev Returns true if `account` supports all the interfaces defined in\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\n     *\n     * Batch-querying can lead to gas savings by skipping repeated checks for\n     * {IERC165} support.\n     *\n     * See {IERC165-supportsInterface}.\n     */\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\n        // query support of ERC165 itself\n        if (!supportsERC165(account)) {\n            return false;\n        }\n\n        // query support of each interface in interfaceIds\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\n                return false;\n            }\n        }\n\n        // all interfaces supported\n        return true;\n    }\n\n    /**\n     * @notice Query if a contract implements an interface, does not check ERC165 support\n     * @param account The address of the contract to query for support of an interface\n     * @param interfaceId The interface identifier, as specified in ERC-165\n     * @return true if the contract at account indicates support of the interface with\n     * identifier interfaceId, false otherwise\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\n     * the behavior of this method is undefined. This precondition can be checked\n     * with {supportsERC165}.\n     *\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\n     * should be exercised when using this function.\n     *\n     * Interface identification is specified in ERC-165.\n     */\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\n        // prepare call\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\n\n        // perform static call\n        bool success;\n        uint256 returnSize;\n        uint256 returnValue;\n        assembly {\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\n            returnSize := returndatasize()\n            returnValue := mload(0x00)\n        }\n\n        return success && returnSize >= 0x20 && returnValue > 0;\n    }\n}\n"},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/StorageSlot.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"contracts/LendNFTPlugin.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity 0.8.19;\n\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\n\nimport {Plugin, IDAO} from '@aragon/osx/core/plugin/Plugin.sol';\n\ncontract FactoryNFT is ERC721URIStorage { \n\n  using Counters for Counters.Counter; \n  Counters.Counter private _tokenIds;\n\n  constructor() ERC721(\"Farm Lender NFT\", \"FLN\") {}\n\n  function createToken() public {\n      _tokenIds.increment();\n      uint256 newItemId = _tokenIds.current();\n\n      _mint(msg.sender, newItemId);\n  }    \n}\n\ncontract LendNFTPlugin is Plugin {\n  // Permissions are what connects everything together. \n  // Addresses who have been granted the GREET_PERMISSION will be \n  // able to call on functions with the modifier `auth(GREET_PERMISSION_ID)`. \n  // These will be granted in the PluginSetup.sol contract up next.\n  bytes32 public constant GREET_PERMISSION_ID = keccak256('GREET_PERMISSION');\n\n  FactoryNFT private factory_NFT;\n\n  constructor(IDAO _dao) Plugin(_dao) {\n    factory_NFT = new FactoryNFT();\n  }\n\n  function lend_money() external auth(GREET_PERMISSION_ID) {\n    factory_NFT.createToken();\n  }\n\n}\n"},"contracts/LendPluginSetup.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity 0.8.19;\n\nimport {PluginSetup} from '@aragon/osx/framework/plugin/setup/PluginSetup.sol';\nimport {PermissionLib} from '@aragon/osx/core/permission/PermissionLib.sol';\n\nimport './LendNFTPlugin.sol';\n\ncontract LendPluginSetup is PluginSetup {\n  function prepareInstallation(\n    address _dao,\n    bytes memory\n  ) external returns (address plugin, PreparedSetupData memory preparedSetupData) {\n    plugin = address(new LendNFTPlugin(IDAO(_dao)));\n\n    PermissionLib.MultiTargetPermission[]\n      memory permissions = new PermissionLib.MultiTargetPermission[](1);\n\n    permissions[0] = PermissionLib.MultiTargetPermission({\n      operation: PermissionLib.Operation.Grant,\n      where: plugin,\n      who: _dao,\n      condition: PermissionLib.NO_CONDITION,\n      permissionId: keccak256('GREET_PERMISSION')\n    });\n\n    preparedSetupData.permissions = permissions;\n  }\n\n  function prepareUninstallation(\n    address _dao,\n    SetupPayload calldata _payload\n  ) external pure returns (PermissionLib.MultiTargetPermission[] memory permissions) {\n    permissions = new PermissionLib.MultiTargetPermission[](1);\n\n    permissions[0] = PermissionLib.MultiTargetPermission({\n      operation: PermissionLib.Operation.Revoke,\n      where: _payload.plugin,\n      who: _dao,\n      condition: PermissionLib.NO_CONDITION,\n      permissionId: keccak256('GREET_PERMISSION')\n    });\n  }\n\n  function implementation() external view returns (address) {}\n}"}},"settings":{"optimizer":{"enabled":false,"runs":200},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@aragon/osx/core/dao/IDAO.sol":{"ast":{"absolutePath":"@aragon/osx/core/dao/IDAO.sol","exportedSymbols":{"IDAO":[155]},"id":156,"license":"AGPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"47:23:0"},{"abstract":false,"baseContracts":[],"canonicalName":"IDAO","contractDependencies":[],"contractKind":"interface","documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"72:140:0","text":"@title IDAO\n @author Aragon Association - 2022-2023\n @notice The interface required for DAOs within the Aragon App DAO framework."},"fullyImplemented":false,"id":155,"linearizedBaseContracts":[155],"name":"IDAO","nameLocation":"222:4:0","nodeType":"ContractDefinition","nodes":[{"canonicalName":"IDAO.Action","id":9,"members":[{"constant":false,"id":4,"mutability":"mutable","name":"to","nameLocation":"569:2:0","nodeType":"VariableDeclaration","scope":9,"src":"561:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3,"name":"address","nodeType":"ElementaryTypeName","src":"561:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":6,"mutability":"mutable","name":"value","nameLocation":"589:5:0","nodeType":"VariableDeclaration","scope":9,"src":"581:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5,"name":"uint256","nodeType":"ElementaryTypeName","src":"581:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":8,"mutability":"mutable","name":"data","nameLocation":"610:4:0","nodeType":"VariableDeclaration","scope":9,"src":"604:10:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":7,"name":"bytes","nodeType":"ElementaryTypeName","src":"604:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"Action","nameLocation":"544:6:0","nodeType":"StructDefinition","scope":155,"src":"537:84:0","visibility":"public"},{"documentation":{"id":10,"nodeType":"StructuredDocumentation","src":"627:500:0","text":"@notice Checks if an address has permission on a contract via a permission identifier and considers if `ANY_ADDRESS` was used in the granting process.\n @param _where The address of the contract.\n @param _who The address of a EOA or contract to give the permissions.\n @param _permissionId The permission identifier.\n @param _data The optional data passed to the `PermissionCondition` registered.\n @return Returns true if the address has permission, false if not."},"functionSelector":"fdef9106","id":23,"implemented":false,"kind":"function","modifiers":[],"name":"hasPermission","nameLocation":"1141:13:0","nodeType":"FunctionDefinition","parameters":{"id":19,"nodeType":"ParameterList","parameters":[{"constant":false,"id":12,"mutability":"mutable","name":"_where","nameLocation":"1172:6:0","nodeType":"VariableDeclaration","scope":23,"src":"1164:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":11,"name":"address","nodeType":"ElementaryTypeName","src":"1164:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":14,"mutability":"mutable","name":"_who","nameLocation":"1196:4:0","nodeType":"VariableDeclaration","scope":23,"src":"1188:12:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":13,"name":"address","nodeType":"ElementaryTypeName","src":"1188:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":16,"mutability":"mutable","name":"_permissionId","nameLocation":"1218:13:0","nodeType":"VariableDeclaration","scope":23,"src":"1210:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":15,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1210:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":18,"mutability":"mutable","name":"_data","nameLocation":"1254:5:0","nodeType":"VariableDeclaration","scope":23,"src":"1241:18:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":17,"name":"bytes","nodeType":"ElementaryTypeName","src":"1241:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1154:111:0"},"returnParameters":{"id":22,"nodeType":"ParameterList","parameters":[{"constant":false,"id":21,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":23,"src":"1289:4:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":20,"name":"bool","nodeType":"ElementaryTypeName","src":"1289:4:0","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1288:6:0"},"scope":155,"src":"1132:163:0","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":24,"nodeType":"StructuredDocumentation","src":"1301:125:0","text":"@notice Updates the DAO metadata (e.g., an IPFS hash).\n @param _metadata The IPFS hash of the new metadata object."},"functionSelector":"ee57e36f","id":29,"implemented":false,"kind":"function","modifiers":[],"name":"setMetadata","nameLocation":"1440:11:0","nodeType":"FunctionDefinition","parameters":{"id":27,"nodeType":"ParameterList","parameters":[{"constant":false,"id":26,"mutability":"mutable","name":"_metadata","nameLocation":"1467:9:0","nodeType":"VariableDeclaration","scope":29,"src":"1452:24:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":25,"name":"bytes","nodeType":"ElementaryTypeName","src":"1452:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1451:26:0"},"returnParameters":{"id":28,"nodeType":"ParameterList","parameters":[],"src":"1486:0:0"},"scope":155,"src":"1431:56:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"anonymous":false,"documentation":{"id":30,"nodeType":"StructuredDocumentation","src":"1493:119:0","text":"@notice Emitted when the DAO metadata is updated.\n @param metadata The IPFS hash of the new metadata object."},"eventSelector":"bb39ebb37e60fb5d606ffdb749d2336e56b88e6c88c4bd6513b308f643186eed","id":34,"name":"MetadataSet","nameLocation":"1623:11:0","nodeType":"EventDefinition","parameters":{"id":33,"nodeType":"ParameterList","parameters":[{"constant":false,"id":32,"indexed":false,"mutability":"mutable","name":"metadata","nameLocation":"1641:8:0","nodeType":"VariableDeclaration","scope":34,"src":"1635:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":31,"name":"bytes","nodeType":"ElementaryTypeName","src":"1635:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1634:16:0"},"src":"1617:34:0"},{"documentation":{"id":35,"nodeType":"StructuredDocumentation","src":"1657:864:0","text":"@notice Executes a list of actions. If a zero allow-failure map is provided, a failing action reverts the entire execution. If a non-zero allow-failure map is provided, allowed actions can fail without the entire call being reverted.\n @param _callId The ID of the call. The definition of the value of `callId` is up to the calling contract and can be used, e.g., as a nonce.\n @param _actions The array of actions.\n @param _allowFailureMap A bitmap allowing execution to succeed, even if individual actions might revert. If the bit at index `i` is 1, the execution succeeds even if the `i`th action reverts. A failure map value of 0 requires every action to not revert.\n @return The array of results obtained from the executed actions in `bytes`.\n @return The resulting failure map containing the actions have actually failed."},"functionSelector":"c71bf324","id":51,"implemented":false,"kind":"function","modifiers":[],"name":"execute","nameLocation":"2535:7:0","nodeType":"FunctionDefinition","parameters":{"id":44,"nodeType":"ParameterList","parameters":[{"constant":false,"id":37,"mutability":"mutable","name":"_callId","nameLocation":"2560:7:0","nodeType":"VariableDeclaration","scope":51,"src":"2552:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":36,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2552:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":41,"mutability":"mutable","name":"_actions","nameLocation":"2593:8:0","nodeType":"VariableDeclaration","scope":51,"src":"2577:24:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Action_$9_memory_ptr_$dyn_memory_ptr","typeString":"struct IDAO.Action[]"},"typeName":{"baseType":{"id":39,"nodeType":"UserDefinedTypeName","pathNode":{"id":38,"name":"Action","nameLocations":["2577:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":9,"src":"2577:6:0"},"referencedDeclaration":9,"src":"2577:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_Action_$9_storage_ptr","typeString":"struct IDAO.Action"}},"id":40,"nodeType":"ArrayTypeName","src":"2577:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Action_$9_storage_$dyn_storage_ptr","typeString":"struct IDAO.Action[]"}},"visibility":"internal"},{"constant":false,"id":43,"mutability":"mutable","name":"_allowFailureMap","nameLocation":"2619:16:0","nodeType":"VariableDeclaration","scope":51,"src":"2611:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":42,"name":"uint256","nodeType":"ElementaryTypeName","src":"2611:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2542:99:0"},"returnParameters":{"id":50,"nodeType":"ParameterList","parameters":[{"constant":false,"id":47,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":51,"src":"2660:14:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":45,"name":"bytes","nodeType":"ElementaryTypeName","src":"2660:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":46,"nodeType":"ArrayTypeName","src":"2660:7:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"},{"constant":false,"id":49,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":51,"src":"2676:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":48,"name":"uint256","nodeType":"ElementaryTypeName","src":"2676:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2659:25:0"},"scope":155,"src":"2526:159:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"anonymous":false,"documentation":{"id":52,"nodeType":"StructuredDocumentation","src":"2691:611:0","text":"@notice Emitted when a proposal is executed.\n @param actor The address of the caller.\n @param callId The ID of the call.\n @param actions The array of actions executed.\n @param allowFailureMap The allow failure map encoding which actions are allowed to fail.\n @param failureMap The failure map encoding which actions have failed.\n @param execResults The array with the results of the executed actions.\n @dev The value of `callId` is defined by the component/contract calling the execute function. A `Plugin` implementation can use it, for example, as a nonce."},"eventSelector":"d4e57c2049f004fb297ef78591cd409503ceb6b2c722d7ffed032fc99e5f3b58","id":69,"name":"Executed","nameLocation":"3313:8:0","nodeType":"EventDefinition","parameters":{"id":68,"nodeType":"ParameterList","parameters":[{"constant":false,"id":54,"indexed":true,"mutability":"mutable","name":"actor","nameLocation":"3347:5:0","nodeType":"VariableDeclaration","scope":69,"src":"3331:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":53,"name":"address","nodeType":"ElementaryTypeName","src":"3331:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":56,"indexed":false,"mutability":"mutable","name":"callId","nameLocation":"3370:6:0","nodeType":"VariableDeclaration","scope":69,"src":"3362:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":55,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3362:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":60,"indexed":false,"mutability":"mutable","name":"actions","nameLocation":"3395:7:0","nodeType":"VariableDeclaration","scope":69,"src":"3386:16:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Action_$9_memory_ptr_$dyn_memory_ptr","typeString":"struct IDAO.Action[]"},"typeName":{"baseType":{"id":58,"nodeType":"UserDefinedTypeName","pathNode":{"id":57,"name":"Action","nameLocations":["3386:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":9,"src":"3386:6:0"},"referencedDeclaration":9,"src":"3386:6:0","typeDescriptions":{"typeIdentifier":"t_struct$_Action_$9_storage_ptr","typeString":"struct IDAO.Action"}},"id":59,"nodeType":"ArrayTypeName","src":"3386:8:0","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_Action_$9_storage_$dyn_storage_ptr","typeString":"struct IDAO.Action[]"}},"visibility":"internal"},{"constant":false,"id":62,"indexed":false,"mutability":"mutable","name":"allowFailureMap","nameLocation":"3420:15:0","nodeType":"VariableDeclaration","scope":69,"src":"3412:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":61,"name":"uint256","nodeType":"ElementaryTypeName","src":"3412:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":64,"indexed":false,"mutability":"mutable","name":"failureMap","nameLocation":"3453:10:0","nodeType":"VariableDeclaration","scope":69,"src":"3445:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":63,"name":"uint256","nodeType":"ElementaryTypeName","src":"3445:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":67,"indexed":false,"mutability":"mutable","name":"execResults","nameLocation":"3481:11:0","nodeType":"VariableDeclaration","scope":69,"src":"3473:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_memory_ptr_$dyn_memory_ptr","typeString":"bytes[]"},"typeName":{"baseType":{"id":65,"name":"bytes","nodeType":"ElementaryTypeName","src":"3473:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"id":66,"nodeType":"ArrayTypeName","src":"3473:7:0","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes_storage_$dyn_storage_ptr","typeString":"bytes[]"}},"visibility":"internal"}],"src":"3321:177:0"},"src":"3307:192:0"},{"anonymous":false,"documentation":{"id":70,"nodeType":"StructuredDocumentation","src":"3505:279:0","text":"@notice Emitted when a standard callback is registered.\n @param interfaceId The ID of the interface.\n @param callbackSelector The selector of the callback function.\n @param magicNumber The magic number to be registered for the callback function selector."},"eventSelector":"fc72fd547553f7a663e0048e590afc9c47b56a4242e960f31cf4c62e23d308b9","id":78,"name":"StandardCallbackRegistered","nameLocation":"3795:26:0","nodeType":"EventDefinition","parameters":{"id":77,"nodeType":"ParameterList","parameters":[{"constant":false,"id":72,"indexed":false,"mutability":"mutable","name":"interfaceId","nameLocation":"3838:11:0","nodeType":"VariableDeclaration","scope":78,"src":"3831:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":71,"name":"bytes4","nodeType":"ElementaryTypeName","src":"3831:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":74,"indexed":false,"mutability":"mutable","name":"callbackSelector","nameLocation":"3866:16:0","nodeType":"VariableDeclaration","scope":78,"src":"3859:23:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":73,"name":"bytes4","nodeType":"ElementaryTypeName","src":"3859:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":76,"indexed":false,"mutability":"mutable","name":"magicNumber","nameLocation":"3899:11:0","nodeType":"VariableDeclaration","scope":78,"src":"3892:18:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":75,"name":"bytes4","nodeType":"ElementaryTypeName","src":"3892:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"3821:95:0"},"src":"3789:128:0"},{"documentation":{"id":79,"nodeType":"StructuredDocumentation","src":"3923:298:0","text":"@notice Deposits (native) tokens to the DAO contract with a reference string.\n @param _token The address of the token or address(0) in case of the native token.\n @param _amount The amount of tokens to deposit.\n @param _reference The reference describing the deposit reason."},"functionSelector":"bfe07da6","id":88,"implemented":false,"kind":"function","modifiers":[],"name":"deposit","nameLocation":"4235:7:0","nodeType":"FunctionDefinition","parameters":{"id":86,"nodeType":"ParameterList","parameters":[{"constant":false,"id":81,"mutability":"mutable","name":"_token","nameLocation":"4251:6:0","nodeType":"VariableDeclaration","scope":88,"src":"4243:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":80,"name":"address","nodeType":"ElementaryTypeName","src":"4243:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":83,"mutability":"mutable","name":"_amount","nameLocation":"4267:7:0","nodeType":"VariableDeclaration","scope":88,"src":"4259:15:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":82,"name":"uint256","nodeType":"ElementaryTypeName","src":"4259:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":85,"mutability":"mutable","name":"_reference","nameLocation":"4292:10:0","nodeType":"VariableDeclaration","scope":88,"src":"4276:26:0","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":84,"name":"string","nodeType":"ElementaryTypeName","src":"4276:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4242:61:0"},"returnParameters":{"id":87,"nodeType":"ParameterList","parameters":[],"src":"4320:0:0"},"scope":155,"src":"4226:95:0","stateMutability":"payable","virtual":false,"visibility":"external"},{"anonymous":false,"documentation":{"id":89,"nodeType":"StructuredDocumentation","src":"4327:297:0","text":"@notice Emitted when a token deposit has been made to the DAO.\n @param sender The address of the sender.\n @param token The address of the deposited token.\n @param amount The amount of tokens deposited.\n @param _reference The reference describing the deposit reason."},"eventSelector":"2bc500cf071be2d1c1458ed6ff484cd4db4345ada8943dee7ff29e7af3558f76","id":99,"name":"Deposited","nameLocation":"4635:9:0","nodeType":"EventDefinition","parameters":{"id":98,"nodeType":"ParameterList","parameters":[{"constant":false,"id":91,"indexed":true,"mutability":"mutable","name":"sender","nameLocation":"4670:6:0","nodeType":"VariableDeclaration","scope":99,"src":"4654:22:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":90,"name":"address","nodeType":"ElementaryTypeName","src":"4654:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":93,"indexed":true,"mutability":"mutable","name":"token","nameLocation":"4702:5:0","nodeType":"VariableDeclaration","scope":99,"src":"4686:21:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":92,"name":"address","nodeType":"ElementaryTypeName","src":"4686:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":95,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"4725:6:0","nodeType":"VariableDeclaration","scope":99,"src":"4717:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":94,"name":"uint256","nodeType":"ElementaryTypeName","src":"4717:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":97,"indexed":false,"mutability":"mutable","name":"_reference","nameLocation":"4748:10:0","nodeType":"VariableDeclaration","scope":99,"src":"4741:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":96,"name":"string","nodeType":"ElementaryTypeName","src":"4741:6:0","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4644:120:0"},"src":"4629:136:0"},{"anonymous":false,"documentation":{"id":100,"nodeType":"StructuredDocumentation","src":"4771:400:0","text":"@notice Emitted when a native token deposit has been made to the DAO.\n @dev This event is intended to be emitted in the `receive` function and is therefore bound by the gas limitations for `send`/`transfer` calls introduced by [ERC-2929](https://eips.ethereum.org/EIPS/eip-2929).\n @param sender The address of the sender.\n @param amount The amount of native tokens deposited."},"eventSelector":"62c2c8e34665db7c56b2cabd7f5fb9702ccd352ffa8150147e450797e9f8e8f3","id":106,"name":"NativeTokenDeposited","nameLocation":"5182:20:0","nodeType":"EventDefinition","parameters":{"id":105,"nodeType":"ParameterList","parameters":[{"constant":false,"id":102,"indexed":false,"mutability":"mutable","name":"sender","nameLocation":"5211:6:0","nodeType":"VariableDeclaration","scope":106,"src":"5203:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":101,"name":"address","nodeType":"ElementaryTypeName","src":"5203:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":104,"indexed":false,"mutability":"mutable","name":"amount","nameLocation":"5227:6:0","nodeType":"VariableDeclaration","scope":106,"src":"5219:14:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":103,"name":"uint256","nodeType":"ElementaryTypeName","src":"5219:7:0","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5202:32:0"},"src":"5176:59:0"},{"documentation":{"id":107,"nodeType":"StructuredDocumentation","src":"5241:140:0","text":"@notice Setter for the trusted forwarder verifying the meta transaction.\n @param _trustedForwarder The trusted forwarder address."},"functionSelector":"da742228","id":112,"implemented":false,"kind":"function","modifiers":[],"name":"setTrustedForwarder","nameLocation":"5395:19:0","nodeType":"FunctionDefinition","parameters":{"id":110,"nodeType":"ParameterList","parameters":[{"constant":false,"id":109,"mutability":"mutable","name":"_trustedForwarder","nameLocation":"5423:17:0","nodeType":"VariableDeclaration","scope":112,"src":"5415:25:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":108,"name":"address","nodeType":"ElementaryTypeName","src":"5415:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5414:27:0"},"returnParameters":{"id":111,"nodeType":"ParameterList","parameters":[],"src":"5450:0:0"},"scope":155,"src":"5386:65:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":113,"nodeType":"StructuredDocumentation","src":"5457:123:0","text":"@notice Getter for the trusted forwarder verifying the meta transaction.\n @return The trusted forwarder address."},"functionSelector":"ce1b815f","id":118,"implemented":false,"kind":"function","modifiers":[],"name":"getTrustedForwarder","nameLocation":"5594:19:0","nodeType":"FunctionDefinition","parameters":{"id":114,"nodeType":"ParameterList","parameters":[],"src":"5613:2:0"},"returnParameters":{"id":117,"nodeType":"ParameterList","parameters":[{"constant":false,"id":116,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":118,"src":"5639:7:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":115,"name":"address","nodeType":"ElementaryTypeName","src":"5639:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5638:9:0"},"scope":155,"src":"5585:63:0","stateMutability":"view","virtual":false,"visibility":"external"},{"anonymous":false,"documentation":{"id":119,"nodeType":"StructuredDocumentation","src":"5654:118:0","text":"@notice Emitted when a new TrustedForwarder is set on the DAO.\n @param forwarder the new forwarder address."},"eventSelector":"d91237492a9e30cd2faf361fc103998a382ff0ec2b1b07dc1cbebb76ae2f1ea2","id":123,"name":"TrustedForwarderSet","nameLocation":"5783:19:0","nodeType":"EventDefinition","parameters":{"id":122,"nodeType":"ParameterList","parameters":[{"constant":false,"id":121,"indexed":false,"mutability":"mutable","name":"forwarder","nameLocation":"5811:9:0","nodeType":"VariableDeclaration","scope":123,"src":"5803:17:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":120,"name":"address","nodeType":"ElementaryTypeName","src":"5803:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5802:19:0"},"src":"5777:45:0"},{"documentation":{"id":124,"nodeType":"StructuredDocumentation","src":"5828:183:0","text":"@notice Setter for the [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract.\n @param _signatureValidator The address of the signature validator."},"functionSelector":"3e2ab0d9","id":129,"implemented":false,"kind":"function","modifiers":[],"name":"setSignatureValidator","nameLocation":"6025:21:0","nodeType":"FunctionDefinition","parameters":{"id":127,"nodeType":"ParameterList","parameters":[{"constant":false,"id":126,"mutability":"mutable","name":"_signatureValidator","nameLocation":"6055:19:0","nodeType":"VariableDeclaration","scope":129,"src":"6047:27:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":125,"name":"address","nodeType":"ElementaryTypeName","src":"6047:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6046:29:0"},"returnParameters":{"id":128,"nodeType":"ParameterList","parameters":[],"src":"6084:0:0"},"scope":155,"src":"6016:69:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"anonymous":false,"documentation":{"id":130,"nodeType":"StructuredDocumentation","src":"6091:142:0","text":"@notice Emitted when the signature validator address is updated.\n @param signatureValidator The address of the signature validator."},"eventSelector":"3b25c5d3870ec0eac28822b177f18c9130233ade5b7f857c6a224a507c37fc4e","id":134,"name":"SignatureValidatorSet","nameLocation":"6244:21:0","nodeType":"EventDefinition","parameters":{"id":133,"nodeType":"ParameterList","parameters":[{"constant":false,"id":132,"indexed":false,"mutability":"mutable","name":"signatureValidator","nameLocation":"6274:18:0","nodeType":"VariableDeclaration","scope":134,"src":"6266:26:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":131,"name":"address","nodeType":"ElementaryTypeName","src":"6266:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6265:28:0"},"src":"6238:56:0"},{"documentation":{"id":135,"nodeType":"StructuredDocumentation","src":"6300:406:0","text":"@notice Checks whether a signature is valid for the provided hash by forwarding the call to the set [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract.\n @param _hash The hash of the data to be signed.\n @param _signature The signature byte array associated with `_hash`.\n @return Returns the `bytes4` magic value `0x1626ba7e` if the signature is valid."},"functionSelector":"1626ba7e","id":144,"implemented":false,"kind":"function","modifiers":[],"name":"isValidSignature","nameLocation":"6720:16:0","nodeType":"FunctionDefinition","parameters":{"id":140,"nodeType":"ParameterList","parameters":[{"constant":false,"id":137,"mutability":"mutable","name":"_hash","nameLocation":"6745:5:0","nodeType":"VariableDeclaration","scope":144,"src":"6737:13:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":136,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6737:7:0","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":139,"mutability":"mutable","name":"_signature","nameLocation":"6765:10:0","nodeType":"VariableDeclaration","scope":144,"src":"6752:23:0","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":138,"name":"bytes","nodeType":"ElementaryTypeName","src":"6752:5:0","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6736:40:0"},"returnParameters":{"id":143,"nodeType":"ParameterList","parameters":[{"constant":false,"id":142,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":144,"src":"6795:6:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":141,"name":"bytes4","nodeType":"ElementaryTypeName","src":"6795:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"6794:8:0"},"scope":155,"src":"6711:92:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":145,"nodeType":"StructuredDocumentation","src":"6809:385:0","text":"@notice Registers an ERC standard having a callback by registering its [ERC-165](https://eips.ethereum.org/EIPS/eip-165) interface ID and callback function signature.\n @param _interfaceId The ID of the interface.\n @param _callbackSelector The selector of the callback function.\n @param _magicNumber The magic number to be registered for the function signature."},"functionSelector":"c4a50145","id":154,"implemented":false,"kind":"function","modifiers":[],"name":"registerStandardCallback","nameLocation":"7208:24:0","nodeType":"FunctionDefinition","parameters":{"id":152,"nodeType":"ParameterList","parameters":[{"constant":false,"id":147,"mutability":"mutable","name":"_interfaceId","nameLocation":"7249:12:0","nodeType":"VariableDeclaration","scope":154,"src":"7242:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":146,"name":"bytes4","nodeType":"ElementaryTypeName","src":"7242:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":149,"mutability":"mutable","name":"_callbackSelector","nameLocation":"7278:17:0","nodeType":"VariableDeclaration","scope":154,"src":"7271:24:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":148,"name":"bytes4","nodeType":"ElementaryTypeName","src":"7271:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":151,"mutability":"mutable","name":"_magicNumber","nameLocation":"7312:12:0","nodeType":"VariableDeclaration","scope":154,"src":"7305:19:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":150,"name":"bytes4","nodeType":"ElementaryTypeName","src":"7305:6:0","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"7232:98:0"},"returnParameters":{"id":153,"nodeType":"ParameterList","parameters":[],"src":"7339:0:0"},"scope":155,"src":"7199:141:0","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":156,"src":"212:7130:0","usedErrors":[]}],"src":"47:7296:0"},"id":0},"@aragon/osx/core/permission/PermissionLib.sol":{"ast":{"absolutePath":"@aragon/osx/core/permission/PermissionLib.sol","exportedSymbols":{"PermissionLib":[190]},"id":191,"license":"AGPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":157,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"47:23:1"},{"abstract":false,"baseContracts":[],"canonicalName":"PermissionLib","contractDependencies":[],"contractKind":"library","documentation":{"id":158,"nodeType":"StructuredDocumentation","src":"72:136:1","text":"@title PermissionLib\n @author Aragon Association - 2021-2023\n @notice A library containing objects for permission processing."},"fullyImplemented":true,"id":190,"linearizedBaseContracts":[190],"name":"PermissionLib","nameLocation":"216:13:1","nodeType":"ContractDefinition","nodes":[{"constant":true,"documentation":{"id":159,"nodeType":"StructuredDocumentation","src":"236:79:1","text":"@notice A constant expressing that no condition is applied to a permission."},"functionSelector":"6dd02a5b","id":165,"mutability":"constant","name":"NO_CONDITION","nameLocation":"344:12:1","nodeType":"VariableDeclaration","scope":190,"src":"320:49:1","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":160,"name":"address","nodeType":"ElementaryTypeName","src":"320:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"value":{"arguments":[{"hexValue":"30","id":163,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"367:1:1","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":162,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"359:7:1","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":161,"name":"address","nodeType":"ElementaryTypeName","src":"359:7:1","typeDescriptions":{}}},"id":164,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"359:10:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"canonicalName":"PermissionLib.Operation","id":169,"members":[{"id":166,"name":"Grant","nameLocation":"779:5:1","nodeType":"EnumValue","src":"779:5:1"},{"id":167,"name":"Revoke","nameLocation":"794:6:1","nodeType":"EnumValue","src":"794:6:1"},{"id":168,"name":"GrantWithCondition","nameLocation":"810:18:1","nodeType":"EnumValue","src":"810:18:1"}],"name":"Operation","nameLocation":"759:9:1","nodeType":"EnumDefinition","src":"754:80:1"},{"canonicalName":"PermissionLib.SingleTargetPermission","id":177,"members":[{"constant":false,"id":172,"mutability":"mutable","name":"operation","nameLocation":"1208:9:1","nodeType":"VariableDeclaration","scope":177,"src":"1198:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$169","typeString":"enum PermissionLib.Operation"},"typeName":{"id":171,"nodeType":"UserDefinedTypeName","pathNode":{"id":170,"name":"Operation","nameLocations":["1198:9:1"],"nodeType":"IdentifierPath","referencedDeclaration":169,"src":"1198:9:1"},"referencedDeclaration":169,"src":"1198:9:1","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$169","typeString":"enum PermissionLib.Operation"}},"visibility":"internal"},{"constant":false,"id":174,"mutability":"mutable","name":"who","nameLocation":"1235:3:1","nodeType":"VariableDeclaration","scope":177,"src":"1227:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":173,"name":"address","nodeType":"ElementaryTypeName","src":"1227:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":176,"mutability":"mutable","name":"permissionId","nameLocation":"1256:12:1","nodeType":"VariableDeclaration","scope":177,"src":"1248:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":175,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1248:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"SingleTargetPermission","nameLocation":"1165:22:1","nodeType":"StructDefinition","scope":190,"src":"1158:117:1","visibility":"public"},{"canonicalName":"PermissionLib.MultiTargetPermission","id":189,"members":[{"constant":false,"id":180,"mutability":"mutable","name":"operation","nameLocation":"1899:9:1","nodeType":"VariableDeclaration","scope":189,"src":"1889:19:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$169","typeString":"enum PermissionLib.Operation"},"typeName":{"id":179,"nodeType":"UserDefinedTypeName","pathNode":{"id":178,"name":"Operation","nameLocations":["1889:9:1"],"nodeType":"IdentifierPath","referencedDeclaration":169,"src":"1889:9:1"},"referencedDeclaration":169,"src":"1889:9:1","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$169","typeString":"enum PermissionLib.Operation"}},"visibility":"internal"},{"constant":false,"id":182,"mutability":"mutable","name":"where","nameLocation":"1926:5:1","nodeType":"VariableDeclaration","scope":189,"src":"1918:13:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":181,"name":"address","nodeType":"ElementaryTypeName","src":"1918:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":184,"mutability":"mutable","name":"who","nameLocation":"1949:3:1","nodeType":"VariableDeclaration","scope":189,"src":"1941:11:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":183,"name":"address","nodeType":"ElementaryTypeName","src":"1941:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":186,"mutability":"mutable","name":"condition","nameLocation":"1970:9:1","nodeType":"VariableDeclaration","scope":189,"src":"1962:17:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":185,"name":"address","nodeType":"ElementaryTypeName","src":"1962:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":188,"mutability":"mutable","name":"permissionId","nameLocation":"1997:12:1","nodeType":"VariableDeclaration","scope":189,"src":"1989:20:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":187,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1989:7:1","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"MultiTargetPermission","nameLocation":"1857:21:1","nodeType":"StructDefinition","scope":190,"src":"1850:166:1","visibility":"public"}],"scope":191,"src":"208:1810:1","usedErrors":[]}],"src":"47:1972:1"},"id":1},"@aragon/osx/core/plugin/IPlugin.sol":{"ast":{"absolutePath":"@aragon/osx/core/plugin/IPlugin.sol","exportedSymbols":{"IPlugin":[205]},"id":206,"license":"AGPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":192,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"47:23:2"},{"abstract":false,"baseContracts":[],"canonicalName":"IPlugin","contractDependencies":[],"contractKind":"interface","documentation":{"id":193,"nodeType":"StructuredDocumentation","src":"72:120:2","text":"@title IPlugin\n @author Aragon Association - 2022-2023\n @notice An interface defining the traits of a plugin."},"fullyImplemented":false,"id":205,"linearizedBaseContracts":[205],"name":"IPlugin","nameLocation":"202:7:2","nodeType":"ContractDefinition","nodes":[{"canonicalName":"IPlugin.PluginType","id":197,"members":[{"id":194,"name":"UUPS","nameLocation":"242:4:2","nodeType":"EnumValue","src":"242:4:2"},{"id":195,"name":"Cloneable","nameLocation":"256:9:2","nodeType":"EnumValue","src":"256:9:2"},{"id":196,"name":"Constructable","nameLocation":"275:13:2","nodeType":"EnumValue","src":"275:13:2"}],"name":"PluginType","nameLocation":"221:10:2","nodeType":"EnumDefinition","src":"216:78:2"},{"documentation":{"id":198,"nodeType":"StructuredDocumentation","src":"300:37:2","text":"@notice Returns the plugin's type"},"functionSelector":"41de6830","id":204,"implemented":false,"kind":"function","modifiers":[],"name":"pluginType","nameLocation":"351:10:2","nodeType":"FunctionDefinition","parameters":{"id":199,"nodeType":"ParameterList","parameters":[],"src":"361:2:2"},"returnParameters":{"id":203,"nodeType":"ParameterList","parameters":[{"constant":false,"id":202,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":204,"src":"387:10:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PluginType_$197","typeString":"enum IPlugin.PluginType"},"typeName":{"id":201,"nodeType":"UserDefinedTypeName","pathNode":{"id":200,"name":"PluginType","nameLocations":["387:10:2"],"nodeType":"IdentifierPath","referencedDeclaration":197,"src":"387:10:2"},"referencedDeclaration":197,"src":"387:10:2","typeDescriptions":{"typeIdentifier":"t_enum$_PluginType_$197","typeString":"enum IPlugin.PluginType"}},"visibility":"internal"}],"src":"386:12:2"},"scope":205,"src":"342:57:2","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":206,"src":"192:209:2","usedErrors":[]}],"src":"47:355:2"},"id":2},"@aragon/osx/core/plugin/Plugin.sol":{"ast":{"absolutePath":"@aragon/osx/core/plugin/Plugin.sol","exportedSymbols":{"DaoAuthorizable":[326],"ERC165":[3123],"IDAO":[155],"IPlugin":[205],"Plugin":[268]},"id":269,"license":"AGPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":207,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"47:23:3"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"@openzeppelin/contracts/utils/introspection/ERC165.sol","id":209,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":269,"sourceUnit":3124,"src":"72:78:3","symbolAliases":[{"foreign":{"id":208,"name":"ERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3123,"src":"80:6:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@aragon/osx/core/dao/IDAO.sol","file":"../dao/IDAO.sol","id":211,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":269,"sourceUnit":156,"src":"152:37:3","symbolAliases":[{"foreign":{"id":210,"name":"IDAO","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":155,"src":"160:4:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@aragon/osx/core/plugin/dao-authorizable/DaoAuthorizable.sol","file":"./dao-authorizable/DaoAuthorizable.sol","id":213,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":269,"sourceUnit":327,"src":"190:71:3","symbolAliases":[{"foreign":{"id":212,"name":"DaoAuthorizable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":326,"src":"198:15:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@aragon/osx/core/plugin/IPlugin.sol","file":"./IPlugin.sol","id":215,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":269,"sourceUnit":206,"src":"262:38:3","symbolAliases":[{"foreign":{"id":214,"name":"IPlugin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":205,"src":"270:7:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":217,"name":"IPlugin","nameLocations":["518:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":205,"src":"518:7:3"},"id":218,"nodeType":"InheritanceSpecifier","src":"518:7:3"},{"baseName":{"id":219,"name":"ERC165","nameLocations":["527:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":3123,"src":"527:6:3"},"id":220,"nodeType":"InheritanceSpecifier","src":"527:6:3"},{"baseName":{"id":221,"name":"DaoAuthorizable","nameLocations":["535:15:3"],"nodeType":"IdentifierPath","referencedDeclaration":326,"src":"535:15:3"},"id":222,"nodeType":"InheritanceSpecifier","src":"535:15:3"}],"canonicalName":"Plugin","contractDependencies":[],"contractKind":"contract","documentation":{"id":216,"nodeType":"StructuredDocumentation","src":"302:188:3","text":"@title Plugin\n @author Aragon Association - 2022-2023\n @notice An abstract, non-upgradeable contract to inherit from when creating a plugin being deployed via the `new` keyword."},"fullyImplemented":true,"id":268,"linearizedBaseContracts":[268,326,2686,3123,3329,205],"name":"Plugin","nameLocation":"508:6:3","nodeType":"ContractDefinition","nodes":[{"body":{"id":232,"nodeType":"Block","src":"709:2:3","statements":[]},"documentation":{"id":223,"nodeType":"StructuredDocumentation","src":"557:102:3","text":"@notice Constructs the plugin by storing the associated DAO.\n @param _dao The DAO contract."},"id":233,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":229,"name":"_dao","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":226,"src":"703:4:3","typeDescriptions":{"typeIdentifier":"t_contract$_IDAO_$155","typeString":"contract IDAO"}}],"id":230,"kind":"baseConstructorSpecifier","modifierName":{"id":228,"name":"DaoAuthorizable","nameLocations":["687:15:3"],"nodeType":"IdentifierPath","referencedDeclaration":326,"src":"687:15:3"},"nodeType":"ModifierInvocation","src":"687:21:3"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":227,"nodeType":"ParameterList","parameters":[{"constant":false,"id":226,"mutability":"mutable","name":"_dao","nameLocation":"681:4:3","nodeType":"VariableDeclaration","scope":233,"src":"676:9:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IDAO_$155","typeString":"contract IDAO"},"typeName":{"id":225,"nodeType":"UserDefinedTypeName","pathNode":{"id":224,"name":"IDAO","nameLocations":["676:4:3"],"nodeType":"IdentifierPath","referencedDeclaration":155,"src":"676:4:3"},"referencedDeclaration":155,"src":"676:4:3","typeDescriptions":{"typeIdentifier":"t_contract$_IDAO_$155","typeString":"contract IDAO"}},"visibility":"internal"}],"src":"675:11:3"},"returnParameters":{"id":231,"nodeType":"ParameterList","parameters":[],"src":"709:0:3"},"scope":268,"src":"664:47:3","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[204],"body":{"id":244,"nodeType":"Block","src":"809:48:3","statements":[{"expression":{"expression":{"id":241,"name":"PluginType","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":197,"src":"826:10:3","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_PluginType_$197_$","typeString":"type(enum IPlugin.PluginType)"}},"id":242,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"837:13:3","memberName":"Constructable","nodeType":"MemberAccess","referencedDeclaration":196,"src":"826:24:3","typeDescriptions":{"typeIdentifier":"t_enum$_PluginType_$197","typeString":"enum IPlugin.PluginType"}},"functionReturnParameters":240,"id":243,"nodeType":"Return","src":"819:31:3"}]},"documentation":{"id":234,"nodeType":"StructuredDocumentation","src":"717:23:3","text":"@inheritdoc IPlugin"},"functionSelector":"41de6830","id":245,"implemented":true,"kind":"function","modifiers":[],"name":"pluginType","nameLocation":"754:10:3","nodeType":"FunctionDefinition","overrides":{"id":236,"nodeType":"OverrideSpecifier","overrides":[],"src":"779:8:3"},"parameters":{"id":235,"nodeType":"ParameterList","parameters":[],"src":"764:2:3"},"returnParameters":{"id":240,"nodeType":"ParameterList","parameters":[{"constant":false,"id":239,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":245,"src":"797:10:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_PluginType_$197","typeString":"enum IPlugin.PluginType"},"typeName":{"id":238,"nodeType":"UserDefinedTypeName","pathNode":{"id":237,"name":"PluginType","nameLocations":["797:10:3"],"nodeType":"IdentifierPath","referencedDeclaration":197,"src":"797:10:3"},"referencedDeclaration":197,"src":"797:10:3","typeDescriptions":{"typeIdentifier":"t_enum$_PluginType_$197","typeString":"enum IPlugin.PluginType"}},"visibility":"internal"}],"src":"796:12:3"},"scope":268,"src":"745:112:3","stateMutability":"pure","virtual":false,"visibility":"public"},{"baseFunctions":[3122],"body":{"id":266,"nodeType":"Block","src":"1157:106:3","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":254,"name":"_interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":248,"src":"1174:12:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":256,"name":"IPlugin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":205,"src":"1195:7:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IPlugin_$205_$","typeString":"type(contract IPlugin)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IPlugin_$205_$","typeString":"type(contract IPlugin)"}],"id":255,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1190:4:3","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":257,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1190:13:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IPlugin_$205","typeString":"type(contract IPlugin)"}},"id":258,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1204:11:3","memberName":"interfaceId","nodeType":"MemberAccess","src":"1190:25:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1174:41:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":262,"name":"_interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":248,"src":"1243:12:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":260,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1219:5:3","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_Plugin_$268_$","typeString":"type(contract super Plugin)"}},"id":261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1225:17:3","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":3122,"src":"1219:23:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":263,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1219:37:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1174:82:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":253,"id":265,"nodeType":"Return","src":"1167:89:3"}]},"documentation":{"id":246,"nodeType":"StructuredDocumentation","src":"863:197:3","text":"@notice Checks if this or the parent contract supports an interface by its ID.\n @param _interfaceId The ID of the interface.\n @return Returns `true` if the interface is supported."},"functionSelector":"01ffc9a7","id":267,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1074:17:3","nodeType":"FunctionDefinition","overrides":{"id":250,"nodeType":"OverrideSpecifier","overrides":[],"src":"1133:8:3"},"parameters":{"id":249,"nodeType":"ParameterList","parameters":[{"constant":false,"id":248,"mutability":"mutable","name":"_interfaceId","nameLocation":"1099:12:3","nodeType":"VariableDeclaration","scope":267,"src":"1092:19:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":247,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1092:6:3","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1091:21:3"},"returnParameters":{"id":253,"nodeType":"ParameterList","parameters":[{"constant":false,"id":252,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":267,"src":"1151:4:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":251,"name":"bool","nodeType":"ElementaryTypeName","src":"1151:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1150:6:3"},"scope":268,"src":"1065:198:3","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":269,"src":"490:775:3","usedErrors":[]}],"src":"47:1219:3"},"id":3},"@aragon/osx/core/plugin/dao-authorizable/DaoAuthorizable.sol":{"ast":{"absolutePath":"@aragon/osx/core/plugin/dao-authorizable/DaoAuthorizable.sol","exportedSymbols":{"Context":[2686],"DaoAuthorizable":[326],"IDAO":[155],"_auth":[376]},"id":327,"license":"AGPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":270,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"47:23:4"},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":272,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":327,"sourceUnit":2687,"src":"72:66:4","symbolAliases":[{"foreign":{"id":271,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2686,"src":"80:7:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@aragon/osx/core/dao/IDAO.sol","file":"../../dao/IDAO.sol","id":274,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":327,"sourceUnit":156,"src":"140:40:4","symbolAliases":[{"foreign":{"id":273,"name":"IDAO","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":155,"src":"148:4:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@aragon/osx/core/utils/auth.sol","file":"../../utils/auth.sol","id":276,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":327,"sourceUnit":377,"src":"181:43:4","symbolAliases":[{"foreign":{"id":275,"name":"_auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":376,"src":"189:5:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":278,"name":"Context","nameLocations":["535:7:4"],"nodeType":"IdentifierPath","referencedDeclaration":2686,"src":"535:7:4"},"id":279,"nodeType":"InheritanceSpecifier","src":"535:7:4"}],"canonicalName":"DaoAuthorizable","contractDependencies":[],"contractKind":"contract","documentation":{"id":277,"nodeType":"StructuredDocumentation","src":"226:272:4","text":"@title DaoAuthorizable\n @author Aragon Association - 2022-2023\n @notice An abstract contract providing a meta-transaction compatible modifier for non-upgradeable contracts instantiated via the `new` keyword to authorize function calls through an associated DAO."},"fullyImplemented":true,"id":326,"linearizedBaseContracts":[326,2686],"name":"DaoAuthorizable","nameLocation":"516:15:4","nodeType":"ContractDefinition","nodes":[{"constant":false,"documentation":{"id":280,"nodeType":"StructuredDocumentation","src":"549:80:4","text":"@notice The associated DAO managing the permissions of inheriting contracts."},"id":283,"mutability":"immutable","name":"dao_","nameLocation":"657:4:4","nodeType":"VariableDeclaration","scope":326,"src":"634:27:4","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IDAO_$155","typeString":"contract IDAO"},"typeName":{"id":282,"nodeType":"UserDefinedTypeName","pathNode":{"id":281,"name":"IDAO","nameLocations":["634:4:4"],"nodeType":"IdentifierPath","referencedDeclaration":155,"src":"634:4:4"},"referencedDeclaration":155,"src":"634:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_IDAO_$155","typeString":"contract IDAO"}},"visibility":"private"},{"body":{"id":294,"nodeType":"Block","src":"810:28:4","statements":[{"expression":{"id":292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":290,"name":"dao_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":283,"src":"820:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_IDAO_$155","typeString":"contract IDAO"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":291,"name":"_dao","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":287,"src":"827:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_IDAO_$155","typeString":"contract IDAO"}},"src":"820:11:4","typeDescriptions":{"typeIdentifier":"t_contract$_IDAO_$155","typeString":"contract IDAO"}},"id":293,"nodeType":"ExpressionStatement","src":"820:11:4"}]},"documentation":{"id":284,"nodeType":"StructuredDocumentation","src":"668:114:4","text":"@notice Constructs the contract by setting the associated DAO.\n @param _dao The associated DAO address."},"id":295,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":288,"nodeType":"ParameterList","parameters":[{"constant":false,"id":287,"mutability":"mutable","name":"_dao","nameLocation":"804:4:4","nodeType":"VariableDeclaration","scope":295,"src":"799:9:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IDAO_$155","typeString":"contract IDAO"},"typeName":{"id":286,"nodeType":"UserDefinedTypeName","pathNode":{"id":285,"name":"IDAO","nameLocations":["799:4:4"],"nodeType":"IdentifierPath","referencedDeclaration":155,"src":"799:4:4"},"referencedDeclaration":155,"src":"799:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_IDAO_$155","typeString":"contract IDAO"}},"visibility":"internal"}],"src":"798:11:4"},"returnParameters":{"id":289,"nodeType":"ParameterList","parameters":[],"src":"810:0:4"},"scope":326,"src":"787:51:4","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":304,"nodeType":"Block","src":"962:28:4","statements":[{"expression":{"id":302,"name":"dao_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":283,"src":"979:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_IDAO_$155","typeString":"contract IDAO"}},"functionReturnParameters":301,"id":303,"nodeType":"Return","src":"972:11:4"}]},"documentation":{"id":296,"nodeType":"StructuredDocumentation","src":"844:71:4","text":"@notice Returns the DAO contract.\n @return The DAO contract."},"functionSelector":"4162169f","id":305,"implemented":true,"kind":"function","modifiers":[],"name":"dao","nameLocation":"929:3:4","nodeType":"FunctionDefinition","parameters":{"id":297,"nodeType":"ParameterList","parameters":[],"src":"932:2:4"},"returnParameters":{"id":301,"nodeType":"ParameterList","parameters":[{"constant":false,"id":300,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":305,"src":"956:4:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IDAO_$155","typeString":"contract IDAO"},"typeName":{"id":299,"nodeType":"UserDefinedTypeName","pathNode":{"id":298,"name":"IDAO","nameLocations":["956:4:4"],"nodeType":"IdentifierPath","referencedDeclaration":155,"src":"956:4:4"},"referencedDeclaration":155,"src":"956:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_IDAO_$155","typeString":"contract IDAO"}},"visibility":"internal"}],"src":"955:6:4"},"scope":326,"src":"920:70:4","stateMutability":"view","virtual":false,"visibility":"public"},{"body":{"id":324,"nodeType":"Block","src":"1320:95:4","statements":[{"expression":{"arguments":[{"id":311,"name":"dao_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":283,"src":"1336:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_IDAO_$155","typeString":"contract IDAO"}},{"arguments":[{"id":314,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1350:4:4","typeDescriptions":{"typeIdentifier":"t_contract$_DaoAuthorizable_$326","typeString":"contract DaoAuthorizable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_DaoAuthorizable_$326","typeString":"contract DaoAuthorizable"}],"id":313,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1342:7:4","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":312,"name":"address","nodeType":"ElementaryTypeName","src":"1342:7:4","typeDescriptions":{}}},"id":315,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1342:13:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":316,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2676,"src":"1357:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":317,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1357:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":318,"name":"_permissionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":308,"src":"1371:13:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[],"expression":{"argumentTypes":[],"id":319,"name":"_msgData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2685,"src":"1386:8:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () view returns (bytes calldata)"}},"id":320,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1386:10:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IDAO_$155","typeString":"contract IDAO"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":310,"name":"_auth","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":376,"src":"1330:5:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_contract$_IDAO_$155_$_t_address_$_t_address_$_t_bytes32_$_t_bytes_calldata_ptr_$returns$__$","typeString":"function (contract IDAO,address,address,bytes32,bytes calldata) view"}},"id":321,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1330:67:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":322,"nodeType":"ExpressionStatement","src":"1330:67:4"},{"id":323,"nodeType":"PlaceholderStatement","src":"1407:1:4"}]},"documentation":{"id":306,"nodeType":"StructuredDocumentation","src":"996:282:4","text":"@notice A modifier to make functions on inheriting contracts authorized. Permissions to call the function are checked through the associated DAO's permission manager.\n @param _permissionId The permission identifier required to call the method this modifier is applied to."},"id":325,"name":"auth","nameLocation":"1292:4:4","nodeType":"ModifierDefinition","parameters":{"id":309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":308,"mutability":"mutable","name":"_permissionId","nameLocation":"1305:13:4","nodeType":"VariableDeclaration","scope":325,"src":"1297:21:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":307,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1297:7:4","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1296:23:4"},"src":"1283:132:4","virtual":false,"visibility":"internal"}],"scope":327,"src":"498:919:4","usedErrors":[]}],"src":"47:1371:4"},"id":4},"@aragon/osx/core/utils/auth.sol":{"ast":{"absolutePath":"@aragon/osx/core/utils/auth.sol","exportedSymbols":{"DaoUnauthorized":[341],"IDAO":[155],"_auth":[376]},"id":377,"license":"AGPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":328,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"47:23:5"},{"absolutePath":"@aragon/osx/core/dao/IDAO.sol","file":"../dao/IDAO.sol","id":330,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":377,"sourceUnit":156,"src":"72:37:5","symbolAliases":[{"foreign":{"id":329,"name":"IDAO","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":155,"src":"80:4:5","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"documentation":{"id":331,"nodeType":"StructuredDocumentation","src":"111:289:5","text":"@notice Thrown if a call is unauthorized in the associated DAO.\n @param dao The associated DAO.\n @param where The context in which the authorization reverted.\n @param who The address (EOA or contract) missing the permission.\n @param permissionId The permission identifier."},"errorSelector":"32dbe3b4","id":341,"name":"DaoUnauthorized","nameLocation":"406:15:5","nodeType":"ErrorDefinition","parameters":{"id":340,"nodeType":"ParameterList","parameters":[{"constant":false,"id":333,"mutability":"mutable","name":"dao","nameLocation":"430:3:5","nodeType":"VariableDeclaration","scope":341,"src":"422:11:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":332,"name":"address","nodeType":"ElementaryTypeName","src":"422:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":335,"mutability":"mutable","name":"where","nameLocation":"443:5:5","nodeType":"VariableDeclaration","scope":341,"src":"435:13:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":334,"name":"address","nodeType":"ElementaryTypeName","src":"435:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":337,"mutability":"mutable","name":"who","nameLocation":"458:3:5","nodeType":"VariableDeclaration","scope":341,"src":"450:11:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":336,"name":"address","nodeType":"ElementaryTypeName","src":"450:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":339,"mutability":"mutable","name":"permissionId","nameLocation":"471:12:5","nodeType":"VariableDeclaration","scope":341,"src":"463:20:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":338,"name":"bytes32","nodeType":"ElementaryTypeName","src":"463:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"421:63:5"},"src":"400:85:5"},{"body":{"id":375,"nodeType":"Block","src":"1121:235:5","statements":[{"condition":{"id":363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1131:55:5","subExpression":{"arguments":[{"id":358,"name":"_where","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":347,"src":"1151:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":359,"name":"_who","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":349,"src":"1159:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":360,"name":"_permissionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":351,"src":"1165:13:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":361,"name":"_data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":353,"src":"1180:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"id":356,"name":"_dao","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":345,"src":"1132:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_IDAO_$155","typeString":"contract IDAO"}},"id":357,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1137:13:5","memberName":"hasPermission","nodeType":"MemberAccess","referencedDeclaration":23,"src":"1132:18:5","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,bytes32,bytes memory) view external returns (bool)"}},"id":362,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1132:54:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":374,"nodeType":"IfStatement","src":"1127:226:5","trueBody":{"errorCall":{"arguments":[{"arguments":[{"id":367,"name":"_dao","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":345,"src":"1246:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_IDAO_$155","typeString":"contract IDAO"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IDAO_$155","typeString":"contract IDAO"}],"id":366,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1238:7:5","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":365,"name":"address","nodeType":"ElementaryTypeName","src":"1238:7:5","typeDescriptions":{}}},"id":368,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1238:13:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":369,"name":"_where","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":347,"src":"1272:6:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":370,"name":"_who","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":349,"src":"1297:4:5","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":371,"name":"_permissionId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":351,"src":"1329:13:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":364,"name":"DaoUnauthorized","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":341,"src":"1203:15:5","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$_t_address_$_t_bytes32_$returns$__$","typeString":"function (address,address,address,bytes32) pure"}},"id":372,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":["1233:3:5","1265:5:5","1292:3:5","1315:12:5"],"names":["dao","where","who","permissionId"],"nodeType":"FunctionCall","src":"1203:150:5","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":373,"nodeType":"RevertStatement","src":"1196:157:5"}}]},"documentation":{"id":342,"nodeType":"StructuredDocumentation","src":"487:506:5","text":"@notice A free function checking if a caller is granted permissions on a target contract via a permission identifier that redirects the approval to a `PermissionCondition` if this was specified in the setup.\n @param _where The address of the target contract for which `who` receives permission.\n @param _who The address (EOA or contract) owning the permission.\n @param _permissionId The permission identifier.\n @param _data The optional data passed to the `PermissionCondition` registered."},"id":376,"implemented":true,"kind":"freeFunction","modifiers":[],"name":"_auth","nameLocation":"1002:5:5","nodeType":"FunctionDefinition","parameters":{"id":354,"nodeType":"ParameterList","parameters":[{"constant":false,"id":345,"mutability":"mutable","name":"_dao","nameLocation":"1018:4:5","nodeType":"VariableDeclaration","scope":376,"src":"1013:9:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IDAO_$155","typeString":"contract IDAO"},"typeName":{"id":344,"nodeType":"UserDefinedTypeName","pathNode":{"id":343,"name":"IDAO","nameLocations":["1013:4:5"],"nodeType":"IdentifierPath","referencedDeclaration":155,"src":"1013:4:5"},"referencedDeclaration":155,"src":"1013:4:5","typeDescriptions":{"typeIdentifier":"t_contract$_IDAO_$155","typeString":"contract IDAO"}},"visibility":"internal"},{"constant":false,"id":347,"mutability":"mutable","name":"_where","nameLocation":"1036:6:5","nodeType":"VariableDeclaration","scope":376,"src":"1028:14:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":346,"name":"address","nodeType":"ElementaryTypeName","src":"1028:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":349,"mutability":"mutable","name":"_who","nameLocation":"1056:4:5","nodeType":"VariableDeclaration","scope":376,"src":"1048:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":348,"name":"address","nodeType":"ElementaryTypeName","src":"1048:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":351,"mutability":"mutable","name":"_permissionId","nameLocation":"1074:13:5","nodeType":"VariableDeclaration","scope":376,"src":"1066:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":350,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1066:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":353,"mutability":"mutable","name":"_data","nameLocation":"1108:5:5","nodeType":"VariableDeclaration","scope":376,"src":"1093:20:5","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":352,"name":"bytes","nodeType":"ElementaryTypeName","src":"1093:5:5","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1007:108:5"},"returnParameters":{"id":355,"nodeType":"ParameterList","parameters":[],"src":"1121:0:5"},"scope":377,"src":"993:363:5","stateMutability":"view","virtual":false,"visibility":"internal"}],"src":"47:1310:5"},"id":5},"@aragon/osx/framework/plugin/setup/IPluginSetup.sol":{"ast":{"absolutePath":"@aragon/osx/framework/plugin/setup/IPluginSetup.sol","exportedSymbols":{"IDAO":[155],"IPluginSetup":[448],"PermissionLib":[190]},"id":449,"license":"AGPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":378,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"47:23:6"},{"absolutePath":"@aragon/osx/core/permission/PermissionLib.sol","file":"../../../core/permission/PermissionLib.sol","id":380,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":449,"sourceUnit":191,"src":"72:73:6","symbolAliases":[{"foreign":{"id":379,"name":"PermissionLib","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":190,"src":"80:13:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@aragon/osx/core/dao/IDAO.sol","file":"../../../core/dao/IDAO.sol","id":382,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":449,"sourceUnit":156,"src":"146:48:6","symbolAliases":[{"foreign":{"id":381,"name":"IDAO","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":155,"src":"154:4:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"IPluginSetup","contractDependencies":[],"contractKind":"interface","documentation":{"id":383,"nodeType":"StructuredDocumentation","src":"196:231:6","text":"@title IPluginSetup\n @author Aragon Association - 2022-2023\n @notice The interface required for a plugin setup contract to be consumed by the `PluginSetupProcessor` for plugin installations, updates, and uninstallations."},"fullyImplemented":false,"id":448,"linearizedBaseContracts":[448],"name":"IPluginSetup","nameLocation":"437:12:6","nodeType":"ContractDefinition","nodes":[{"canonicalName":"IPluginSetup.PreparedSetupData","id":391,"members":[{"constant":false,"id":386,"mutability":"mutable","name":"helpers","nameLocation":"858:7:6","nodeType":"VariableDeclaration","scope":391,"src":"848:17:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":384,"name":"address","nodeType":"ElementaryTypeName","src":"848:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":385,"nodeType":"ArrayTypeName","src":"848:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":390,"mutability":"mutable","name":"permissions","nameLocation":"913:11:6","nodeType":"VariableDeclaration","scope":391,"src":"875:49:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiTargetPermission_$189_storage_$dyn_storage_ptr","typeString":"struct PermissionLib.MultiTargetPermission[]"},"typeName":{"baseType":{"id":388,"nodeType":"UserDefinedTypeName","pathNode":{"id":387,"name":"PermissionLib.MultiTargetPermission","nameLocations":["875:13:6","889:21:6"],"nodeType":"IdentifierPath","referencedDeclaration":189,"src":"875:35:6"},"referencedDeclaration":189,"src":"875:35:6","typeDescriptions":{"typeIdentifier":"t_struct$_MultiTargetPermission_$189_storage_ptr","typeString":"struct PermissionLib.MultiTargetPermission"}},"id":389,"nodeType":"ArrayTypeName","src":"875:37:6","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiTargetPermission_$189_storage_$dyn_storage_ptr","typeString":"struct PermissionLib.MultiTargetPermission[]"}},"visibility":"internal"}],"name":"PreparedSetupData","nameLocation":"820:17:6","nodeType":"StructDefinition","scope":448,"src":"813:118:6","visibility":"public"},{"canonicalName":"IPluginSetup.SetupPayload","id":399,"members":[{"constant":false,"id":393,"mutability":"mutable","name":"plugin","nameLocation":"1502:6:6","nodeType":"VariableDeclaration","scope":399,"src":"1494:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":392,"name":"address","nodeType":"ElementaryTypeName","src":"1494:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":396,"mutability":"mutable","name":"currentHelpers","nameLocation":"1528:14:6","nodeType":"VariableDeclaration","scope":399,"src":"1518:24:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":394,"name":"address","nodeType":"ElementaryTypeName","src":"1518:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":395,"nodeType":"ArrayTypeName","src":"1518:9:6","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":398,"mutability":"mutable","name":"data","nameLocation":"1558:4:6","nodeType":"VariableDeclaration","scope":399,"src":"1552:10:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":397,"name":"bytes","nodeType":"ElementaryTypeName","src":"1552:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"SetupPayload","nameLocation":"1471:12:6","nodeType":"StructDefinition","scope":448,"src":"1464:105:6","visibility":"public"},{"documentation":{"id":400,"nodeType":"StructuredDocumentation","src":"1575:463:6","text":"@notice Prepares the installation of a plugin.\n @param _dao The address of the installing DAO.\n @param _data The bytes-encoded data containing the input parameters for the installation as specified in the plugin's build metadata JSON file.\n @return plugin The address of the `Plugin` contract being prepared for installation.\n @return preparedSetupData The deployed plugin's relevant data which consists of helpers and permissions."},"functionSelector":"f10832f1","id":412,"implemented":false,"kind":"function","modifiers":[],"name":"prepareInstallation","nameLocation":"2052:19:6","nodeType":"FunctionDefinition","parameters":{"id":405,"nodeType":"ParameterList","parameters":[{"constant":false,"id":402,"mutability":"mutable","name":"_dao","nameLocation":"2089:4:6","nodeType":"VariableDeclaration","scope":412,"src":"2081:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":401,"name":"address","nodeType":"ElementaryTypeName","src":"2081:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":404,"mutability":"mutable","name":"_data","nameLocation":"2118:5:6","nodeType":"VariableDeclaration","scope":412,"src":"2103:20:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":403,"name":"bytes","nodeType":"ElementaryTypeName","src":"2103:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2071:58:6"},"returnParameters":{"id":411,"nodeType":"ParameterList","parameters":[{"constant":false,"id":407,"mutability":"mutable","name":"plugin","nameLocation":"2156:6:6","nodeType":"VariableDeclaration","scope":412,"src":"2148:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":406,"name":"address","nodeType":"ElementaryTypeName","src":"2148:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":410,"mutability":"mutable","name":"preparedSetupData","nameLocation":"2189:17:6","nodeType":"VariableDeclaration","scope":412,"src":"2164:42:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PreparedSetupData_$391_memory_ptr","typeString":"struct IPluginSetup.PreparedSetupData"},"typeName":{"id":409,"nodeType":"UserDefinedTypeName","pathNode":{"id":408,"name":"PreparedSetupData","nameLocations":["2164:17:6"],"nodeType":"IdentifierPath","referencedDeclaration":391,"src":"2164:17:6"},"referencedDeclaration":391,"src":"2164:17:6","typeDescriptions":{"typeIdentifier":"t_struct$_PreparedSetupData_$391_storage_ptr","typeString":"struct IPluginSetup.PreparedSetupData"}},"visibility":"internal"}],"src":"2147:60:6"},"scope":448,"src":"2043:165:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":413,"nodeType":"StructuredDocumentation","src":"2214:519:6","text":"@notice Prepares the update of a plugin.\n @param _dao The address of the updating DAO.\n @param _currentBuild The build number of the plugin to update from.\n @param _payload The relevant data necessary for the `prepareUpdate`. See above.\n @return initData The initialization data to be passed to upgradeable contracts when the update is applied in the `PluginSetupProcessor`.\n @return preparedSetupData The deployed plugin's relevant data which consists of helpers and permissions."},"functionSelector":"a8a9c29e","id":428,"implemented":false,"kind":"function","modifiers":[],"name":"prepareUpdate","nameLocation":"2747:13:6","nodeType":"FunctionDefinition","parameters":{"id":421,"nodeType":"ParameterList","parameters":[{"constant":false,"id":415,"mutability":"mutable","name":"_dao","nameLocation":"2778:4:6","nodeType":"VariableDeclaration","scope":428,"src":"2770:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":414,"name":"address","nodeType":"ElementaryTypeName","src":"2770:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":417,"mutability":"mutable","name":"_currentBuild","nameLocation":"2799:13:6","nodeType":"VariableDeclaration","scope":428,"src":"2792:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":416,"name":"uint16","nodeType":"ElementaryTypeName","src":"2792:6:6","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":420,"mutability":"mutable","name":"_payload","nameLocation":"2844:8:6","nodeType":"VariableDeclaration","scope":428,"src":"2822:30:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_SetupPayload_$399_calldata_ptr","typeString":"struct IPluginSetup.SetupPayload"},"typeName":{"id":419,"nodeType":"UserDefinedTypeName","pathNode":{"id":418,"name":"SetupPayload","nameLocations":["2822:12:6"],"nodeType":"IdentifierPath","referencedDeclaration":399,"src":"2822:12:6"},"referencedDeclaration":399,"src":"2822:12:6","typeDescriptions":{"typeIdentifier":"t_struct$_SetupPayload_$399_storage_ptr","typeString":"struct IPluginSetup.SetupPayload"}},"visibility":"internal"}],"src":"2760:98:6"},"returnParameters":{"id":427,"nodeType":"ParameterList","parameters":[{"constant":false,"id":423,"mutability":"mutable","name":"initData","nameLocation":"2890:8:6","nodeType":"VariableDeclaration","scope":428,"src":"2877:21:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":422,"name":"bytes","nodeType":"ElementaryTypeName","src":"2877:5:6","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":426,"mutability":"mutable","name":"preparedSetupData","nameLocation":"2925:17:6","nodeType":"VariableDeclaration","scope":428,"src":"2900:42:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PreparedSetupData_$391_memory_ptr","typeString":"struct IPluginSetup.PreparedSetupData"},"typeName":{"id":425,"nodeType":"UserDefinedTypeName","pathNode":{"id":424,"name":"PreparedSetupData","nameLocations":["2900:17:6"],"nodeType":"IdentifierPath","referencedDeclaration":391,"src":"2900:17:6"},"referencedDeclaration":391,"src":"2900:17:6","typeDescriptions":{"typeIdentifier":"t_struct$_PreparedSetupData_$391_storage_ptr","typeString":"struct IPluginSetup.PreparedSetupData"}},"visibility":"internal"}],"src":"2876:67:6"},"scope":448,"src":"2738:206:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":429,"nodeType":"StructuredDocumentation","src":"2950:352:6","text":"@notice Prepares the uninstallation of a plugin.\n @param _dao The address of the uninstalling DAO.\n @param _payload The relevant data necessary for the `prepareUninstallation`. See above.\n @return permissions The array of multi-targeted permission operations to be applied by the `PluginSetupProcessor` to the uninstalling DAO."},"functionSelector":"9cb0a124","id":441,"implemented":false,"kind":"function","modifiers":[],"name":"prepareUninstallation","nameLocation":"3316:21:6","nodeType":"FunctionDefinition","parameters":{"id":435,"nodeType":"ParameterList","parameters":[{"constant":false,"id":431,"mutability":"mutable","name":"_dao","nameLocation":"3355:4:6","nodeType":"VariableDeclaration","scope":441,"src":"3347:12:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":430,"name":"address","nodeType":"ElementaryTypeName","src":"3347:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":434,"mutability":"mutable","name":"_payload","nameLocation":"3391:8:6","nodeType":"VariableDeclaration","scope":441,"src":"3369:30:6","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_SetupPayload_$399_calldata_ptr","typeString":"struct IPluginSetup.SetupPayload"},"typeName":{"id":433,"nodeType":"UserDefinedTypeName","pathNode":{"id":432,"name":"SetupPayload","nameLocations":["3369:12:6"],"nodeType":"IdentifierPath","referencedDeclaration":399,"src":"3369:12:6"},"referencedDeclaration":399,"src":"3369:12:6","typeDescriptions":{"typeIdentifier":"t_struct$_SetupPayload_$399_storage_ptr","typeString":"struct IPluginSetup.SetupPayload"}},"visibility":"internal"}],"src":"3337:68:6"},"returnParameters":{"id":440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":439,"mutability":"mutable","name":"permissions","nameLocation":"3469:11:6","nodeType":"VariableDeclaration","scope":441,"src":"3424:56:6","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr","typeString":"struct PermissionLib.MultiTargetPermission[]"},"typeName":{"baseType":{"id":437,"nodeType":"UserDefinedTypeName","pathNode":{"id":436,"name":"PermissionLib.MultiTargetPermission","nameLocations":["3424:13:6","3438:21:6"],"nodeType":"IdentifierPath","referencedDeclaration":189,"src":"3424:35:6"},"referencedDeclaration":189,"src":"3424:35:6","typeDescriptions":{"typeIdentifier":"t_struct$_MultiTargetPermission_$189_storage_ptr","typeString":"struct PermissionLib.MultiTargetPermission"}},"id":438,"nodeType":"ArrayTypeName","src":"3424:37:6","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiTargetPermission_$189_storage_$dyn_storage_ptr","typeString":"struct PermissionLib.MultiTargetPermission[]"}},"visibility":"internal"}],"src":"3423:58:6"},"scope":448,"src":"3307:175:6","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":442,"nodeType":"StructuredDocumentation","src":"3488:384:6","text":"@notice Returns the plugin implementation address.\n @return The address of the plugin implementation contract.\n @dev The implementation can be instantiated via the `new` keyword, cloned via the minimal clones pattern (see [ERC-1167](https://eips.ethereum.org/EIPS/eip-1167)), or proxied via the UUPS pattern (see [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822))."},"functionSelector":"5c60da1b","id":447,"implemented":false,"kind":"function","modifiers":[],"name":"implementation","nameLocation":"3886:14:6","nodeType":"FunctionDefinition","parameters":{"id":443,"nodeType":"ParameterList","parameters":[],"src":"3900:2:6"},"returnParameters":{"id":446,"nodeType":"ParameterList","parameters":[{"constant":false,"id":445,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":447,"src":"3926:7:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":444,"name":"address","nodeType":"ElementaryTypeName","src":"3926:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3925:9:6"},"scope":448,"src":"3877:58:6","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":449,"src":"427:3510:6","usedErrors":[]}],"src":"47:3891:6"},"id":6},"@aragon/osx/framework/plugin/setup/PluginSetup.sol":{"ast":{"absolutePath":"@aragon/osx/framework/plugin/setup/PluginSetup.sol","exportedSymbols":{"Clones":[687],"ERC165":[3123],"ERC165Checker":[3317],"IPluginSetup":[448],"PermissionLib":[190],"PluginSetup":[524],"createERC1967":[548]},"id":525,"license":"AGPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":450,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"47:23:7"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"@openzeppelin/contracts/utils/introspection/ERC165.sol","id":452,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":525,"sourceUnit":3124,"src":"72:78:7","symbolAliases":[{"foreign":{"id":451,"name":"ERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3123,"src":"80:6:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol","file":"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol","id":454,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":525,"sourceUnit":3318,"src":"151:92:7","symbolAliases":[{"foreign":{"id":453,"name":"ERC165Checker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3317,"src":"159:13:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/proxy/Clones.sol","file":"@openzeppelin/contracts/proxy/Clones.sol","id":456,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":525,"sourceUnit":688,"src":"244:64:7","symbolAliases":[{"foreign":{"id":455,"name":"Clones","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":687,"src":"252:6:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@aragon/osx/core/permission/PermissionLib.sol","file":"../../../core/permission/PermissionLib.sol","id":458,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":525,"sourceUnit":191,"src":"310:73:7","symbolAliases":[{"foreign":{"id":457,"name":"PermissionLib","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":190,"src":"318:13:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@aragon/osx/utils/Proxy.sol","file":"../../../utils/Proxy.sol","id":460,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":525,"sourceUnit":549,"src":"384:77:7","symbolAliases":[{"foreign":{"id":459,"name":"createERC1967Proxy","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":548,"src":"392:18:7","typeDescriptions":{}},"local":"createERC1967","nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@aragon/osx/framework/plugin/setup/IPluginSetup.sol","file":"./IPluginSetup.sol","id":462,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":525,"sourceUnit":449,"src":"462:48:7","symbolAliases":[{"foreign":{"id":461,"name":"IPluginSetup","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":448,"src":"470:12:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":464,"name":"ERC165","nameLocations":["713:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":3123,"src":"713:6:7"},"id":465,"nodeType":"InheritanceSpecifier","src":"713:6:7"},{"baseName":{"id":466,"name":"IPluginSetup","nameLocations":["721:12:7"],"nodeType":"IdentifierPath","referencedDeclaration":448,"src":"721:12:7"},"id":467,"nodeType":"InheritanceSpecifier","src":"721:12:7"}],"canonicalName":"PluginSetup","contractDependencies":[],"contractKind":"contract","documentation":{"id":463,"nodeType":"StructuredDocumentation","src":"512:168:7","text":"@title PluginSetup\n @author Aragon Association - 2022-2023\n @notice An abstract contract that developers have to inherit from to write the setup of a plugin."},"fullyImplemented":false,"id":524,"linearizedBaseContracts":[524,448,3123,3329],"name":"PluginSetup","nameLocation":"698:11:7","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[428],"body":{"id":484,"nodeType":"Block","src":"1032:2:7","statements":[]},"documentation":{"id":468,"nodeType":"StructuredDocumentation","src":"740:28:7","text":"@inheritdoc IPluginSetup"},"functionSelector":"a8a9c29e","id":485,"implemented":true,"kind":"function","modifiers":[],"name":"prepareUpdate","nameLocation":"782:13:7","nodeType":"FunctionDefinition","overrides":{"id":477,"nodeType":"OverrideSpecifier","overrides":[],"src":"935:8:7"},"parameters":{"id":476,"nodeType":"ParameterList","parameters":[{"constant":false,"id":470,"mutability":"mutable","name":"_dao","nameLocation":"813:4:7","nodeType":"VariableDeclaration","scope":485,"src":"805:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":469,"name":"address","nodeType":"ElementaryTypeName","src":"805:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":472,"mutability":"mutable","name":"_currentBuild","nameLocation":"834:13:7","nodeType":"VariableDeclaration","scope":485,"src":"827:20:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":471,"name":"uint16","nodeType":"ElementaryTypeName","src":"827:6:7","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":475,"mutability":"mutable","name":"_payload","nameLocation":"879:8:7","nodeType":"VariableDeclaration","scope":485,"src":"857:30:7","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_SetupPayload_$399_calldata_ptr","typeString":"struct IPluginSetup.SetupPayload"},"typeName":{"id":474,"nodeType":"UserDefinedTypeName","pathNode":{"id":473,"name":"SetupPayload","nameLocations":["857:12:7"],"nodeType":"IdentifierPath","referencedDeclaration":399,"src":"857:12:7"},"referencedDeclaration":399,"src":"857:12:7","typeDescriptions":{"typeIdentifier":"t_struct$_SetupPayload_$399_storage_ptr","typeString":"struct IPluginSetup.SetupPayload"}},"visibility":"internal"}],"src":"795:98:7"},"returnParameters":{"id":483,"nodeType":"ParameterList","parameters":[{"constant":false,"id":479,"mutability":"mutable","name":"initData","nameLocation":"974:8:7","nodeType":"VariableDeclaration","scope":485,"src":"961:21:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":478,"name":"bytes","nodeType":"ElementaryTypeName","src":"961:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":482,"mutability":"mutable","name":"preparedSetupData","nameLocation":"1009:17:7","nodeType":"VariableDeclaration","scope":485,"src":"984:42:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PreparedSetupData_$391_memory_ptr","typeString":"struct IPluginSetup.PreparedSetupData"},"typeName":{"id":481,"nodeType":"UserDefinedTypeName","pathNode":{"id":480,"name":"PreparedSetupData","nameLocations":["984:17:7"],"nodeType":"IdentifierPath","referencedDeclaration":391,"src":"984:17:7"},"referencedDeclaration":391,"src":"984:17:7","typeDescriptions":{"typeIdentifier":"t_struct$_PreparedSetupData_$391_storage_ptr","typeString":"struct IPluginSetup.PreparedSetupData"}},"visibility":"internal"}],"src":"960:67:7"},"scope":524,"src":"773:261:7","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"body":{"id":500,"nodeType":"Block","src":"1589:61:7","statements":[{"expression":{"arguments":[{"id":496,"name":"_implementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":488,"src":"1620:15:7","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":497,"name":"_data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"1637:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":495,"name":"createERC1967","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":548,"src":"1606:13:7","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_address_$","typeString":"function (address,bytes memory) returns (address)"}},"id":498,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1606:37:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":494,"id":499,"nodeType":"Return","src":"1599:44:7"}]},"documentation":{"id":486,"nodeType":"StructuredDocumentation","src":"1040:422:7","text":"@notice A convenience function to create an [ERC-1967](https://eips.ethereum.org/EIPS/eip-1967) proxy contract pointing to an implementation and being associated to a DAO.\n @param _implementation The address of the implementation contract to which the proxy is pointing to.\n @param _data The data to initialize the storage of the proxy contract.\n @return The address of the created proxy contract."},"id":501,"implemented":true,"kind":"function","modifiers":[],"name":"createERC1967Proxy","nameLocation":"1476:18:7","nodeType":"FunctionDefinition","parameters":{"id":491,"nodeType":"ParameterList","parameters":[{"constant":false,"id":488,"mutability":"mutable","name":"_implementation","nameLocation":"1512:15:7","nodeType":"VariableDeclaration","scope":501,"src":"1504:23:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":487,"name":"address","nodeType":"ElementaryTypeName","src":"1504:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":490,"mutability":"mutable","name":"_data","nameLocation":"1550:5:7","nodeType":"VariableDeclaration","scope":501,"src":"1537:18:7","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":489,"name":"bytes","nodeType":"ElementaryTypeName","src":"1537:5:7","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1494:67:7"},"returnParameters":{"id":494,"nodeType":"ParameterList","parameters":[{"constant":false,"id":493,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":501,"src":"1580:7:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":492,"name":"address","nodeType":"ElementaryTypeName","src":"1580:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1579:9:7"},"scope":524,"src":"1467:183:7","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"baseFunctions":[3122],"body":{"id":522,"nodeType":"Block","src":"1950:123:7","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":510,"name":"_interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":504,"src":"1979:12:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":512,"name":"IPluginSetup","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":448,"src":"2000:12:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IPluginSetup_$448_$","typeString":"type(contract IPluginSetup)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IPluginSetup_$448_$","typeString":"type(contract IPluginSetup)"}],"id":511,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1995:4:7","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":513,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1995:18:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IPluginSetup_$448","typeString":"type(contract IPluginSetup)"}},"id":514,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2014:11:7","memberName":"interfaceId","nodeType":"MemberAccess","src":"1995:30:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1979:46:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":518,"name":"_interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":504,"src":"2053:12:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":516,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2029:5:7","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_PluginSetup_$524_$","typeString":"type(contract super PluginSetup)"}},"id":517,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2035:17:7","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":3122,"src":"2029:23:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":519,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2029:37:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1979:87:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":509,"id":521,"nodeType":"Return","src":"1960:106:7"}]},"documentation":{"id":502,"nodeType":"StructuredDocumentation","src":"1656:197:7","text":"@notice Checks if this or the parent contract supports an interface by its ID.\n @param _interfaceId The ID of the interface.\n @return Returns `true` if the interface is supported."},"functionSelector":"01ffc9a7","id":523,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1867:17:7","nodeType":"FunctionDefinition","overrides":{"id":506,"nodeType":"OverrideSpecifier","overrides":[],"src":"1926:8:7"},"parameters":{"id":505,"nodeType":"ParameterList","parameters":[{"constant":false,"id":504,"mutability":"mutable","name":"_interfaceId","nameLocation":"1892:12:7","nodeType":"VariableDeclaration","scope":523,"src":"1885:19:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":503,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1885:6:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1884:21:7"},"returnParameters":{"id":509,"nodeType":"ParameterList","parameters":[{"constant":false,"id":508,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":523,"src":"1944:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":507,"name":"bool","nodeType":"ElementaryTypeName","src":"1944:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1943:6:7"},"scope":524,"src":"1858:215:7","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":525,"src":"680:1395:7","usedErrors":[]}],"src":"47:2029:7"},"id":7},"@aragon/osx/utils/Proxy.sol":{"ast":{"absolutePath":"@aragon/osx/utils/Proxy.sol","exportedSymbols":{"Address":[2664],"ERC1967Proxy":[724],"ERC1967Upgrade":[1028],"IBeacon":[1090],"IERC1822Proxiable":[607],"IERC1967":[572],"Proxy":[1080],"StorageSlot":[2870],"createERC1967Proxy":[548]},"id":549,"license":"AGPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":526,"literals":["solidity","^","0.8",".8"],"nodeType":"PragmaDirective","src":"47:23:8"},{"absolutePath":"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol","file":"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol","id":527,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":549,"sourceUnit":725,"src":"72:64:8","symbolAliases":[],"unitAlias":""},{"body":{"id":547,"nodeType":"Block","src":"966:56:8","statements":[{"expression":{"arguments":[{"arguments":[{"id":542,"name":"_logic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":530,"src":"1004:6:8","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":543,"name":"_data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":532,"src":"1012:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"NewExpression","src":"987:16:8","typeDescriptions":{"typeIdentifier":"t_function_creation_payable$_t_address_$_t_bytes_memory_ptr_$returns$_t_contract$_ERC1967Proxy_$724_$","typeString":"function (address,bytes memory) payable returns (contract ERC1967Proxy)"},"typeName":{"id":540,"nodeType":"UserDefinedTypeName","pathNode":{"id":539,"name":"ERC1967Proxy","nameLocations":["991:12:8"],"nodeType":"IdentifierPath","referencedDeclaration":724,"src":"991:12:8"},"referencedDeclaration":724,"src":"991:12:8","typeDescriptions":{"typeIdentifier":"t_contract$_ERC1967Proxy_$724","typeString":"contract ERC1967Proxy"}}},"id":544,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"987:31:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ERC1967Proxy_$724","typeString":"contract ERC1967Proxy"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ERC1967Proxy_$724","typeString":"contract ERC1967Proxy"}],"id":538,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"979:7:8","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":537,"name":"address","nodeType":"ElementaryTypeName","src":"979:7:8","typeDescriptions":{}}},"id":545,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"979:40:8","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":536,"id":546,"nodeType":"Return","src":"972:47:8"}]},"documentation":{"id":528,"nodeType":"StructuredDocumentation","src":"138:746:8","text":"@notice Free function to create a [ERC-1967](https://eips.ethereum.org/EIPS/eip-1967) proxy contract based on the passed base contract address.\n @param _logic The base contract address.\n @param _data The constructor arguments for this contract.\n @return The address of the proxy contract created.\n @dev Initializes the upgradeable proxy with an initial implementation specified by _logic. If _data is non-empty, it’s used as data in a delegate call to _logic. This will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity constructor (see [OpenZeppelin ERC1967Proxy-constructor](https://docs.openzeppelin.com/contracts/4.x/api/proxy#ERC1967Proxy-constructor-address-bytes-))."},"id":548,"implemented":true,"kind":"freeFunction","modifiers":[],"name":"createERC1967Proxy","nameLocation":"893:18:8","nodeType":"FunctionDefinition","parameters":{"id":533,"nodeType":"ParameterList","parameters":[{"constant":false,"id":530,"mutability":"mutable","name":"_logic","nameLocation":"920:6:8","nodeType":"VariableDeclaration","scope":548,"src":"912:14:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":529,"name":"address","nodeType":"ElementaryTypeName","src":"912:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":532,"mutability":"mutable","name":"_data","nameLocation":"941:5:8","nodeType":"VariableDeclaration","scope":548,"src":"928:18:8","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":531,"name":"bytes","nodeType":"ElementaryTypeName","src":"928:5:8","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"911:36:8"},"returnParameters":{"id":536,"nodeType":"ParameterList","parameters":[{"constant":false,"id":535,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":548,"src":"957:7:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":534,"name":"address","nodeType":"ElementaryTypeName","src":"957:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"956:9:8"},"scope":549,"src":"884:138:8","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"src":"47:976:8"},"id":8},"@openzeppelin/contracts/interfaces/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC165.sol","exportedSymbols":{"IERC165":[3329]},"id":552,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":550,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"91:23:9"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../utils/introspection/IERC165.sol","id":551,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":552,"sourceUnit":3330,"src":"116:44:9","symbolAliases":[],"unitAlias":""}],"src":"91:70:9"},"id":9},"@openzeppelin/contracts/interfaces/IERC1967.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC1967.sol","exportedSymbols":{"IERC1967":[572]},"id":573,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":553,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:10"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1967","contractDependencies":[],"contractKind":"interface","documentation":{"id":554,"nodeType":"StructuredDocumentation","src":"132:133:10","text":" @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n _Available since v4.8.3._"},"fullyImplemented":true,"id":572,"linearizedBaseContracts":[572],"name":"IERC1967","nameLocation":"276:8:10","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":555,"nodeType":"StructuredDocumentation","src":"291:68:10","text":" @dev Emitted when the implementation is upgraded."},"eventSelector":"bc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b","id":559,"name":"Upgraded","nameLocation":"370:8:10","nodeType":"EventDefinition","parameters":{"id":558,"nodeType":"ParameterList","parameters":[{"constant":false,"id":557,"indexed":true,"mutability":"mutable","name":"implementation","nameLocation":"395:14:10","nodeType":"VariableDeclaration","scope":559,"src":"379:30:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":556,"name":"address","nodeType":"ElementaryTypeName","src":"379:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"378:32:10"},"src":"364:47:10"},{"anonymous":false,"documentation":{"id":560,"nodeType":"StructuredDocumentation","src":"417:67:10","text":" @dev Emitted when the admin account has changed."},"eventSelector":"7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f","id":566,"name":"AdminChanged","nameLocation":"495:12:10","nodeType":"EventDefinition","parameters":{"id":565,"nodeType":"ParameterList","parameters":[{"constant":false,"id":562,"indexed":false,"mutability":"mutable","name":"previousAdmin","nameLocation":"516:13:10","nodeType":"VariableDeclaration","scope":566,"src":"508:21:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":561,"name":"address","nodeType":"ElementaryTypeName","src":"508:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":564,"indexed":false,"mutability":"mutable","name":"newAdmin","nameLocation":"539:8:10","nodeType":"VariableDeclaration","scope":566,"src":"531:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":563,"name":"address","nodeType":"ElementaryTypeName","src":"531:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"507:41:10"},"src":"489:60:10"},{"anonymous":false,"documentation":{"id":567,"nodeType":"StructuredDocumentation","src":"555:59:10","text":" @dev Emitted when the beacon is changed."},"eventSelector":"1cf3b03a6cf19fa2baba4df148e9dcabedea7f8a5c07840e207e5c089be95d3e","id":571,"name":"BeaconUpgraded","nameLocation":"625:14:10","nodeType":"EventDefinition","parameters":{"id":570,"nodeType":"ParameterList","parameters":[{"constant":false,"id":569,"indexed":true,"mutability":"mutable","name":"beacon","nameLocation":"656:6:10","nodeType":"VariableDeclaration","scope":571,"src":"640:22:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":568,"name":"address","nodeType":"ElementaryTypeName","src":"640:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"639:24:10"},"src":"619:45:10"}],"scope":573,"src":"266:400:10","usedErrors":[]}],"src":"107:560:10"},"id":10},"@openzeppelin/contracts/interfaces/IERC4906.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC4906.sol","exportedSymbols":{"IERC165":[3329],"IERC4906":[594],"IERC721":[2133]},"id":595,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":574,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:11"},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC165.sol","file":"./IERC165.sol","id":575,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":595,"sourceUnit":552,"src":"132:23:11","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC721.sol","file":"./IERC721.sol","id":576,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":595,"sourceUnit":598,"src":"156:23:11","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":578,"name":"IERC165","nameLocations":["248:7:11"],"nodeType":"IdentifierPath","referencedDeclaration":3329,"src":"248:7:11"},"id":579,"nodeType":"InheritanceSpecifier","src":"248:7:11"},{"baseName":{"id":580,"name":"IERC721","nameLocations":["257:7:11"],"nodeType":"IdentifierPath","referencedDeclaration":2133,"src":"257:7:11"},"id":581,"nodeType":"InheritanceSpecifier","src":"257:7:11"}],"canonicalName":"IERC4906","contractDependencies":[],"contractKind":"interface","documentation":{"id":577,"nodeType":"StructuredDocumentation","src":"181:45:11","text":"@title EIP-721 Metadata Update Extension"},"fullyImplemented":false,"id":594,"linearizedBaseContracts":[594,2133,3329],"name":"IERC4906","nameLocation":"236:8:11","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":582,"nodeType":"StructuredDocumentation","src":"271:201:11","text":"@dev This event emits when the metadata of a token is changed.\n So that the third-party platforms such as NFT market could\n timely update the images and related attributes of the NFT."},"eventSelector":"f8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce7","id":586,"name":"MetadataUpdate","nameLocation":"483:14:11","nodeType":"EventDefinition","parameters":{"id":585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":584,"indexed":false,"mutability":"mutable","name":"_tokenId","nameLocation":"506:8:11","nodeType":"VariableDeclaration","scope":586,"src":"498:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":583,"name":"uint256","nodeType":"ElementaryTypeName","src":"498:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"497:18:11"},"src":"477:39:11"},{"anonymous":false,"documentation":{"id":587,"nodeType":"StructuredDocumentation","src":"522:212:11","text":"@dev This event emits when the metadata of a range of tokens is changed.\n So that the third-party platforms such as NFT market could\n timely update the images and related attributes of the NFTs."},"eventSelector":"6bd5c950a8d8df17f772f5af37cb3655737899cbf903264b9795592da439661c","id":593,"name":"BatchMetadataUpdate","nameLocation":"745:19:11","nodeType":"EventDefinition","parameters":{"id":592,"nodeType":"ParameterList","parameters":[{"constant":false,"id":589,"indexed":false,"mutability":"mutable","name":"_fromTokenId","nameLocation":"773:12:11","nodeType":"VariableDeclaration","scope":593,"src":"765:20:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":588,"name":"uint256","nodeType":"ElementaryTypeName","src":"765:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":591,"indexed":false,"mutability":"mutable","name":"_toTokenId","nameLocation":"795:10:11","nodeType":"VariableDeclaration","scope":593,"src":"787:18:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":590,"name":"uint256","nodeType":"ElementaryTypeName","src":"787:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"764:42:11"},"src":"739:68:11"}],"scope":595,"src":"226:583:11","usedErrors":[]}],"src":"107:703:11"},"id":11},"@openzeppelin/contracts/interfaces/IERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC721.sol","exportedSymbols":{"IERC165":[3329],"IERC721":[2133]},"id":598,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":596,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"91:23:12"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"../token/ERC721/IERC721.sol","id":597,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":598,"sourceUnit":2134,"src":"116:37:12","symbolAliases":[],"unitAlias":""}],"src":"91:63:12"},"id":12},"@openzeppelin/contracts/interfaces/draft-IERC1822.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/draft-IERC1822.sol","exportedSymbols":{"IERC1822Proxiable":[607]},"id":608,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":599,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"113:23:13"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC1822Proxiable","contractDependencies":[],"contractKind":"interface","documentation":{"id":600,"nodeType":"StructuredDocumentation","src":"138:203:13","text":" @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n proxy whose upgrades are fully controlled by the current implementation."},"fullyImplemented":false,"id":607,"linearizedBaseContracts":[607],"name":"IERC1822Proxiable","nameLocation":"352:17:13","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":601,"nodeType":"StructuredDocumentation","src":"376:438:13","text":" @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n address.\n IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n function revert if invoked through a proxy."},"functionSelector":"52d1902d","id":606,"implemented":false,"kind":"function","modifiers":[],"name":"proxiableUUID","nameLocation":"828:13:13","nodeType":"FunctionDefinition","parameters":{"id":602,"nodeType":"ParameterList","parameters":[],"src":"841:2:13"},"returnParameters":{"id":605,"nodeType":"ParameterList","parameters":[{"constant":false,"id":604,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":606,"src":"867:7:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":603,"name":"bytes32","nodeType":"ElementaryTypeName","src":"867:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"866:9:13"},"scope":607,"src":"819:57:13","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":608,"src":"342:536:13","usedErrors":[]}],"src":"113:766:13"},"id":13},"@openzeppelin/contracts/proxy/Clones.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/proxy/Clones.sol","exportedSymbols":{"Clones":[687]},"id":688,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":609,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:14"},{"abstract":false,"baseContracts":[],"canonicalName":"Clones","contractDependencies":[],"contractKind":"library","documentation":{"id":610,"nodeType":"StructuredDocumentation","src":"125:629:14","text":" @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n deploying minimal proxy contracts, also known as \"clones\".\n > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n deterministic method.\n _Available since v3.4._"},"fullyImplemented":true,"id":687,"linearizedBaseContracts":[687],"name":"Clones","nameLocation":"763:6:14","nodeType":"ContractDefinition","nodes":[{"body":{"id":629,"nodeType":"Block","src":"1048:684:14","statements":[{"AST":{"nodeType":"YulBlock","src":"1110:549:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1315:4:14","type":"","value":"0x00"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1328:4:14","type":"","value":"0xe8"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1338:4:14","type":"","value":"0x60"},{"name":"implementation","nodeType":"YulIdentifier","src":"1344:14:14"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1334:3:14"},"nodeType":"YulFunctionCall","src":"1334:25:14"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"1324:3:14"},"nodeType":"YulFunctionCall","src":"1324:36:14"},{"kind":"number","nodeType":"YulLiteral","src":"1362:48:14","type":"","value":"0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1321:2:14"},"nodeType":"YulFunctionCall","src":"1321:90:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1308:6:14"},"nodeType":"YulFunctionCall","src":"1308:104:14"},"nodeType":"YulExpressionStatement","src":"1308:104:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1533:4:14","type":"","value":"0x20"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1546:4:14","type":"","value":"0x78"},{"name":"implementation","nodeType":"YulIdentifier","src":"1552:14:14"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1542:3:14"},"nodeType":"YulFunctionCall","src":"1542:25:14"},{"kind":"number","nodeType":"YulLiteral","src":"1569:32:14","type":"","value":"0x5af43d82803e903d91602b57fd5bf3"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1539:2:14"},"nodeType":"YulFunctionCall","src":"1539:63:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1526:6:14"},"nodeType":"YulFunctionCall","src":"1526:77:14"},"nodeType":"YulExpressionStatement","src":"1526:77:14"},{"nodeType":"YulAssignment","src":"1616:33:14","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1635:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1638:4:14","type":"","value":"0x09"},{"kind":"number","nodeType":"YulLiteral","src":"1644:4:14","type":"","value":"0x37"}],"functionName":{"name":"create","nodeType":"YulIdentifier","src":"1628:6:14"},"nodeType":"YulFunctionCall","src":"1628:21:14"},"variableNames":[{"name":"instance","nodeType":"YulIdentifier","src":"1616:8:14"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":613,"isOffset":false,"isSlot":false,"src":"1344:14:14","valueSize":1},{"declaration":613,"isOffset":false,"isSlot":false,"src":"1552:14:14","valueSize":1},{"declaration":616,"isOffset":false,"isSlot":false,"src":"1616:8:14","valueSize":1}],"id":618,"nodeType":"InlineAssembly","src":"1101:558:14"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":625,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":620,"name":"instance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":616,"src":"1676:8:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":623,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1696:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":622,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1688:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":621,"name":"address","nodeType":"ElementaryTypeName","src":"1688:7:14","typeDescriptions":{}}},"id":624,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1688:10:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1676:22:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313136373a20637265617465206661696c6564","id":626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1700:24:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_68ca40b61460257f14e69f48b1a4dbc812e9afc6932f127ef8084544457b3335","typeString":"literal_string \"ERC1167: create failed\""},"value":"ERC1167: create failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_68ca40b61460257f14e69f48b1a4dbc812e9afc6932f127ef8084544457b3335","typeString":"literal_string \"ERC1167: create failed\""}],"id":619,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1668:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":627,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1668:57:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":628,"nodeType":"ExpressionStatement","src":"1668:57:14"}]},"documentation":{"id":611,"nodeType":"StructuredDocumentation","src":"776:192:14","text":" @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n This function uses the create opcode, which should never revert."},"id":630,"implemented":true,"kind":"function","modifiers":[],"name":"clone","nameLocation":"982:5:14","nodeType":"FunctionDefinition","parameters":{"id":614,"nodeType":"ParameterList","parameters":[{"constant":false,"id":613,"mutability":"mutable","name":"implementation","nameLocation":"996:14:14","nodeType":"VariableDeclaration","scope":630,"src":"988:22:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":612,"name":"address","nodeType":"ElementaryTypeName","src":"988:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"987:24:14"},"returnParameters":{"id":617,"nodeType":"ParameterList","parameters":[{"constant":false,"id":616,"mutability":"mutable","name":"instance","nameLocation":"1038:8:14","nodeType":"VariableDeclaration","scope":630,"src":"1030:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":615,"name":"address","nodeType":"ElementaryTypeName","src":"1030:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1029:18:14"},"scope":687,"src":"973:759:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":651,"nodeType":"Block","src":"2209:692:14","statements":[{"AST":{"nodeType":"YulBlock","src":"2271:556:14","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2476:4:14","type":"","value":"0x00"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2489:4:14","type":"","value":"0xe8"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2499:4:14","type":"","value":"0x60"},{"name":"implementation","nodeType":"YulIdentifier","src":"2505:14:14"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2495:3:14"},"nodeType":"YulFunctionCall","src":"2495:25:14"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"2485:3:14"},"nodeType":"YulFunctionCall","src":"2485:36:14"},{"kind":"number","nodeType":"YulLiteral","src":"2523:48:14","type":"","value":"0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2482:2:14"},"nodeType":"YulFunctionCall","src":"2482:90:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2469:6:14"},"nodeType":"YulFunctionCall","src":"2469:104:14"},"nodeType":"YulExpressionStatement","src":"2469:104:14"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2694:4:14","type":"","value":"0x20"},{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2707:4:14","type":"","value":"0x78"},{"name":"implementation","nodeType":"YulIdentifier","src":"2713:14:14"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"2703:3:14"},"nodeType":"YulFunctionCall","src":"2703:25:14"},{"kind":"number","nodeType":"YulLiteral","src":"2730:32:14","type":"","value":"0x5af43d82803e903d91602b57fd5bf3"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"2700:2:14"},"nodeType":"YulFunctionCall","src":"2700:63:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2687:6:14"},"nodeType":"YulFunctionCall","src":"2687:77:14"},"nodeType":"YulExpressionStatement","src":"2687:77:14"},{"nodeType":"YulAssignment","src":"2777:40:14","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2797:1:14","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2800:4:14","type":"","value":"0x09"},{"kind":"number","nodeType":"YulLiteral","src":"2806:4:14","type":"","value":"0x37"},{"name":"salt","nodeType":"YulIdentifier","src":"2812:4:14"}],"functionName":{"name":"create2","nodeType":"YulIdentifier","src":"2789:7:14"},"nodeType":"YulFunctionCall","src":"2789:28:14"},"variableNames":[{"name":"instance","nodeType":"YulIdentifier","src":"2777:8:14"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":633,"isOffset":false,"isSlot":false,"src":"2505:14:14","valueSize":1},{"declaration":633,"isOffset":false,"isSlot":false,"src":"2713:14:14","valueSize":1},{"declaration":638,"isOffset":false,"isSlot":false,"src":"2777:8:14","valueSize":1},{"declaration":635,"isOffset":false,"isSlot":false,"src":"2812:4:14","valueSize":1}],"id":640,"nodeType":"InlineAssembly","src":"2262:565:14"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":642,"name":"instance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":638,"src":"2844:8:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":645,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2864:1:14","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":644,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2856:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":643,"name":"address","nodeType":"ElementaryTypeName","src":"2856:7:14","typeDescriptions":{}}},"id":646,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2856:10:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2844:22:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313136373a2063726561746532206661696c6564","id":648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2868:25:14","typeDescriptions":{"typeIdentifier":"t_stringliteral_4ec050e530ce66e7658278ab7a4e4a2f19225159c48fc52eb249bd268e755d73","typeString":"literal_string \"ERC1167: create2 failed\""},"value":"ERC1167: create2 failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_4ec050e530ce66e7658278ab7a4e4a2f19225159c48fc52eb249bd268e755d73","typeString":"literal_string \"ERC1167: create2 failed\""}],"id":641,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2836:7:14","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":649,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2836:58:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":650,"nodeType":"ExpressionStatement","src":"2836:58:14"}]},"documentation":{"id":631,"nodeType":"StructuredDocumentation","src":"1738:364:14","text":" @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\n This function uses the create2 opcode and a `salt` to deterministically deploy\n the clone. Using the same `implementation` and `salt` multiple time will revert, since\n the clones cannot be deployed twice at the same address."},"id":652,"implemented":true,"kind":"function","modifiers":[],"name":"cloneDeterministic","nameLocation":"2116:18:14","nodeType":"FunctionDefinition","parameters":{"id":636,"nodeType":"ParameterList","parameters":[{"constant":false,"id":633,"mutability":"mutable","name":"implementation","nameLocation":"2143:14:14","nodeType":"VariableDeclaration","scope":652,"src":"2135:22:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":632,"name":"address","nodeType":"ElementaryTypeName","src":"2135:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":635,"mutability":"mutable","name":"salt","nameLocation":"2167:4:14","nodeType":"VariableDeclaration","scope":652,"src":"2159:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":634,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2159:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2134:38:14"},"returnParameters":{"id":639,"nodeType":"ParameterList","parameters":[{"constant":false,"id":638,"mutability":"mutable","name":"instance","nameLocation":"2199:8:14","nodeType":"VariableDeclaration","scope":652,"src":"2191:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":637,"name":"address","nodeType":"ElementaryTypeName","src":"2191:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2190:18:14"},"scope":687,"src":"2107:794:14","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":665,"nodeType":"Block","src":"3176:515:14","statements":[{"AST":{"nodeType":"YulBlock","src":"3238:447:14","statements":[{"nodeType":"YulVariableDeclaration","src":"3252:22:14","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3269:4:14","type":"","value":"0x40"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3263:5:14"},"nodeType":"YulFunctionCall","src":"3263:11:14"},"variables":[{"name":"ptr","nodeType":"YulTypedName","src":"3256:3:14","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"3298:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"3303:4:14","type":"","value":"0x38"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3294:3:14"},"nodeType":"YulFunctionCall","src":"3294:14:14"},{"name":"deployer","nodeType":"YulIdentifier","src":"3310:8:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3287:6:14"},"nodeType":"YulFunctionCall","src":"3287:32:14"},"nodeType":"YulExpressionStatement","src":"3287:32:14"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"3343:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"3348:4:14","type":"","value":"0x24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3339:3:14"},"nodeType":"YulFunctionCall","src":"3339:14:14"},{"kind":"number","nodeType":"YulLiteral","src":"3355:34:14","type":"","value":"0x5af43d82803e903d91602b57fd5bf3ff"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3332:6:14"},"nodeType":"YulFunctionCall","src":"3332:58:14"},"nodeType":"YulExpressionStatement","src":"3332:58:14"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"3414:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"3419:4:14","type":"","value":"0x14"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3410:3:14"},"nodeType":"YulFunctionCall","src":"3410:14:14"},{"name":"implementation","nodeType":"YulIdentifier","src":"3426:14:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3403:6:14"},"nodeType":"YulFunctionCall","src":"3403:38:14"},"nodeType":"YulExpressionStatement","src":"3403:38:14"},{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"3461:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"3466:42:14","type":"","value":"0x3d602d80600a3d3981f3363d3d373d3d3d363d73"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3454:6:14"},"nodeType":"YulFunctionCall","src":"3454:55:14"},"nodeType":"YulExpressionStatement","src":"3454:55:14"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"3533:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"3538:4:14","type":"","value":"0x58"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3529:3:14"},"nodeType":"YulFunctionCall","src":"3529:14:14"},{"name":"salt","nodeType":"YulIdentifier","src":"3545:4:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3522:6:14"},"nodeType":"YulFunctionCall","src":"3522:28:14"},"nodeType":"YulExpressionStatement","src":"3522:28:14"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"3574:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"3579:4:14","type":"","value":"0x78"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3570:3:14"},"nodeType":"YulFunctionCall","src":"3570:14:14"},{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"3600:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"3605:4:14","type":"","value":"0x0c"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3596:3:14"},"nodeType":"YulFunctionCall","src":"3596:14:14"},{"kind":"number","nodeType":"YulLiteral","src":"3612:4:14","type":"","value":"0x37"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"3586:9:14"},"nodeType":"YulFunctionCall","src":"3586:31:14"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3563:6:14"},"nodeType":"YulFunctionCall","src":"3563:55:14"},"nodeType":"YulExpressionStatement","src":"3563:55:14"},{"nodeType":"YulAssignment","src":"3631:44:14","value":{"arguments":[{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"3658:3:14"},{"kind":"number","nodeType":"YulLiteral","src":"3663:4:14","type":"","value":"0x43"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3654:3:14"},"nodeType":"YulFunctionCall","src":"3654:14:14"},{"kind":"number","nodeType":"YulLiteral","src":"3670:4:14","type":"","value":"0x55"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"3644:9:14"},"nodeType":"YulFunctionCall","src":"3644:31:14"},"variableNames":[{"name":"predicted","nodeType":"YulIdentifier","src":"3631:9:14"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":659,"isOffset":false,"isSlot":false,"src":"3310:8:14","valueSize":1},{"declaration":655,"isOffset":false,"isSlot":false,"src":"3426:14:14","valueSize":1},{"declaration":662,"isOffset":false,"isSlot":false,"src":"3631:9:14","valueSize":1},{"declaration":657,"isOffset":false,"isSlot":false,"src":"3545:4:14","valueSize":1}],"id":664,"nodeType":"InlineAssembly","src":"3229:456:14"}]},"documentation":{"id":653,"nodeType":"StructuredDocumentation","src":"2907:99:14","text":" @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}."},"id":666,"implemented":true,"kind":"function","modifiers":[],"name":"predictDeterministicAddress","nameLocation":"3020:27:14","nodeType":"FunctionDefinition","parameters":{"id":660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":655,"mutability":"mutable","name":"implementation","nameLocation":"3065:14:14","nodeType":"VariableDeclaration","scope":666,"src":"3057:22:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":654,"name":"address","nodeType":"ElementaryTypeName","src":"3057:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":657,"mutability":"mutable","name":"salt","nameLocation":"3097:4:14","nodeType":"VariableDeclaration","scope":666,"src":"3089:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":656,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3089:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":659,"mutability":"mutable","name":"deployer","nameLocation":"3119:8:14","nodeType":"VariableDeclaration","scope":666,"src":"3111:16:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":658,"name":"address","nodeType":"ElementaryTypeName","src":"3111:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3047:86:14"},"returnParameters":{"id":663,"nodeType":"ParameterList","parameters":[{"constant":false,"id":662,"mutability":"mutable","name":"predicted","nameLocation":"3165:9:14","nodeType":"VariableDeclaration","scope":666,"src":"3157:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":661,"name":"address","nodeType":"ElementaryTypeName","src":"3157:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3156:19:14"},"scope":687,"src":"3011:680:14","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":685,"nodeType":"Block","src":"3940:88:14","statements":[{"expression":{"arguments":[{"id":677,"name":"implementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":669,"src":"3985:14:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":678,"name":"salt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":671,"src":"4001:4:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"id":681,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4015:4:14","typeDescriptions":{"typeIdentifier":"t_contract$_Clones_$687","typeString":"library Clones"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Clones_$687","typeString":"library Clones"}],"id":680,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4007:7:14","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":679,"name":"address","nodeType":"ElementaryTypeName","src":"4007:7:14","typeDescriptions":{}}},"id":682,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4007:13:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":676,"name":"predictDeterministicAddress","nodeType":"Identifier","overloadedDeclarations":[666,686],"referencedDeclaration":666,"src":"3957:27:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_address_$_t_bytes32_$_t_address_$returns$_t_address_$","typeString":"function (address,bytes32,address) pure returns (address)"}},"id":683,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3957:64:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":675,"id":684,"nodeType":"Return","src":"3950:71:14"}]},"documentation":{"id":667,"nodeType":"StructuredDocumentation","src":"3697:99:14","text":" @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}."},"id":686,"implemented":true,"kind":"function","modifiers":[],"name":"predictDeterministicAddress","nameLocation":"3810:27:14","nodeType":"FunctionDefinition","parameters":{"id":672,"nodeType":"ParameterList","parameters":[{"constant":false,"id":669,"mutability":"mutable","name":"implementation","nameLocation":"3855:14:14","nodeType":"VariableDeclaration","scope":686,"src":"3847:22:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":668,"name":"address","nodeType":"ElementaryTypeName","src":"3847:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":671,"mutability":"mutable","name":"salt","nameLocation":"3887:4:14","nodeType":"VariableDeclaration","scope":686,"src":"3879:12:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":670,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3879:7:14","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3837:60:14"},"returnParameters":{"id":675,"nodeType":"ParameterList","parameters":[{"constant":false,"id":674,"mutability":"mutable","name":"predicted","nameLocation":"3929:9:14","nodeType":"VariableDeclaration","scope":686,"src":"3921:17:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":673,"name":"address","nodeType":"ElementaryTypeName","src":"3921:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3920:19:14"},"scope":687,"src":"3801:227:14","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":688,"src":"755:3275:14","usedErrors":[]}],"src":"100:3931:14"},"id":14},"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol","exportedSymbols":{"Address":[2664],"ERC1967Proxy":[724],"ERC1967Upgrade":[1028],"IBeacon":[1090],"IERC1822Proxiable":[607],"IERC1967":[572],"Proxy":[1080],"StorageSlot":[2870]},"id":725,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":689,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"114:23:15"},{"absolutePath":"@openzeppelin/contracts/proxy/Proxy.sol","file":"../Proxy.sol","id":690,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":725,"sourceUnit":1081,"src":"139:22:15","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol","file":"./ERC1967Upgrade.sol","id":691,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":725,"sourceUnit":1029,"src":"162:30:15","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":693,"name":"Proxy","nameLocations":["592:5:15"],"nodeType":"IdentifierPath","referencedDeclaration":1080,"src":"592:5:15"},"id":694,"nodeType":"InheritanceSpecifier","src":"592:5:15"},{"baseName":{"id":695,"name":"ERC1967Upgrade","nameLocations":["599:14:15"],"nodeType":"IdentifierPath","referencedDeclaration":1028,"src":"599:14:15"},"id":696,"nodeType":"InheritanceSpecifier","src":"599:14:15"}],"canonicalName":"ERC1967Proxy","contractDependencies":[],"contractKind":"contract","documentation":{"id":692,"nodeType":"StructuredDocumentation","src":"194:372:15","text":" @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n implementation address that can be changed. This address is stored in storage in the location specified by\n https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n implementation behind the proxy."},"fullyImplemented":true,"id":724,"linearizedBaseContracts":[724,1028,572,1080],"name":"ERC1967Proxy","nameLocation":"576:12:15","nodeType":"ContractDefinition","nodes":[{"body":{"id":710,"nodeType":"Block","src":"1014:56:15","statements":[{"expression":{"arguments":[{"id":705,"name":"_logic","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":699,"src":"1042:6:15","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":706,"name":"_data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"1050:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"66616c7365","id":707,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1057:5:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":704,"name":"_upgradeToAndCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":823,"src":"1024:17:15","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":708,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1024:39:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":709,"nodeType":"ExpressionStatement","src":"1024:39:15"}]},"documentation":{"id":697,"nodeType":"StructuredDocumentation","src":"620:333:15","text":" @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n function call, and allows initializing the storage of the proxy like a Solidity constructor."},"id":711,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":702,"nodeType":"ParameterList","parameters":[{"constant":false,"id":699,"mutability":"mutable","name":"_logic","nameLocation":"978:6:15","nodeType":"VariableDeclaration","scope":711,"src":"970:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":698,"name":"address","nodeType":"ElementaryTypeName","src":"970:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":701,"mutability":"mutable","name":"_data","nameLocation":"999:5:15","nodeType":"VariableDeclaration","scope":711,"src":"986:18:15","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":700,"name":"bytes","nodeType":"ElementaryTypeName","src":"986:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"969:36:15"},"returnParameters":{"id":703,"nodeType":"ParameterList","parameters":[],"src":"1014:0:15"},"scope":724,"src":"958:112:15","stateMutability":"payable","virtual":false,"visibility":"public"},{"baseFunctions":[1045],"body":{"id":722,"nodeType":"Block","src":"1229:59:15","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":718,"name":"ERC1967Upgrade","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1028,"src":"1246:14:15","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC1967Upgrade_$1028_$","typeString":"type(contract ERC1967Upgrade)"}},"id":719,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1261:18:15","memberName":"_getImplementation","nodeType":"MemberAccess","referencedDeclaration":754,"src":"1246:33:15","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":720,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1246:35:15","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":717,"id":721,"nodeType":"Return","src":"1239:42:15"}]},"documentation":{"id":712,"nodeType":"StructuredDocumentation","src":"1076:67:15","text":" @dev Returns the current implementation address."},"id":723,"implemented":true,"kind":"function","modifiers":[],"name":"_implementation","nameLocation":"1157:15:15","nodeType":"FunctionDefinition","overrides":{"id":714,"nodeType":"OverrideSpecifier","overrides":[],"src":"1197:8:15"},"parameters":{"id":713,"nodeType":"ParameterList","parameters":[],"src":"1172:2:15"},"returnParameters":{"id":717,"nodeType":"ParameterList","parameters":[{"constant":false,"id":716,"mutability":"mutable","name":"impl","nameLocation":"1223:4:15","nodeType":"VariableDeclaration","scope":723,"src":"1215:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":715,"name":"address","nodeType":"ElementaryTypeName","src":"1215:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1214:14:15"},"scope":724,"src":"1148:140:15","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":725,"src":"567:723:15","usedErrors":[]}],"src":"114:1177:15"},"id":15},"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol","exportedSymbols":{"Address":[2664],"ERC1967Upgrade":[1028],"IBeacon":[1090],"IERC1822Proxiable":[607],"IERC1967":[572],"StorageSlot":[2870]},"id":1029,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":726,"literals":["solidity","^","0.8",".2"],"nodeType":"PragmaDirective","src":"116:23:16"},{"absolutePath":"@openzeppelin/contracts/proxy/beacon/IBeacon.sol","file":"../beacon/IBeacon.sol","id":727,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1029,"sourceUnit":1091,"src":"141:31:16","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC1967.sol","file":"../../interfaces/IERC1967.sol","id":728,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1029,"sourceUnit":573,"src":"173:39:16","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/draft-IERC1822.sol","file":"../../interfaces/draft-IERC1822.sol","id":729,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1029,"sourceUnit":608,"src":"213:45:16","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../utils/Address.sol","id":730,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1029,"sourceUnit":2665,"src":"259:33:16","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","file":"../../utils/StorageSlot.sol","id":731,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1029,"sourceUnit":2871,"src":"293:37:16","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":733,"name":"IERC1967","nameLocations":["553:8:16"],"nodeType":"IdentifierPath","referencedDeclaration":572,"src":"553:8:16"},"id":734,"nodeType":"InheritanceSpecifier","src":"553:8:16"}],"canonicalName":"ERC1967Upgrade","contractDependencies":[],"contractKind":"contract","documentation":{"id":732,"nodeType":"StructuredDocumentation","src":"332:184:16","text":" @dev This abstract contract provides getters and event emitting update functions for\n https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n _Available since v4.1._"},"fullyImplemented":true,"id":1028,"linearizedBaseContracts":[1028,572],"name":"ERC1967Upgrade","nameLocation":"535:14:16","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":737,"mutability":"constant","name":"_ROLLBACK_SLOT","nameLocation":"672:14:16","nodeType":"VariableDeclaration","scope":1028,"src":"647:108:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":735,"name":"bytes32","nodeType":"ElementaryTypeName","src":"647:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307834393130666466613136666564333236306564306537313437663763633664613131613630323038623562393430366431326136333536313466666439313433","id":736,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"689:66:16","typeDescriptions":{"typeIdentifier":"t_rational_33048860383849004559742813297059419343339852917517107368639918720169455489347_by_1","typeString":"int_const 3304...(69 digits omitted)...9347"},"value":"0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143"},"visibility":"private"},{"constant":true,"documentation":{"id":738,"nodeType":"StructuredDocumentation","src":"762:214:16","text":" @dev Storage slot with the address of the current implementation.\n This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n validated in the constructor."},"id":741,"mutability":"constant","name":"_IMPLEMENTATION_SLOT","nameLocation":"1007:20:16","nodeType":"VariableDeclaration","scope":1028,"src":"981:115:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":739,"name":"bytes32","nodeType":"ElementaryTypeName","src":"981:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307833363038393461313362613161333231303636376338323834393264623938646361336532303736636333373335613932306133636135303564333832626263","id":740,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1030:66:16","typeDescriptions":{"typeIdentifier":"t_rational_24440054405305269366569402256811496959409073762505157381672968839269610695612_by_1","typeString":"int_const 2444...(69 digits omitted)...5612"},"value":"0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc"},"visibility":"internal"},{"body":{"id":753,"nodeType":"Block","src":"1237:78:16","statements":[{"expression":{"expression":{"arguments":[{"id":749,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":741,"src":"1281:20:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":747,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2870,"src":"1254:11:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$2870_$","typeString":"type(library StorageSlot)"}},"id":748,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1266:14:16","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2792,"src":"1254:26:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2766_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"}},"id":750,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1254:48:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2766_storage_ptr","typeString":"struct StorageSlot.AddressSlot storage pointer"}},"id":751,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1303:5:16","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2765,"src":"1254:54:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":746,"id":752,"nodeType":"Return","src":"1247:61:16"}]},"documentation":{"id":742,"nodeType":"StructuredDocumentation","src":"1103:67:16","text":" @dev Returns the current implementation address."},"id":754,"implemented":true,"kind":"function","modifiers":[],"name":"_getImplementation","nameLocation":"1184:18:16","nodeType":"FunctionDefinition","parameters":{"id":743,"nodeType":"ParameterList","parameters":[],"src":"1202:2:16"},"returnParameters":{"id":746,"nodeType":"ParameterList","parameters":[{"constant":false,"id":745,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":754,"src":"1228:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":744,"name":"address","nodeType":"ElementaryTypeName","src":"1228:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1227:9:16"},"scope":1028,"src":"1175:140:16","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":777,"nodeType":"Block","src":"1469:196:16","statements":[{"expression":{"arguments":[{"arguments":[{"id":763,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":757,"src":"1506:17:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":761,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2664,"src":"1487:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$2664_$","typeString":"type(library Address)"}},"id":762,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1495:10:16","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2352,"src":"1487:18:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":764,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1487:37:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e657720696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374","id":765,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1526:47:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65","typeString":"literal_string \"ERC1967: new implementation is not a contract\""},"value":"ERC1967: new implementation is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65","typeString":"literal_string \"ERC1967: new implementation is not a contract\""}],"id":760,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1479:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":766,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1479:95:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":767,"nodeType":"ExpressionStatement","src":"1479:95:16"},{"expression":{"id":775,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":771,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":741,"src":"1611:20:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":768,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2870,"src":"1584:11:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$2870_$","typeString":"type(library StorageSlot)"}},"id":770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1596:14:16","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2792,"src":"1584:26:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2766_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"}},"id":772,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1584:48:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2766_storage_ptr","typeString":"struct StorageSlot.AddressSlot storage pointer"}},"id":773,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1633:5:16","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2765,"src":"1584:54:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":774,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":757,"src":"1641:17:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1584:74:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":776,"nodeType":"ExpressionStatement","src":"1584:74:16"}]},"documentation":{"id":755,"nodeType":"StructuredDocumentation","src":"1321:80:16","text":" @dev Stores a new address in the EIP1967 implementation slot."},"id":778,"implemented":true,"kind":"function","modifiers":[],"name":"_setImplementation","nameLocation":"1415:18:16","nodeType":"FunctionDefinition","parameters":{"id":758,"nodeType":"ParameterList","parameters":[{"constant":false,"id":757,"mutability":"mutable","name":"newImplementation","nameLocation":"1442:17:16","nodeType":"VariableDeclaration","scope":778,"src":"1434:25:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":756,"name":"address","nodeType":"ElementaryTypeName","src":"1434:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1433:27:16"},"returnParameters":{"id":759,"nodeType":"ParameterList","parameters":[],"src":"1469:0:16"},"scope":1028,"src":"1406:259:16","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":792,"nodeType":"Block","src":"1827:96:16","statements":[{"expression":{"arguments":[{"id":785,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":781,"src":"1856:17:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":784,"name":"_setImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":778,"src":"1837:18:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":786,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1837:37:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":787,"nodeType":"ExpressionStatement","src":"1837:37:16"},{"eventCall":{"arguments":[{"id":789,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":781,"src":"1898:17:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":788,"name":"Upgraded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":559,"src":"1889:8:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":790,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1889:27:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":791,"nodeType":"EmitStatement","src":"1884:32:16"}]},"documentation":{"id":779,"nodeType":"StructuredDocumentation","src":"1671:95:16","text":" @dev Perform implementation upgrade\n Emits an {Upgraded} event."},"id":793,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeTo","nameLocation":"1780:10:16","nodeType":"FunctionDefinition","parameters":{"id":782,"nodeType":"ParameterList","parameters":[{"constant":false,"id":781,"mutability":"mutable","name":"newImplementation","nameLocation":"1799:17:16","nodeType":"VariableDeclaration","scope":793,"src":"1791:25:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":780,"name":"address","nodeType":"ElementaryTypeName","src":"1791:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1790:27:16"},"returnParameters":{"id":783,"nodeType":"ParameterList","parameters":[],"src":"1827:0:16"},"scope":1028,"src":"1771:152:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":822,"nodeType":"Block","src":"2155:167:16","statements":[{"expression":{"arguments":[{"id":804,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":796,"src":"2176:17:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":803,"name":"_upgradeTo","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":793,"src":"2165:10:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":805,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2165:29:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":806,"nodeType":"ExpressionStatement","src":"2165:29:16"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":810,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":807,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":798,"src":"2208:4:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2213:6:16","memberName":"length","nodeType":"MemberAccess","src":"2208:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":809,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2222:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2208:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":811,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":800,"src":"2227:9:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2208:28:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":821,"nodeType":"IfStatement","src":"2204:112:16","trueBody":{"id":820,"nodeType":"Block","src":"2238:78:16","statements":[{"expression":{"arguments":[{"id":816,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":796,"src":"2281:17:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":817,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":798,"src":"2300:4:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":813,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2664,"src":"2252:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$2664_$","typeString":"type(library Address)"}},"id":815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2260:20:16","memberName":"functionDelegateCall","nodeType":"MemberAccess","referencedDeclaration":2551,"src":"2252:28:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":818,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2252:53:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":819,"nodeType":"ExpressionStatement","src":"2252:53:16"}]}}]},"documentation":{"id":794,"nodeType":"StructuredDocumentation","src":"1929:123:16","text":" @dev Perform implementation upgrade with additional setup call.\n Emits an {Upgraded} event."},"id":823,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeToAndCall","nameLocation":"2066:17:16","nodeType":"FunctionDefinition","parameters":{"id":801,"nodeType":"ParameterList","parameters":[{"constant":false,"id":796,"mutability":"mutable","name":"newImplementation","nameLocation":"2092:17:16","nodeType":"VariableDeclaration","scope":823,"src":"2084:25:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":795,"name":"address","nodeType":"ElementaryTypeName","src":"2084:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":798,"mutability":"mutable","name":"data","nameLocation":"2124:4:16","nodeType":"VariableDeclaration","scope":823,"src":"2111:17:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":797,"name":"bytes","nodeType":"ElementaryTypeName","src":"2111:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":800,"mutability":"mutable","name":"forceCall","nameLocation":"2135:9:16","nodeType":"VariableDeclaration","scope":823,"src":"2130:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":799,"name":"bool","nodeType":"ElementaryTypeName","src":"2130:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2083:62:16"},"returnParameters":{"id":802,"nodeType":"ParameterList","parameters":[],"src":"2155:0:16"},"scope":1028,"src":"2057:265:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":875,"nodeType":"Block","src":"2596:820:16","statements":[{"condition":{"expression":{"arguments":[{"id":835,"name":"_ROLLBACK_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":737,"src":"2937:14:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":833,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2870,"src":"2910:11:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$2870_$","typeString":"type(library StorageSlot)"}},"id":834,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2922:14:16","memberName":"getBooleanSlot","nodeType":"MemberAccess","referencedDeclaration":2803,"src":"2910:26:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_BooleanSlot_$2769_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.BooleanSlot storage pointer)"}},"id":836,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2910:42:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$2769_storage_ptr","typeString":"struct StorageSlot.BooleanSlot storage pointer"}},"id":837,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2953:5:16","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2768,"src":"2910:48:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":873,"nodeType":"Block","src":"3028:382:16","statements":[{"clauses":[{"block":{"id":858,"nodeType":"Block","src":"3122:115:16","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":852,"name":"slot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":849,"src":"3148:4:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":853,"name":"_IMPLEMENTATION_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":741,"src":"3156:20:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"3148:28:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524331393637557067726164653a20756e737570706f727465642070726f786961626c6555554944","id":855,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3178:43:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c","typeString":"literal_string \"ERC1967Upgrade: unsupported proxiableUUID\""},"value":"ERC1967Upgrade: unsupported proxiableUUID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_76b6b6debfc5febf101145a79ecf0b0d2e89e397dfdab2bca99888370411152c","typeString":"literal_string \"ERC1967Upgrade: unsupported proxiableUUID\""}],"id":851,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3140:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":856,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3140:82:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":857,"nodeType":"ExpressionStatement","src":"3140:82:16"}]},"errorName":"","id":859,"nodeType":"TryCatchClause","parameters":{"id":850,"nodeType":"ParameterList","parameters":[{"constant":false,"id":849,"mutability":"mutable","name":"slot","nameLocation":"3116:4:16","nodeType":"VariableDeclaration","scope":859,"src":"3108:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":848,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3108:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3107:14:16"},"src":"3099:138:16"},{"block":{"id":864,"nodeType":"Block","src":"3244:89:16","statements":[{"expression":{"arguments":[{"hexValue":"45524331393637557067726164653a206e657720696d706c656d656e746174696f6e206973206e6f742055555053","id":861,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3269:48:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24","typeString":"literal_string \"ERC1967Upgrade: new implementation is not UUPS\""},"value":"ERC1967Upgrade: new implementation is not UUPS"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8e8e2fbcb586f700b5b14e2c4a650c8d83b9773c31c5fe8962070ea544e11f24","typeString":"literal_string \"ERC1967Upgrade: new implementation is not UUPS\""}],"id":860,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"3262:6:16","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":862,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3262:56:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":863,"nodeType":"ExpressionStatement","src":"3262:56:16"}]},"errorName":"","id":865,"nodeType":"TryCatchClause","src":"3238:95:16"}],"externalCall":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":844,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":826,"src":"3064:17:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":843,"name":"IERC1822Proxiable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":607,"src":"3046:17:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC1822Proxiable_$607_$","typeString":"type(contract IERC1822Proxiable)"}},"id":845,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3046:36:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC1822Proxiable_$607","typeString":"contract IERC1822Proxiable"}},"id":846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3083:13:16","memberName":"proxiableUUID","nodeType":"MemberAccess","referencedDeclaration":606,"src":"3046:50:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_bytes32_$","typeString":"function () view external returns (bytes32)"}},"id":847,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3046:52:16","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":866,"nodeType":"TryStatement","src":"3042:291:16"},{"expression":{"arguments":[{"id":868,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":826,"src":"3364:17:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":869,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":828,"src":"3383:4:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":870,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":830,"src":"3389:9:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":867,"name":"_upgradeToAndCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":823,"src":"3346:17:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_bool_$returns$__$","typeString":"function (address,bytes memory,bool)"}},"id":871,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3346:53:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":872,"nodeType":"ExpressionStatement","src":"3346:53:16"}]},"id":874,"nodeType":"IfStatement","src":"2906:504:16","trueBody":{"id":842,"nodeType":"Block","src":"2960:62:16","statements":[{"expression":{"arguments":[{"id":839,"name":"newImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":826,"src":"2993:17:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":838,"name":"_setImplementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":778,"src":"2974:18:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":840,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2974:37:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":841,"nodeType":"ExpressionStatement","src":"2974:37:16"}]}}]},"documentation":{"id":824,"nodeType":"StructuredDocumentation","src":"2328:161:16","text":" @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n Emits an {Upgraded} event."},"id":876,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeToAndCallUUPS","nameLocation":"2503:21:16","nodeType":"FunctionDefinition","parameters":{"id":831,"nodeType":"ParameterList","parameters":[{"constant":false,"id":826,"mutability":"mutable","name":"newImplementation","nameLocation":"2533:17:16","nodeType":"VariableDeclaration","scope":876,"src":"2525:25:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":825,"name":"address","nodeType":"ElementaryTypeName","src":"2525:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":828,"mutability":"mutable","name":"data","nameLocation":"2565:4:16","nodeType":"VariableDeclaration","scope":876,"src":"2552:17:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":827,"name":"bytes","nodeType":"ElementaryTypeName","src":"2552:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":830,"mutability":"mutable","name":"forceCall","nameLocation":"2576:9:16","nodeType":"VariableDeclaration","scope":876,"src":"2571:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":829,"name":"bool","nodeType":"ElementaryTypeName","src":"2571:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2524:62:16"},"returnParameters":{"id":832,"nodeType":"ParameterList","parameters":[],"src":"2596:0:16"},"scope":1028,"src":"2494:922:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"documentation":{"id":877,"nodeType":"StructuredDocumentation","src":"3422:189:16","text":" @dev Storage slot with the admin of the contract.\n This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n validated in the constructor."},"id":880,"mutability":"constant","name":"_ADMIN_SLOT","nameLocation":"3642:11:16","nodeType":"VariableDeclaration","scope":1028,"src":"3616:106:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":878,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3616:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307862353331323736383461353638623331373361653133623966386136303136653234336536336236653865653131373864366137313738353062356436313033","id":879,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3656:66:16","typeDescriptions":{"typeIdentifier":"t_rational_81955473079516046949633743016697847541294818689821282749996681496272635257091_by_1","typeString":"int_const 8195...(69 digits omitted)...7091"},"value":"0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103"},"visibility":"internal"},{"body":{"id":892,"nodeType":"Block","src":"3837:69:16","statements":[{"expression":{"expression":{"arguments":[{"id":888,"name":"_ADMIN_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":880,"src":"3881:11:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":886,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2870,"src":"3854:11:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$2870_$","typeString":"type(library StorageSlot)"}},"id":887,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3866:14:16","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2792,"src":"3854:26:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2766_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"}},"id":889,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3854:39:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2766_storage_ptr","typeString":"struct StorageSlot.AddressSlot storage pointer"}},"id":890,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3894:5:16","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2765,"src":"3854:45:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":885,"id":891,"nodeType":"Return","src":"3847:52:16"}]},"documentation":{"id":881,"nodeType":"StructuredDocumentation","src":"3729:50:16","text":" @dev Returns the current admin."},"id":893,"implemented":true,"kind":"function","modifiers":[],"name":"_getAdmin","nameLocation":"3793:9:16","nodeType":"FunctionDefinition","parameters":{"id":882,"nodeType":"ParameterList","parameters":[],"src":"3802:2:16"},"returnParameters":{"id":885,"nodeType":"ParameterList","parameters":[{"constant":false,"id":884,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":893,"src":"3828:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":883,"name":"address","nodeType":"ElementaryTypeName","src":"3828:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3827:9:16"},"scope":1028,"src":"3784:122:16","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":918,"nodeType":"Block","src":"4033:156:16","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":900,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":896,"src":"4051:8:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":903,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4071:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":902,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4063:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":901,"name":"address","nodeType":"ElementaryTypeName","src":"4063:7:16","typeDescriptions":{}}},"id":904,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4063:10:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4051:22:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e65772061646d696e20697320746865207a65726f2061646472657373","id":906,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4075:40:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5","typeString":"literal_string \"ERC1967: new admin is the zero address\""},"value":"ERC1967: new admin is the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_3820e16891102c1360a787e6e648431097d92537f969d458f5c94b56f8318be5","typeString":"literal_string \"ERC1967: new admin is the zero address\""}],"id":899,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4043:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":907,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4043:73:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":908,"nodeType":"ExpressionStatement","src":"4043:73:16"},{"expression":{"id":916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":912,"name":"_ADMIN_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":880,"src":"4153:11:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":909,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2870,"src":"4126:11:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$2870_$","typeString":"type(library StorageSlot)"}},"id":911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4138:14:16","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2792,"src":"4126:26:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2766_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"}},"id":913,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4126:39:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2766_storage_ptr","typeString":"struct StorageSlot.AddressSlot storage pointer"}},"id":914,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"4166:5:16","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2765,"src":"4126:45:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":915,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":896,"src":"4174:8:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4126:56:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":917,"nodeType":"ExpressionStatement","src":"4126:56:16"}]},"documentation":{"id":894,"nodeType":"StructuredDocumentation","src":"3912:71:16","text":" @dev Stores a new address in the EIP1967 admin slot."},"id":919,"implemented":true,"kind":"function","modifiers":[],"name":"_setAdmin","nameLocation":"3997:9:16","nodeType":"FunctionDefinition","parameters":{"id":897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":896,"mutability":"mutable","name":"newAdmin","nameLocation":"4015:8:16","nodeType":"VariableDeclaration","scope":919,"src":"4007:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":895,"name":"address","nodeType":"ElementaryTypeName","src":"4007:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4006:18:16"},"returnParameters":{"id":898,"nodeType":"ParameterList","parameters":[],"src":"4033:0:16"},"scope":1028,"src":"3988:201:16","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":935,"nodeType":"Block","src":"4349:86:16","statements":[{"eventCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":926,"name":"_getAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":893,"src":"4377:9:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":927,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4377:11:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":928,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":922,"src":"4390:8:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":925,"name":"AdminChanged","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":566,"src":"4364:12:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":929,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4364:35:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":930,"nodeType":"EmitStatement","src":"4359:40:16"},{"expression":{"arguments":[{"id":932,"name":"newAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":922,"src":"4419:8:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":931,"name":"_setAdmin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":919,"src":"4409:9:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":933,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4409:19:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":934,"nodeType":"ExpressionStatement","src":"4409:19:16"}]},"documentation":{"id":920,"nodeType":"StructuredDocumentation","src":"4195:100:16","text":" @dev Changes the admin of the proxy.\n Emits an {AdminChanged} event."},"id":936,"implemented":true,"kind":"function","modifiers":[],"name":"_changeAdmin","nameLocation":"4309:12:16","nodeType":"FunctionDefinition","parameters":{"id":923,"nodeType":"ParameterList","parameters":[{"constant":false,"id":922,"mutability":"mutable","name":"newAdmin","nameLocation":"4330:8:16","nodeType":"VariableDeclaration","scope":936,"src":"4322:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":921,"name":"address","nodeType":"ElementaryTypeName","src":"4322:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4321:18:16"},"returnParameters":{"id":924,"nodeType":"ParameterList","parameters":[],"src":"4349:0:16"},"scope":1028,"src":"4300:135:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"constant":true,"documentation":{"id":937,"nodeType":"StructuredDocumentation","src":"4441:232:16","text":" @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor."},"id":940,"mutability":"constant","name":"_BEACON_SLOT","nameLocation":"4704:12:16","nodeType":"VariableDeclaration","scope":1028,"src":"4678:107:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":938,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4678:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"307861336630616437346535343233616562666438306433656634333436353738333335613961373261656165653539666636636233353832623335313333643530","id":939,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4719:66:16","typeDescriptions":{"typeIdentifier":"t_rational_74152234768234802001998023604048924213078445070507226371336425913862612794704_by_1","typeString":"int_const 7415...(69 digits omitted)...4704"},"value":"0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50"},"visibility":"internal"},{"body":{"id":952,"nodeType":"Block","src":"4902:70:16","statements":[{"expression":{"expression":{"arguments":[{"id":948,"name":"_BEACON_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"4946:12:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":946,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2870,"src":"4919:11:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$2870_$","typeString":"type(library StorageSlot)"}},"id":947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4931:14:16","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2792,"src":"4919:26:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2766_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"}},"id":949,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4919:40:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2766_storage_ptr","typeString":"struct StorageSlot.AddressSlot storage pointer"}},"id":950,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4960:5:16","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2765,"src":"4919:46:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":945,"id":951,"nodeType":"Return","src":"4912:53:16"}]},"documentation":{"id":941,"nodeType":"StructuredDocumentation","src":"4792:51:16","text":" @dev Returns the current beacon."},"id":953,"implemented":true,"kind":"function","modifiers":[],"name":"_getBeacon","nameLocation":"4857:10:16","nodeType":"FunctionDefinition","parameters":{"id":942,"nodeType":"ParameterList","parameters":[],"src":"4867:2:16"},"returnParameters":{"id":945,"nodeType":"ParameterList","parameters":[{"constant":false,"id":944,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":953,"src":"4893:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":943,"name":"address","nodeType":"ElementaryTypeName","src":"4893:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4892:9:16"},"scope":1028,"src":"4848:124:16","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":988,"nodeType":"Block","src":"5101:324:16","statements":[{"expression":{"arguments":[{"arguments":[{"id":962,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":956,"src":"5138:9:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":960,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2664,"src":"5119:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$2664_$","typeString":"type(library Address)"}},"id":961,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5127:10:16","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2352,"src":"5119:18:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":963,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5119:29:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a206e657720626561636f6e206973206e6f74206120636f6e7472616374","id":964,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5150:39:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_9589b7809634e4928033de18bb696e9af4ef71b703652af5245f2dbebf2f4470","typeString":"literal_string \"ERC1967: new beacon is not a contract\""},"value":"ERC1967: new beacon is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_9589b7809634e4928033de18bb696e9af4ef71b703652af5245f2dbebf2f4470","typeString":"literal_string \"ERC1967: new beacon is not a contract\""}],"id":959,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5111:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":965,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5111:79:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":966,"nodeType":"ExpressionStatement","src":"5111:79:16"},{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":971,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":956,"src":"5248:9:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":970,"name":"IBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1090,"src":"5240:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBeacon_$1090_$","typeString":"type(contract IBeacon)"}},"id":972,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5240:18:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IBeacon_$1090","typeString":"contract IBeacon"}},"id":973,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5259:14:16","memberName":"implementation","nodeType":"MemberAccess","referencedDeclaration":1089,"src":"5240:33:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":974,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5240:35:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":968,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2664,"src":"5221:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$2664_$","typeString":"type(library Address)"}},"id":969,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5229:10:16","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2352,"src":"5221:18:16","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":975,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5221:55:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"455243313936373a20626561636f6e20696d706c656d656e746174696f6e206973206e6f74206120636f6e7472616374","id":976,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5290:50:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8","typeString":"literal_string \"ERC1967: beacon implementation is not a contract\""},"value":"ERC1967: beacon implementation is not a contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_f95fd1f5b5578816eb23f6ca0f2439b4b5e4094dc16e99c3b8e91603a83f93c8","typeString":"literal_string \"ERC1967: beacon implementation is not a contract\""}],"id":967,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5200:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":977,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5200:150:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":978,"nodeType":"ExpressionStatement","src":"5200:150:16"},{"expression":{"id":986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"arguments":[{"id":982,"name":"_BEACON_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"5387:12:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":979,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2870,"src":"5360:11:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$2870_$","typeString":"type(library StorageSlot)"}},"id":981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5372:14:16","memberName":"getAddressSlot","nodeType":"MemberAccess","referencedDeclaration":2792,"src":"5360:26:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_AddressSlot_$2766_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.AddressSlot storage pointer)"}},"id":983,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5360:40:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2766_storage_ptr","typeString":"struct StorageSlot.AddressSlot storage pointer"}},"id":984,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"5401:5:16","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":2765,"src":"5360:46:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":985,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":956,"src":"5409:9:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5360:58:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":987,"nodeType":"ExpressionStatement","src":"5360:58:16"}]},"documentation":{"id":954,"nodeType":"StructuredDocumentation","src":"4978:71:16","text":" @dev Stores a new beacon in the EIP1967 beacon slot."},"id":989,"implemented":true,"kind":"function","modifiers":[],"name":"_setBeacon","nameLocation":"5063:10:16","nodeType":"FunctionDefinition","parameters":{"id":957,"nodeType":"ParameterList","parameters":[{"constant":false,"id":956,"mutability":"mutable","name":"newBeacon","nameLocation":"5082:9:16","nodeType":"VariableDeclaration","scope":989,"src":"5074:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":955,"name":"address","nodeType":"ElementaryTypeName","src":"5074:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5073:19:16"},"returnParameters":{"id":958,"nodeType":"ParameterList","parameters":[],"src":"5101:0:16"},"scope":1028,"src":"5054:371:16","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1026,"nodeType":"Block","src":"5824:217:16","statements":[{"expression":{"arguments":[{"id":1000,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":992,"src":"5845:9:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":999,"name":"_setBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":989,"src":"5834:10:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1001,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5834:21:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1002,"nodeType":"ExpressionStatement","src":"5834:21:16"},{"eventCall":{"arguments":[{"id":1004,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":992,"src":"5885:9:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1003,"name":"BeaconUpgraded","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":571,"src":"5870:14:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1005,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5870:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1006,"nodeType":"EmitStatement","src":"5865:30:16"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1012,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1007,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":994,"src":"5909:4:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5914:6:16","memberName":"length","nodeType":"MemberAccess","src":"5909:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1009,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5923:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5909:15:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"id":1011,"name":"forceCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":996,"src":"5928:9:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5909:28:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1025,"nodeType":"IfStatement","src":"5905:130:16","trueBody":{"id":1024,"nodeType":"Block","src":"5939:96:16","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":1017,"name":"newBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":992,"src":"5990:9:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1016,"name":"IBeacon","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1090,"src":"5982:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IBeacon_$1090_$","typeString":"type(contract IBeacon)"}},"id":1018,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5982:18:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IBeacon_$1090","typeString":"contract IBeacon"}},"id":1019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6001:14:16","memberName":"implementation","nodeType":"MemberAccess","referencedDeclaration":1089,"src":"5982:33:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":1020,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5982:35:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1021,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":994,"src":"6019:4:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1013,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2664,"src":"5953:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$2664_$","typeString":"type(library Address)"}},"id":1015,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5961:20:16","memberName":"functionDelegateCall","nodeType":"MemberAccess","referencedDeclaration":2551,"src":"5953:28:16","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory) returns (bytes memory)"}},"id":1022,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5953:71:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1023,"nodeType":"ExpressionStatement","src":"5953:71:16"}]}}]},"documentation":{"id":990,"nodeType":"StructuredDocumentation","src":"5431:292:16","text":" @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n Emits a {BeaconUpgraded} event."},"id":1027,"implemented":true,"kind":"function","modifiers":[],"name":"_upgradeBeaconToAndCall","nameLocation":"5737:23:16","nodeType":"FunctionDefinition","parameters":{"id":997,"nodeType":"ParameterList","parameters":[{"constant":false,"id":992,"mutability":"mutable","name":"newBeacon","nameLocation":"5769:9:16","nodeType":"VariableDeclaration","scope":1027,"src":"5761:17:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":991,"name":"address","nodeType":"ElementaryTypeName","src":"5761:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":994,"mutability":"mutable","name":"data","nameLocation":"5793:4:16","nodeType":"VariableDeclaration","scope":1027,"src":"5780:17:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":993,"name":"bytes","nodeType":"ElementaryTypeName","src":"5780:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":996,"mutability":"mutable","name":"forceCall","nameLocation":"5804:9:16","nodeType":"VariableDeclaration","scope":1027,"src":"5799:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":995,"name":"bool","nodeType":"ElementaryTypeName","src":"5799:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5760:54:16"},"returnParameters":{"id":998,"nodeType":"ParameterList","parameters":[],"src":"5824:0:16"},"scope":1028,"src":"5728:313:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":1029,"src":"517:5526:16","usedErrors":[]}],"src":"116:5928:16"},"id":16},"@openzeppelin/contracts/proxy/Proxy.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/proxy/Proxy.sol","exportedSymbols":{"Proxy":[1080]},"id":1081,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1030,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"99:23:17"},{"abstract":true,"baseContracts":[],"canonicalName":"Proxy","contractDependencies":[],"contractKind":"contract","documentation":{"id":1031,"nodeType":"StructuredDocumentation","src":"124:598:17","text":" @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n be specified by overriding the virtual {_implementation} function.\n Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n different contract through the {_delegate} function.\n The success and return data of the delegated call will be returned back to the caller of the proxy."},"fullyImplemented":false,"id":1080,"linearizedBaseContracts":[1080],"name":"Proxy","nameLocation":"741:5:17","nodeType":"ContractDefinition","nodes":[{"body":{"id":1038,"nodeType":"Block","src":"1008:835:17","statements":[{"AST":{"nodeType":"YulBlock","src":"1027:810:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1280:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1283:1:17","type":"","value":"0"},{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"1286:12:17"},"nodeType":"YulFunctionCall","src":"1286:14:17"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"1267:12:17"},"nodeType":"YulFunctionCall","src":"1267:34:17"},"nodeType":"YulExpressionStatement","src":"1267:34:17"},{"nodeType":"YulVariableDeclaration","src":"1428:74:17","value":{"arguments":[{"arguments":[],"functionName":{"name":"gas","nodeType":"YulIdentifier","src":"1455:3:17"},"nodeType":"YulFunctionCall","src":"1455:5:17"},{"name":"implementation","nodeType":"YulIdentifier","src":"1462:14:17"},{"kind":"number","nodeType":"YulLiteral","src":"1478:1:17","type":"","value":"0"},{"arguments":[],"functionName":{"name":"calldatasize","nodeType":"YulIdentifier","src":"1481:12:17"},"nodeType":"YulFunctionCall","src":"1481:14:17"},{"kind":"number","nodeType":"YulLiteral","src":"1497:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1500:1:17","type":"","value":"0"}],"functionName":{"name":"delegatecall","nodeType":"YulIdentifier","src":"1442:12:17"},"nodeType":"YulFunctionCall","src":"1442:60:17"},"variables":[{"name":"result","nodeType":"YulTypedName","src":"1432:6:17","type":""}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1570:1:17","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1573:1:17","type":"","value":"0"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"1576:14:17"},"nodeType":"YulFunctionCall","src":"1576:16:17"}],"functionName":{"name":"returndatacopy","nodeType":"YulIdentifier","src":"1555:14:17"},"nodeType":"YulFunctionCall","src":"1555:38:17"},"nodeType":"YulExpressionStatement","src":"1555:38:17"},{"cases":[{"body":{"nodeType":"YulBlock","src":"1688:59:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1713:1:17","type":"","value":"0"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"1716:14:17"},"nodeType":"YulFunctionCall","src":"1716:16:17"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1706:6:17"},"nodeType":"YulFunctionCall","src":"1706:27:17"},"nodeType":"YulExpressionStatement","src":"1706:27:17"}]},"nodeType":"YulCase","src":"1681:66:17","value":{"kind":"number","nodeType":"YulLiteral","src":"1686:1:17","type":"","value":"0"}},{"body":{"nodeType":"YulBlock","src":"1768:59:17","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1793:1:17","type":"","value":"0"},{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"1796:14:17"},"nodeType":"YulFunctionCall","src":"1796:16:17"}],"functionName":{"name":"return","nodeType":"YulIdentifier","src":"1786:6:17"},"nodeType":"YulFunctionCall","src":"1786:27:17"},"nodeType":"YulExpressionStatement","src":"1786:27:17"}]},"nodeType":"YulCase","src":"1760:67:17","value":"default"}],"expression":{"name":"result","nodeType":"YulIdentifier","src":"1614:6:17"},"nodeType":"YulSwitch","src":"1607:220:17"}]},"evmVersion":"paris","externalReferences":[{"declaration":1034,"isOffset":false,"isSlot":false,"src":"1462:14:17","valueSize":1}],"id":1037,"nodeType":"InlineAssembly","src":"1018:819:17"}]},"documentation":{"id":1032,"nodeType":"StructuredDocumentation","src":"753:190:17","text":" @dev Delegates the current call to `implementation`.\n This function does not return to its internal call site, it will return directly to the external caller."},"id":1039,"implemented":true,"kind":"function","modifiers":[],"name":"_delegate","nameLocation":"957:9:17","nodeType":"FunctionDefinition","parameters":{"id":1035,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1034,"mutability":"mutable","name":"implementation","nameLocation":"975:14:17","nodeType":"VariableDeclaration","scope":1039,"src":"967:22:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1033,"name":"address","nodeType":"ElementaryTypeName","src":"967:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"966:24:17"},"returnParameters":{"id":1036,"nodeType":"ParameterList","parameters":[],"src":"1008:0:17"},"scope":1080,"src":"948:895:17","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"documentation":{"id":1040,"nodeType":"StructuredDocumentation","src":"1849:173:17","text":" @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n and {_fallback} should delegate."},"id":1045,"implemented":false,"kind":"function","modifiers":[],"name":"_implementation","nameLocation":"2036:15:17","nodeType":"FunctionDefinition","parameters":{"id":1041,"nodeType":"ParameterList","parameters":[],"src":"2051:2:17"},"returnParameters":{"id":1044,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1043,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1045,"src":"2085:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1042,"name":"address","nodeType":"ElementaryTypeName","src":"2085:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2084:9:17"},"scope":1080,"src":"2027:67:17","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1057,"nodeType":"Block","src":"2360:72:17","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1049,"name":"_beforeFallback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1079,"src":"2370:15:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1050,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2370:17:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1051,"nodeType":"ExpressionStatement","src":"2370:17:17"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1053,"name":"_implementation","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1045,"src":"2407:15:17","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1054,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2407:17:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1052,"name":"_delegate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1039,"src":"2397:9:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1055,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2397:28:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1056,"nodeType":"ExpressionStatement","src":"2397:28:17"}]},"documentation":{"id":1046,"nodeType":"StructuredDocumentation","src":"2100:217:17","text":" @dev Delegates the current call to the address returned by `_implementation()`.\n This function does not return to its internal call site, it will return directly to the external caller."},"id":1058,"implemented":true,"kind":"function","modifiers":[],"name":"_fallback","nameLocation":"2331:9:17","nodeType":"FunctionDefinition","parameters":{"id":1047,"nodeType":"ParameterList","parameters":[],"src":"2340:2:17"},"returnParameters":{"id":1048,"nodeType":"ParameterList","parameters":[],"src":"2360:0:17"},"scope":1080,"src":"2322:110:17","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1065,"nodeType":"Block","src":"2665:28:17","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1062,"name":"_fallback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1058,"src":"2675:9:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1063,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2675:11:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1064,"nodeType":"ExpressionStatement","src":"2675:11:17"}]},"documentation":{"id":1059,"nodeType":"StructuredDocumentation","src":"2438:186:17","text":" @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n function in the contract matches the call data."},"id":1066,"implemented":true,"kind":"fallback","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1060,"nodeType":"ParameterList","parameters":[],"src":"2637:2:17"},"returnParameters":{"id":1061,"nodeType":"ParameterList","parameters":[],"src":"2665:0:17"},"scope":1080,"src":"2629:64:17","stateMutability":"payable","virtual":true,"visibility":"external"},{"body":{"id":1073,"nodeType":"Block","src":"2888:28:17","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":1070,"name":"_fallback","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1058,"src":"2898:9:17","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1071,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2898:11:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1072,"nodeType":"ExpressionStatement","src":"2898:11:17"}]},"documentation":{"id":1067,"nodeType":"StructuredDocumentation","src":"2699:149:17","text":" @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n is empty."},"id":1074,"implemented":true,"kind":"receive","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1068,"nodeType":"ParameterList","parameters":[],"src":"2860:2:17"},"returnParameters":{"id":1069,"nodeType":"ParameterList","parameters":[],"src":"2888:0:17"},"scope":1080,"src":"2853:63:17","stateMutability":"payable","virtual":true,"visibility":"external"},{"body":{"id":1078,"nodeType":"Block","src":"3242:2:17","statements":[]},"documentation":{"id":1075,"nodeType":"StructuredDocumentation","src":"2922:271:17","text":" @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n call, or as part of the Solidity `fallback` or `receive` functions.\n If overridden should call `super._beforeFallback()`."},"id":1079,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeFallback","nameLocation":"3207:15:17","nodeType":"FunctionDefinition","parameters":{"id":1076,"nodeType":"ParameterList","parameters":[],"src":"3222:2:17"},"returnParameters":{"id":1077,"nodeType":"ParameterList","parameters":[],"src":"3242:0:17"},"scope":1080,"src":"3198:46:17","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":1081,"src":"723:2523:17","usedErrors":[]}],"src":"99:3148:17"},"id":17},"@openzeppelin/contracts/proxy/beacon/IBeacon.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/proxy/beacon/IBeacon.sol","exportedSymbols":{"IBeacon":[1090]},"id":1091,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1082,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"93:23:18"},{"abstract":false,"baseContracts":[],"canonicalName":"IBeacon","contractDependencies":[],"contractKind":"interface","documentation":{"id":1083,"nodeType":"StructuredDocumentation","src":"118:79:18","text":" @dev This is the interface that {BeaconProxy} expects of its beacon."},"fullyImplemented":false,"id":1090,"linearizedBaseContracts":[1090],"name":"IBeacon","nameLocation":"208:7:18","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1084,"nodeType":"StructuredDocumentation","src":"222:162:18","text":" @dev Must return an address that can be used as a delegate call target.\n {BeaconProxy} will check that this address is a contract."},"functionSelector":"5c60da1b","id":1089,"implemented":false,"kind":"function","modifiers":[],"name":"implementation","nameLocation":"398:14:18","nodeType":"FunctionDefinition","parameters":{"id":1085,"nodeType":"ParameterList","parameters":[],"src":"412:2:18"},"returnParameters":{"id":1088,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1087,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1089,"src":"438:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1086,"name":"address","nodeType":"ElementaryTypeName","src":"438:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"437:9:18"},"scope":1090,"src":"389:58:18","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1091,"src":"198:251:18","usedErrors":[]}],"src":"93:357:18"},"id":18},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","exportedSymbols":{"Address":[2664],"Context":[2686],"ERC165":[3123],"ERC721":[2017],"IERC165":[3329],"IERC721":[2133],"IERC721Metadata":[2334],"IERC721Receiver":[2151],"Math":[4195],"SignedMath":[4300],"Strings":[3099]},"id":2018,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1092,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"107:23:19"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"./IERC721.sol","id":1093,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2018,"sourceUnit":2134,"src":"132:23:19","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","file":"./IERC721Receiver.sol","id":1094,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2018,"sourceUnit":2152,"src":"156:31:19","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","file":"./extensions/IERC721Metadata.sol","id":1095,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2018,"sourceUnit":2335,"src":"188:42:19","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../utils/Address.sol","id":1096,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2018,"sourceUnit":2665,"src":"231:33:19","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"../../utils/Context.sol","id":1097,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2018,"sourceUnit":2687,"src":"265:33:19","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../../utils/Strings.sol","id":1098,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2018,"sourceUnit":3100,"src":"299:33:19","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","file":"../../utils/introspection/ERC165.sol","id":1099,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2018,"sourceUnit":3124,"src":"333:46:19","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1101,"name":"Context","nameLocations":["647:7:19"],"nodeType":"IdentifierPath","referencedDeclaration":2686,"src":"647:7:19"},"id":1102,"nodeType":"InheritanceSpecifier","src":"647:7:19"},{"baseName":{"id":1103,"name":"ERC165","nameLocations":["656:6:19"],"nodeType":"IdentifierPath","referencedDeclaration":3123,"src":"656:6:19"},"id":1104,"nodeType":"InheritanceSpecifier","src":"656:6:19"},{"baseName":{"id":1105,"name":"IERC721","nameLocations":["664:7:19"],"nodeType":"IdentifierPath","referencedDeclaration":2133,"src":"664:7:19"},"id":1106,"nodeType":"InheritanceSpecifier","src":"664:7:19"},{"baseName":{"id":1107,"name":"IERC721Metadata","nameLocations":["673:15:19"],"nodeType":"IdentifierPath","referencedDeclaration":2334,"src":"673:15:19"},"id":1108,"nodeType":"InheritanceSpecifier","src":"673:15:19"}],"canonicalName":"ERC721","contractDependencies":[],"contractKind":"contract","documentation":{"id":1100,"nodeType":"StructuredDocumentation","src":"381:246:19","text":" @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n the Metadata extension, but not including the Enumerable extension, which is available separately as\n {ERC721Enumerable}."},"fullyImplemented":true,"id":2017,"linearizedBaseContracts":[2017,2334,2133,3123,3329,2686],"name":"ERC721","nameLocation":"637:6:19","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1111,"libraryName":{"id":1109,"name":"Address","nameLocations":["701:7:19"],"nodeType":"IdentifierPath","referencedDeclaration":2664,"src":"701:7:19"},"nodeType":"UsingForDirective","src":"695:26:19","typeName":{"id":1110,"name":"address","nodeType":"ElementaryTypeName","src":"713:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":1114,"libraryName":{"id":1112,"name":"Strings","nameLocations":["732:7:19"],"nodeType":"IdentifierPath","referencedDeclaration":3099,"src":"732:7:19"},"nodeType":"UsingForDirective","src":"726:26:19","typeName":{"id":1113,"name":"uint256","nodeType":"ElementaryTypeName","src":"744:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":false,"id":1116,"mutability":"mutable","name":"_name","nameLocation":"791:5:19","nodeType":"VariableDeclaration","scope":2017,"src":"776:20:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":1115,"name":"string","nodeType":"ElementaryTypeName","src":"776:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":1118,"mutability":"mutable","name":"_symbol","nameLocation":"838:7:19","nodeType":"VariableDeclaration","scope":2017,"src":"823:22:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string"},"typeName":{"id":1117,"name":"string","nodeType":"ElementaryTypeName","src":"823:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"private"},{"constant":false,"id":1122,"mutability":"mutable","name":"_owners","nameLocation":"934:7:19","nodeType":"VariableDeclaration","scope":2017,"src":"898:43:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":1121,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1119,"name":"uint256","nodeType":"ElementaryTypeName","src":"906:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"898:27:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1120,"name":"address","nodeType":"ElementaryTypeName","src":"917:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":1126,"mutability":"mutable","name":"_balances","nameLocation":"1028:9:19","nodeType":"VariableDeclaration","scope":2017,"src":"992:45:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":1125,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1123,"name":"address","nodeType":"ElementaryTypeName","src":"1000:7:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"992:27:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1124,"name":"uint256","nodeType":"ElementaryTypeName","src":"1011:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"private"},{"constant":false,"id":1130,"mutability":"mutable","name":"_tokenApprovals","nameLocation":"1129:15:19","nodeType":"VariableDeclaration","scope":2017,"src":"1093:51:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":1129,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1127,"name":"uint256","nodeType":"ElementaryTypeName","src":"1101:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1093:27:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1128,"name":"address","nodeType":"ElementaryTypeName","src":"1112:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"private"},{"constant":false,"id":1136,"mutability":"mutable","name":"_operatorApprovals","nameLocation":"1252:18:19","nodeType":"VariableDeclaration","scope":2017,"src":"1199:71:19","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":1135,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1131,"name":"address","nodeType":"ElementaryTypeName","src":"1207:7:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1199:44:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1134,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1132,"name":"address","nodeType":"ElementaryTypeName","src":"1226:7:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1218:24:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1133,"name":"bool","nodeType":"ElementaryTypeName","src":"1237:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"private"},{"body":{"id":1152,"nodeType":"Block","src":"1446:57:19","statements":[{"expression":{"id":1146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1144,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1116,"src":"1456:5:19","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1145,"name":"name_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1139,"src":"1464:5:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1456:13:19","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1147,"nodeType":"ExpressionStatement","src":"1456:13:19"},{"expression":{"id":1150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1148,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1118,"src":"1479:7:19","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1149,"name":"symbol_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1141,"src":"1489:7:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1479:17:19","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":1151,"nodeType":"ExpressionStatement","src":"1479:17:19"}]},"documentation":{"id":1137,"nodeType":"StructuredDocumentation","src":"1277:108:19","text":" @dev Initializes the contract by setting a `name` and a `symbol` to the token collection."},"id":1153,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1139,"mutability":"mutable","name":"name_","nameLocation":"1416:5:19","nodeType":"VariableDeclaration","scope":1153,"src":"1402:19:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1138,"name":"string","nodeType":"ElementaryTypeName","src":"1402:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1141,"mutability":"mutable","name":"symbol_","nameLocation":"1437:7:19","nodeType":"VariableDeclaration","scope":1153,"src":"1423:21:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1140,"name":"string","nodeType":"ElementaryTypeName","src":"1423:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1401:44:19"},"returnParameters":{"id":1143,"nodeType":"ParameterList","parameters":[],"src":"1446:0:19"},"scope":2017,"src":"1390:113:19","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[3122,3328],"body":{"id":1183,"nodeType":"Block","src":"1678:192:19","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1181,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1164,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1156,"src":"1707:11:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1166,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2133,"src":"1727:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$2133_$","typeString":"type(contract IERC721)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721_$2133_$","typeString":"type(contract IERC721)"}],"id":1165,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1722:4:19","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1722:13:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721_$2133","typeString":"type(contract IERC721)"}},"id":1168,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1736:11:19","memberName":"interfaceId","nodeType":"MemberAccess","src":"1722:25:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1707:40:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1170,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1156,"src":"1763:11:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":1172,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2334,"src":"1783:15:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$2334_$","typeString":"type(contract IERC721Metadata)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$2334_$","typeString":"type(contract IERC721Metadata)"}],"id":1171,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1778:4:19","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1173,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1778:21:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Metadata_$2334","typeString":"type(contract IERC721Metadata)"}},"id":1174,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1800:11:19","memberName":"interfaceId","nodeType":"MemberAccess","src":"1778:33:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1763:48:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1707:104:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1179,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1156,"src":"1851:11:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":1177,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1827:5:19","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721_$2017_$","typeString":"type(contract super ERC721)"}},"id":1178,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1833:17:19","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":3122,"src":"1827:23:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":1180,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1827:36:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1707:156:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1163,"id":1182,"nodeType":"Return","src":"1688:175:19"}]},"documentation":{"id":1154,"nodeType":"StructuredDocumentation","src":"1509:56:19","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":1184,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1579:17:19","nodeType":"FunctionDefinition","overrides":{"id":1160,"nodeType":"OverrideSpecifier","overrides":[{"id":1158,"name":"ERC165","nameLocations":["1646:6:19"],"nodeType":"IdentifierPath","referencedDeclaration":3123,"src":"1646:6:19"},{"id":1159,"name":"IERC165","nameLocations":["1654:7:19"],"nodeType":"IdentifierPath","referencedDeclaration":3329,"src":"1654:7:19"}],"src":"1637:25:19"},"parameters":{"id":1157,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1156,"mutability":"mutable","name":"interfaceId","nameLocation":"1604:11:19","nodeType":"VariableDeclaration","scope":1184,"src":"1597:18:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1155,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1597:6:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1596:20:19"},"returnParameters":{"id":1163,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1162,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1184,"src":"1672:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1161,"name":"bool","nodeType":"ElementaryTypeName","src":"1672:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1671:6:19"},"scope":2017,"src":"1570:300:19","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2058],"body":{"id":1207,"nodeType":"Block","src":"2010:123:19","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1194,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1187,"src":"2028:5:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1197,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2045:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1196,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2037:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1195,"name":"address","nodeType":"ElementaryTypeName","src":"2037:7:19","typeDescriptions":{}}},"id":1198,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2037:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2028:19:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f7420612076616c6964206f776e6572","id":1200,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2049:43:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","typeString":"literal_string \"ERC721: address zero is not a valid owner\""},"value":"ERC721: address zero is not a valid owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","typeString":"literal_string \"ERC721: address zero is not a valid owner\""}],"id":1193,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2020:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2020:73:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1202,"nodeType":"ExpressionStatement","src":"2020:73:19"},{"expression":{"baseExpression":{"id":1203,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"2110:9:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1205,"indexExpression":{"id":1204,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1187,"src":"2120:5:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2110:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1192,"id":1206,"nodeType":"Return","src":"2103:23:19"}]},"documentation":{"id":1185,"nodeType":"StructuredDocumentation","src":"1876:48:19","text":" @dev See {IERC721-balanceOf}."},"functionSelector":"70a08231","id":1208,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"1938:9:19","nodeType":"FunctionDefinition","overrides":{"id":1189,"nodeType":"OverrideSpecifier","overrides":[],"src":"1983:8:19"},"parameters":{"id":1188,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1187,"mutability":"mutable","name":"owner","nameLocation":"1956:5:19","nodeType":"VariableDeclaration","scope":1208,"src":"1948:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1186,"name":"address","nodeType":"ElementaryTypeName","src":"1948:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1947:15:19"},"returnParameters":{"id":1192,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1191,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1208,"src":"2001:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1190,"name":"uint256","nodeType":"ElementaryTypeName","src":"2001:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2000:9:19"},"scope":2017,"src":"1929:204:19","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2066],"body":{"id":1235,"nodeType":"Block","src":"2271:138:19","statements":[{"assignments":[1218],"declarations":[{"constant":false,"id":1218,"mutability":"mutable","name":"owner","nameLocation":"2289:5:19","nodeType":"VariableDeclaration","scope":1235,"src":"2281:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1217,"name":"address","nodeType":"ElementaryTypeName","src":"2281:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1222,"initialValue":{"arguments":[{"id":1220,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1211,"src":"2306:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1219,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"2297:8:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2297:17:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2281:33:19"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1224,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1218,"src":"2332:5:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2349:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1226,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2341:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1225,"name":"address","nodeType":"ElementaryTypeName","src":"2341:7:19","typeDescriptions":{}}},"id":1228,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2341:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2332:19:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","id":1230,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2353:26:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""},"value":"ERC721: invalid token ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""}],"id":1223,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2324:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1231,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2324:56:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1232,"nodeType":"ExpressionStatement","src":"2324:56:19"},{"expression":{"id":1233,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1218,"src":"2397:5:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1216,"id":1234,"nodeType":"Return","src":"2390:12:19"}]},"documentation":{"id":1209,"nodeType":"StructuredDocumentation","src":"2139:46:19","text":" @dev See {IERC721-ownerOf}."},"functionSelector":"6352211e","id":1236,"implemented":true,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"2199:7:19","nodeType":"FunctionDefinition","overrides":{"id":1213,"nodeType":"OverrideSpecifier","overrides":[],"src":"2244:8:19"},"parameters":{"id":1212,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1211,"mutability":"mutable","name":"tokenId","nameLocation":"2215:7:19","nodeType":"VariableDeclaration","scope":1236,"src":"2207:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1210,"name":"uint256","nodeType":"ElementaryTypeName","src":"2207:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2206:17:19"},"returnParameters":{"id":1216,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1215,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1236,"src":"2262:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1214,"name":"address","nodeType":"ElementaryTypeName","src":"2262:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2261:9:19"},"scope":2017,"src":"2190:219:19","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2319],"body":{"id":1245,"nodeType":"Block","src":"2540:29:19","statements":[{"expression":{"id":1243,"name":"_name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1116,"src":"2557:5:19","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":1242,"id":1244,"nodeType":"Return","src":"2550:12:19"}]},"documentation":{"id":1237,"nodeType":"StructuredDocumentation","src":"2415:51:19","text":" @dev See {IERC721Metadata-name}."},"functionSelector":"06fdde03","id":1246,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2480:4:19","nodeType":"FunctionDefinition","overrides":{"id":1239,"nodeType":"OverrideSpecifier","overrides":[],"src":"2507:8:19"},"parameters":{"id":1238,"nodeType":"ParameterList","parameters":[],"src":"2484:2:19"},"returnParameters":{"id":1242,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1241,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1246,"src":"2525:13:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1240,"name":"string","nodeType":"ElementaryTypeName","src":"2525:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2524:15:19"},"scope":2017,"src":"2471:98:19","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2325],"body":{"id":1255,"nodeType":"Block","src":"2704:31:19","statements":[{"expression":{"id":1253,"name":"_symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1118,"src":"2721:7:19","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":1252,"id":1254,"nodeType":"Return","src":"2714:14:19"}]},"documentation":{"id":1247,"nodeType":"StructuredDocumentation","src":"2575:53:19","text":" @dev See {IERC721Metadata-symbol}."},"functionSelector":"95d89b41","id":1256,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2642:6:19","nodeType":"FunctionDefinition","overrides":{"id":1249,"nodeType":"OverrideSpecifier","overrides":[],"src":"2671:8:19"},"parameters":{"id":1248,"nodeType":"ParameterList","parameters":[],"src":"2648:2:19"},"returnParameters":{"id":1252,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1251,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1256,"src":"2689:13:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1250,"name":"string","nodeType":"ElementaryTypeName","src":"2689:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2688:15:19"},"scope":2017,"src":"2633:102:19","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2333],"body":{"id":1294,"nodeType":"Block","src":"2889:188:19","statements":[{"expression":{"arguments":[{"id":1266,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1259,"src":"2914:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1265,"name":"_requireMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1913,"src":"2899:14:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":1267,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2899:23:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1268,"nodeType":"ExpressionStatement","src":"2899:23:19"},{"assignments":[1270],"declarations":[{"constant":false,"id":1270,"mutability":"mutable","name":"baseURI","nameLocation":"2947:7:19","nodeType":"VariableDeclaration","scope":1294,"src":"2933:21:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1269,"name":"string","nodeType":"ElementaryTypeName","src":"2933:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1273,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":1271,"name":"_baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1304,"src":"2957:8:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":1272,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2957:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"2933:34:19"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1280,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":1276,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1270,"src":"2990:7:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1275,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2984:5:19","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1274,"name":"bytes","nodeType":"ElementaryTypeName","src":"2984:5:19","typeDescriptions":{}}},"id":1277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2984:14:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2999:6:19","memberName":"length","nodeType":"MemberAccess","src":"2984:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1279,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3008:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2984:25:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":1291,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3068:2:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":1292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2984:86:19","trueExpression":{"arguments":[{"arguments":[{"id":1285,"name":"baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1270,"src":"3036:7:19","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1286,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1259,"src":"3045:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1287,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3053:8:19","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":2929,"src":"3045:16:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$attached_to$_t_uint256_$","typeString":"function (uint256) pure returns (string memory)"}},"id":1288,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3045:18:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":1283,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3019:3:19","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1284,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3023:12:19","memberName":"encodePacked","nodeType":"MemberAccess","src":"3019:16:19","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1289,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3019:45:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1282,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3012:6:19","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1281,"name":"string","nodeType":"ElementaryTypeName","src":"3012:6:19","typeDescriptions":{}}},"id":1290,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3012:53:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1264,"id":1293,"nodeType":"Return","src":"2977:93:19"}]},"documentation":{"id":1257,"nodeType":"StructuredDocumentation","src":"2741:55:19","text":" @dev See {IERC721Metadata-tokenURI}."},"functionSelector":"c87b56dd","id":1295,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"2810:8:19","nodeType":"FunctionDefinition","overrides":{"id":1261,"nodeType":"OverrideSpecifier","overrides":[],"src":"2856:8:19"},"parameters":{"id":1260,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1259,"mutability":"mutable","name":"tokenId","nameLocation":"2827:7:19","nodeType":"VariableDeclaration","scope":1295,"src":"2819:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1258,"name":"uint256","nodeType":"ElementaryTypeName","src":"2819:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2818:17:19"},"returnParameters":{"id":1264,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1263,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1295,"src":"2874:13:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1262,"name":"string","nodeType":"ElementaryTypeName","src":"2874:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2873:15:19"},"scope":2017,"src":"2801:276:19","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":1303,"nodeType":"Block","src":"3385:26:19","statements":[{"expression":{"hexValue":"","id":1301,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3402:2:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"functionReturnParameters":1300,"id":1302,"nodeType":"Return","src":"3395:9:19"}]},"documentation":{"id":1296,"nodeType":"StructuredDocumentation","src":"3083:231:19","text":" @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n by default, can be overridden in child contracts."},"id":1304,"implemented":true,"kind":"function","modifiers":[],"name":"_baseURI","nameLocation":"3328:8:19","nodeType":"FunctionDefinition","parameters":{"id":1297,"nodeType":"ParameterList","parameters":[],"src":"3336:2:19"},"returnParameters":{"id":1300,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1299,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1304,"src":"3370:13:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1298,"name":"string","nodeType":"ElementaryTypeName","src":"3370:6:19","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3369:15:19"},"scope":2017,"src":"3319:92:19","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[2106],"body":{"id":1346,"nodeType":"Block","src":"3538:336:19","statements":[{"assignments":[1314],"declarations":[{"constant":false,"id":1314,"mutability":"mutable","name":"owner","nameLocation":"3556:5:19","nodeType":"VariableDeclaration","scope":1346,"src":"3548:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1313,"name":"address","nodeType":"ElementaryTypeName","src":"3548:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1319,"initialValue":{"arguments":[{"id":1317,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1309,"src":"3579:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1315,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2017,"src":"3564:6:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$2017_$","typeString":"type(contract ERC721)"}},"id":1316,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3571:7:19","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":1236,"src":"3564:14:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1318,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3564:23:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3548:39:19"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1323,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1321,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1307,"src":"3605:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1322,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1314,"src":"3611:5:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3605:11:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e6572","id":1324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3618:35:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","typeString":"literal_string \"ERC721: approval to current owner\""},"value":"ERC721: approval to current owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","typeString":"literal_string \"ERC721: approval to current owner\""}],"id":1320,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3597:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1325,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3597:57:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1326,"nodeType":"ExpressionStatement","src":"3597:57:19"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1331,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":1328,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2676,"src":"3686:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1329,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3686:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1330,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1314,"src":"3702:5:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3686:21:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1333,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1314,"src":"3728:5:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[],"expression":{"argumentTypes":[],"id":1334,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2676,"src":"3735:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1335,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3735:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1332,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1400,"src":"3711:16:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":1336,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3711:37:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3686:62:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","id":1338,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3762:63:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","typeString":"literal_string \"ERC721: approve caller is not token owner or approved for all\""},"value":"ERC721: approve caller is not token owner or approved for all"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","typeString":"literal_string \"ERC721: approve caller is not token owner or approved for all\""}],"id":1327,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3665:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1339,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3665:170:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1340,"nodeType":"ExpressionStatement","src":"3665:170:19"},{"expression":{"arguments":[{"id":1342,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1307,"src":"3855:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1343,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1309,"src":"3859:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1341,"name":"_approve","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1867,"src":"3846:8:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":1344,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3846:21:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1345,"nodeType":"ExpressionStatement","src":"3846:21:19"}]},"documentation":{"id":1305,"nodeType":"StructuredDocumentation","src":"3417:46:19","text":" @dev See {IERC721-approve}."},"functionSelector":"095ea7b3","id":1347,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"3477:7:19","nodeType":"FunctionDefinition","overrides":{"id":1311,"nodeType":"OverrideSpecifier","overrides":[],"src":"3529:8:19"},"parameters":{"id":1310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1307,"mutability":"mutable","name":"to","nameLocation":"3493:2:19","nodeType":"VariableDeclaration","scope":1347,"src":"3485:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1306,"name":"address","nodeType":"ElementaryTypeName","src":"3485:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1309,"mutability":"mutable","name":"tokenId","nameLocation":"3505:7:19","nodeType":"VariableDeclaration","scope":1347,"src":"3497:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1308,"name":"uint256","nodeType":"ElementaryTypeName","src":"3497:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3484:29:19"},"returnParameters":{"id":1312,"nodeType":"ParameterList","parameters":[],"src":"3538:0:19"},"scope":2017,"src":"3468:406:19","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2122],"body":{"id":1364,"nodeType":"Block","src":"4020:82:19","statements":[{"expression":{"arguments":[{"id":1357,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1350,"src":"4045:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1356,"name":"_requireMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1913,"src":"4030:14:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":1358,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4030:23:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1359,"nodeType":"ExpressionStatement","src":"4030:23:19"},{"expression":{"baseExpression":{"id":1360,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1130,"src":"4071:15:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":1362,"indexExpression":{"id":1361,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1350,"src":"4087:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4071:24:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1355,"id":1363,"nodeType":"Return","src":"4064:31:19"}]},"documentation":{"id":1348,"nodeType":"StructuredDocumentation","src":"3880:50:19","text":" @dev See {IERC721-getApproved}."},"functionSelector":"081812fc","id":1365,"implemented":true,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"3944:11:19","nodeType":"FunctionDefinition","overrides":{"id":1352,"nodeType":"OverrideSpecifier","overrides":[],"src":"3993:8:19"},"parameters":{"id":1351,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1350,"mutability":"mutable","name":"tokenId","nameLocation":"3964:7:19","nodeType":"VariableDeclaration","scope":1365,"src":"3956:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1349,"name":"uint256","nodeType":"ElementaryTypeName","src":"3956:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3955:17:19"},"returnParameters":{"id":1355,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1354,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1365,"src":"4011:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1353,"name":"address","nodeType":"ElementaryTypeName","src":"4011:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4010:9:19"},"scope":2017,"src":"3935:167:19","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2114],"body":{"id":1381,"nodeType":"Block","src":"4253:69:19","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1375,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2676,"src":"4282:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1376,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4282:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1377,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1368,"src":"4296:8:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1378,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1370,"src":"4306:8:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1374,"name":"_setApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1899,"src":"4263:18:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":1379,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4263:52:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1380,"nodeType":"ExpressionStatement","src":"4263:52:19"}]},"documentation":{"id":1366,"nodeType":"StructuredDocumentation","src":"4108:56:19","text":" @dev See {IERC721-setApprovalForAll}."},"functionSelector":"a22cb465","id":1382,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4178:17:19","nodeType":"FunctionDefinition","overrides":{"id":1372,"nodeType":"OverrideSpecifier","overrides":[],"src":"4244:8:19"},"parameters":{"id":1371,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1368,"mutability":"mutable","name":"operator","nameLocation":"4204:8:19","nodeType":"VariableDeclaration","scope":1382,"src":"4196:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1367,"name":"address","nodeType":"ElementaryTypeName","src":"4196:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1370,"mutability":"mutable","name":"approved","nameLocation":"4219:8:19","nodeType":"VariableDeclaration","scope":1382,"src":"4214:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1369,"name":"bool","nodeType":"ElementaryTypeName","src":"4214:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4195:33:19"},"returnParameters":{"id":1373,"nodeType":"ParameterList","parameters":[],"src":"4253:0:19"},"scope":2017,"src":"4169:153:19","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2132],"body":{"id":1399,"nodeType":"Block","src":"4491:59:19","statements":[{"expression":{"baseExpression":{"baseExpression":{"id":1393,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1136,"src":"4508:18:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":1395,"indexExpression":{"id":1394,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1385,"src":"4527:5:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4508:25:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":1397,"indexExpression":{"id":1396,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1387,"src":"4534:8:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4508:35:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1392,"id":1398,"nodeType":"Return","src":"4501:42:19"}]},"documentation":{"id":1383,"nodeType":"StructuredDocumentation","src":"4328:55:19","text":" @dev See {IERC721-isApprovedForAll}."},"functionSelector":"e985e9c5","id":1400,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4397:16:19","nodeType":"FunctionDefinition","overrides":{"id":1389,"nodeType":"OverrideSpecifier","overrides":[],"src":"4467:8:19"},"parameters":{"id":1388,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1385,"mutability":"mutable","name":"owner","nameLocation":"4422:5:19","nodeType":"VariableDeclaration","scope":1400,"src":"4414:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1384,"name":"address","nodeType":"ElementaryTypeName","src":"4414:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1387,"mutability":"mutable","name":"operator","nameLocation":"4437:8:19","nodeType":"VariableDeclaration","scope":1400,"src":"4429:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1386,"name":"address","nodeType":"ElementaryTypeName","src":"4429:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4413:33:19"},"returnParameters":{"id":1392,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1391,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1400,"src":"4485:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1390,"name":"bool","nodeType":"ElementaryTypeName","src":"4485:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4484:6:19"},"scope":2017,"src":"4388:162:19","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[2098],"body":{"id":1426,"nodeType":"Block","src":"4701:207:19","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1413,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2676,"src":"4790:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1414,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4790:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1415,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1407,"src":"4804:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1412,"name":"_isApprovedOrOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1570,"src":"4771:18:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) view returns (bool)"}},"id":1416,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4771:41:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564","id":1417,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4814:47:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""},"value":"ERC721: caller is not token owner or approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""}],"id":1411,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4763:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1418,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4763:99:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1419,"nodeType":"ExpressionStatement","src":"4763:99:19"},{"expression":{"arguments":[{"id":1421,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1403,"src":"4883:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1422,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1405,"src":"4889:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1423,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1407,"src":"4893:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1420,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1843,"src":"4873:9:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1424,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4873:28:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1425,"nodeType":"ExpressionStatement","src":"4873:28:19"}]},"documentation":{"id":1401,"nodeType":"StructuredDocumentation","src":"4556:51:19","text":" @dev See {IERC721-transferFrom}."},"functionSelector":"23b872dd","id":1427,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"4621:12:19","nodeType":"FunctionDefinition","overrides":{"id":1409,"nodeType":"OverrideSpecifier","overrides":[],"src":"4692:8:19"},"parameters":{"id":1408,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1403,"mutability":"mutable","name":"from","nameLocation":"4642:4:19","nodeType":"VariableDeclaration","scope":1427,"src":"4634:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1402,"name":"address","nodeType":"ElementaryTypeName","src":"4634:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1405,"mutability":"mutable","name":"to","nameLocation":"4656:2:19","nodeType":"VariableDeclaration","scope":1427,"src":"4648:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1404,"name":"address","nodeType":"ElementaryTypeName","src":"4648:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1407,"mutability":"mutable","name":"tokenId","nameLocation":"4668:7:19","nodeType":"VariableDeclaration","scope":1427,"src":"4660:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1406,"name":"uint256","nodeType":"ElementaryTypeName","src":"4660:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4633:43:19"},"returnParameters":{"id":1410,"nodeType":"ParameterList","parameters":[],"src":"4701:0:19"},"scope":2017,"src":"4612:296:19","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2088],"body":{"id":1445,"nodeType":"Block","src":"5067:56:19","statements":[{"expression":{"arguments":[{"id":1439,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1430,"src":"5094:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1440,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1432,"src":"5100:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1441,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1434,"src":"5104:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":1442,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5113:2:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":1438,"name":"safeTransferFrom","nodeType":"Identifier","overloadedDeclarations":[1446,1476],"referencedDeclaration":1476,"src":"5077:16:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":1443,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5077:39:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1444,"nodeType":"ExpressionStatement","src":"5077:39:19"}]},"documentation":{"id":1428,"nodeType":"StructuredDocumentation","src":"4914:55:19","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"42842e0e","id":1446,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"4983:16:19","nodeType":"FunctionDefinition","overrides":{"id":1436,"nodeType":"OverrideSpecifier","overrides":[],"src":"5058:8:19"},"parameters":{"id":1435,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1430,"mutability":"mutable","name":"from","nameLocation":"5008:4:19","nodeType":"VariableDeclaration","scope":1446,"src":"5000:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1429,"name":"address","nodeType":"ElementaryTypeName","src":"5000:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1432,"mutability":"mutable","name":"to","nameLocation":"5022:2:19","nodeType":"VariableDeclaration","scope":1446,"src":"5014:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1431,"name":"address","nodeType":"ElementaryTypeName","src":"5014:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1434,"mutability":"mutable","name":"tokenId","nameLocation":"5034:7:19","nodeType":"VariableDeclaration","scope":1446,"src":"5026:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1433,"name":"uint256","nodeType":"ElementaryTypeName","src":"5026:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4999:43:19"},"returnParameters":{"id":1437,"nodeType":"ParameterList","parameters":[],"src":"5067:0:19"},"scope":2017,"src":"4974:149:19","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[2078],"body":{"id":1475,"nodeType":"Block","src":"5301:164:19","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1461,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2676,"src":"5338:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1462,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5338:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1463,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1453,"src":"5352:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1460,"name":"_isApprovedOrOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1570,"src":"5319:18:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) view returns (bool)"}},"id":1464,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5319:41:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6572206f7220617070726f766564","id":1465,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5362:47:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""},"value":"ERC721: caller is not token owner or approved"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","typeString":"literal_string \"ERC721: caller is not token owner or approved\""}],"id":1459,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5311:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1466,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5311:99:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1467,"nodeType":"ExpressionStatement","src":"5311:99:19"},{"expression":{"arguments":[{"id":1469,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1449,"src":"5434:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1470,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1451,"src":"5440:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1471,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1453,"src":"5444:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1472,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1455,"src":"5453:4:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1468,"name":"_safeTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1505,"src":"5420:13:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,uint256,bytes memory)"}},"id":1473,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5420:38:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1474,"nodeType":"ExpressionStatement","src":"5420:38:19"}]},"documentation":{"id":1447,"nodeType":"StructuredDocumentation","src":"5129:55:19","text":" @dev See {IERC721-safeTransferFrom}."},"functionSelector":"b88d4fde","id":1476,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"5198:16:19","nodeType":"FunctionDefinition","overrides":{"id":1457,"nodeType":"OverrideSpecifier","overrides":[],"src":"5292:8:19"},"parameters":{"id":1456,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1449,"mutability":"mutable","name":"from","nameLocation":"5223:4:19","nodeType":"VariableDeclaration","scope":1476,"src":"5215:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1448,"name":"address","nodeType":"ElementaryTypeName","src":"5215:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1451,"mutability":"mutable","name":"to","nameLocation":"5237:2:19","nodeType":"VariableDeclaration","scope":1476,"src":"5229:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1450,"name":"address","nodeType":"ElementaryTypeName","src":"5229:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1453,"mutability":"mutable","name":"tokenId","nameLocation":"5249:7:19","nodeType":"VariableDeclaration","scope":1476,"src":"5241:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1452,"name":"uint256","nodeType":"ElementaryTypeName","src":"5241:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1455,"mutability":"mutable","name":"data","nameLocation":"5271:4:19","nodeType":"VariableDeclaration","scope":1476,"src":"5258:17:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1454,"name":"bytes","nodeType":"ElementaryTypeName","src":"5258:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5214:62:19"},"returnParameters":{"id":1458,"nodeType":"ParameterList","parameters":[],"src":"5301:0:19"},"scope":2017,"src":"5189:276:19","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1504,"nodeType":"Block","src":"6428:165:19","statements":[{"expression":{"arguments":[{"id":1489,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1479,"src":"6448:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1490,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1481,"src":"6454:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1491,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1483,"src":"6458:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1488,"name":"_transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1843,"src":"6438:9:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1492,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6438:28:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1493,"nodeType":"ExpressionStatement","src":"6438:28:19"},{"expression":{"arguments":[{"arguments":[{"id":1496,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1479,"src":"6507:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1497,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1481,"src":"6513:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1498,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1483,"src":"6517:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1499,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1485,"src":"6526:4:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1495,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1975,"src":"6484:22:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) returns (bool)"}},"id":1500,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6484:47:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":1501,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6533:52:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":1494,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"6476:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1502,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6476:110:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1503,"nodeType":"ExpressionStatement","src":"6476:110:19"}]},"documentation":{"id":1477,"nodeType":"StructuredDocumentation","src":"5471:850:19","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n `data` is additional data, it has no specified format and it is sent in call to `to`.\n This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n implement alternative mechanisms to perform token transfer, such as signature-based.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":1505,"implemented":true,"kind":"function","modifiers":[],"name":"_safeTransfer","nameLocation":"6335:13:19","nodeType":"FunctionDefinition","parameters":{"id":1486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1479,"mutability":"mutable","name":"from","nameLocation":"6357:4:19","nodeType":"VariableDeclaration","scope":1505,"src":"6349:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1478,"name":"address","nodeType":"ElementaryTypeName","src":"6349:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1481,"mutability":"mutable","name":"to","nameLocation":"6371:2:19","nodeType":"VariableDeclaration","scope":1505,"src":"6363:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1480,"name":"address","nodeType":"ElementaryTypeName","src":"6363:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1483,"mutability":"mutable","name":"tokenId","nameLocation":"6383:7:19","nodeType":"VariableDeclaration","scope":1505,"src":"6375:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1482,"name":"uint256","nodeType":"ElementaryTypeName","src":"6375:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1485,"mutability":"mutable","name":"data","nameLocation":"6405:4:19","nodeType":"VariableDeclaration","scope":1505,"src":"6392:17:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1484,"name":"bytes","nodeType":"ElementaryTypeName","src":"6392:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6348:62:19"},"returnParameters":{"id":1487,"nodeType":"ParameterList","parameters":[],"src":"6428:0:19"},"scope":2017,"src":"6326:267:19","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1517,"nodeType":"Block","src":"6777:40:19","statements":[{"expression":{"baseExpression":{"id":1513,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1122,"src":"6794:7:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":1515,"indexExpression":{"id":1514,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1508,"src":"6802:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6794:16:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1512,"id":1516,"nodeType":"Return","src":"6787:23:19"}]},"documentation":{"id":1506,"nodeType":"StructuredDocumentation","src":"6599:98:19","text":" @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist"},"id":1518,"implemented":true,"kind":"function","modifiers":[],"name":"_ownerOf","nameLocation":"6711:8:19","nodeType":"FunctionDefinition","parameters":{"id":1509,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1508,"mutability":"mutable","name":"tokenId","nameLocation":"6728:7:19","nodeType":"VariableDeclaration","scope":1518,"src":"6720:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1507,"name":"uint256","nodeType":"ElementaryTypeName","src":"6720:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6719:17:19"},"returnParameters":{"id":1512,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1511,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1518,"src":"6768:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1510,"name":"address","nodeType":"ElementaryTypeName","src":"6768:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6767:9:19"},"scope":2017,"src":"6702:115:19","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1535,"nodeType":"Block","src":"7191:55:19","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1527,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1521,"src":"7217:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1526,"name":"_ownerOf","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1518,"src":"7208:8:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1528,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7208:17:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1531,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7237:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1530,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7229:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1529,"name":"address","nodeType":"ElementaryTypeName","src":"7229:7:19","typeDescriptions":{}}},"id":1532,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7229:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7208:31:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1525,"id":1534,"nodeType":"Return","src":"7201:38:19"}]},"documentation":{"id":1519,"nodeType":"StructuredDocumentation","src":"6823:292:19","text":" @dev Returns whether `tokenId` exists.\n Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n Tokens start existing when they are minted (`_mint`),\n and stop existing when they are burned (`_burn`)."},"id":1536,"implemented":true,"kind":"function","modifiers":[],"name":"_exists","nameLocation":"7129:7:19","nodeType":"FunctionDefinition","parameters":{"id":1522,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1521,"mutability":"mutable","name":"tokenId","nameLocation":"7145:7:19","nodeType":"VariableDeclaration","scope":1536,"src":"7137:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1520,"name":"uint256","nodeType":"ElementaryTypeName","src":"7137:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7136:17:19"},"returnParameters":{"id":1525,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1524,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1536,"src":"7185:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1523,"name":"bool","nodeType":"ElementaryTypeName","src":"7185:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7184:6:19"},"scope":2017,"src":"7120:126:19","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1569,"nodeType":"Block","src":"7503:162:19","statements":[{"assignments":[1547],"declarations":[{"constant":false,"id":1547,"mutability":"mutable","name":"owner","nameLocation":"7521:5:19","nodeType":"VariableDeclaration","scope":1569,"src":"7513:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1546,"name":"address","nodeType":"ElementaryTypeName","src":"7513:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1552,"initialValue":{"arguments":[{"id":1550,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1541,"src":"7544:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1548,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2017,"src":"7529:6:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$2017_$","typeString":"type(contract ERC721)"}},"id":1549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7536:7:19","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":1236,"src":"7529:14:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1551,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7529:23:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"7513:39:19"},{"expression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1566,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1560,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1553,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1539,"src":"7570:7:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1554,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1547,"src":"7581:5:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7570:16:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1557,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1547,"src":"7607:5:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1558,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1539,"src":"7614:7:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1556,"name":"isApprovedForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1400,"src":"7590:16:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":1559,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7590:32:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7570:52:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1565,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1562,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1541,"src":"7638:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1561,"name":"getApproved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1365,"src":"7626:11:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1563,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7626:20:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1564,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1539,"src":"7650:7:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7626:31:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7570:87:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":1567,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7569:89:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1545,"id":1568,"nodeType":"Return","src":"7562:96:19"}]},"documentation":{"id":1537,"nodeType":"StructuredDocumentation","src":"7252:147:19","text":" @dev Returns whether `spender` is allowed to manage `tokenId`.\n Requirements:\n - `tokenId` must exist."},"id":1570,"implemented":true,"kind":"function","modifiers":[],"name":"_isApprovedOrOwner","nameLocation":"7413:18:19","nodeType":"FunctionDefinition","parameters":{"id":1542,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1539,"mutability":"mutable","name":"spender","nameLocation":"7440:7:19","nodeType":"VariableDeclaration","scope":1570,"src":"7432:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1538,"name":"address","nodeType":"ElementaryTypeName","src":"7432:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1541,"mutability":"mutable","name":"tokenId","nameLocation":"7457:7:19","nodeType":"VariableDeclaration","scope":1570,"src":"7449:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1540,"name":"uint256","nodeType":"ElementaryTypeName","src":"7449:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7431:34:19"},"returnParameters":{"id":1545,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1544,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1570,"src":"7497:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1543,"name":"bool","nodeType":"ElementaryTypeName","src":"7497:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"7496:6:19"},"scope":2017,"src":"7404:261:19","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1584,"nodeType":"Block","src":"8060:43:19","statements":[{"expression":{"arguments":[{"id":1579,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1573,"src":"8080:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1580,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1575,"src":"8084:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":1581,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8093:2:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":1578,"name":"_safeMint","nodeType":"Identifier","overloadedDeclarations":[1585,1614],"referencedDeclaration":1614,"src":"8070:9:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,uint256,bytes memory)"}},"id":1582,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8070:26:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1583,"nodeType":"ExpressionStatement","src":"8070:26:19"}]},"documentation":{"id":1571,"nodeType":"StructuredDocumentation","src":"7671:319:19","text":" @dev Safely mints `tokenId` and transfers it to `to`.\n Requirements:\n - `tokenId` must not exist.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"id":1585,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"8004:9:19","nodeType":"FunctionDefinition","parameters":{"id":1576,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1573,"mutability":"mutable","name":"to","nameLocation":"8022:2:19","nodeType":"VariableDeclaration","scope":1585,"src":"8014:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1572,"name":"address","nodeType":"ElementaryTypeName","src":"8014:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1575,"mutability":"mutable","name":"tokenId","nameLocation":"8034:7:19","nodeType":"VariableDeclaration","scope":1585,"src":"8026:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1574,"name":"uint256","nodeType":"ElementaryTypeName","src":"8026:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8013:29:19"},"returnParameters":{"id":1577,"nodeType":"ParameterList","parameters":[],"src":"8060:0:19"},"scope":2017,"src":"7995:108:19","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1613,"nodeType":"Block","src":"8408:195:19","statements":[{"expression":{"arguments":[{"id":1596,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1588,"src":"8424:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1597,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1590,"src":"8428:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1595,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1691,"src":"8418:5:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":1598,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8418:18:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1599,"nodeType":"ExpressionStatement","src":"8418:18:19"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"30","id":1604,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8498:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1603,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8490:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1602,"name":"address","nodeType":"ElementaryTypeName","src":"8490:7:19","typeDescriptions":{}}},"id":1605,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8490:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1606,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1588,"src":"8502:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1607,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1590,"src":"8506:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1608,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1592,"src":"8515:4:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1601,"name":"_checkOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1975,"src":"8467:22:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (address,address,uint256,bytes memory) returns (bool)"}},"id":1609,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8467:53:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":1610,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8534:52:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":1600,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8446:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1611,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8446:150:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1612,"nodeType":"ExpressionStatement","src":"8446:150:19"}]},"documentation":{"id":1586,"nodeType":"StructuredDocumentation","src":"8109:210:19","text":" @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."},"id":1614,"implemented":true,"kind":"function","modifiers":[],"name":"_safeMint","nameLocation":"8333:9:19","nodeType":"FunctionDefinition","parameters":{"id":1593,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1588,"mutability":"mutable","name":"to","nameLocation":"8351:2:19","nodeType":"VariableDeclaration","scope":1614,"src":"8343:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1587,"name":"address","nodeType":"ElementaryTypeName","src":"8343:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1590,"mutability":"mutable","name":"tokenId","nameLocation":"8363:7:19","nodeType":"VariableDeclaration","scope":1614,"src":"8355:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1589,"name":"uint256","nodeType":"ElementaryTypeName","src":"8355:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1592,"mutability":"mutable","name":"data","nameLocation":"8385:4:19","nodeType":"VariableDeclaration","scope":1614,"src":"8372:17:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1591,"name":"bytes","nodeType":"ElementaryTypeName","src":"8372:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8342:48:19"},"returnParameters":{"id":1594,"nodeType":"ParameterList","parameters":[],"src":"8408:0:19"},"scope":2017,"src":"8324:279:19","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1690,"nodeType":"Block","src":"8986:859:19","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1623,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1617,"src":"9004:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1626,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9018:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1625,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9010:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1624,"name":"address","nodeType":"ElementaryTypeName","src":"9010:7:19","typeDescriptions":{}}},"id":1627,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9010:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9004:16:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a206d696e7420746f20746865207a65726f2061646472657373","id":1629,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9022:34:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","typeString":"literal_string \"ERC721: mint to the zero address\""},"value":"ERC721: mint to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","typeString":"literal_string \"ERC721: mint to the zero address\""}],"id":1622,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8996:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1630,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8996:61:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1631,"nodeType":"ExpressionStatement","src":"8996:61:19"},{"expression":{"arguments":[{"id":1636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9075:17:19","subExpression":{"arguments":[{"id":1634,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1619,"src":"9084:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1633,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1536,"src":"9076:7:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":1635,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9076:16:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","id":1637,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9094:30:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""},"value":"ERC721: token already minted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""}],"id":1632,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9067:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1638,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9067:58:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1639,"nodeType":"ExpressionStatement","src":"9067:58:19"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":1643,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9165:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1642,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9157:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1641,"name":"address","nodeType":"ElementaryTypeName","src":"9157:7:19","typeDescriptions":{}}},"id":1644,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9157:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1645,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1617,"src":"9169:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1646,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1619,"src":"9173:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":1647,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9182:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":1640,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1988,"src":"9136:20:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":1648,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9136:48:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1649,"nodeType":"ExpressionStatement","src":"9136:48:19"},{"expression":{"arguments":[{"id":1654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"9279:17:19","subExpression":{"arguments":[{"id":1652,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1619,"src":"9288:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1651,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1536,"src":"9280:7:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":1653,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9280:16:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","id":1655,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9298:30:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""},"value":"ERC721: token already minted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","typeString":"literal_string \"ERC721: token already minted\""}],"id":1650,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"9271:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1656,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9271:58:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1657,"nodeType":"ExpressionStatement","src":"9271:58:19"},{"id":1664,"nodeType":"UncheckedBlock","src":"9340:360:19","statements":[{"expression":{"id":1662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1658,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"9671:9:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1660,"indexExpression":{"id":1659,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1617,"src":"9681:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9671:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1661,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9688:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9671:18:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1663,"nodeType":"ExpressionStatement","src":"9671:18:19"}]},{"expression":{"id":1669,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1665,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1122,"src":"9710:7:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":1667,"indexExpression":{"id":1666,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1619,"src":"9718:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9710:16:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1668,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1617,"src":"9729:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9710:21:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1670,"nodeType":"ExpressionStatement","src":"9710:21:19"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":1674,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9764:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1673,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9756:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1672,"name":"address","nodeType":"ElementaryTypeName","src":"9756:7:19","typeDescriptions":{}}},"id":1675,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9756:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1676,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1617,"src":"9768:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1677,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1619,"src":"9772:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1671,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"9747:8:19","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1678,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9747:33:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1679,"nodeType":"EmitStatement","src":"9742:38:19"},{"expression":{"arguments":[{"arguments":[{"hexValue":"30","id":1683,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9819:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1682,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9811:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1681,"name":"address","nodeType":"ElementaryTypeName","src":"9811:7:19","typeDescriptions":{}}},"id":1684,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9811:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1685,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1617,"src":"9823:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1686,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1619,"src":"9827:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":1687,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9836:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":1680,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"9791:19:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":1688,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9791:47:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1689,"nodeType":"ExpressionStatement","src":"9791:47:19"}]},"documentation":{"id":1615,"nodeType":"StructuredDocumentation","src":"8609:311:19","text":" @dev Mints `tokenId` and transfers it to `to`.\n WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n Requirements:\n - `tokenId` must not exist.\n - `to` cannot be the zero address.\n Emits a {Transfer} event."},"id":1691,"implemented":true,"kind":"function","modifiers":[],"name":"_mint","nameLocation":"8934:5:19","nodeType":"FunctionDefinition","parameters":{"id":1620,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1617,"mutability":"mutable","name":"to","nameLocation":"8948:2:19","nodeType":"VariableDeclaration","scope":1691,"src":"8940:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1616,"name":"address","nodeType":"ElementaryTypeName","src":"8940:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1619,"mutability":"mutable","name":"tokenId","nameLocation":"8960:7:19","nodeType":"VariableDeclaration","scope":1691,"src":"8952:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1618,"name":"uint256","nodeType":"ElementaryTypeName","src":"8952:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8939:29:19"},"returnParameters":{"id":1621,"nodeType":"ParameterList","parameters":[],"src":"8986:0:19"},"scope":2017,"src":"8925:920:19","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1757,"nodeType":"Block","src":"10220:713:19","statements":[{"assignments":[1698],"declarations":[{"constant":false,"id":1698,"mutability":"mutable","name":"owner","nameLocation":"10238:5:19","nodeType":"VariableDeclaration","scope":1757,"src":"10230:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1697,"name":"address","nodeType":"ElementaryTypeName","src":"10230:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1703,"initialValue":{"arguments":[{"id":1701,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1694,"src":"10261:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1699,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2017,"src":"10246:6:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$2017_$","typeString":"type(contract ERC721)"}},"id":1700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10253:7:19","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":1236,"src":"10246:14:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1702,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10246:23:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"10230:39:19"},{"expression":{"arguments":[{"id":1705,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1698,"src":"10301:5:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1708,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10316:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1707,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10308:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1706,"name":"address","nodeType":"ElementaryTypeName","src":"10308:7:19","typeDescriptions":{}}},"id":1709,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10308:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1710,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1694,"src":"10320:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":1711,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10329:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":1704,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1988,"src":"10280:20:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":1712,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10280:51:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1713,"nodeType":"ExpressionStatement","src":"10280:51:19"},{"expression":{"id":1719,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1714,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1698,"src":"10433:5:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":1717,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1694,"src":"10456:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1715,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2017,"src":"10441:6:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$2017_$","typeString":"type(contract ERC721)"}},"id":1716,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10448:7:19","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":1236,"src":"10441:14:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1718,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10441:23:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"10433:31:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1720,"nodeType":"ExpressionStatement","src":"10433:31:19"},{"expression":{"id":1724,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"10502:31:19","subExpression":{"baseExpression":{"id":1721,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1130,"src":"10509:15:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":1723,"indexExpression":{"id":1722,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1694,"src":"10525:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10509:24:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1725,"nodeType":"ExpressionStatement","src":"10502:31:19"},{"id":1732,"nodeType":"UncheckedBlock","src":"10544:237:19","statements":[{"expression":{"id":1730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1726,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"10749:9:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1728,"indexExpression":{"id":1727,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1698,"src":"10759:5:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10749:16:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":1729,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10769:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10749:21:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1731,"nodeType":"ExpressionStatement","src":"10749:21:19"}]},{"expression":{"id":1736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"10790:23:19","subExpression":{"baseExpression":{"id":1733,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1122,"src":"10797:7:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":1735,"indexExpression":{"id":1734,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1694,"src":"10805:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10797:16:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1737,"nodeType":"ExpressionStatement","src":"10790:23:19"},{"eventCall":{"arguments":[{"id":1739,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1698,"src":"10838:5:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1742,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10853:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1741,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10845:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1740,"name":"address","nodeType":"ElementaryTypeName","src":"10845:7:19","typeDescriptions":{}}},"id":1743,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10845:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1744,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1694,"src":"10857:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1738,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"10829:8:19","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1745,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10829:36:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1746,"nodeType":"EmitStatement","src":"10824:41:19"},{"expression":{"arguments":[{"id":1748,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1698,"src":"10896:5:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":1751,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10911:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1750,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"10903:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1749,"name":"address","nodeType":"ElementaryTypeName","src":"10903:7:19","typeDescriptions":{}}},"id":1752,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10903:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1753,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1694,"src":"10915:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":1754,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10924:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":1747,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"10876:19:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":1755,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10876:50:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1756,"nodeType":"ExpressionStatement","src":"10876:50:19"}]},"documentation":{"id":1692,"nodeType":"StructuredDocumentation","src":"9851:315:19","text":" @dev Destroys `tokenId`.\n The approval is cleared when the token is burned.\n This is an internal function that does not check if the sender is authorized to operate on the token.\n Requirements:\n - `tokenId` must exist.\n Emits a {Transfer} event."},"id":1758,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"10180:5:19","nodeType":"FunctionDefinition","parameters":{"id":1695,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1694,"mutability":"mutable","name":"tokenId","nameLocation":"10194:7:19","nodeType":"VariableDeclaration","scope":1758,"src":"10186:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1693,"name":"uint256","nodeType":"ElementaryTypeName","src":"10186:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10185:17:19"},"returnParameters":{"id":1696,"nodeType":"ParameterList","parameters":[],"src":"10220:0:19"},"scope":2017,"src":"10171:762:19","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1842,"nodeType":"Block","src":"11336:1124:19","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1771,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1765,"src":"11369:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1769,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2017,"src":"11354:6:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$2017_$","typeString":"type(contract ERC721)"}},"id":1770,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11361:7:19","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":1236,"src":"11354:14:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1772,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11354:23:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1773,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1761,"src":"11381:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11354:31:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f7272656374206f776e6572","id":1775,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11387:39:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""},"value":"ERC721: transfer from incorrect owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""}],"id":1768,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11346:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1776,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11346:81:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1777,"nodeType":"ExpressionStatement","src":"11346:81:19"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1779,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1763,"src":"11445:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":1782,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11459:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1781,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11451:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1780,"name":"address","nodeType":"ElementaryTypeName","src":"11451:7:19","typeDescriptions":{}}},"id":1783,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11451:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11445:16:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f2061646472657373","id":1785,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11463:38:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","typeString":"literal_string \"ERC721: transfer to the zero address\""},"value":"ERC721: transfer to the zero address"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","typeString":"literal_string \"ERC721: transfer to the zero address\""}],"id":1778,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11437:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1786,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11437:65:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1787,"nodeType":"ExpressionStatement","src":"11437:65:19"},{"expression":{"arguments":[{"id":1789,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1761,"src":"11534:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1790,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1763,"src":"11540:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1791,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1765,"src":"11544:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":1792,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11553:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":1788,"name":"_beforeTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1988,"src":"11513:20:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":1793,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11513:42:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1794,"nodeType":"ExpressionStatement","src":"11513:42:19"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1801,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1798,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1765,"src":"11670:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1796,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2017,"src":"11655:6:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$2017_$","typeString":"type(contract ERC721)"}},"id":1797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11662:7:19","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":1236,"src":"11655:14:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1799,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11655:23:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1800,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1761,"src":"11682:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11655:31:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f7272656374206f776e6572","id":1802,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11688:39:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""},"value":"ERC721: transfer from incorrect owner"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","typeString":"literal_string \"ERC721: transfer from incorrect owner\""}],"id":1795,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"11647:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1803,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11647:81:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1804,"nodeType":"ExpressionStatement","src":"11647:81:19"},{"expression":{"id":1808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"11790:31:19","subExpression":{"baseExpression":{"id":1805,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1130,"src":"11797:15:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":1807,"indexExpression":{"id":1806,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1765,"src":"11813:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11797:24:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1809,"nodeType":"ExpressionStatement","src":"11790:31:19"},{"id":1822,"nodeType":"UncheckedBlock","src":"11832:496:19","statements":[{"expression":{"id":1814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1810,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"12265:9:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1812,"indexExpression":{"id":1811,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1761,"src":"12275:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12265:15:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"hexValue":"31","id":1813,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12284:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12265:20:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1815,"nodeType":"ExpressionStatement","src":"12265:20:19"},{"expression":{"id":1820,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1816,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"12299:9:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1818,"indexExpression":{"id":1817,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1763,"src":"12309:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12299:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1819,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12316:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12299:18:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1821,"nodeType":"ExpressionStatement","src":"12299:18:19"}]},{"expression":{"id":1827,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1823,"name":"_owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1122,"src":"12337:7:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":1825,"indexExpression":{"id":1824,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1765,"src":"12345:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12337:16:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1826,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1763,"src":"12356:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12337:21:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1828,"nodeType":"ExpressionStatement","src":"12337:21:19"},{"eventCall":{"arguments":[{"id":1830,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1761,"src":"12383:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1831,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1763,"src":"12389:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1832,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1765,"src":"12393:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1829,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2032,"src":"12374:8:19","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1833,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12374:27:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1834,"nodeType":"EmitStatement","src":"12369:32:19"},{"expression":{"arguments":[{"id":1836,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1761,"src":"12432:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1837,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1763,"src":"12438:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1838,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1765,"src":"12442:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"31","id":1839,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12451:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":1835,"name":"_afterTokenTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"12412:19:19","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256)"}},"id":1840,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12412:41:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1841,"nodeType":"ExpressionStatement","src":"12412:41:19"}]},"documentation":{"id":1759,"nodeType":"StructuredDocumentation","src":"10939:313:19","text":" @dev Transfers `tokenId` from `from` to `to`.\n  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n Requirements:\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n Emits a {Transfer} event."},"id":1843,"implemented":true,"kind":"function","modifiers":[],"name":"_transfer","nameLocation":"11266:9:19","nodeType":"FunctionDefinition","parameters":{"id":1766,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1761,"mutability":"mutable","name":"from","nameLocation":"11284:4:19","nodeType":"VariableDeclaration","scope":1843,"src":"11276:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1760,"name":"address","nodeType":"ElementaryTypeName","src":"11276:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1763,"mutability":"mutable","name":"to","nameLocation":"11298:2:19","nodeType":"VariableDeclaration","scope":1843,"src":"11290:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1762,"name":"address","nodeType":"ElementaryTypeName","src":"11290:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1765,"mutability":"mutable","name":"tokenId","nameLocation":"11310:7:19","nodeType":"VariableDeclaration","scope":1843,"src":"11302:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1764,"name":"uint256","nodeType":"ElementaryTypeName","src":"11302:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11275:43:19"},"returnParameters":{"id":1767,"nodeType":"ParameterList","parameters":[],"src":"11336:0:19"},"scope":2017,"src":"11257:1203:19","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1866,"nodeType":"Block","src":"12636:107:19","statements":[{"expression":{"id":1855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1851,"name":"_tokenApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1130,"src":"12646:15:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":1853,"indexExpression":{"id":1852,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1848,"src":"12662:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12646:24:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1854,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1846,"src":"12673:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12646:29:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1856,"nodeType":"ExpressionStatement","src":"12646:29:19"},{"eventCall":{"arguments":[{"arguments":[{"id":1860,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1848,"src":"12714:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1858,"name":"ERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2017,"src":"12699:6:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721_$2017_$","typeString":"type(contract ERC721)"}},"id":1859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12706:7:19","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":1236,"src":"12699:14:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) view returns (address)"}},"id":1861,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12699:23:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1862,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1846,"src":"12724:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1863,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1848,"src":"12728:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1857,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2041,"src":"12690:8:19","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1864,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12690:46:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1865,"nodeType":"EmitStatement","src":"12685:51:19"}]},"documentation":{"id":1844,"nodeType":"StructuredDocumentation","src":"12466:101:19","text":" @dev Approve `to` to operate on `tokenId`\n Emits an {Approval} event."},"id":1867,"implemented":true,"kind":"function","modifiers":[],"name":"_approve","nameLocation":"12581:8:19","nodeType":"FunctionDefinition","parameters":{"id":1849,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1846,"mutability":"mutable","name":"to","nameLocation":"12598:2:19","nodeType":"VariableDeclaration","scope":1867,"src":"12590:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1845,"name":"address","nodeType":"ElementaryTypeName","src":"12590:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1848,"mutability":"mutable","name":"tokenId","nameLocation":"12610:7:19","nodeType":"VariableDeclaration","scope":1867,"src":"12602:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1847,"name":"uint256","nodeType":"ElementaryTypeName","src":"12602:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12589:29:19"},"returnParameters":{"id":1850,"nodeType":"ParameterList","parameters":[],"src":"12636:0:19"},"scope":2017,"src":"12572:171:19","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1898,"nodeType":"Block","src":"12972:184:19","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1880,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1878,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1870,"src":"12990:5:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1879,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1872,"src":"12999:8:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12990:17:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","id":1881,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13009:27:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","typeString":"literal_string \"ERC721: approve to caller\""},"value":"ERC721: approve to caller"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","typeString":"literal_string \"ERC721: approve to caller\""}],"id":1877,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"12982:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1882,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12982:55:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1883,"nodeType":"ExpressionStatement","src":"12982:55:19"},{"expression":{"id":1890,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1884,"name":"_operatorApprovals","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1136,"src":"13047:18:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":1887,"indexExpression":{"id":1885,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1870,"src":"13066:5:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13047:25:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":1888,"indexExpression":{"id":1886,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1872,"src":"13073:8:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13047:35:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1889,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1874,"src":"13085:8:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13047:46:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1891,"nodeType":"ExpressionStatement","src":"13047:46:19"},{"eventCall":{"arguments":[{"id":1893,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1870,"src":"13123:5:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1894,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1872,"src":"13130:8:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1895,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1874,"src":"13140:8:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1892,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2050,"src":"13108:14:19","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":1896,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13108:41:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1897,"nodeType":"EmitStatement","src":"13103:46:19"}]},"documentation":{"id":1868,"nodeType":"StructuredDocumentation","src":"12749:125:19","text":" @dev Approve `operator` to operate on all of `owner` tokens\n Emits an {ApprovalForAll} event."},"id":1899,"implemented":true,"kind":"function","modifiers":[],"name":"_setApprovalForAll","nameLocation":"12888:18:19","nodeType":"FunctionDefinition","parameters":{"id":1875,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1870,"mutability":"mutable","name":"owner","nameLocation":"12915:5:19","nodeType":"VariableDeclaration","scope":1899,"src":"12907:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1869,"name":"address","nodeType":"ElementaryTypeName","src":"12907:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1872,"mutability":"mutable","name":"operator","nameLocation":"12930:8:19","nodeType":"VariableDeclaration","scope":1899,"src":"12922:16:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1871,"name":"address","nodeType":"ElementaryTypeName","src":"12922:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1874,"mutability":"mutable","name":"approved","nameLocation":"12945:8:19","nodeType":"VariableDeclaration","scope":1899,"src":"12940:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1873,"name":"bool","nodeType":"ElementaryTypeName","src":"12940:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"12906:48:19"},"returnParameters":{"id":1876,"nodeType":"ParameterList","parameters":[],"src":"12972:0:19"},"scope":2017,"src":"12879:277:19","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":1912,"nodeType":"Block","src":"13303:70:19","statements":[{"expression":{"arguments":[{"arguments":[{"id":1907,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1902,"src":"13329:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1906,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1536,"src":"13321:7:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":1908,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13321:16:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","id":1909,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"13339:26:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""},"value":"ERC721: invalid token ID"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","typeString":"literal_string \"ERC721: invalid token ID\""}],"id":1905,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"13313:7:19","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1910,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13313:53:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1911,"nodeType":"ExpressionStatement","src":"13313:53:19"}]},"documentation":{"id":1900,"nodeType":"StructuredDocumentation","src":"13162:73:19","text":" @dev Reverts if the `tokenId` has not been minted yet."},"id":1913,"implemented":true,"kind":"function","modifiers":[],"name":"_requireMinted","nameLocation":"13249:14:19","nodeType":"FunctionDefinition","parameters":{"id":1903,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1902,"mutability":"mutable","name":"tokenId","nameLocation":"13272:7:19","nodeType":"VariableDeclaration","scope":1913,"src":"13264:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1901,"name":"uint256","nodeType":"ElementaryTypeName","src":"13264:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"13263:17:19"},"returnParameters":{"id":1904,"nodeType":"ParameterList","parameters":[],"src":"13303:0:19"},"scope":2017,"src":"13240:133:19","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1974,"nodeType":"Block","src":"14080:676:19","statements":[{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1927,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1918,"src":"14094:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14097:10:19","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":2352,"src":"14094:13:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":1929,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14094:15:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1972,"nodeType":"Block","src":"14714:36:19","statements":[{"expression":{"hexValue":"74727565","id":1970,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"14735:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":1926,"id":1971,"nodeType":"Return","src":"14728:11:19"}]},"id":1973,"nodeType":"IfStatement","src":"14090:660:19","trueBody":{"id":1969,"nodeType":"Block","src":"14111:597:19","statements":[{"clauses":[{"block":{"id":1949,"nodeType":"Block","src":"14225:91:19","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":1947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1943,"name":"retval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1941,"src":"14250:6:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"expression":{"id":1944,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2151,"src":"14260:15:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$2151_$","typeString":"type(contract IERC721Receiver)"}},"id":1945,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14276:16:19","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":2150,"src":"14260:32:19","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC721Receiver.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"}},"id":1946,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"14293:8:19","memberName":"selector","nodeType":"MemberAccess","src":"14260:41:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"14250:51:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1926,"id":1948,"nodeType":"Return","src":"14243:58:19"}]},"errorName":"","id":1950,"nodeType":"TryCatchClause","parameters":{"id":1942,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1941,"mutability":"mutable","name":"retval","nameLocation":"14217:6:19","nodeType":"VariableDeclaration","scope":1950,"src":"14210:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1940,"name":"bytes4","nodeType":"ElementaryTypeName","src":"14210:6:19","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"14209:15:19"},"src":"14201:115:19"},{"block":{"id":1966,"nodeType":"Block","src":"14345:353:19","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1954,"name":"reason","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1952,"src":"14367:6:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14374:6:19","memberName":"length","nodeType":"MemberAccess","src":"14367:13:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1956,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14384:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14367:18:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1964,"nodeType":"Block","src":"14494:190:19","statements":[{"AST":{"nodeType":"YulBlock","src":"14580:86:19","statements":[{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"14617:2:19","type":"","value":"32"},{"name":"reason","nodeType":"YulIdentifier","src":"14621:6:19"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14613:3:19"},"nodeType":"YulFunctionCall","src":"14613:15:19"},{"arguments":[{"name":"reason","nodeType":"YulIdentifier","src":"14636:6:19"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14630:5:19"},"nodeType":"YulFunctionCall","src":"14630:13:19"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"14606:6:19"},"nodeType":"YulFunctionCall","src":"14606:38:19"},"nodeType":"YulExpressionStatement","src":"14606:38:19"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1952,"isOffset":false,"isSlot":false,"src":"14621:6:19","valueSize":1},{"declaration":1952,"isOffset":false,"isSlot":false,"src":"14636:6:19","valueSize":1}],"id":1963,"nodeType":"InlineAssembly","src":"14571:95:19"}]},"id":1965,"nodeType":"IfStatement","src":"14363:321:19","trueBody":{"id":1962,"nodeType":"Block","src":"14387:101:19","statements":[{"expression":{"arguments":[{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e20455243373231526563656976657220696d706c656d656e746572","id":1959,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"14416:52:19","typeDescriptions":{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""},"value":"ERC721: transfer to non ERC721Receiver implementer"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","typeString":"literal_string \"ERC721: transfer to non ERC721Receiver implementer\""}],"id":1958,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"14409:6:19","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1960,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14409:60:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1961,"nodeType":"ExpressionStatement","src":"14409:60:19"}]}}]},"errorName":"","id":1967,"nodeType":"TryCatchClause","parameters":{"id":1953,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1952,"mutability":"mutable","name":"reason","nameLocation":"14337:6:19","nodeType":"VariableDeclaration","scope":1967,"src":"14324:19:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1951,"name":"bytes","nodeType":"ElementaryTypeName","src":"14324:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14323:21:19"},"src":"14317:381:19"}],"externalCall":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1934,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2676,"src":"14166:10:19","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1935,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14166:12:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1936,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1916,"src":"14180:4:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1937,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1920,"src":"14186:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1938,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1922,"src":"14195:4:19","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":1931,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1918,"src":"14145:2:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1930,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2151,"src":"14129:15:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$2151_$","typeString":"type(contract IERC721Receiver)"}},"id":1932,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14129:19:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Receiver_$2151","typeString":"contract IERC721Receiver"}},"id":1933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14149:16:19","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":2150,"src":"14129:36:19","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,bytes memory) external returns (bytes4)"}},"id":1939,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14129:71:19","tryCall":true,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":1968,"nodeType":"TryStatement","src":"14125:573:19"}]}}]},"documentation":{"id":1914,"nodeType":"StructuredDocumentation","src":"13379:541:19","text":" @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n The call is not executed if the target address is not a contract.\n @param from address representing the previous owner of the given token ID\n @param to target address that will receive the tokens\n @param tokenId uint256 ID of the token to be transferred\n @param data bytes optional data to send along with the call\n @return bool whether the call correctly returned the expected magic value"},"id":1975,"implemented":true,"kind":"function","modifiers":[],"name":"_checkOnERC721Received","nameLocation":"13934:22:19","nodeType":"FunctionDefinition","parameters":{"id":1923,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1916,"mutability":"mutable","name":"from","nameLocation":"13974:4:19","nodeType":"VariableDeclaration","scope":1975,"src":"13966:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1915,"name":"address","nodeType":"ElementaryTypeName","src":"13966:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1918,"mutability":"mutable","name":"to","nameLocation":"13996:2:19","nodeType":"VariableDeclaration","scope":1975,"src":"13988:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1917,"name":"address","nodeType":"ElementaryTypeName","src":"13988:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1920,"mutability":"mutable","name":"tokenId","nameLocation":"14016:7:19","nodeType":"VariableDeclaration","scope":1975,"src":"14008:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1919,"name":"uint256","nodeType":"ElementaryTypeName","src":"14008:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1922,"mutability":"mutable","name":"data","nameLocation":"14046:4:19","nodeType":"VariableDeclaration","scope":1975,"src":"14033:17:19","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1921,"name":"bytes","nodeType":"ElementaryTypeName","src":"14033:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"13956:100:19"},"returnParameters":{"id":1926,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1925,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1975,"src":"14074:4:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1924,"name":"bool","nodeType":"ElementaryTypeName","src":"14074:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"14073:6:19"},"scope":2017,"src":"13925:831:19","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":1987,"nodeType":"Block","src":"15586:2:19","statements":[]},"documentation":{"id":1976,"nodeType":"StructuredDocumentation","src":"14762:705:19","text":" @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n - When `from` is zero, the tokens will be minted for `to`.\n - When `to` is zero, ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n - `batchSize` is non-zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":1988,"implemented":true,"kind":"function","modifiers":[],"name":"_beforeTokenTransfer","nameLocation":"15481:20:19","nodeType":"FunctionDefinition","parameters":{"id":1985,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1978,"mutability":"mutable","name":"from","nameLocation":"15510:4:19","nodeType":"VariableDeclaration","scope":1988,"src":"15502:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1977,"name":"address","nodeType":"ElementaryTypeName","src":"15502:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1980,"mutability":"mutable","name":"to","nameLocation":"15524:2:19","nodeType":"VariableDeclaration","scope":1988,"src":"15516:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1979,"name":"address","nodeType":"ElementaryTypeName","src":"15516:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1982,"mutability":"mutable","name":"firstTokenId","nameLocation":"15536:12:19","nodeType":"VariableDeclaration","scope":1988,"src":"15528:20:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1981,"name":"uint256","nodeType":"ElementaryTypeName","src":"15528:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1984,"mutability":"mutable","name":"batchSize","nameLocation":"15558:9:19","nodeType":"VariableDeclaration","scope":1988,"src":"15550:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1983,"name":"uint256","nodeType":"ElementaryTypeName","src":"15550:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"15501:67:19"},"returnParameters":{"id":1986,"nodeType":"ParameterList","parameters":[],"src":"15586:0:19"},"scope":2017,"src":"15472:116:19","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2000,"nodeType":"Block","src":"16407:2:19","statements":[]},"documentation":{"id":1989,"nodeType":"StructuredDocumentation","src":"15594:695:19","text":" @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n Calling conditions:\n - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n - When `from` is zero, the tokens were minted for `to`.\n - When `to` is zero, ``from``'s tokens were burned.\n - `from` and `to` are never both zero.\n - `batchSize` is non-zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."},"id":2001,"implemented":true,"kind":"function","modifiers":[],"name":"_afterTokenTransfer","nameLocation":"16303:19:19","nodeType":"FunctionDefinition","parameters":{"id":1998,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1991,"mutability":"mutable","name":"from","nameLocation":"16331:4:19","nodeType":"VariableDeclaration","scope":2001,"src":"16323:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1990,"name":"address","nodeType":"ElementaryTypeName","src":"16323:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1993,"mutability":"mutable","name":"to","nameLocation":"16345:2:19","nodeType":"VariableDeclaration","scope":2001,"src":"16337:10:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1992,"name":"address","nodeType":"ElementaryTypeName","src":"16337:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1995,"mutability":"mutable","name":"firstTokenId","nameLocation":"16357:12:19","nodeType":"VariableDeclaration","scope":2001,"src":"16349:20:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1994,"name":"uint256","nodeType":"ElementaryTypeName","src":"16349:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1997,"mutability":"mutable","name":"batchSize","nameLocation":"16379:9:19","nodeType":"VariableDeclaration","scope":2001,"src":"16371:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1996,"name":"uint256","nodeType":"ElementaryTypeName","src":"16371:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16322:67:19"},"returnParameters":{"id":1999,"nodeType":"ParameterList","parameters":[],"src":"16407:0:19"},"scope":2017,"src":"16294:115:19","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"body":{"id":2015,"nodeType":"Block","src":"16958:45:19","statements":[{"expression":{"id":2013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2009,"name":"_balances","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"16968:9:19","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2011,"indexExpression":{"id":2010,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2004,"src":"16978:7:19","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"16968:18:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2012,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2006,"src":"16990:6:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16968:28:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2014,"nodeType":"ExpressionStatement","src":"16968:28:19"}]},"documentation":{"id":2002,"nodeType":"StructuredDocumentation","src":"16415:409:19","text":" @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\n being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\n that `ownerOf(tokenId)` is `a`."},"id":2016,"implemented":true,"kind":"function","modifiers":[],"name":"__unsafe_increaseBalance","nameLocation":"16891:24:19","nodeType":"FunctionDefinition","parameters":{"id":2007,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2004,"mutability":"mutable","name":"account","nameLocation":"16924:7:19","nodeType":"VariableDeclaration","scope":2016,"src":"16916:15:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2003,"name":"address","nodeType":"ElementaryTypeName","src":"16916:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2006,"mutability":"mutable","name":"amount","nameLocation":"16941:6:19","nodeType":"VariableDeclaration","scope":2016,"src":"16933:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2005,"name":"uint256","nodeType":"ElementaryTypeName","src":"16933:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"16915:33:19"},"returnParameters":{"id":2008,"nodeType":"ParameterList","parameters":[],"src":"16958:0:19"},"scope":2017,"src":"16882:121:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":2018,"src":"628:16377:19","usedErrors":[]}],"src":"107:16899:19"},"id":19},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","exportedSymbols":{"IERC165":[3329],"IERC721":[2133]},"id":2134,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2019,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"108:23:20"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"../../utils/introspection/IERC165.sol","id":2020,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2134,"sourceUnit":3330,"src":"133:47:20","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2022,"name":"IERC165","nameLocations":["271:7:20"],"nodeType":"IdentifierPath","referencedDeclaration":3329,"src":"271:7:20"},"id":2023,"nodeType":"InheritanceSpecifier","src":"271:7:20"}],"canonicalName":"IERC721","contractDependencies":[],"contractKind":"interface","documentation":{"id":2021,"nodeType":"StructuredDocumentation","src":"182:67:20","text":" @dev Required interface of an ERC721 compliant contract."},"fullyImplemented":false,"id":2133,"linearizedBaseContracts":[2133,3329],"name":"IERC721","nameLocation":"260:7:20","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":2024,"nodeType":"StructuredDocumentation","src":"285:88:20","text":" @dev Emitted when `tokenId` token is transferred from `from` to `to`."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":2032,"name":"Transfer","nameLocation":"384:8:20","nodeType":"EventDefinition","parameters":{"id":2031,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2026,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"409:4:20","nodeType":"VariableDeclaration","scope":2032,"src":"393:20:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2025,"name":"address","nodeType":"ElementaryTypeName","src":"393:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2028,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"431:2:20","nodeType":"VariableDeclaration","scope":2032,"src":"415:18:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2027,"name":"address","nodeType":"ElementaryTypeName","src":"415:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2030,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"451:7:20","nodeType":"VariableDeclaration","scope":2032,"src":"435:23:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2029,"name":"uint256","nodeType":"ElementaryTypeName","src":"435:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"392:67:20"},"src":"378:82:20"},{"anonymous":false,"documentation":{"id":2033,"nodeType":"StructuredDocumentation","src":"466:94:20","text":" @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":2041,"name":"Approval","nameLocation":"571:8:20","nodeType":"EventDefinition","parameters":{"id":2040,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2035,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"596:5:20","nodeType":"VariableDeclaration","scope":2041,"src":"580:21:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2034,"name":"address","nodeType":"ElementaryTypeName","src":"580:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2037,"indexed":true,"mutability":"mutable","name":"approved","nameLocation":"619:8:20","nodeType":"VariableDeclaration","scope":2041,"src":"603:24:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2036,"name":"address","nodeType":"ElementaryTypeName","src":"603:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2039,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"645:7:20","nodeType":"VariableDeclaration","scope":2041,"src":"629:23:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2038,"name":"uint256","nodeType":"ElementaryTypeName","src":"629:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"579:74:20"},"src":"565:89:20"},{"anonymous":false,"documentation":{"id":2042,"nodeType":"StructuredDocumentation","src":"660:117:20","text":" @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":2050,"name":"ApprovalForAll","nameLocation":"788:14:20","nodeType":"EventDefinition","parameters":{"id":2049,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2044,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"819:5:20","nodeType":"VariableDeclaration","scope":2050,"src":"803:21:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2043,"name":"address","nodeType":"ElementaryTypeName","src":"803:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2046,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"842:8:20","nodeType":"VariableDeclaration","scope":2050,"src":"826:24:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2045,"name":"address","nodeType":"ElementaryTypeName","src":"826:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2048,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"857:8:20","nodeType":"VariableDeclaration","scope":2050,"src":"852:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2047,"name":"bool","nodeType":"ElementaryTypeName","src":"852:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"802:64:20"},"src":"782:85:20"},{"documentation":{"id":2051,"nodeType":"StructuredDocumentation","src":"873:76:20","text":" @dev Returns the number of tokens in ``owner``'s account."},"functionSelector":"70a08231","id":2058,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"963:9:20","nodeType":"FunctionDefinition","parameters":{"id":2054,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2053,"mutability":"mutable","name":"owner","nameLocation":"981:5:20","nodeType":"VariableDeclaration","scope":2058,"src":"973:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2052,"name":"address","nodeType":"ElementaryTypeName","src":"973:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"972:15:20"},"returnParameters":{"id":2057,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2056,"mutability":"mutable","name":"balance","nameLocation":"1019:7:20","nodeType":"VariableDeclaration","scope":2058,"src":"1011:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2055,"name":"uint256","nodeType":"ElementaryTypeName","src":"1011:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1010:17:20"},"scope":2133,"src":"954:74:20","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2059,"nodeType":"StructuredDocumentation","src":"1034:131:20","text":" @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"6352211e","id":2066,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"1179:7:20","nodeType":"FunctionDefinition","parameters":{"id":2062,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2061,"mutability":"mutable","name":"tokenId","nameLocation":"1195:7:20","nodeType":"VariableDeclaration","scope":2066,"src":"1187:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2060,"name":"uint256","nodeType":"ElementaryTypeName","src":"1187:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1186:17:20"},"returnParameters":{"id":2065,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2064,"mutability":"mutable","name":"owner","nameLocation":"1235:5:20","nodeType":"VariableDeclaration","scope":2066,"src":"1227:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2063,"name":"address","nodeType":"ElementaryTypeName","src":"1227:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1226:15:20"},"scope":2133,"src":"1170:72:20","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2067,"nodeType":"StructuredDocumentation","src":"1248:556:20","text":" @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"b88d4fde","id":2078,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1818:16:20","nodeType":"FunctionDefinition","parameters":{"id":2076,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2069,"mutability":"mutable","name":"from","nameLocation":"1843:4:20","nodeType":"VariableDeclaration","scope":2078,"src":"1835:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2068,"name":"address","nodeType":"ElementaryTypeName","src":"1835:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2071,"mutability":"mutable","name":"to","nameLocation":"1857:2:20","nodeType":"VariableDeclaration","scope":2078,"src":"1849:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2070,"name":"address","nodeType":"ElementaryTypeName","src":"1849:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2073,"mutability":"mutable","name":"tokenId","nameLocation":"1869:7:20","nodeType":"VariableDeclaration","scope":2078,"src":"1861:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2072,"name":"uint256","nodeType":"ElementaryTypeName","src":"1861:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2075,"mutability":"mutable","name":"data","nameLocation":"1893:4:20","nodeType":"VariableDeclaration","scope":2078,"src":"1878:19:20","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2074,"name":"bytes","nodeType":"ElementaryTypeName","src":"1878:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1834:64:20"},"returnParameters":{"id":2077,"nodeType":"ParameterList","parameters":[],"src":"1907:0:20"},"scope":2133,"src":"1809:99:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2079,"nodeType":"StructuredDocumentation","src":"1914:687:20","text":" @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."},"functionSelector":"42842e0e","id":2088,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2615:16:20","nodeType":"FunctionDefinition","parameters":{"id":2086,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2081,"mutability":"mutable","name":"from","nameLocation":"2640:4:20","nodeType":"VariableDeclaration","scope":2088,"src":"2632:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2080,"name":"address","nodeType":"ElementaryTypeName","src":"2632:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2083,"mutability":"mutable","name":"to","nameLocation":"2654:2:20","nodeType":"VariableDeclaration","scope":2088,"src":"2646:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2082,"name":"address","nodeType":"ElementaryTypeName","src":"2646:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2085,"mutability":"mutable","name":"tokenId","nameLocation":"2666:7:20","nodeType":"VariableDeclaration","scope":2088,"src":"2658:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2084,"name":"uint256","nodeType":"ElementaryTypeName","src":"2658:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2631:43:20"},"returnParameters":{"id":2087,"nodeType":"ParameterList","parameters":[],"src":"2683:0:20"},"scope":2133,"src":"2606:78:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2089,"nodeType":"StructuredDocumentation","src":"2690:732:20","text":" @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":2098,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"3436:12:20","nodeType":"FunctionDefinition","parameters":{"id":2096,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2091,"mutability":"mutable","name":"from","nameLocation":"3457:4:20","nodeType":"VariableDeclaration","scope":2098,"src":"3449:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2090,"name":"address","nodeType":"ElementaryTypeName","src":"3449:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2093,"mutability":"mutable","name":"to","nameLocation":"3471:2:20","nodeType":"VariableDeclaration","scope":2098,"src":"3463:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2092,"name":"address","nodeType":"ElementaryTypeName","src":"3463:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2095,"mutability":"mutable","name":"tokenId","nameLocation":"3483:7:20","nodeType":"VariableDeclaration","scope":2098,"src":"3475:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2094,"name":"uint256","nodeType":"ElementaryTypeName","src":"3475:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3448:43:20"},"returnParameters":{"id":2097,"nodeType":"ParameterList","parameters":[],"src":"3500:0:20"},"scope":2133,"src":"3427:74:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2099,"nodeType":"StructuredDocumentation","src":"3507:452:20","text":" @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":2106,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"3973:7:20","nodeType":"FunctionDefinition","parameters":{"id":2104,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2101,"mutability":"mutable","name":"to","nameLocation":"3989:2:20","nodeType":"VariableDeclaration","scope":2106,"src":"3981:10:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2100,"name":"address","nodeType":"ElementaryTypeName","src":"3981:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2103,"mutability":"mutable","name":"tokenId","nameLocation":"4001:7:20","nodeType":"VariableDeclaration","scope":2106,"src":"3993:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2102,"name":"uint256","nodeType":"ElementaryTypeName","src":"3993:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3980:29:20"},"returnParameters":{"id":2105,"nodeType":"ParameterList","parameters":[],"src":"4018:0:20"},"scope":2133,"src":"3964:55:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2107,"nodeType":"StructuredDocumentation","src":"4025:309:20","text":" @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the caller.\n Emits an {ApprovalForAll} event."},"functionSelector":"a22cb465","id":2114,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"4348:17:20","nodeType":"FunctionDefinition","parameters":{"id":2112,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2109,"mutability":"mutable","name":"operator","nameLocation":"4374:8:20","nodeType":"VariableDeclaration","scope":2114,"src":"4366:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2108,"name":"address","nodeType":"ElementaryTypeName","src":"4366:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2111,"mutability":"mutable","name":"approved","nameLocation":"4389:8:20","nodeType":"VariableDeclaration","scope":2114,"src":"4384:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2110,"name":"bool","nodeType":"ElementaryTypeName","src":"4384:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4365:33:20"},"returnParameters":{"id":2113,"nodeType":"ParameterList","parameters":[],"src":"4407:0:20"},"scope":2133,"src":"4339:69:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2115,"nodeType":"StructuredDocumentation","src":"4414:139:20","text":" @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."},"functionSelector":"081812fc","id":2122,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4567:11:20","nodeType":"FunctionDefinition","parameters":{"id":2118,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2117,"mutability":"mutable","name":"tokenId","nameLocation":"4587:7:20","nodeType":"VariableDeclaration","scope":2122,"src":"4579:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2116,"name":"uint256","nodeType":"ElementaryTypeName","src":"4579:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4578:17:20"},"returnParameters":{"id":2121,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2120,"mutability":"mutable","name":"operator","nameLocation":"4627:8:20","nodeType":"VariableDeclaration","scope":2122,"src":"4619:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2119,"name":"address","nodeType":"ElementaryTypeName","src":"4619:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4618:18:20"},"scope":2133,"src":"4558:79:20","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2123,"nodeType":"StructuredDocumentation","src":"4643:138:20","text":" @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"},"functionSelector":"e985e9c5","id":2132,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"4795:16:20","nodeType":"FunctionDefinition","parameters":{"id":2128,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2125,"mutability":"mutable","name":"owner","nameLocation":"4820:5:20","nodeType":"VariableDeclaration","scope":2132,"src":"4812:13:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2124,"name":"address","nodeType":"ElementaryTypeName","src":"4812:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2127,"mutability":"mutable","name":"operator","nameLocation":"4835:8:20","nodeType":"VariableDeclaration","scope":2132,"src":"4827:16:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2126,"name":"address","nodeType":"ElementaryTypeName","src":"4827:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4811:33:20"},"returnParameters":{"id":2131,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2130,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2132,"src":"4868:4:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2129,"name":"bool","nodeType":"ElementaryTypeName","src":"4868:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4867:6:20"},"scope":2133,"src":"4786:88:20","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2134,"src":"250:4626:20","usedErrors":[]}],"src":"108:4769:20"},"id":20},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol","exportedSymbols":{"IERC721Receiver":[2151]},"id":2152,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2135,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"116:23:21"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Receiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":2136,"nodeType":"StructuredDocumentation","src":"141:152:21","text":" @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."},"fullyImplemented":false,"id":2151,"linearizedBaseContracts":[2151],"name":"IERC721Receiver","nameLocation":"304:15:21","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2137,"nodeType":"StructuredDocumentation","src":"326:493:21","text":" @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."},"functionSelector":"150b7a02","id":2150,"implemented":false,"kind":"function","modifiers":[],"name":"onERC721Received","nameLocation":"833:16:21","nodeType":"FunctionDefinition","parameters":{"id":2146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2139,"mutability":"mutable","name":"operator","nameLocation":"867:8:21","nodeType":"VariableDeclaration","scope":2150,"src":"859:16:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2138,"name":"address","nodeType":"ElementaryTypeName","src":"859:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2141,"mutability":"mutable","name":"from","nameLocation":"893:4:21","nodeType":"VariableDeclaration","scope":2150,"src":"885:12:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2140,"name":"address","nodeType":"ElementaryTypeName","src":"885:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2143,"mutability":"mutable","name":"tokenId","nameLocation":"915:7:21","nodeType":"VariableDeclaration","scope":2150,"src":"907:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2142,"name":"uint256","nodeType":"ElementaryTypeName","src":"907:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2145,"mutability":"mutable","name":"data","nameLocation":"947:4:21","nodeType":"VariableDeclaration","scope":2150,"src":"932:19:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2144,"name":"bytes","nodeType":"ElementaryTypeName","src":"932:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"849:108:21"},"returnParameters":{"id":2149,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2148,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2150,"src":"976:6:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2147,"name":"bytes4","nodeType":"ElementaryTypeName","src":"976:6:21","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"975:8:21"},"scope":2151,"src":"824:160:21","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2152,"src":"294:692:21","usedErrors":[]}],"src":"116:871:21"},"id":21},"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol","exportedSymbols":{"Address":[2664],"Context":[2686],"ERC165":[3123],"ERC721":[2017],"ERC721URIStorage":[2307],"IERC165":[3329],"IERC4906":[594],"IERC721":[2133],"IERC721Metadata":[2334],"IERC721Receiver":[2151],"Math":[4195],"SignedMath":[4300],"Strings":[3099]},"id":2308,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2153,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"128:23:22"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","file":"../ERC721.sol","id":2154,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2308,"sourceUnit":2018,"src":"153:23:22","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC4906.sol","file":"../../../interfaces/IERC4906.sol","id":2155,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2308,"sourceUnit":595,"src":"177:42:22","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":2157,"name":"IERC4906","nameLocations":["329:8:22"],"nodeType":"IdentifierPath","referencedDeclaration":594,"src":"329:8:22"},"id":2158,"nodeType":"InheritanceSpecifier","src":"329:8:22"},{"baseName":{"id":2159,"name":"ERC721","nameLocations":["339:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":2017,"src":"339:6:22"},"id":2160,"nodeType":"InheritanceSpecifier","src":"339:6:22"}],"canonicalName":"ERC721URIStorage","contractDependencies":[],"contractKind":"contract","documentation":{"id":2156,"nodeType":"StructuredDocumentation","src":"221:69:22","text":" @dev ERC721 token with storage based token URI management."},"fullyImplemented":true,"id":2307,"linearizedBaseContracts":[2307,2017,2334,594,2133,3123,3329,2686],"name":"ERC721URIStorage","nameLocation":"309:16:22","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2163,"libraryName":{"id":2161,"name":"Strings","nameLocations":["358:7:22"],"nodeType":"IdentifierPath","referencedDeclaration":3099,"src":"358:7:22"},"nodeType":"UsingForDirective","src":"352:26:22","typeName":{"id":2162,"name":"uint256","nodeType":"ElementaryTypeName","src":"370:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},{"constant":false,"id":2167,"mutability":"mutable","name":"_tokenURIs","nameLocation":"458:10:22","nodeType":"VariableDeclaration","scope":2307,"src":"423:45:22","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string)"},"typeName":{"id":2166,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2164,"name":"uint256","nodeType":"ElementaryTypeName","src":"431:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"423:26:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2165,"name":"string","nodeType":"ElementaryTypeName","src":"442:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"visibility":"private"},{"baseFunctions":[1184,3328],"body":{"id":2190,"nodeType":"Block","src":"643:97:22","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":2183,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2178,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2170,"src":"660:11:22","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30783439303634393036","id":2181,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"682:10:22","typeDescriptions":{"typeIdentifier":"t_rational_1225148678_by_1","typeString":"int_const 1225148678"},"value":"0x49064906"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1225148678_by_1","typeString":"int_const 1225148678"}],"id":2180,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"675:6:22","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes4_$","typeString":"type(bytes4)"},"typeName":{"id":2179,"name":"bytes4","nodeType":"ElementaryTypeName","src":"675:6:22","typeDescriptions":{}}},"id":2182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"675:18:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"660:33:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":2186,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2170,"src":"721:11:22","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":2184,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"697:5:22","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721URIStorage_$2307_$","typeString":"type(contract super ERC721URIStorage)"}},"id":2185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"703:17:22","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":1184,"src":"697:23:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_bytes4_$returns$_t_bool_$","typeString":"function (bytes4) view returns (bool)"}},"id":2187,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"697:36:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"660:73:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2177,"id":2189,"nodeType":"Return","src":"653:80:22"}]},"documentation":{"id":2168,"nodeType":"StructuredDocumentation","src":"475:55:22","text":" @dev See {IERC165-supportsInterface}"},"functionSelector":"01ffc9a7","id":2191,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"544:17:22","nodeType":"FunctionDefinition","overrides":{"id":2174,"nodeType":"OverrideSpecifier","overrides":[{"id":2172,"name":"ERC721","nameLocations":["611:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":2017,"src":"611:6:22"},{"id":2173,"name":"IERC165","nameLocations":["619:7:22"],"nodeType":"IdentifierPath","referencedDeclaration":3329,"src":"619:7:22"}],"src":"602:25:22"},"parameters":{"id":2171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2170,"mutability":"mutable","name":"interfaceId","nameLocation":"569:11:22","nodeType":"VariableDeclaration","scope":2191,"src":"562:18:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2169,"name":"bytes4","nodeType":"ElementaryTypeName","src":"562:6:22","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"561:20:22"},"returnParameters":{"id":2177,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2176,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2191,"src":"637:4:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2175,"name":"bool","nodeType":"ElementaryTypeName","src":"637:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"636:6:22"},"scope":2307,"src":"535:205:22","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1295],"body":{"id":2249,"nodeType":"Block","src":"894:520:22","statements":[{"expression":{"arguments":[{"id":2201,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2194,"src":"919:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2200,"name":"_requireMinted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1913,"src":"904:14:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$__$","typeString":"function (uint256) view"}},"id":2202,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"904:23:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2203,"nodeType":"ExpressionStatement","src":"904:23:22"},{"assignments":[2205],"declarations":[{"constant":false,"id":2205,"mutability":"mutable","name":"_tokenURI","nameLocation":"952:9:22","nodeType":"VariableDeclaration","scope":2249,"src":"938:23:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2204,"name":"string","nodeType":"ElementaryTypeName","src":"938:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":2209,"initialValue":{"baseExpression":{"id":2206,"name":"_tokenURIs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2167,"src":"964:10:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":2208,"indexExpression":{"id":2207,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2194,"src":"975:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"964:19:22","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"VariableDeclarationStatement","src":"938:45:22"},{"assignments":[2211],"declarations":[{"constant":false,"id":2211,"mutability":"mutable","name":"base","nameLocation":"1007:4:22","nodeType":"VariableDeclaration","scope":2249,"src":"993:18:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2210,"name":"string","nodeType":"ElementaryTypeName","src":"993:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":2214,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":2212,"name":"_baseURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1304,"src":"1014:8:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":2213,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1014:10:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"993:31:22"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2221,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2217,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"1103:4:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2216,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1097:5:22","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2215,"name":"bytes","nodeType":"ElementaryTypeName","src":"1097:5:22","typeDescriptions":{}}},"id":2218,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1097:11:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2219,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1109:6:22","memberName":"length","nodeType":"MemberAccess","src":"1097:18:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2220,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1119:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1097:23:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2225,"nodeType":"IfStatement","src":"1093:70:22","trueBody":{"id":2224,"nodeType":"Block","src":"1122:41:22","statements":[{"expression":{"id":2222,"name":"_tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2205,"src":"1143:9:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2199,"id":2223,"nodeType":"Return","src":"1136:16:22"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2228,"name":"_tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2205,"src":"1271:9:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2227,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1265:5:22","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2226,"name":"bytes","nodeType":"ElementaryTypeName","src":"1265:5:22","typeDescriptions":{}}},"id":2229,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1265:16:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1282:6:22","memberName":"length","nodeType":"MemberAccess","src":"1265:23:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2231,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1291:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1265:27:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2243,"nodeType":"IfStatement","src":"1261:106:22","trueBody":{"id":2242,"nodeType":"Block","src":"1294:73:22","statements":[{"expression":{"arguments":[{"arguments":[{"id":2237,"name":"base","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2211,"src":"1339:4:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":2238,"name":"_tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2205,"src":"1345:9:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":2235,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1322:3:22","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2236,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1326:12:22","memberName":"encodePacked","nodeType":"MemberAccess","src":"1322:16:22","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2239,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1322:33:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2234,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1315:6:22","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":2233,"name":"string","nodeType":"ElementaryTypeName","src":"1315:6:22","typeDescriptions":{}}},"id":2240,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1315:41:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2199,"id":2241,"nodeType":"Return","src":"1308:48:22"}]}},{"expression":{"arguments":[{"id":2246,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2194,"src":"1399:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2244,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"1384:5:22","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721URIStorage_$2307_$","typeString":"type(contract super ERC721URIStorage)"}},"id":2245,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1390:8:22","memberName":"tokenURI","nodeType":"MemberAccess","referencedDeclaration":1295,"src":"1384:14:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) view returns (string memory)"}},"id":2247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1384:23:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2199,"id":2248,"nodeType":"Return","src":"1377:30:22"}]},"documentation":{"id":2192,"nodeType":"StructuredDocumentation","src":"746:55:22","text":" @dev See {IERC721Metadata-tokenURI}."},"functionSelector":"c87b56dd","id":2250,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"815:8:22","nodeType":"FunctionDefinition","overrides":{"id":2196,"nodeType":"OverrideSpecifier","overrides":[],"src":"861:8:22"},"parameters":{"id":2195,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2194,"mutability":"mutable","name":"tokenId","nameLocation":"832:7:22","nodeType":"VariableDeclaration","scope":2250,"src":"824:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2193,"name":"uint256","nodeType":"ElementaryTypeName","src":"824:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"823:17:22"},"returnParameters":{"id":2199,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2198,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2250,"src":"879:13:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2197,"name":"string","nodeType":"ElementaryTypeName","src":"879:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"878:15:22"},"scope":2307,"src":"806:608:22","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":2275,"nodeType":"Block","src":"1680:172:22","statements":[{"expression":{"arguments":[{"arguments":[{"id":2260,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2253,"src":"1706:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2259,"name":"_exists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1536,"src":"1698:7:22","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) view returns (bool)"}},"id":2261,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1698:16:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"45524337323155524953746f726167653a2055524920736574206f66206e6f6e6578697374656e7420746f6b656e","id":2262,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1716:48:22","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4","typeString":"literal_string \"ERC721URIStorage: URI set of nonexistent token\""},"value":"ERC721URIStorage: URI set of nonexistent token"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_7521de1f20ce4d7bb86b61090bad73a87315a1f4baff36cc352901c7777280c4","typeString":"literal_string \"ERC721URIStorage: URI set of nonexistent token\""}],"id":2258,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1690:7:22","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2263,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1690:75:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2264,"nodeType":"ExpressionStatement","src":"1690:75:22"},{"expression":{"id":2269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2265,"name":"_tokenURIs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2167,"src":"1775:10:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":2267,"indexExpression":{"id":2266,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2253,"src":"1786:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1775:19:22","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2268,"name":"_tokenURI","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2255,"src":"1797:9:22","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1775:31:22","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":2270,"nodeType":"ExpressionStatement","src":"1775:31:22"},{"eventCall":{"arguments":[{"id":2272,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2253,"src":"1837:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2271,"name":"MetadataUpdate","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":586,"src":"1822:14:22","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":2273,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1822:23:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2274,"nodeType":"EmitStatement","src":"1817:28:22"}]},"documentation":{"id":2251,"nodeType":"StructuredDocumentation","src":"1420:174:22","text":" @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n Emits {MetadataUpdate}.\n Requirements:\n - `tokenId` must exist."},"id":2276,"implemented":true,"kind":"function","modifiers":[],"name":"_setTokenURI","nameLocation":"1608:12:22","nodeType":"FunctionDefinition","parameters":{"id":2256,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2253,"mutability":"mutable","name":"tokenId","nameLocation":"1629:7:22","nodeType":"VariableDeclaration","scope":2276,"src":"1621:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2252,"name":"uint256","nodeType":"ElementaryTypeName","src":"1621:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2255,"mutability":"mutable","name":"_tokenURI","nameLocation":"1652:9:22","nodeType":"VariableDeclaration","scope":2276,"src":"1638:23:22","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2254,"name":"string","nodeType":"ElementaryTypeName","src":"1638:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1620:42:22"},"returnParameters":{"id":2257,"nodeType":"ParameterList","parameters":[],"src":"1680:0:22"},"scope":2307,"src":"1599:253:22","stateMutability":"nonpayable","virtual":true,"visibility":"internal"},{"baseFunctions":[1758],"body":{"id":2305,"nodeType":"Block","src":"2128:142:22","statements":[{"expression":{"arguments":[{"id":2286,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2279,"src":"2150:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2283,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"2138:5:22","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_ERC721URIStorage_$2307_$","typeString":"type(contract super ERC721URIStorage)"}},"id":2285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2144:5:22","memberName":"_burn","nodeType":"MemberAccess","referencedDeclaration":1758,"src":"2138:11:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":2287,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2138:20:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2288,"nodeType":"ExpressionStatement","src":"2138:20:22"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2297,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"baseExpression":{"id":2291,"name":"_tokenURIs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2167,"src":"2179:10:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":2293,"indexExpression":{"id":2292,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2279,"src":"2190:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2179:19:22","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"id":2290,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2173:5:22","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":2289,"name":"bytes","nodeType":"ElementaryTypeName","src":"2173:5:22","typeDescriptions":{}}},"id":2294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2173:26:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes storage pointer"}},"id":2295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2200:6:22","memberName":"length","nodeType":"MemberAccess","src":"2173:33:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2296,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2210:1:22","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2173:38:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2304,"nodeType":"IfStatement","src":"2169:95:22","trueBody":{"id":2303,"nodeType":"Block","src":"2213:51:22","statements":[{"expression":{"id":2301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"2227:26:22","subExpression":{"baseExpression":{"id":2298,"name":"_tokenURIs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2167,"src":"2234:10:22","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_string_storage_$","typeString":"mapping(uint256 => string storage ref)"}},"id":2300,"indexExpression":{"id":2299,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2279,"src":"2245:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2234:19:22","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2302,"nodeType":"ExpressionStatement","src":"2227:26:22"}]}}]},"documentation":{"id":2277,"nodeType":"StructuredDocumentation","src":"1858:207:22","text":" @dev See {ERC721-_burn}. This override additionally checks to see if a\n token-specific URI was set for the token, and if so, it deletes the token URI from\n the storage mapping."},"id":2306,"implemented":true,"kind":"function","modifiers":[],"name":"_burn","nameLocation":"2079:5:22","nodeType":"FunctionDefinition","overrides":{"id":2281,"nodeType":"OverrideSpecifier","overrides":[],"src":"2119:8:22"},"parameters":{"id":2280,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2279,"mutability":"mutable","name":"tokenId","nameLocation":"2093:7:22","nodeType":"VariableDeclaration","scope":2306,"src":"2085:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2278,"name":"uint256","nodeType":"ElementaryTypeName","src":"2085:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2084:17:22"},"returnParameters":{"id":2282,"nodeType":"ParameterList","parameters":[],"src":"2128:0:22"},"scope":2307,"src":"2070:200:22","stateMutability":"nonpayable","virtual":true,"visibility":"internal"}],"scope":2308,"src":"291:1981:22","usedErrors":[]}],"src":"128:2145:22"},"id":22},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol","exportedSymbols":{"IERC165":[3329],"IERC721":[2133],"IERC721Metadata":[2334]},"id":2335,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2309,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:23"},{"absolutePath":"@openzeppelin/contracts/token/ERC721/IERC721.sol","file":"../IERC721.sol","id":2310,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2335,"sourceUnit":2134,"src":"137:24:23","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2312,"name":"IERC721","nameLocations":["326:7:23"],"nodeType":"IdentifierPath","referencedDeclaration":2133,"src":"326:7:23"},"id":2313,"nodeType":"InheritanceSpecifier","src":"326:7:23"}],"canonicalName":"IERC721Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":2311,"nodeType":"StructuredDocumentation","src":"163:133:23","text":" @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"},"fullyImplemented":false,"id":2334,"linearizedBaseContracts":[2334,2133,3329],"name":"IERC721Metadata","nameLocation":"307:15:23","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2314,"nodeType":"StructuredDocumentation","src":"340:58:23","text":" @dev Returns the token collection name."},"functionSelector":"06fdde03","id":2319,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"412:4:23","nodeType":"FunctionDefinition","parameters":{"id":2315,"nodeType":"ParameterList","parameters":[],"src":"416:2:23"},"returnParameters":{"id":2318,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2317,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2319,"src":"442:13:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2316,"name":"string","nodeType":"ElementaryTypeName","src":"442:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"441:15:23"},"scope":2334,"src":"403:54:23","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2320,"nodeType":"StructuredDocumentation","src":"463:60:23","text":" @dev Returns the token collection symbol."},"functionSelector":"95d89b41","id":2325,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"537:6:23","nodeType":"FunctionDefinition","parameters":{"id":2321,"nodeType":"ParameterList","parameters":[],"src":"543:2:23"},"returnParameters":{"id":2324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2323,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2325,"src":"569:13:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2322,"name":"string","nodeType":"ElementaryTypeName","src":"569:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"568:15:23"},"scope":2334,"src":"528:56:23","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":2326,"nodeType":"StructuredDocumentation","src":"590:90:23","text":" @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"functionSelector":"c87b56dd","id":2333,"implemented":false,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"694:8:23","nodeType":"FunctionDefinition","parameters":{"id":2329,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2328,"mutability":"mutable","name":"tokenId","nameLocation":"711:7:23","nodeType":"VariableDeclaration","scope":2333,"src":"703:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2327,"name":"uint256","nodeType":"ElementaryTypeName","src":"703:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"702:17:23"},"returnParameters":{"id":2332,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2331,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2333,"src":"743:13:23","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2330,"name":"string","nodeType":"ElementaryTypeName","src":"743:6:23","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"742:15:23"},"scope":2334,"src":"685:73:23","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2335,"src":"297:463:23","usedErrors":[]}],"src":"112:649:23"},"id":23},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[2664]},"id":2665,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2336,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:24"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":2337,"nodeType":"StructuredDocumentation","src":"126:67:24","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":2664,"linearizedBaseContracts":[2664],"name":"Address","nameLocation":"202:7:24","nodeType":"ContractDefinition","nodes":[{"body":{"id":2351,"nodeType":"Block","src":"1478:254:24","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":2345,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2340,"src":"1702:7:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1710:4:24","memberName":"code","nodeType":"MemberAccess","src":"1702:12:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1715:6:24","memberName":"length","nodeType":"MemberAccess","src":"1702:19:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2348,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1724:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1702:23:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2344,"id":2350,"nodeType":"Return","src":"1695:30:24"}]},"documentation":{"id":2338,"nodeType":"StructuredDocumentation","src":"216:1191:24","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":2352,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1421:10:24","nodeType":"FunctionDefinition","parameters":{"id":2341,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2340,"mutability":"mutable","name":"account","nameLocation":"1440:7:24","nodeType":"VariableDeclaration","scope":2352,"src":"1432:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2339,"name":"address","nodeType":"ElementaryTypeName","src":"1432:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1431:17:24"},"returnParameters":{"id":2344,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2343,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2352,"src":"1472:4:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2342,"name":"bool","nodeType":"ElementaryTypeName","src":"1472:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1471:6:24"},"scope":2664,"src":"1412:320:24","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2385,"nodeType":"Block","src":"2718:241:24","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2367,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2363,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2744:4:24","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$2664","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$2664","typeString":"library Address"}],"id":2362,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2736:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2361,"name":"address","nodeType":"ElementaryTypeName","src":"2736:7:24","typeDescriptions":{}}},"id":2364,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2736:13:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2750:7:24","memberName":"balance","nodeType":"MemberAccess","src":"2736:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2366,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2357,"src":"2761:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2736:31:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":2368,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2769:31:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":2360,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2728:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2369,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2728:73:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2370,"nodeType":"ExpressionStatement","src":"2728:73:24"},{"assignments":[2372,null],"declarations":[{"constant":false,"id":2372,"mutability":"mutable","name":"success","nameLocation":"2818:7:24","nodeType":"VariableDeclaration","scope":2385,"src":"2813:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2371,"name":"bool","nodeType":"ElementaryTypeName","src":"2813:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":2379,"initialValue":{"arguments":[{"hexValue":"","id":2377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2861:2:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":2373,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2355,"src":"2831:9:24","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":2374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2841:4:24","memberName":"call","nodeType":"MemberAccess","src":"2831:14:24","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":2375,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2357,"src":"2853:6:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2831:29:24","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2378,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2831:33:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2812:52:24"},{"expression":{"arguments":[{"id":2381,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2372,"src":"2882:7:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":2382,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2891:60:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":2380,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2874:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2383,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2874:78:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2384,"nodeType":"ExpressionStatement","src":"2874:78:24"}]},"documentation":{"id":2353,"nodeType":"StructuredDocumentation","src":"1738:904:24","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":2386,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2656:9:24","nodeType":"FunctionDefinition","parameters":{"id":2358,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2355,"mutability":"mutable","name":"recipient","nameLocation":"2682:9:24","nodeType":"VariableDeclaration","scope":2386,"src":"2666:25:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":2354,"name":"address","nodeType":"ElementaryTypeName","src":"2666:15:24","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":2357,"mutability":"mutable","name":"amount","nameLocation":"2701:6:24","nodeType":"VariableDeclaration","scope":2386,"src":"2693:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2356,"name":"uint256","nodeType":"ElementaryTypeName","src":"2693:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2665:43:24"},"returnParameters":{"id":2359,"nodeType":"ParameterList","parameters":[],"src":"2718:0:24"},"scope":2664,"src":"2647:312:24","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2403,"nodeType":"Block","src":"3790:96:24","statements":[{"expression":{"arguments":[{"id":2397,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2389,"src":"3829:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2398,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2391,"src":"3837:4:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":2399,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3843:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":2400,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3846:32:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":2396,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[2444,2488],"referencedDeclaration":2488,"src":"3807:21:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":2401,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3807:72:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2395,"id":2402,"nodeType":"Return","src":"3800:79:24"}]},"documentation":{"id":2387,"nodeType":"StructuredDocumentation","src":"2965:731:24","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":2404,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3710:12:24","nodeType":"FunctionDefinition","parameters":{"id":2392,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2389,"mutability":"mutable","name":"target","nameLocation":"3731:6:24","nodeType":"VariableDeclaration","scope":2404,"src":"3723:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2388,"name":"address","nodeType":"ElementaryTypeName","src":"3723:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2391,"mutability":"mutable","name":"data","nameLocation":"3752:4:24","nodeType":"VariableDeclaration","scope":2404,"src":"3739:17:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2390,"name":"bytes","nodeType":"ElementaryTypeName","src":"3739:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3722:35:24"},"returnParameters":{"id":2395,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2394,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2404,"src":"3776:12:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2393,"name":"bytes","nodeType":"ElementaryTypeName","src":"3776:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3775:14:24"},"scope":2664,"src":"3701:185:24","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2423,"nodeType":"Block","src":"4255:76:24","statements":[{"expression":{"arguments":[{"id":2417,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2407,"src":"4294:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2418,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2409,"src":"4302:4:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":2419,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4308:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":2420,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2411,"src":"4311:12:24","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2416,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[2444,2488],"referencedDeclaration":2488,"src":"4272:21:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":2421,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4272:52:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2415,"id":2422,"nodeType":"Return","src":"4265:59:24"}]},"documentation":{"id":2405,"nodeType":"StructuredDocumentation","src":"3892:211:24","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":2424,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4117:12:24","nodeType":"FunctionDefinition","parameters":{"id":2412,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2407,"mutability":"mutable","name":"target","nameLocation":"4147:6:24","nodeType":"VariableDeclaration","scope":2424,"src":"4139:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2406,"name":"address","nodeType":"ElementaryTypeName","src":"4139:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2409,"mutability":"mutable","name":"data","nameLocation":"4176:4:24","nodeType":"VariableDeclaration","scope":2424,"src":"4163:17:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2408,"name":"bytes","nodeType":"ElementaryTypeName","src":"4163:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2411,"mutability":"mutable","name":"errorMessage","nameLocation":"4204:12:24","nodeType":"VariableDeclaration","scope":2424,"src":"4190:26:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2410,"name":"string","nodeType":"ElementaryTypeName","src":"4190:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4129:93:24"},"returnParameters":{"id":2415,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2414,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2424,"src":"4241:12:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2413,"name":"bytes","nodeType":"ElementaryTypeName","src":"4241:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4240:14:24"},"scope":2664,"src":"4108:223:24","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2443,"nodeType":"Block","src":"4806:111:24","statements":[{"expression":{"arguments":[{"id":2437,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2427,"src":"4845:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2438,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2429,"src":"4853:4:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2439,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2431,"src":"4859:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":2440,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4866:43:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":2436,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[2444,2488],"referencedDeclaration":2488,"src":"4823:21:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":2441,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4823:87:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2435,"id":2442,"nodeType":"Return","src":"4816:94:24"}]},"documentation":{"id":2425,"nodeType":"StructuredDocumentation","src":"4337:351:24","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":2444,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4702:21:24","nodeType":"FunctionDefinition","parameters":{"id":2432,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2427,"mutability":"mutable","name":"target","nameLocation":"4732:6:24","nodeType":"VariableDeclaration","scope":2444,"src":"4724:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2426,"name":"address","nodeType":"ElementaryTypeName","src":"4724:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2429,"mutability":"mutable","name":"data","nameLocation":"4753:4:24","nodeType":"VariableDeclaration","scope":2444,"src":"4740:17:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2428,"name":"bytes","nodeType":"ElementaryTypeName","src":"4740:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2431,"mutability":"mutable","name":"value","nameLocation":"4767:5:24","nodeType":"VariableDeclaration","scope":2444,"src":"4759:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2430,"name":"uint256","nodeType":"ElementaryTypeName","src":"4759:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4723:50:24"},"returnParameters":{"id":2435,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2434,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2444,"src":"4792:12:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2433,"name":"bytes","nodeType":"ElementaryTypeName","src":"4792:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4791:14:24"},"scope":2664,"src":"4693:224:24","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2487,"nodeType":"Block","src":"5344:267:24","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":2461,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5370:4:24","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$2664","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$2664","typeString":"library Address"}],"id":2460,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5362:7:24","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2459,"name":"address","nodeType":"ElementaryTypeName","src":"5362:7:24","typeDescriptions":{}}},"id":2462,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5362:13:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5376:7:24","memberName":"balance","nodeType":"MemberAccess","src":"5362:21:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2464,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2451,"src":"5387:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5362:30:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":2466,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5394:40:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":2458,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5354:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2467,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5354:81:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2468,"nodeType":"ExpressionStatement","src":"5354:81:24"},{"assignments":[2470,2472],"declarations":[{"constant":false,"id":2470,"mutability":"mutable","name":"success","nameLocation":"5451:7:24","nodeType":"VariableDeclaration","scope":2487,"src":"5446:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2469,"name":"bool","nodeType":"ElementaryTypeName","src":"5446:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2472,"mutability":"mutable","name":"returndata","nameLocation":"5473:10:24","nodeType":"VariableDeclaration","scope":2487,"src":"5460:23:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2471,"name":"bytes","nodeType":"ElementaryTypeName","src":"5460:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2479,"initialValue":{"arguments":[{"id":2477,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2449,"src":"5513:4:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2473,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2447,"src":"5487:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5494:4:24","memberName":"call","nodeType":"MemberAccess","src":"5487:11:24","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2476,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":2475,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2451,"src":"5506:5:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5487:25:24","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":2478,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5487:31:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5445:73:24"},{"expression":{"arguments":[{"id":2481,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2447,"src":"5562:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2482,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2470,"src":"5570:7:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2483,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2472,"src":"5579:10:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2484,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2453,"src":"5591:12:24","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2480,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2619,"src":"5535:26:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":2485,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5535:69:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2457,"id":2486,"nodeType":"Return","src":"5528:76:24"}]},"documentation":{"id":2445,"nodeType":"StructuredDocumentation","src":"4923:237:24","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":2488,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5174:21:24","nodeType":"FunctionDefinition","parameters":{"id":2454,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2447,"mutability":"mutable","name":"target","nameLocation":"5213:6:24","nodeType":"VariableDeclaration","scope":2488,"src":"5205:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2446,"name":"address","nodeType":"ElementaryTypeName","src":"5205:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2449,"mutability":"mutable","name":"data","nameLocation":"5242:4:24","nodeType":"VariableDeclaration","scope":2488,"src":"5229:17:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2448,"name":"bytes","nodeType":"ElementaryTypeName","src":"5229:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2451,"mutability":"mutable","name":"value","nameLocation":"5264:5:24","nodeType":"VariableDeclaration","scope":2488,"src":"5256:13:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2450,"name":"uint256","nodeType":"ElementaryTypeName","src":"5256:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2453,"mutability":"mutable","name":"errorMessage","nameLocation":"5293:12:24","nodeType":"VariableDeclaration","scope":2488,"src":"5279:26:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2452,"name":"string","nodeType":"ElementaryTypeName","src":"5279:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5195:116:24"},"returnParameters":{"id":2457,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2456,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2488,"src":"5330:12:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2455,"name":"bytes","nodeType":"ElementaryTypeName","src":"5330:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5329:14:24"},"scope":2664,"src":"5165:446:24","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2504,"nodeType":"Block","src":"5888:97:24","statements":[{"expression":{"arguments":[{"id":2499,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2491,"src":"5924:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2500,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2493,"src":"5932:4:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":2501,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5938:39:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":2498,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[2505,2534],"referencedDeclaration":2534,"src":"5905:18:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":2502,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5905:73:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2497,"id":2503,"nodeType":"Return","src":"5898:80:24"}]},"documentation":{"id":2489,"nodeType":"StructuredDocumentation","src":"5617:166:24","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":2505,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5797:18:24","nodeType":"FunctionDefinition","parameters":{"id":2494,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2491,"mutability":"mutable","name":"target","nameLocation":"5824:6:24","nodeType":"VariableDeclaration","scope":2505,"src":"5816:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2490,"name":"address","nodeType":"ElementaryTypeName","src":"5816:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2493,"mutability":"mutable","name":"data","nameLocation":"5845:4:24","nodeType":"VariableDeclaration","scope":2505,"src":"5832:17:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2492,"name":"bytes","nodeType":"ElementaryTypeName","src":"5832:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5815:35:24"},"returnParameters":{"id":2497,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2496,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2505,"src":"5874:12:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2495,"name":"bytes","nodeType":"ElementaryTypeName","src":"5874:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5873:14:24"},"scope":2664,"src":"5788:197:24","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2533,"nodeType":"Block","src":"6327:168:24","statements":[{"assignments":[2518,2520],"declarations":[{"constant":false,"id":2518,"mutability":"mutable","name":"success","nameLocation":"6343:7:24","nodeType":"VariableDeclaration","scope":2533,"src":"6338:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2517,"name":"bool","nodeType":"ElementaryTypeName","src":"6338:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2520,"mutability":"mutable","name":"returndata","nameLocation":"6365:10:24","nodeType":"VariableDeclaration","scope":2533,"src":"6352:23:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2519,"name":"bytes","nodeType":"ElementaryTypeName","src":"6352:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2525,"initialValue":{"arguments":[{"id":2523,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2510,"src":"6397:4:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2521,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2508,"src":"6379:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6386:10:24","memberName":"staticcall","nodeType":"MemberAccess","src":"6379:17:24","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":2524,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6379:23:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6337:65:24"},{"expression":{"arguments":[{"id":2527,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2508,"src":"6446:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2528,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2518,"src":"6454:7:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2529,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2520,"src":"6463:10:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2530,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2512,"src":"6475:12:24","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2526,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2619,"src":"6419:26:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":2531,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6419:69:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2516,"id":2532,"nodeType":"Return","src":"6412:76:24"}]},"documentation":{"id":2506,"nodeType":"StructuredDocumentation","src":"5991:173:24","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":2534,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6178:18:24","nodeType":"FunctionDefinition","parameters":{"id":2513,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2508,"mutability":"mutable","name":"target","nameLocation":"6214:6:24","nodeType":"VariableDeclaration","scope":2534,"src":"6206:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2507,"name":"address","nodeType":"ElementaryTypeName","src":"6206:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2510,"mutability":"mutable","name":"data","nameLocation":"6243:4:24","nodeType":"VariableDeclaration","scope":2534,"src":"6230:17:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2509,"name":"bytes","nodeType":"ElementaryTypeName","src":"6230:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2512,"mutability":"mutable","name":"errorMessage","nameLocation":"6271:12:24","nodeType":"VariableDeclaration","scope":2534,"src":"6257:26:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2511,"name":"string","nodeType":"ElementaryTypeName","src":"6257:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6196:93:24"},"returnParameters":{"id":2516,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2515,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2534,"src":"6313:12:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2514,"name":"bytes","nodeType":"ElementaryTypeName","src":"6313:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6312:14:24"},"scope":2664,"src":"6169:326:24","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2550,"nodeType":"Block","src":"6771:101:24","statements":[{"expression":{"arguments":[{"id":2545,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2537,"src":"6809:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2546,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2539,"src":"6817:4:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":2547,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6823:41:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":2544,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[2551,2580],"referencedDeclaration":2580,"src":"6788:20:24","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":2548,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6788:77:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2543,"id":2549,"nodeType":"Return","src":"6781:84:24"}]},"documentation":{"id":2535,"nodeType":"StructuredDocumentation","src":"6501:168:24","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":2551,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6683:20:24","nodeType":"FunctionDefinition","parameters":{"id":2540,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2537,"mutability":"mutable","name":"target","nameLocation":"6712:6:24","nodeType":"VariableDeclaration","scope":2551,"src":"6704:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2536,"name":"address","nodeType":"ElementaryTypeName","src":"6704:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2539,"mutability":"mutable","name":"data","nameLocation":"6733:4:24","nodeType":"VariableDeclaration","scope":2551,"src":"6720:17:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2538,"name":"bytes","nodeType":"ElementaryTypeName","src":"6720:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6703:35:24"},"returnParameters":{"id":2543,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2542,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2551,"src":"6757:12:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2541,"name":"bytes","nodeType":"ElementaryTypeName","src":"6757:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6756:14:24"},"scope":2664,"src":"6674:198:24","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2579,"nodeType":"Block","src":"7213:170:24","statements":[{"assignments":[2564,2566],"declarations":[{"constant":false,"id":2564,"mutability":"mutable","name":"success","nameLocation":"7229:7:24","nodeType":"VariableDeclaration","scope":2579,"src":"7224:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2563,"name":"bool","nodeType":"ElementaryTypeName","src":"7224:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2566,"mutability":"mutable","name":"returndata","nameLocation":"7251:10:24","nodeType":"VariableDeclaration","scope":2579,"src":"7238:23:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2565,"name":"bytes","nodeType":"ElementaryTypeName","src":"7238:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2571,"initialValue":{"arguments":[{"id":2569,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2556,"src":"7285:4:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":2567,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2554,"src":"7265:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7272:12:24","memberName":"delegatecall","nodeType":"MemberAccess","src":"7265:19:24","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":2570,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7265:25:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7223:67:24"},{"expression":{"arguments":[{"id":2573,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2554,"src":"7334:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2574,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2564,"src":"7342:7:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":2575,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2566,"src":"7351:10:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2576,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2558,"src":"7363:12:24","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2572,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2619,"src":"7307:26:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":2577,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7307:69:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2562,"id":2578,"nodeType":"Return","src":"7300:76:24"}]},"documentation":{"id":2552,"nodeType":"StructuredDocumentation","src":"6878:175:24","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":2580,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7067:20:24","nodeType":"FunctionDefinition","parameters":{"id":2559,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2554,"mutability":"mutable","name":"target","nameLocation":"7105:6:24","nodeType":"VariableDeclaration","scope":2580,"src":"7097:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2553,"name":"address","nodeType":"ElementaryTypeName","src":"7097:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2556,"mutability":"mutable","name":"data","nameLocation":"7134:4:24","nodeType":"VariableDeclaration","scope":2580,"src":"7121:17:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2555,"name":"bytes","nodeType":"ElementaryTypeName","src":"7121:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2558,"mutability":"mutable","name":"errorMessage","nameLocation":"7162:12:24","nodeType":"VariableDeclaration","scope":2580,"src":"7148:26:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2557,"name":"string","nodeType":"ElementaryTypeName","src":"7148:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7087:93:24"},"returnParameters":{"id":2562,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2561,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2580,"src":"7199:12:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2560,"name":"bytes","nodeType":"ElementaryTypeName","src":"7199:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7198:14:24"},"scope":2664,"src":"7058:325:24","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2618,"nodeType":"Block","src":"7865:434:24","statements":[{"condition":{"id":2594,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2585,"src":"7879:7:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2616,"nodeType":"Block","src":"8235:58:24","statements":[{"expression":{"arguments":[{"id":2612,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2587,"src":"8257:10:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2613,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"8269:12:24","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2611,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2663,"src":"8249:7:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":2614,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8249:33:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2615,"nodeType":"ExpressionStatement","src":"8249:33:24"}]},"id":2617,"nodeType":"IfStatement","src":"7875:418:24","trueBody":{"id":2610,"nodeType":"Block","src":"7888:341:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2598,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2595,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2587,"src":"7906:10:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2596,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7917:6:24","memberName":"length","nodeType":"MemberAccess","src":"7906:17:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2597,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7927:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7906:22:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2607,"nodeType":"IfStatement","src":"7902:286:24","trueBody":{"id":2606,"nodeType":"Block","src":"7930:258:24","statements":[{"expression":{"arguments":[{"arguments":[{"id":2601,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"8132:6:24","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2600,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2352,"src":"8121:10:24","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":2602,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8121:18:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":2603,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8141:31:24","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":2599,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8113:7:24","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2604,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8113:60:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2605,"nodeType":"ExpressionStatement","src":"8113:60:24"}]}},{"expression":{"id":2608,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2587,"src":"8208:10:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2593,"id":2609,"nodeType":"Return","src":"8201:17:24"}]}}]},"documentation":{"id":2581,"nodeType":"StructuredDocumentation","src":"7389:277:24","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":2619,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7680:26:24","nodeType":"FunctionDefinition","parameters":{"id":2590,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2583,"mutability":"mutable","name":"target","nameLocation":"7724:6:24","nodeType":"VariableDeclaration","scope":2619,"src":"7716:14:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2582,"name":"address","nodeType":"ElementaryTypeName","src":"7716:7:24","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2585,"mutability":"mutable","name":"success","nameLocation":"7745:7:24","nodeType":"VariableDeclaration","scope":2619,"src":"7740:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2584,"name":"bool","nodeType":"ElementaryTypeName","src":"7740:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2587,"mutability":"mutable","name":"returndata","nameLocation":"7775:10:24","nodeType":"VariableDeclaration","scope":2619,"src":"7762:23:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2586,"name":"bytes","nodeType":"ElementaryTypeName","src":"7762:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2589,"mutability":"mutable","name":"errorMessage","nameLocation":"7809:12:24","nodeType":"VariableDeclaration","scope":2619,"src":"7795:26:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2588,"name":"string","nodeType":"ElementaryTypeName","src":"7795:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7706:121:24"},"returnParameters":{"id":2593,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2592,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2619,"src":"7851:12:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2591,"name":"bytes","nodeType":"ElementaryTypeName","src":"7851:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7850:14:24"},"scope":2664,"src":"7671:628:24","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2642,"nodeType":"Block","src":"8680:135:24","statements":[{"condition":{"id":2631,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2622,"src":"8694:7:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2640,"nodeType":"Block","src":"8751:58:24","statements":[{"expression":{"arguments":[{"id":2636,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2624,"src":"8773:10:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":2637,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2626,"src":"8785:12:24","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2635,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2663,"src":"8765:7:24","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":2638,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8765:33:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2639,"nodeType":"ExpressionStatement","src":"8765:33:24"}]},"id":2641,"nodeType":"IfStatement","src":"8690:119:24","trueBody":{"id":2634,"nodeType":"Block","src":"8703:42:24","statements":[{"expression":{"id":2632,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2624,"src":"8724:10:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":2630,"id":2633,"nodeType":"Return","src":"8717:17:24"}]}}]},"documentation":{"id":2620,"nodeType":"StructuredDocumentation","src":"8305:210:24","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":2643,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8529:16:24","nodeType":"FunctionDefinition","parameters":{"id":2627,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2622,"mutability":"mutable","name":"success","nameLocation":"8560:7:24","nodeType":"VariableDeclaration","scope":2643,"src":"8555:12:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2621,"name":"bool","nodeType":"ElementaryTypeName","src":"8555:4:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":2624,"mutability":"mutable","name":"returndata","nameLocation":"8590:10:24","nodeType":"VariableDeclaration","scope":2643,"src":"8577:23:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2623,"name":"bytes","nodeType":"ElementaryTypeName","src":"8577:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2626,"mutability":"mutable","name":"errorMessage","nameLocation":"8624:12:24","nodeType":"VariableDeclaration","scope":2643,"src":"8610:26:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2625,"name":"string","nodeType":"ElementaryTypeName","src":"8610:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8545:97:24"},"returnParameters":{"id":2630,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2629,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2643,"src":"8666:12:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2628,"name":"bytes","nodeType":"ElementaryTypeName","src":"8666:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8665:14:24"},"scope":2664,"src":"8520:295:24","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2662,"nodeType":"Block","src":"8904:457:24","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":2650,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2645,"src":"8980:10:24","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":2651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8991:6:24","memberName":"length","nodeType":"MemberAccess","src":"8980:17:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2652,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9000:1:24","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8980:21:24","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2660,"nodeType":"Block","src":"9310:45:24","statements":[{"expression":{"arguments":[{"id":2657,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2647,"src":"9331:12:24","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":2656,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9324:6:24","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":2658,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9324:20:24","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2659,"nodeType":"ExpressionStatement","src":"9324:20:24"}]},"id":2661,"nodeType":"IfStatement","src":"8976:379:24","trueBody":{"id":2655,"nodeType":"Block","src":"9003:301:24","statements":[{"AST":{"nodeType":"YulBlock","src":"9161:133:24","statements":[{"nodeType":"YulVariableDeclaration","src":"9179:40:24","value":{"arguments":[{"name":"returndata","nodeType":"YulIdentifier","src":"9208:10:24"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9202:5:24"},"nodeType":"YulFunctionCall","src":"9202:17:24"},"variables":[{"name":"returndata_size","nodeType":"YulTypedName","src":"9183:15:24","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"9247:2:24","type":"","value":"32"},{"name":"returndata","nodeType":"YulIdentifier","src":"9251:10:24"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9243:3:24"},"nodeType":"YulFunctionCall","src":"9243:19:24"},{"name":"returndata_size","nodeType":"YulIdentifier","src":"9264:15:24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"9236:6:24"},"nodeType":"YulFunctionCall","src":"9236:44:24"},"nodeType":"YulExpressionStatement","src":"9236:44:24"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2645,"isOffset":false,"isSlot":false,"src":"9208:10:24","valueSize":1},{"declaration":2645,"isOffset":false,"isSlot":false,"src":"9251:10:24","valueSize":1}],"id":2654,"nodeType":"InlineAssembly","src":"9152:142:24"}]}}]},"id":2663,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8830:7:24","nodeType":"FunctionDefinition","parameters":{"id":2648,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2645,"mutability":"mutable","name":"returndata","nameLocation":"8851:10:24","nodeType":"VariableDeclaration","scope":2663,"src":"8838:23:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2644,"name":"bytes","nodeType":"ElementaryTypeName","src":"8838:5:24","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":2647,"mutability":"mutable","name":"errorMessage","nameLocation":"8877:12:24","nodeType":"VariableDeclaration","scope":2663,"src":"8863:26:24","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2646,"name":"string","nodeType":"ElementaryTypeName","src":"8863:6:24","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8837:53:24"},"returnParameters":{"id":2649,"nodeType":"ParameterList","parameters":[],"src":"8904:0:24"},"scope":2664,"src":"8821:540:24","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":2665,"src":"194:9169:24","usedErrors":[]}],"src":"101:9263:24"},"id":24},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[2686]},"id":2687,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2666,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:25"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":2667,"nodeType":"StructuredDocumentation","src":"111:496:25","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":2686,"linearizedBaseContracts":[2686],"name":"Context","nameLocation":"626:7:25","nodeType":"ContractDefinition","nodes":[{"body":{"id":2675,"nodeType":"Block","src":"702:34:25","statements":[{"expression":{"expression":{"id":2672,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:25","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"723:6:25","memberName":"sender","nodeType":"MemberAccess","src":"719:10:25","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":2671,"id":2674,"nodeType":"Return","src":"712:17:25"}]},"id":2676,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:25","nodeType":"FunctionDefinition","parameters":{"id":2668,"nodeType":"ParameterList","parameters":[],"src":"659:2:25"},"returnParameters":{"id":2671,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2670,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2676,"src":"693:7:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2669,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:25"},"scope":2686,"src":"640:96:25","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":2684,"nodeType":"Block","src":"809:32:25","statements":[{"expression":{"expression":{"id":2681,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:25","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"830:4:25","memberName":"data","nodeType":"MemberAccess","src":"826:8:25","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":2680,"id":2683,"nodeType":"Return","src":"819:15:25"}]},"id":2685,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:25","nodeType":"FunctionDefinition","parameters":{"id":2677,"nodeType":"ParameterList","parameters":[],"src":"759:2:25"},"returnParameters":{"id":2680,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2679,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2685,"src":"793:14:25","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2678,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:25","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:25"},"scope":2686,"src":"742:99:25","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":2687,"src":"608:235:25","usedErrors":[]}],"src":"86:758:25"},"id":25},"@openzeppelin/contracts/utils/Counters.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Counters.sol","exportedSymbols":{"Counters":[2760]},"id":2761,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2688,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"87:23:26"},{"abstract":false,"baseContracts":[],"canonicalName":"Counters","contractDependencies":[],"contractKind":"library","documentation":{"id":2689,"nodeType":"StructuredDocumentation","src":"112:311:26","text":" @title Counters\n @author Matt Condon (@shrugs)\n @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n of elements in a mapping, issuing ERC721 ids, or counting request ids.\n Include with `using Counters for Counters.Counter;`"},"fullyImplemented":true,"id":2760,"linearizedBaseContracts":[2760],"name":"Counters","nameLocation":"432:8:26","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Counters.Counter","id":2692,"members":[{"constant":false,"id":2691,"mutability":"mutable","name":"_value","nameLocation":"794:6:26","nodeType":"VariableDeclaration","scope":2692,"src":"786:14:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2690,"name":"uint256","nodeType":"ElementaryTypeName","src":"786:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Counter","nameLocation":"454:7:26","nodeType":"StructDefinition","scope":2760,"src":"447:374:26","visibility":"public"},{"body":{"id":2703,"nodeType":"Block","src":"901:38:26","statements":[{"expression":{"expression":{"id":2700,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2695,"src":"918:7:26","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2692_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":2701,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"926:6:26","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":2691,"src":"918:14:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2699,"id":2702,"nodeType":"Return","src":"911:21:26"}]},"id":2704,"implemented":true,"kind":"function","modifiers":[],"name":"current","nameLocation":"836:7:26","nodeType":"FunctionDefinition","parameters":{"id":2696,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2695,"mutability":"mutable","name":"counter","nameLocation":"860:7:26","nodeType":"VariableDeclaration","scope":2704,"src":"844:23:26","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2692_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":2694,"nodeType":"UserDefinedTypeName","pathNode":{"id":2693,"name":"Counter","nameLocations":["844:7:26"],"nodeType":"IdentifierPath","referencedDeclaration":2692,"src":"844:7:26"},"referencedDeclaration":2692,"src":"844:7:26","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2692_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"843:25:26"},"returnParameters":{"id":2699,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2698,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2704,"src":"892:7:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2697,"name":"uint256","nodeType":"ElementaryTypeName","src":"892:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"891:9:26"},"scope":2760,"src":"827:112:26","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":2717,"nodeType":"Block","src":"998:70:26","statements":[{"id":2716,"nodeType":"UncheckedBlock","src":"1008:54:26","statements":[{"expression":{"id":2714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2710,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2707,"src":"1032:7:26","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2692_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":2712,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1040:6:26","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":2691,"src":"1032:14:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2713,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1050:1:26","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1032:19:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2715,"nodeType":"ExpressionStatement","src":"1032:19:26"}]}]},"id":2718,"implemented":true,"kind":"function","modifiers":[],"name":"increment","nameLocation":"954:9:26","nodeType":"FunctionDefinition","parameters":{"id":2708,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2707,"mutability":"mutable","name":"counter","nameLocation":"980:7:26","nodeType":"VariableDeclaration","scope":2718,"src":"964:23:26","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2692_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":2706,"nodeType":"UserDefinedTypeName","pathNode":{"id":2705,"name":"Counter","nameLocations":["964:7:26"],"nodeType":"IdentifierPath","referencedDeclaration":2692,"src":"964:7:26"},"referencedDeclaration":2692,"src":"964:7:26","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2692_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"963:25:26"},"returnParameters":{"id":2709,"nodeType":"ParameterList","parameters":[],"src":"998:0:26"},"scope":2760,"src":"945:123:26","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2745,"nodeType":"Block","src":"1127:176:26","statements":[{"assignments":[2725],"declarations":[{"constant":false,"id":2725,"mutability":"mutable","name":"value","nameLocation":"1145:5:26","nodeType":"VariableDeclaration","scope":2745,"src":"1137:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2724,"name":"uint256","nodeType":"ElementaryTypeName","src":"1137:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2728,"initialValue":{"expression":{"id":2726,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2721,"src":"1153:7:26","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2692_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":2727,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1161:6:26","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":2691,"src":"1153:14:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"1137:30:26"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2732,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2730,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2725,"src":"1185:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2731,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1193:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1185:9:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"436f756e7465723a2064656372656d656e74206f766572666c6f77","id":2733,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1196:29:26","typeDescriptions":{"typeIdentifier":"t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f","typeString":"literal_string \"Counter: decrement overflow\""},"value":"Counter: decrement overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_1dfd0d5389474d871b8e8929aab9d4def041f55f90f625754fb5f9a9ba08af6f","typeString":"literal_string \"Counter: decrement overflow\""}],"id":2729,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"1177:7:26","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":2734,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1177:49:26","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2735,"nodeType":"ExpressionStatement","src":"1177:49:26"},{"id":2744,"nodeType":"UncheckedBlock","src":"1236:61:26","statements":[{"expression":{"id":2742,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2736,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2721,"src":"1260:7:26","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2692_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":2738,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1268:6:26","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":2691,"src":"1260:14:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2741,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2739,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2725,"src":"1277:5:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2740,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1285:1:26","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1277:9:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1260:26:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2743,"nodeType":"ExpressionStatement","src":"1260:26:26"}]}]},"id":2746,"implemented":true,"kind":"function","modifiers":[],"name":"decrement","nameLocation":"1083:9:26","nodeType":"FunctionDefinition","parameters":{"id":2722,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2721,"mutability":"mutable","name":"counter","nameLocation":"1109:7:26","nodeType":"VariableDeclaration","scope":2746,"src":"1093:23:26","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2692_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":2720,"nodeType":"UserDefinedTypeName","pathNode":{"id":2719,"name":"Counter","nameLocations":["1093:7:26"],"nodeType":"IdentifierPath","referencedDeclaration":2692,"src":"1093:7:26"},"referencedDeclaration":2692,"src":"1093:7:26","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2692_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"1092:25:26"},"returnParameters":{"id":2723,"nodeType":"ParameterList","parameters":[],"src":"1127:0:26"},"scope":2760,"src":"1074:229:26","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2758,"nodeType":"Block","src":"1358:35:26","statements":[{"expression":{"id":2756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":2752,"name":"counter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2749,"src":"1368:7:26","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2692_storage_ptr","typeString":"struct Counters.Counter storage pointer"}},"id":2754,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1376:6:26","memberName":"_value","nodeType":"MemberAccess","referencedDeclaration":2691,"src":"1368:14:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":2755,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1385:1:26","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1368:18:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2757,"nodeType":"ExpressionStatement","src":"1368:18:26"}]},"id":2759,"implemented":true,"kind":"function","modifiers":[],"name":"reset","nameLocation":"1318:5:26","nodeType":"FunctionDefinition","parameters":{"id":2750,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2749,"mutability":"mutable","name":"counter","nameLocation":"1340:7:26","nodeType":"VariableDeclaration","scope":2759,"src":"1324:23:26","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2692_storage_ptr","typeString":"struct Counters.Counter"},"typeName":{"id":2748,"nodeType":"UserDefinedTypeName","pathNode":{"id":2747,"name":"Counter","nameLocations":["1324:7:26"],"nodeType":"IdentifierPath","referencedDeclaration":2692,"src":"1324:7:26"},"referencedDeclaration":2692,"src":"1324:7:26","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2692_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"internal"}],"src":"1323:25:26"},"returnParameters":{"id":2751,"nodeType":"ParameterList","parameters":[],"src":"1358:0:26"},"scope":2760,"src":"1309:84:26","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":2761,"src":"424:971:26","usedErrors":[]}],"src":"87:1309:26"},"id":26},"@openzeppelin/contracts/utils/StorageSlot.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","exportedSymbols":{"StorageSlot":[2870]},"id":2871,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2762,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"193:23:27"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlot","contractDependencies":[],"contractKind":"library","documentation":{"id":2763,"nodeType":"StructuredDocumentation","src":"218:1201:27","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```solidity\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n _Available since v4.9 for `string`, `bytes`._"},"fullyImplemented":true,"id":2870,"linearizedBaseContracts":[2870],"name":"StorageSlot","nameLocation":"1428:11:27","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlot.AddressSlot","id":2766,"members":[{"constant":false,"id":2765,"mutability":"mutable","name":"value","nameLocation":"1483:5:27","nodeType":"VariableDeclaration","scope":2766,"src":"1475:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2764,"name":"address","nodeType":"ElementaryTypeName","src":"1475:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1453:11:27","nodeType":"StructDefinition","scope":2870,"src":"1446:49:27","visibility":"public"},{"canonicalName":"StorageSlot.BooleanSlot","id":2769,"members":[{"constant":false,"id":2768,"mutability":"mutable","name":"value","nameLocation":"1535:5:27","nodeType":"VariableDeclaration","scope":2769,"src":"1530:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2767,"name":"bool","nodeType":"ElementaryTypeName","src":"1530:4:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1508:11:27","nodeType":"StructDefinition","scope":2870,"src":"1501:46:27","visibility":"public"},{"canonicalName":"StorageSlot.Bytes32Slot","id":2772,"members":[{"constant":false,"id":2771,"mutability":"mutable","name":"value","nameLocation":"1590:5:27","nodeType":"VariableDeclaration","scope":2772,"src":"1582:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2770,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1582:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1560:11:27","nodeType":"StructDefinition","scope":2870,"src":"1553:49:27","visibility":"public"},{"canonicalName":"StorageSlot.Uint256Slot","id":2775,"members":[{"constant":false,"id":2774,"mutability":"mutable","name":"value","nameLocation":"1645:5:27","nodeType":"VariableDeclaration","scope":2775,"src":"1637:13:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2773,"name":"uint256","nodeType":"ElementaryTypeName","src":"1637:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1615:11:27","nodeType":"StructDefinition","scope":2870,"src":"1608:49:27","visibility":"public"},{"canonicalName":"StorageSlot.StringSlot","id":2778,"members":[{"constant":false,"id":2777,"mutability":"mutable","name":"value","nameLocation":"1698:5:27","nodeType":"VariableDeclaration","scope":2778,"src":"1691:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2776,"name":"string","nodeType":"ElementaryTypeName","src":"1691:6:27","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"StringSlot","nameLocation":"1670:10:27","nodeType":"StructDefinition","scope":2870,"src":"1663:47:27","visibility":"public"},{"canonicalName":"StorageSlot.BytesSlot","id":2781,"members":[{"constant":false,"id":2780,"mutability":"mutable","name":"value","nameLocation":"1749:5:27","nodeType":"VariableDeclaration","scope":2781,"src":"1743:11:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2779,"name":"bytes","nodeType":"ElementaryTypeName","src":"1743:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"BytesSlot","nameLocation":"1723:9:27","nodeType":"StructDefinition","scope":2870,"src":"1716:45:27","visibility":"public"},{"body":{"id":2791,"nodeType":"Block","src":"1943:106:27","statements":[{"AST":{"nodeType":"YulBlock","src":"2005:38:27","statements":[{"nodeType":"YulAssignment","src":"2019:14:27","value":{"name":"slot","nodeType":"YulIdentifier","src":"2029:4:27"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2019:6:27"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2788,"isOffset":false,"isSlot":true,"src":"2019:6:27","suffix":"slot","valueSize":1},{"declaration":2784,"isOffset":false,"isSlot":false,"src":"2029:4:27","valueSize":1}],"id":2790,"nodeType":"InlineAssembly","src":"1996:47:27"}]},"documentation":{"id":2782,"nodeType":"StructuredDocumentation","src":"1767:87:27","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":2792,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1868:14:27","nodeType":"FunctionDefinition","parameters":{"id":2785,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2784,"mutability":"mutable","name":"slot","nameLocation":"1891:4:27","nodeType":"VariableDeclaration","scope":2792,"src":"1883:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2783,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1883:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1882:14:27"},"returnParameters":{"id":2789,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2788,"mutability":"mutable","name":"r","nameLocation":"1940:1:27","nodeType":"VariableDeclaration","scope":2792,"src":"1920:21:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2766_storage_ptr","typeString":"struct StorageSlot.AddressSlot"},"typeName":{"id":2787,"nodeType":"UserDefinedTypeName","pathNode":{"id":2786,"name":"AddressSlot","nameLocations":["1920:11:27"],"nodeType":"IdentifierPath","referencedDeclaration":2766,"src":"1920:11:27"},"referencedDeclaration":2766,"src":"1920:11:27","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$2766_storage_ptr","typeString":"struct StorageSlot.AddressSlot"}},"visibility":"internal"}],"src":"1919:23:27"},"scope":2870,"src":"1859:190:27","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2802,"nodeType":"Block","src":"2231:106:27","statements":[{"AST":{"nodeType":"YulBlock","src":"2293:38:27","statements":[{"nodeType":"YulAssignment","src":"2307:14:27","value":{"name":"slot","nodeType":"YulIdentifier","src":"2317:4:27"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2307:6:27"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2799,"isOffset":false,"isSlot":true,"src":"2307:6:27","suffix":"slot","valueSize":1},{"declaration":2795,"isOffset":false,"isSlot":false,"src":"2317:4:27","valueSize":1}],"id":2801,"nodeType":"InlineAssembly","src":"2284:47:27"}]},"documentation":{"id":2793,"nodeType":"StructuredDocumentation","src":"2055:87:27","text":" @dev Returns an `BooleanSlot` with member `value` located at `slot`."},"id":2803,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"2156:14:27","nodeType":"FunctionDefinition","parameters":{"id":2796,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2795,"mutability":"mutable","name":"slot","nameLocation":"2179:4:27","nodeType":"VariableDeclaration","scope":2803,"src":"2171:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2794,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2171:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2170:14:27"},"returnParameters":{"id":2800,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2799,"mutability":"mutable","name":"r","nameLocation":"2228:1:27","nodeType":"VariableDeclaration","scope":2803,"src":"2208:21:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$2769_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"},"typeName":{"id":2798,"nodeType":"UserDefinedTypeName","pathNode":{"id":2797,"name":"BooleanSlot","nameLocations":["2208:11:27"],"nodeType":"IdentifierPath","referencedDeclaration":2769,"src":"2208:11:27"},"referencedDeclaration":2769,"src":"2208:11:27","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$2769_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"}},"visibility":"internal"}],"src":"2207:23:27"},"scope":2870,"src":"2147:190:27","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2813,"nodeType":"Block","src":"2519:106:27","statements":[{"AST":{"nodeType":"YulBlock","src":"2581:38:27","statements":[{"nodeType":"YulAssignment","src":"2595:14:27","value":{"name":"slot","nodeType":"YulIdentifier","src":"2605:4:27"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2595:6:27"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2810,"isOffset":false,"isSlot":true,"src":"2595:6:27","suffix":"slot","valueSize":1},{"declaration":2806,"isOffset":false,"isSlot":false,"src":"2605:4:27","valueSize":1}],"id":2812,"nodeType":"InlineAssembly","src":"2572:47:27"}]},"documentation":{"id":2804,"nodeType":"StructuredDocumentation","src":"2343:87:27","text":" @dev Returns an `Bytes32Slot` with member `value` located at `slot`."},"id":2814,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2444:14:27","nodeType":"FunctionDefinition","parameters":{"id":2807,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2806,"mutability":"mutable","name":"slot","nameLocation":"2467:4:27","nodeType":"VariableDeclaration","scope":2814,"src":"2459:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2805,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2459:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2458:14:27"},"returnParameters":{"id":2811,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2810,"mutability":"mutable","name":"r","nameLocation":"2516:1:27","nodeType":"VariableDeclaration","scope":2814,"src":"2496:21:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$2772_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"},"typeName":{"id":2809,"nodeType":"UserDefinedTypeName","pathNode":{"id":2808,"name":"Bytes32Slot","nameLocations":["2496:11:27"],"nodeType":"IdentifierPath","referencedDeclaration":2772,"src":"2496:11:27"},"referencedDeclaration":2772,"src":"2496:11:27","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$2772_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"}},"visibility":"internal"}],"src":"2495:23:27"},"scope":2870,"src":"2435:190:27","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2824,"nodeType":"Block","src":"2807:106:27","statements":[{"AST":{"nodeType":"YulBlock","src":"2869:38:27","statements":[{"nodeType":"YulAssignment","src":"2883:14:27","value":{"name":"slot","nodeType":"YulIdentifier","src":"2893:4:27"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"2883:6:27"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2821,"isOffset":false,"isSlot":true,"src":"2883:6:27","suffix":"slot","valueSize":1},{"declaration":2817,"isOffset":false,"isSlot":false,"src":"2893:4:27","valueSize":1}],"id":2823,"nodeType":"InlineAssembly","src":"2860:47:27"}]},"documentation":{"id":2815,"nodeType":"StructuredDocumentation","src":"2631:87:27","text":" @dev Returns an `Uint256Slot` with member `value` located at `slot`."},"id":2825,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2732:14:27","nodeType":"FunctionDefinition","parameters":{"id":2818,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2817,"mutability":"mutable","name":"slot","nameLocation":"2755:4:27","nodeType":"VariableDeclaration","scope":2825,"src":"2747:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2816,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2747:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2746:14:27"},"returnParameters":{"id":2822,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2821,"mutability":"mutable","name":"r","nameLocation":"2804:1:27","nodeType":"VariableDeclaration","scope":2825,"src":"2784:21:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2775_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":2820,"nodeType":"UserDefinedTypeName","pathNode":{"id":2819,"name":"Uint256Slot","nameLocations":["2784:11:27"],"nodeType":"IdentifierPath","referencedDeclaration":2775,"src":"2784:11:27"},"referencedDeclaration":2775,"src":"2784:11:27","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$2775_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"src":"2783:23:27"},"scope":2870,"src":"2723:190:27","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2835,"nodeType":"Block","src":"3092:106:27","statements":[{"AST":{"nodeType":"YulBlock","src":"3154:38:27","statements":[{"nodeType":"YulAssignment","src":"3168:14:27","value":{"name":"slot","nodeType":"YulIdentifier","src":"3178:4:27"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"3168:6:27"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2832,"isOffset":false,"isSlot":true,"src":"3168:6:27","suffix":"slot","valueSize":1},{"declaration":2828,"isOffset":false,"isSlot":false,"src":"3178:4:27","valueSize":1}],"id":2834,"nodeType":"InlineAssembly","src":"3145:47:27"}]},"documentation":{"id":2826,"nodeType":"StructuredDocumentation","src":"2919:86:27","text":" @dev Returns an `StringSlot` with member `value` located at `slot`."},"id":2836,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3019:13:27","nodeType":"FunctionDefinition","parameters":{"id":2829,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2828,"mutability":"mutable","name":"slot","nameLocation":"3041:4:27","nodeType":"VariableDeclaration","scope":2836,"src":"3033:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2827,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3033:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3032:14:27"},"returnParameters":{"id":2833,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2832,"mutability":"mutable","name":"r","nameLocation":"3089:1:27","nodeType":"VariableDeclaration","scope":2836,"src":"3070:20:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$2778_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":2831,"nodeType":"UserDefinedTypeName","pathNode":{"id":2830,"name":"StringSlot","nameLocations":["3070:10:27"],"nodeType":"IdentifierPath","referencedDeclaration":2778,"src":"3070:10:27"},"referencedDeclaration":2778,"src":"3070:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$2778_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"3069:22:27"},"scope":2870,"src":"3010:188:27","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2846,"nodeType":"Block","src":"3400:112:27","statements":[{"AST":{"nodeType":"YulBlock","src":"3462:44:27","statements":[{"nodeType":"YulAssignment","src":"3476:20:27","value":{"name":"store.slot","nodeType":"YulIdentifier","src":"3486:10:27"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"3476:6:27"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2843,"isOffset":false,"isSlot":true,"src":"3476:6:27","suffix":"slot","valueSize":1},{"declaration":2839,"isOffset":false,"isSlot":true,"src":"3486:10:27","suffix":"slot","valueSize":1}],"id":2845,"nodeType":"InlineAssembly","src":"3453:53:27"}]},"documentation":{"id":2837,"nodeType":"StructuredDocumentation","src":"3204:101:27","text":" @dev Returns an `StringSlot` representation of the string storage pointer `store`."},"id":2847,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3319:13:27","nodeType":"FunctionDefinition","parameters":{"id":2840,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2839,"mutability":"mutable","name":"store","nameLocation":"3348:5:27","nodeType":"VariableDeclaration","scope":2847,"src":"3333:20:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":2838,"name":"string","nodeType":"ElementaryTypeName","src":"3333:6:27","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3332:22:27"},"returnParameters":{"id":2844,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2843,"mutability":"mutable","name":"r","nameLocation":"3397:1:27","nodeType":"VariableDeclaration","scope":2847,"src":"3378:20:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$2778_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":2842,"nodeType":"UserDefinedTypeName","pathNode":{"id":2841,"name":"StringSlot","nameLocations":["3378:10:27"],"nodeType":"IdentifierPath","referencedDeclaration":2778,"src":"3378:10:27"},"referencedDeclaration":2778,"src":"3378:10:27","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$2778_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"3377:22:27"},"scope":2870,"src":"3310:202:27","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2857,"nodeType":"Block","src":"3688:106:27","statements":[{"AST":{"nodeType":"YulBlock","src":"3750:38:27","statements":[{"nodeType":"YulAssignment","src":"3764:14:27","value":{"name":"slot","nodeType":"YulIdentifier","src":"3774:4:27"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"3764:6:27"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2854,"isOffset":false,"isSlot":true,"src":"3764:6:27","suffix":"slot","valueSize":1},{"declaration":2850,"isOffset":false,"isSlot":false,"src":"3774:4:27","valueSize":1}],"id":2856,"nodeType":"InlineAssembly","src":"3741:47:27"}]},"documentation":{"id":2848,"nodeType":"StructuredDocumentation","src":"3518:85:27","text":" @dev Returns an `BytesSlot` with member `value` located at `slot`."},"id":2858,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3617:12:27","nodeType":"FunctionDefinition","parameters":{"id":2851,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2850,"mutability":"mutable","name":"slot","nameLocation":"3638:4:27","nodeType":"VariableDeclaration","scope":2858,"src":"3630:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2849,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3630:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3629:14:27"},"returnParameters":{"id":2855,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2854,"mutability":"mutable","name":"r","nameLocation":"3685:1:27","nodeType":"VariableDeclaration","scope":2858,"src":"3667:19:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$2781_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":2853,"nodeType":"UserDefinedTypeName","pathNode":{"id":2852,"name":"BytesSlot","nameLocations":["3667:9:27"],"nodeType":"IdentifierPath","referencedDeclaration":2781,"src":"3667:9:27"},"referencedDeclaration":2781,"src":"3667:9:27","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$2781_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"3666:21:27"},"scope":2870,"src":"3608:186:27","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2868,"nodeType":"Block","src":"3991:112:27","statements":[{"AST":{"nodeType":"YulBlock","src":"4053:44:27","statements":[{"nodeType":"YulAssignment","src":"4067:20:27","value":{"name":"store.slot","nodeType":"YulIdentifier","src":"4077:10:27"},"variableNames":[{"name":"r.slot","nodeType":"YulIdentifier","src":"4067:6:27"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2865,"isOffset":false,"isSlot":true,"src":"4067:6:27","suffix":"slot","valueSize":1},{"declaration":2861,"isOffset":false,"isSlot":true,"src":"4077:10:27","suffix":"slot","valueSize":1}],"id":2867,"nodeType":"InlineAssembly","src":"4044:53:27"}]},"documentation":{"id":2859,"nodeType":"StructuredDocumentation","src":"3800:99:27","text":" @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`."},"id":2869,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3913:12:27","nodeType":"FunctionDefinition","parameters":{"id":2862,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2861,"mutability":"mutable","name":"store","nameLocation":"3940:5:27","nodeType":"VariableDeclaration","scope":2869,"src":"3926:19:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":2860,"name":"bytes","nodeType":"ElementaryTypeName","src":"3926:5:27","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3925:21:27"},"returnParameters":{"id":2866,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2865,"mutability":"mutable","name":"r","nameLocation":"3988:1:27","nodeType":"VariableDeclaration","scope":2869,"src":"3970:19:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$2781_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":2864,"nodeType":"UserDefinedTypeName","pathNode":{"id":2863,"name":"BytesSlot","nameLocations":["3970:9:27"],"nodeType":"IdentifierPath","referencedDeclaration":2781,"src":"3970:9:27"},"referencedDeclaration":2781,"src":"3970:9:27","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$2781_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"3969:21:27"},"scope":2870,"src":"3904:199:27","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2871,"src":"1420:2685:27","usedErrors":[]}],"src":"193:3913:27"},"id":27},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[4195],"SignedMath":[4300],"Strings":[3099]},"id":3100,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2872,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:28"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":2873,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3100,"sourceUnit":4196,"src":"126:25:28","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","file":"./math/SignedMath.sol","id":2874,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3100,"sourceUnit":4301,"src":"152:31:28","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":2875,"nodeType":"StructuredDocumentation","src":"185:34:28","text":" @dev String operations."},"fullyImplemented":true,"id":3099,"linearizedBaseContracts":[3099],"name":"Strings","nameLocation":"228:7:28","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":2878,"mutability":"constant","name":"_SYMBOLS","nameLocation":"267:8:28","nodeType":"VariableDeclaration","scope":3099,"src":"242:54:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":2876,"name":"bytes16","nodeType":"ElementaryTypeName","src":"242:7:28","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":2877,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"278:18:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":2881,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"325:15:28","nodeType":"VariableDeclaration","scope":3099,"src":"302:43:28","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":2879,"name":"uint8","nodeType":"ElementaryTypeName","src":"302:5:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":2880,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"343:2:28","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":2928,"nodeType":"Block","src":"518:625:28","statements":[{"id":2927,"nodeType":"UncheckedBlock","src":"528:609:28","statements":[{"assignments":[2890],"declarations":[{"constant":false,"id":2890,"mutability":"mutable","name":"length","nameLocation":"560:6:28","nodeType":"VariableDeclaration","scope":2927,"src":"552:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2889,"name":"uint256","nodeType":"ElementaryTypeName","src":"552:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2897,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2893,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2884,"src":"580:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2891,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4195,"src":"569:4:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$4195_$","typeString":"type(library Math)"}},"id":2892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"574:5:28","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":4032,"src":"569:10:28","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2894,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"569:17:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2895,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"589:1:28","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"569:21:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"552:38:28"},{"assignments":[2899],"declarations":[{"constant":false,"id":2899,"mutability":"mutable","name":"buffer","nameLocation":"618:6:28","nodeType":"VariableDeclaration","scope":2927,"src":"604:20:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2898,"name":"string","nodeType":"ElementaryTypeName","src":"604:6:28","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":2904,"initialValue":{"arguments":[{"id":2902,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2890,"src":"638:6:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2901,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"627:10:28","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":2900,"name":"string","nodeType":"ElementaryTypeName","src":"631:6:28","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":2903,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"627:18:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"604:41:28"},{"assignments":[2906],"declarations":[{"constant":false,"id":2906,"mutability":"mutable","name":"ptr","nameLocation":"667:3:28","nodeType":"VariableDeclaration","scope":2927,"src":"659:11:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2905,"name":"uint256","nodeType":"ElementaryTypeName","src":"659:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2907,"nodeType":"VariableDeclarationStatement","src":"659:11:28"},{"AST":{"nodeType":"YulBlock","src":"740:67:28","statements":[{"nodeType":"YulAssignment","src":"758:35:28","value":{"arguments":[{"name":"buffer","nodeType":"YulIdentifier","src":"769:6:28"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"781:2:28","type":"","value":"32"},{"name":"length","nodeType":"YulIdentifier","src":"785:6:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"777:3:28"},"nodeType":"YulFunctionCall","src":"777:15:28"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"765:3:28"},"nodeType":"YulFunctionCall","src":"765:28:28"},"variableNames":[{"name":"ptr","nodeType":"YulIdentifier","src":"758:3:28"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2899,"isOffset":false,"isSlot":false,"src":"769:6:28","valueSize":1},{"declaration":2890,"isOffset":false,"isSlot":false,"src":"785:6:28","valueSize":1},{"declaration":2906,"isOffset":false,"isSlot":false,"src":"758:3:28","valueSize":1}],"id":2908,"nodeType":"InlineAssembly","src":"731:76:28"},{"body":{"id":2923,"nodeType":"Block","src":"833:267:28","statements":[{"expression":{"id":2911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"851:5:28","subExpression":{"id":2910,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2906,"src":"851:3:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2912,"nodeType":"ExpressionStatement","src":"851:5:28"},{"AST":{"nodeType":"YulBlock","src":"934:84:28","statements":[{"expression":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"964:3:28"},{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"978:5:28"},{"kind":"number","nodeType":"YulLiteral","src":"985:2:28","type":"","value":"10"}],"functionName":{"name":"mod","nodeType":"YulIdentifier","src":"974:3:28"},"nodeType":"YulFunctionCall","src":"974:14:28"},{"name":"_SYMBOLS","nodeType":"YulIdentifier","src":"990:8:28"}],"functionName":{"name":"byte","nodeType":"YulIdentifier","src":"969:4:28"},"nodeType":"YulFunctionCall","src":"969:30:28"}],"functionName":{"name":"mstore8","nodeType":"YulIdentifier","src":"956:7:28"},"nodeType":"YulFunctionCall","src":"956:44:28"},"nodeType":"YulExpressionStatement","src":"956:44:28"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":2878,"isOffset":false,"isSlot":false,"src":"990:8:28","valueSize":1},{"declaration":2906,"isOffset":false,"isSlot":false,"src":"964:3:28","valueSize":1},{"declaration":2884,"isOffset":false,"isSlot":false,"src":"978:5:28","valueSize":1}],"id":2913,"nodeType":"InlineAssembly","src":"925:93:28"},{"expression":{"id":2916,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2914,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2884,"src":"1035:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":2915,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1044:2:28","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1035:11:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2917,"nodeType":"ExpressionStatement","src":"1035:11:28"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2918,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2884,"src":"1068:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2919,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1077:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1068:10:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2922,"nodeType":"IfStatement","src":"1064:21:28","trueBody":{"id":2921,"nodeType":"Break","src":"1080:5:28"}}]},"condition":{"hexValue":"74727565","id":2909,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"827:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":2924,"nodeType":"WhileStatement","src":"820:280:28"},{"expression":{"id":2925,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2899,"src":"1120:6:28","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2888,"id":2926,"nodeType":"Return","src":"1113:13:28"}]}]},"documentation":{"id":2882,"nodeType":"StructuredDocumentation","src":"352:90:28","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":2929,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"456:8:28","nodeType":"FunctionDefinition","parameters":{"id":2885,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2884,"mutability":"mutable","name":"value","nameLocation":"473:5:28","nodeType":"VariableDeclaration","scope":2929,"src":"465:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2883,"name":"uint256","nodeType":"ElementaryTypeName","src":"465:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"464:15:28"},"returnParameters":{"id":2888,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2887,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2929,"src":"503:13:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2886,"name":"string","nodeType":"ElementaryTypeName","src":"503:6:28","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"502:15:28"},"scope":3099,"src":"447:696:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2956,"nodeType":"Block","src":"1313:103:28","statements":[{"expression":{"arguments":[{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2943,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2941,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2932,"src":"1354:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":2942,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1362:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1354:9:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":2945,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1372:2:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":2946,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1354:20:28","trueExpression":{"hexValue":"2d","id":2944,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1366:3:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":2950,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2932,"src":"1400:5:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":2948,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4300,"src":"1385:10:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMath_$4300_$","typeString":"type(library SignedMath)"}},"id":2949,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1396:3:28","memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":4299,"src":"1385:14:28","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":2951,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1385:21:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2947,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[2929,2957],"referencedDeclaration":2929,"src":"1376:8:28","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":2952,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1376:31:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":2939,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1337:3:28","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2940,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1341:12:28","memberName":"encodePacked","nodeType":"MemberAccess","src":"1337:16:28","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2953,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1337:71:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2938,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1330:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":2937,"name":"string","nodeType":"ElementaryTypeName","src":"1330:6:28","typeDescriptions":{}}},"id":2954,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1330:79:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2936,"id":2955,"nodeType":"Return","src":"1323:86:28"}]},"documentation":{"id":2930,"nodeType":"StructuredDocumentation","src":"1149:89:28","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":2957,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"1252:8:28","nodeType":"FunctionDefinition","parameters":{"id":2933,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2932,"mutability":"mutable","name":"value","nameLocation":"1268:5:28","nodeType":"VariableDeclaration","scope":2957,"src":"1261:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2931,"name":"int256","nodeType":"ElementaryTypeName","src":"1261:6:28","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1260:14:28"},"returnParameters":{"id":2936,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2935,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2957,"src":"1298:13:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2934,"name":"string","nodeType":"ElementaryTypeName","src":"1298:6:28","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1297:15:28"},"scope":3099,"src":"1243:173:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2976,"nodeType":"Block","src":"1595:100:28","statements":[{"id":2975,"nodeType":"UncheckedBlock","src":"1605:84:28","statements":[{"expression":{"arguments":[{"id":2966,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2960,"src":"1648:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2969,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2960,"src":"1667:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2967,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4195,"src":"1655:4:28","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$4195_$","typeString":"type(library Math)"}},"id":2968,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1660:6:28","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":4155,"src":"1655:11:28","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2970,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1655:18:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":2971,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1676:1:28","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1655:22:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2965,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[2977,3053,3073],"referencedDeclaration":3053,"src":"1636:11:28","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":2973,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1636:42:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2964,"id":2974,"nodeType":"Return","src":"1629:49:28"}]}]},"documentation":{"id":2958,"nodeType":"StructuredDocumentation","src":"1422:94:28","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":2977,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1530:11:28","nodeType":"FunctionDefinition","parameters":{"id":2961,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2960,"mutability":"mutable","name":"value","nameLocation":"1550:5:28","nodeType":"VariableDeclaration","scope":2977,"src":"1542:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2959,"name":"uint256","nodeType":"ElementaryTypeName","src":"1542:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1541:15:28"},"returnParameters":{"id":2964,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2963,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2977,"src":"1580:13:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2962,"name":"string","nodeType":"ElementaryTypeName","src":"1580:6:28","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1579:15:28"},"scope":3099,"src":"1521:174:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3052,"nodeType":"Block","src":"1908:347:28","statements":[{"assignments":[2988],"declarations":[{"constant":false,"id":2988,"mutability":"mutable","name":"buffer","nameLocation":"1931:6:28","nodeType":"VariableDeclaration","scope":3052,"src":"1918:19:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2987,"name":"bytes","nodeType":"ElementaryTypeName","src":"1918:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2997,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2995,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2993,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":2991,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1950:1:28","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2992,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2982,"src":"1954:6:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1950:10:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":2994,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1963:1:28","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1950:14:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2990,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1940:9:28","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":2989,"name":"bytes","nodeType":"ElementaryTypeName","src":"1944:5:28","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":2996,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1940:25:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1918:47:28"},{"expression":{"id":3002,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":2998,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2988,"src":"1975:6:28","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3000,"indexExpression":{"hexValue":"30","id":2999,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1982:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1975:9:28","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":3001,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1987:3:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1975:15:28","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3003,"nodeType":"ExpressionStatement","src":"1975:15:28"},{"expression":{"id":3008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3004,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2988,"src":"2000:6:28","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3006,"indexExpression":{"hexValue":"31","id":3005,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2007:1:28","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2000:9:28","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":3007,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2012:3:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2000:15:28","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3009,"nodeType":"ExpressionStatement","src":"2000:15:28"},{"body":{"id":3038,"nodeType":"Block","src":"2070:83:28","statements":[{"expression":{"id":3032,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3024,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2988,"src":"2084:6:28","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3026,"indexExpression":{"id":3025,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3011,"src":"2091:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2084:9:28","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":3027,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"2096:8:28","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":3031,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3028,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2980,"src":"2105:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":3029,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2113:3:28","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2105:11:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2096:21:28","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2084:33:28","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":3033,"nodeType":"ExpressionStatement","src":"2084:33:28"},{"expression":{"id":3036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3034,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2980,"src":"2131:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":3035,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2141:1:28","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2131:11:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3037,"nodeType":"ExpressionStatement","src":"2131:11:28"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3020,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3018,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3011,"src":"2058:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":3019,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2062:1:28","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2058:5:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3039,"initializationExpression":{"assignments":[3011],"declarations":[{"constant":false,"id":3011,"mutability":"mutable","name":"i","nameLocation":"2038:1:28","nodeType":"VariableDeclaration","scope":3039,"src":"2030:9:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3010,"name":"uint256","nodeType":"ElementaryTypeName","src":"2030:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3017,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3012,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2042:1:28","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3013,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2982,"src":"2046:6:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2042:10:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3015,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2055:1:28","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2042:14:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2030:26:28"},"loopExpression":{"expression":{"id":3022,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2065:3:28","subExpression":{"id":3021,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3011,"src":"2067:1:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3023,"nodeType":"ExpressionStatement","src":"2065:3:28"},"nodeType":"ForStatement","src":"2025:128:28"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3043,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3041,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2980,"src":"2170:5:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3042,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2179:1:28","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2170:10:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":3044,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2182:34:28","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":3040,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2162:7:28","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3045,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2162:55:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3046,"nodeType":"ExpressionStatement","src":"2162:55:28"},{"expression":{"arguments":[{"id":3049,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2988,"src":"2241:6:28","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3048,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2234:6:28","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":3047,"name":"string","nodeType":"ElementaryTypeName","src":"2234:6:28","typeDescriptions":{}}},"id":3050,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2234:14:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":2986,"id":3051,"nodeType":"Return","src":"2227:21:28"}]},"documentation":{"id":2978,"nodeType":"StructuredDocumentation","src":"1701:112:28","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":3053,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1827:11:28","nodeType":"FunctionDefinition","parameters":{"id":2983,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2980,"mutability":"mutable","name":"value","nameLocation":"1847:5:28","nodeType":"VariableDeclaration","scope":3053,"src":"1839:13:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2979,"name":"uint256","nodeType":"ElementaryTypeName","src":"1839:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2982,"mutability":"mutable","name":"length","nameLocation":"1862:6:28","nodeType":"VariableDeclaration","scope":3053,"src":"1854:14:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2981,"name":"uint256","nodeType":"ElementaryTypeName","src":"1854:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1838:31:28"},"returnParameters":{"id":2986,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2985,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3053,"src":"1893:13:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":2984,"name":"string","nodeType":"ElementaryTypeName","src":"1893:6:28","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1892:15:28"},"scope":3099,"src":"1818:437:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3072,"nodeType":"Block","src":"2480:76:28","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":3066,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3056,"src":"2525:4:28","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3065,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2517:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3064,"name":"uint160","nodeType":"ElementaryTypeName","src":"2517:7:28","typeDescriptions":{}}},"id":3067,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2517:13:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3063,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2509:7:28","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3062,"name":"uint256","nodeType":"ElementaryTypeName","src":"2509:7:28","typeDescriptions":{}}},"id":3068,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2509:22:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3069,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2881,"src":"2533:15:28","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":3061,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[2977,3053,3073],"referencedDeclaration":3053,"src":"2497:11:28","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":3070,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2497:52:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3060,"id":3071,"nodeType":"Return","src":"2490:59:28"}]},"documentation":{"id":3054,"nodeType":"StructuredDocumentation","src":"2261:141:28","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":3073,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2416:11:28","nodeType":"FunctionDefinition","parameters":{"id":3057,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3056,"mutability":"mutable","name":"addr","nameLocation":"2436:4:28","nodeType":"VariableDeclaration","scope":3073,"src":"2428:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3055,"name":"address","nodeType":"ElementaryTypeName","src":"2428:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2427:14:28"},"returnParameters":{"id":3060,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3059,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3073,"src":"2465:13:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3058,"name":"string","nodeType":"ElementaryTypeName","src":"2465:6:28","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2464:15:28"},"scope":3099,"src":"2407:149:28","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3097,"nodeType":"Block","src":"2711:66:28","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":3095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":3086,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3076,"src":"2744:1:28","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3085,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2738:5:28","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3084,"name":"bytes","nodeType":"ElementaryTypeName","src":"2738:5:28","typeDescriptions":{}}},"id":3087,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2738:8:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3083,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2728:9:28","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3088,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2728:19:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":3092,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3078,"src":"2767:1:28","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3091,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2761:5:28","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":3090,"name":"bytes","nodeType":"ElementaryTypeName","src":"2761:5:28","typeDescriptions":{}}},"id":3093,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2761:8:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3089,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2751:9:28","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3094,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2751:19:28","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2728:42:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3082,"id":3096,"nodeType":"Return","src":"2721:49:28"}]},"documentation":{"id":3074,"nodeType":"StructuredDocumentation","src":"2562:66:28","text":" @dev Returns true if the two strings are equal."},"id":3098,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2642:5:28","nodeType":"FunctionDefinition","parameters":{"id":3079,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3076,"mutability":"mutable","name":"a","nameLocation":"2662:1:28","nodeType":"VariableDeclaration","scope":3098,"src":"2648:15:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3075,"name":"string","nodeType":"ElementaryTypeName","src":"2648:6:28","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3078,"mutability":"mutable","name":"b","nameLocation":"2679:1:28","nodeType":"VariableDeclaration","scope":3098,"src":"2665:15:28","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3077,"name":"string","nodeType":"ElementaryTypeName","src":"2665:6:28","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2647:34:28"},"returnParameters":{"id":3082,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3081,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3098,"src":"2705:4:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3080,"name":"bool","nodeType":"ElementaryTypeName","src":"2705:4:28","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2704:6:28"},"scope":3099,"src":"2633:144:28","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3100,"src":"220:2559:28","usedErrors":[]}],"src":"101:2679:28"},"id":28},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165.sol","exportedSymbols":{"ERC165":[3123],"IERC165":[3329]},"id":3124,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3101,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"99:23:29"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":3102,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3124,"sourceUnit":3330,"src":"124:23:29","symbolAliases":[],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":3104,"name":"IERC165","nameLocations":["754:7:29"],"nodeType":"IdentifierPath","referencedDeclaration":3329,"src":"754:7:29"},"id":3105,"nodeType":"InheritanceSpecifier","src":"754:7:29"}],"canonicalName":"ERC165","contractDependencies":[],"contractKind":"contract","documentation":{"id":3103,"nodeType":"StructuredDocumentation","src":"149:576:29","text":" @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```\n Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation."},"fullyImplemented":true,"id":3123,"linearizedBaseContracts":[3123,3329],"name":"ERC165","nameLocation":"744:6:29","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[3328],"body":{"id":3121,"nodeType":"Block","src":"920:64:29","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":3119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3114,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3108,"src":"937:11:29","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":3116,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3329,"src":"957:7:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$3329_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$3329_$","typeString":"type(contract IERC165)"}],"id":3115,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"952:4:29","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3117,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"952:13:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$3329","typeString":"type(contract IERC165)"}},"id":3118,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"966:11:29","memberName":"interfaceId","nodeType":"MemberAccess","src":"952:25:29","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"937:40:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3113,"id":3120,"nodeType":"Return","src":"930:47:29"}]},"documentation":{"id":3106,"nodeType":"StructuredDocumentation","src":"768:56:29","text":" @dev See {IERC165-supportsInterface}."},"functionSelector":"01ffc9a7","id":3122,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"838:17:29","nodeType":"FunctionDefinition","overrides":{"id":3110,"nodeType":"OverrideSpecifier","overrides":[],"src":"896:8:29"},"parameters":{"id":3109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3108,"mutability":"mutable","name":"interfaceId","nameLocation":"863:11:29","nodeType":"VariableDeclaration","scope":3122,"src":"856:18:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3107,"name":"bytes4","nodeType":"ElementaryTypeName","src":"856:6:29","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"855:20:29"},"returnParameters":{"id":3113,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3112,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3122,"src":"914:4:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3111,"name":"bool","nodeType":"ElementaryTypeName","src":"914:4:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"913:6:29"},"scope":3123,"src":"829:155:29","stateMutability":"view","virtual":true,"visibility":"public"}],"scope":3124,"src":"726:260:29","usedErrors":[]}],"src":"99:888:29"},"id":29},"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol","exportedSymbols":{"ERC165Checker":[3317],"IERC165":[3329]},"id":3318,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3125,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"121:23:30"},{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","file":"./IERC165.sol","id":3126,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3318,"sourceUnit":3330,"src":"146:23:30","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ERC165Checker","contractDependencies":[],"contractKind":"library","documentation":{"id":3127,"nodeType":"StructuredDocumentation","src":"171:277:30","text":" @dev Library used to query support of an interface declared via {IERC165}.\n Note that these functions return the actual result of the query: they do not\n `revert` if an interface is not supported. It is up to the caller to decide\n what to do in these cases."},"fullyImplemented":true,"id":3317,"linearizedBaseContracts":[3317],"name":"ERC165Checker","nameLocation":"457:13:30","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":3130,"mutability":"constant","name":"_INTERFACE_ID_INVALID","nameLocation":"575:21:30","nodeType":"VariableDeclaration","scope":3317,"src":"551:58:30","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3128,"name":"bytes4","nodeType":"ElementaryTypeName","src":"551:6:30","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30786666666666666666","id":3129,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"599:10:30","typeDescriptions":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"},"value":"0xffffffff"},"visibility":"private"},{"body":{"id":3152,"nodeType":"Block","src":"774:357:30","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3139,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3133,"src":"1008:7:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"arguments":[{"id":3141,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3329,"src":"1022:7:30","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$3329_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$3329_$","typeString":"type(contract IERC165)"}],"id":3140,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1017:4:30","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":3142,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1017:13:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$3329","typeString":"type(contract IERC165)"}},"id":3143,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1031:11:30","memberName":"interfaceId","nodeType":"MemberAccess","src":"1017:25:30","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":3138,"name":"supportsERC165InterfaceUnchecked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3316,"src":"975:32:30","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes4_$returns$_t_bool_$","typeString":"function (address,bytes4) view returns (bool)"}},"id":3144,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"975:68:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"id":3149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1059:65:30","subExpression":{"arguments":[{"id":3146,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3133,"src":"1093:7:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3147,"name":"_INTERFACE_ID_INVALID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3130,"src":"1102:21:30","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":3145,"name":"supportsERC165InterfaceUnchecked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3316,"src":"1060:32:30","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes4_$returns$_t_bool_$","typeString":"function (address,bytes4) view returns (bool)"}},"id":3148,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1060:64:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"975:149:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3137,"id":3151,"nodeType":"Return","src":"956:168:30"}]},"documentation":{"id":3131,"nodeType":"StructuredDocumentation","src":"616:83:30","text":" @dev Returns true if `account` supports the {IERC165} interface."},"id":3153,"implemented":true,"kind":"function","modifiers":[],"name":"supportsERC165","nameLocation":"713:14:30","nodeType":"FunctionDefinition","parameters":{"id":3134,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3133,"mutability":"mutable","name":"account","nameLocation":"736:7:30","nodeType":"VariableDeclaration","scope":3153,"src":"728:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3132,"name":"address","nodeType":"ElementaryTypeName","src":"728:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"727:17:30"},"returnParameters":{"id":3137,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3136,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3153,"src":"768:4:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3135,"name":"bool","nodeType":"ElementaryTypeName","src":"768:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"767:6:30"},"scope":3317,"src":"704:427:30","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3172,"nodeType":"Block","src":"1442:189:30","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3164,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3156,"src":"1558:7:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3163,"name":"supportsERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3153,"src":"1543:14:30","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":3165,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1543:23:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"arguments":[{"id":3167,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3156,"src":"1603:7:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3168,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3158,"src":"1612:11:30","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":3166,"name":"supportsERC165InterfaceUnchecked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3316,"src":"1570:32:30","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes4_$returns$_t_bool_$","typeString":"function (address,bytes4) view returns (bool)"}},"id":3169,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1570:54:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1543:81:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3162,"id":3171,"nodeType":"Return","src":"1536:88:30"}]},"documentation":{"id":3154,"nodeType":"StructuredDocumentation","src":"1137:207:30","text":" @dev Returns true if `account` supports the interface defined by\n `interfaceId`. Support for {IERC165} itself is queried automatically.\n See {IERC165-supportsInterface}."},"id":3173,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1358:17:30","nodeType":"FunctionDefinition","parameters":{"id":3159,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3156,"mutability":"mutable","name":"account","nameLocation":"1384:7:30","nodeType":"VariableDeclaration","scope":3173,"src":"1376:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3155,"name":"address","nodeType":"ElementaryTypeName","src":"1376:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3158,"mutability":"mutable","name":"interfaceId","nameLocation":"1400:11:30","nodeType":"VariableDeclaration","scope":3173,"src":"1393:18:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3157,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1393:6:30","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1375:37:30"},"returnParameters":{"id":3162,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3161,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3173,"src":"1436:4:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3160,"name":"bool","nodeType":"ElementaryTypeName","src":"1436:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1435:6:30"},"scope":3317,"src":"1349:282:30","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3228,"nodeType":"Block","src":"2155:560:30","statements":[{"assignments":[3189],"declarations":[{"constant":false,"id":3189,"mutability":"mutable","name":"interfaceIdsSupported","nameLocation":"2278:21:30","nodeType":"VariableDeclaration","scope":3228,"src":"2264:35:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":3187,"name":"bool","nodeType":"ElementaryTypeName","src":"2264:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3188,"nodeType":"ArrayTypeName","src":"2264:6:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"}],"id":3196,"initialValue":{"arguments":[{"expression":{"id":3193,"name":"interfaceIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3179,"src":"2313:12:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}},"id":3194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2326:6:30","memberName":"length","nodeType":"MemberAccess","src":"2313:19:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3192,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"2302:10:30","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_bool_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (bool[] memory)"},"typeName":{"baseType":{"id":3190,"name":"bool","nodeType":"ElementaryTypeName","src":"2306:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3191,"nodeType":"ArrayTypeName","src":"2306:6:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}}},"id":3195,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2302:31:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"nodeType":"VariableDeclarationStatement","src":"2264:69:30"},{"condition":{"arguments":[{"id":3198,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3176,"src":"2405:7:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3197,"name":"supportsERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3153,"src":"2390:14:30","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":3199,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2390:23:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3225,"nodeType":"IfStatement","src":"2386:284:30","trueBody":{"id":3224,"nodeType":"Block","src":"2415:255:30","statements":[{"body":{"id":3222,"nodeType":"Block","src":"2542:118:30","statements":[{"expression":{"id":3220,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":3211,"name":"interfaceIdsSupported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3189,"src":"2560:21:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"id":3213,"indexExpression":{"id":3212,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3201,"src":"2582:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2560:24:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":3215,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3176,"src":"2620:7:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":3216,"name":"interfaceIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3179,"src":"2629:12:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}},"id":3218,"indexExpression":{"id":3217,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3201,"src":"2642:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2629:15:30","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":3214,"name":"supportsERC165InterfaceUnchecked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3316,"src":"2587:32:30","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes4_$returns$_t_bool_$","typeString":"function (address,bytes4) view returns (bool)"}},"id":3219,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2587:58:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2560:85:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3221,"nodeType":"ExpressionStatement","src":"2560:85:30"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3204,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3201,"src":"2512:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3205,"name":"interfaceIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3179,"src":"2516:12:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}},"id":3206,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2529:6:30","memberName":"length","nodeType":"MemberAccess","src":"2516:19:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2512:23:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3223,"initializationExpression":{"assignments":[3201],"declarations":[{"constant":false,"id":3201,"mutability":"mutable","name":"i","nameLocation":"2505:1:30","nodeType":"VariableDeclaration","scope":3223,"src":"2497:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3200,"name":"uint256","nodeType":"ElementaryTypeName","src":"2497:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3203,"initialValue":{"hexValue":"30","id":3202,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2509:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"2497:13:30"},"loopExpression":{"expression":{"id":3209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"2537:3:30","subExpression":{"id":3208,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3201,"src":"2537:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3210,"nodeType":"ExpressionStatement","src":"2537:3:30"},"nodeType":"ForStatement","src":"2492:168:30"}]}},{"expression":{"id":3226,"name":"interfaceIdsSupported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3189,"src":"2687:21:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[] memory"}},"functionReturnParameters":3184,"id":3227,"nodeType":"Return","src":"2680:28:30"}]},"documentation":{"id":3174,"nodeType":"StructuredDocumentation","src":"1637:374:30","text":" @dev Returns a boolean array where each value corresponds to the\n interfaces passed in and whether they're supported or not. This allows\n you to batch check interfaces for a contract where your expectation\n is that some interfaces may not be supported.\n See {IERC165-supportsInterface}.\n _Available since v3.4._"},"id":3229,"implemented":true,"kind":"function","modifiers":[],"name":"getSupportedInterfaces","nameLocation":"2025:22:30","nodeType":"FunctionDefinition","parameters":{"id":3180,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3176,"mutability":"mutable","name":"account","nameLocation":"2065:7:30","nodeType":"VariableDeclaration","scope":3229,"src":"2057:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3175,"name":"address","nodeType":"ElementaryTypeName","src":"2057:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3179,"mutability":"mutable","name":"interfaceIds","nameLocation":"2098:12:30","nodeType":"VariableDeclaration","scope":3229,"src":"2082:28:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[]"},"typeName":{"baseType":{"id":3177,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2082:6:30","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":3178,"nodeType":"ArrayTypeName","src":"2082:8:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage_ptr","typeString":"bytes4[]"}},"visibility":"internal"}],"src":"2047:69:30"},"returnParameters":{"id":3184,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3183,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3229,"src":"2140:13:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":3181,"name":"bool","nodeType":"ElementaryTypeName","src":"2140:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3182,"nodeType":"ArrayTypeName","src":"2140:6:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"}],"src":"2139:15:30"},"scope":3317,"src":"2016:699:30","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3274,"nodeType":"Block","src":"3157:436:30","statements":[{"condition":{"id":3243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3213:24:30","subExpression":{"arguments":[{"id":3241,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3232,"src":"3229:7:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3240,"name":"supportsERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3153,"src":"3214:14:30","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":3242,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3214:23:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3247,"nodeType":"IfStatement","src":"3209:67:30","trueBody":{"id":3246,"nodeType":"Block","src":"3239:37:30","statements":[{"expression":{"hexValue":"66616c7365","id":3244,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3260:5:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":3239,"id":3245,"nodeType":"Return","src":"3253:12:30"}]}},{"body":{"id":3270,"nodeType":"Block","src":"3395:134:30","statements":[{"condition":{"id":3265,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3413:59:30","subExpression":{"arguments":[{"id":3260,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3232,"src":"3447:7:30","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":3261,"name":"interfaceIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3235,"src":"3456:12:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}},"id":3263,"indexExpression":{"id":3262,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3249,"src":"3469:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3456:15:30","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"id":3259,"name":"supportsERC165InterfaceUnchecked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3316,"src":"3414:32:30","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes4_$returns$_t_bool_$","typeString":"function (address,bytes4) view returns (bool)"}},"id":3264,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3414:58:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3269,"nodeType":"IfStatement","src":"3409:110:30","trueBody":{"id":3268,"nodeType":"Block","src":"3474:45:30","statements":[{"expression":{"hexValue":"66616c7365","id":3266,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3499:5:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":3239,"id":3267,"nodeType":"Return","src":"3492:12:30"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3252,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3249,"src":"3365:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":3253,"name":"interfaceIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3235,"src":"3369:12:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[] memory"}},"id":3254,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3382:6:30","memberName":"length","nodeType":"MemberAccess","src":"3369:19:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3365:23:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3271,"initializationExpression":{"assignments":[3249],"declarations":[{"constant":false,"id":3249,"mutability":"mutable","name":"i","nameLocation":"3358:1:30","nodeType":"VariableDeclaration","scope":3271,"src":"3350:9:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3248,"name":"uint256","nodeType":"ElementaryTypeName","src":"3350:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3251,"initialValue":{"hexValue":"30","id":3250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3362:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"3350:13:30"},"loopExpression":{"expression":{"id":3257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3390:3:30","subExpression":{"id":3256,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3249,"src":"3390:1:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3258,"nodeType":"ExpressionStatement","src":"3390:3:30"},"nodeType":"ForStatement","src":"3345:184:30"},{"expression":{"hexValue":"74727565","id":3272,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3582:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":3239,"id":3273,"nodeType":"Return","src":"3575:11:30"}]},"documentation":{"id":3230,"nodeType":"StructuredDocumentation","src":"2721:324:30","text":" @dev Returns true if `account` supports all the interfaces defined in\n `interfaceIds`. Support for {IERC165} itself is queried automatically.\n Batch-querying can lead to gas savings by skipping repeated checks for\n {IERC165} support.\n See {IERC165-supportsInterface}."},"id":3275,"implemented":true,"kind":"function","modifiers":[],"name":"supportsAllInterfaces","nameLocation":"3059:21:30","nodeType":"FunctionDefinition","parameters":{"id":3236,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3232,"mutability":"mutable","name":"account","nameLocation":"3089:7:30","nodeType":"VariableDeclaration","scope":3275,"src":"3081:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3231,"name":"address","nodeType":"ElementaryTypeName","src":"3081:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3235,"mutability":"mutable","name":"interfaceIds","nameLocation":"3114:12:30","nodeType":"VariableDeclaration","scope":3275,"src":"3098:28:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_memory_ptr","typeString":"bytes4[]"},"typeName":{"baseType":{"id":3233,"name":"bytes4","nodeType":"ElementaryTypeName","src":"3098:6:30","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"id":3234,"nodeType":"ArrayTypeName","src":"3098:8:30","typeDescriptions":{"typeIdentifier":"t_array$_t_bytes4_$dyn_storage_ptr","typeString":"bytes4[]"}},"visibility":"internal"}],"src":"3080:47:30"},"returnParameters":{"id":3239,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3238,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3275,"src":"3151:4:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3237,"name":"bool","nodeType":"ElementaryTypeName","src":"3151:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3150:6:30"},"scope":3317,"src":"3050:543:30","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3315,"nodeType":"Block","src":"4529:539:30","statements":[{"assignments":[3286],"declarations":[{"constant":false,"id":3286,"mutability":"mutable","name":"encodedParams","nameLocation":"4576:13:30","nodeType":"VariableDeclaration","scope":3315,"src":"4563:26:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3285,"name":"bytes","nodeType":"ElementaryTypeName","src":"4563:5:30","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3294,"initialValue":{"arguments":[{"expression":{"expression":{"id":3289,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3329,"src":"4615:7:30","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$3329_$","typeString":"type(contract IERC165)"}},"id":3290,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4623:17:30","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":3328,"src":"4615:25:30","typeDescriptions":{"typeIdentifier":"t_function_declaration_view$_t_bytes4_$returns$_t_bool_$","typeString":"function IERC165.supportsInterface(bytes4) view returns (bool)"}},"id":3291,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4641:8:30","memberName":"selector","nodeType":"MemberAccess","src":"4615:34:30","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":3292,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3280,"src":"4651:11:30","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"id":3287,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4592:3:30","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3288,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4596:18:30","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"4592:22:30","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":3293,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4592:71:30","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"4563:100:30"},{"assignments":[3296],"declarations":[{"constant":false,"id":3296,"mutability":"mutable","name":"success","nameLocation":"4710:7:30","nodeType":"VariableDeclaration","scope":3315,"src":"4705:12:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3295,"name":"bool","nodeType":"ElementaryTypeName","src":"4705:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":3297,"nodeType":"VariableDeclarationStatement","src":"4705:12:30"},{"assignments":[3299],"declarations":[{"constant":false,"id":3299,"mutability":"mutable","name":"returnSize","nameLocation":"4735:10:30","nodeType":"VariableDeclaration","scope":3315,"src":"4727:18:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3298,"name":"uint256","nodeType":"ElementaryTypeName","src":"4727:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3300,"nodeType":"VariableDeclarationStatement","src":"4727:18:30"},{"assignments":[3302],"declarations":[{"constant":false,"id":3302,"mutability":"mutable","name":"returnValue","nameLocation":"4763:11:30","nodeType":"VariableDeclaration","scope":3315,"src":"4755:19:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3301,"name":"uint256","nodeType":"ElementaryTypeName","src":"4755:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3303,"nodeType":"VariableDeclarationStatement","src":"4755:19:30"},{"AST":{"nodeType":"YulBlock","src":"4793:203:30","statements":[{"nodeType":"YulAssignment","src":"4807:97:30","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4829:5:30","type":"","value":"30000"},{"name":"account","nodeType":"YulIdentifier","src":"4836:7:30"},{"arguments":[{"name":"encodedParams","nodeType":"YulIdentifier","src":"4849:13:30"},{"kind":"number","nodeType":"YulLiteral","src":"4864:4:30","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4845:3:30"},"nodeType":"YulFunctionCall","src":"4845:24:30"},{"arguments":[{"name":"encodedParams","nodeType":"YulIdentifier","src":"4877:13:30"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4871:5:30"},"nodeType":"YulFunctionCall","src":"4871:20:30"},{"kind":"number","nodeType":"YulLiteral","src":"4893:4:30","type":"","value":"0x00"},{"kind":"number","nodeType":"YulLiteral","src":"4899:4:30","type":"","value":"0x20"}],"functionName":{"name":"staticcall","nodeType":"YulIdentifier","src":"4818:10:30"},"nodeType":"YulFunctionCall","src":"4818:86:30"},"variableNames":[{"name":"success","nodeType":"YulIdentifier","src":"4807:7:30"}]},{"nodeType":"YulAssignment","src":"4917:30:30","value":{"arguments":[],"functionName":{"name":"returndatasize","nodeType":"YulIdentifier","src":"4931:14:30"},"nodeType":"YulFunctionCall","src":"4931:16:30"},"variableNames":[{"name":"returnSize","nodeType":"YulIdentifier","src":"4917:10:30"}]},{"nodeType":"YulAssignment","src":"4960:26:30","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4981:4:30","type":"","value":"0x00"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4975:5:30"},"nodeType":"YulFunctionCall","src":"4975:11:30"},"variableNames":[{"name":"returnValue","nodeType":"YulIdentifier","src":"4960:11:30"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3278,"isOffset":false,"isSlot":false,"src":"4836:7:30","valueSize":1},{"declaration":3286,"isOffset":false,"isSlot":false,"src":"4849:13:30","valueSize":1},{"declaration":3286,"isOffset":false,"isSlot":false,"src":"4877:13:30","valueSize":1},{"declaration":3299,"isOffset":false,"isSlot":false,"src":"4917:10:30","valueSize":1},{"declaration":3302,"isOffset":false,"isSlot":false,"src":"4960:11:30","valueSize":1},{"declaration":3296,"isOffset":false,"isSlot":false,"src":"4807:7:30","valueSize":1}],"id":3304,"nodeType":"InlineAssembly","src":"4784:212:30"},{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3309,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3305,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3296,"src":"5013:7:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3306,"name":"returnSize","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3299,"src":"5024:10:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30783230","id":3307,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5038:4:30","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"0x20"},"src":"5024:18:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5013:29:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3310,"name":"returnValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3302,"src":"5046:11:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3311,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5060:1:30","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5046:15:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5013:48:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3284,"id":3314,"nodeType":"Return","src":"5006:55:30"}]},"documentation":{"id":3276,"nodeType":"StructuredDocumentation","src":"3599:817:30","text":" @notice Query if a contract implements an interface, does not check ERC165 support\n @param account The address of the contract to query for support of an interface\n @param interfaceId The interface identifier, as specified in ERC-165\n @return true if the contract at account indicates support of the interface with\n identifier interfaceId, false otherwise\n @dev Assumes that account contains a contract that supports ERC165, otherwise\n the behavior of this method is undefined. This precondition can be checked\n with {supportsERC165}.\n Some precompiled contracts will falsely indicate support for a given interface, so caution\n should be exercised when using this function.\n Interface identification is specified in ERC-165."},"id":3316,"implemented":true,"kind":"function","modifiers":[],"name":"supportsERC165InterfaceUnchecked","nameLocation":"4430:32:30","nodeType":"FunctionDefinition","parameters":{"id":3281,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3278,"mutability":"mutable","name":"account","nameLocation":"4471:7:30","nodeType":"VariableDeclaration","scope":3316,"src":"4463:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3277,"name":"address","nodeType":"ElementaryTypeName","src":"4463:7:30","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3280,"mutability":"mutable","name":"interfaceId","nameLocation":"4487:11:30","nodeType":"VariableDeclaration","scope":3316,"src":"4480:18:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3279,"name":"bytes4","nodeType":"ElementaryTypeName","src":"4480:6:30","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"4462:37:30"},"returnParameters":{"id":3284,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3283,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3316,"src":"4523:4:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3282,"name":"bool","nodeType":"ElementaryTypeName","src":"4523:4:30","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4522:6:30"},"scope":3317,"src":"4421:647:30","stateMutability":"view","virtual":false,"visibility":"internal"}],"scope":3318,"src":"449:4621:30","usedErrors":[]}],"src":"121:4950:30"},"id":30},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/introspection/IERC165.sol","exportedSymbols":{"IERC165":[3329]},"id":3330,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3319,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"100:23:31"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":3320,"nodeType":"StructuredDocumentation","src":"125:279:31","text":" @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."},"fullyImplemented":false,"id":3329,"linearizedBaseContracts":[3329],"name":"IERC165","nameLocation":"415:7:31","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3321,"nodeType":"StructuredDocumentation","src":"429:340:31","text":" @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."},"functionSelector":"01ffc9a7","id":3328,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"783:17:31","nodeType":"FunctionDefinition","parameters":{"id":3324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3323,"mutability":"mutable","name":"interfaceId","nameLocation":"808:11:31","nodeType":"VariableDeclaration","scope":3328,"src":"801:18:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":3322,"name":"bytes4","nodeType":"ElementaryTypeName","src":"801:6:31","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"800:20:31"},"returnParameters":{"id":3327,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3326,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3328,"src":"844:4:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3325,"name":"bool","nodeType":"ElementaryTypeName","src":"844:4:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"843:6:31"},"scope":3329,"src":"774:76:31","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3330,"src":"405:447:31","usedErrors":[]}],"src":"100:753:31"},"id":31},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[4195]},"id":4196,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3331,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:32"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":3332,"nodeType":"StructuredDocumentation","src":"128:73:32","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":4195,"linearizedBaseContracts":[4195],"name":"Math","nameLocation":"210:4:32","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":3336,"members":[{"id":3333,"name":"Down","nameLocation":"245:4:32","nodeType":"EnumValue","src":"245:4:32"},{"id":3334,"name":"Up","nameLocation":"287:2:32","nodeType":"EnumValue","src":"287:2:32"},{"id":3335,"name":"Zero","nameLocation":"318:4:32","nodeType":"EnumValue","src":"318:4:32"}],"name":"Rounding","nameLocation":"226:8:32","nodeType":"EnumDefinition","src":"221:122:32"},{"body":{"id":3353,"nodeType":"Block","src":"480:37:32","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3348,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3346,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3339,"src":"497:1:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3347,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3341,"src":"501:1:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"497:5:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3350,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3341,"src":"509:1:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3351,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"497:13:32","trueExpression":{"id":3349,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3339,"src":"505:1:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3345,"id":3352,"nodeType":"Return","src":"490:20:32"}]},"documentation":{"id":3337,"nodeType":"StructuredDocumentation","src":"349:59:32","text":" @dev Returns the largest of two numbers."},"id":3354,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"422:3:32","nodeType":"FunctionDefinition","parameters":{"id":3342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3339,"mutability":"mutable","name":"a","nameLocation":"434:1:32","nodeType":"VariableDeclaration","scope":3354,"src":"426:9:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3338,"name":"uint256","nodeType":"ElementaryTypeName","src":"426:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3341,"mutability":"mutable","name":"b","nameLocation":"445:1:32","nodeType":"VariableDeclaration","scope":3354,"src":"437:9:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3340,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"425:22:32"},"returnParameters":{"id":3345,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3344,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3354,"src":"471:7:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3343,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"470:9:32"},"scope":4195,"src":"413:104:32","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3371,"nodeType":"Block","src":"655:37:32","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3366,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3364,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3357,"src":"672:1:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3365,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3359,"src":"676:1:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"672:5:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":3368,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3359,"src":"684:1:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"672:13:32","trueExpression":{"id":3367,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3357,"src":"680:1:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3363,"id":3370,"nodeType":"Return","src":"665:20:32"}]},"documentation":{"id":3355,"nodeType":"StructuredDocumentation","src":"523:60:32","text":" @dev Returns the smallest of two numbers."},"id":3372,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"597:3:32","nodeType":"FunctionDefinition","parameters":{"id":3360,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3357,"mutability":"mutable","name":"a","nameLocation":"609:1:32","nodeType":"VariableDeclaration","scope":3372,"src":"601:9:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3356,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3359,"mutability":"mutable","name":"b","nameLocation":"620:1:32","nodeType":"VariableDeclaration","scope":3372,"src":"612:9:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3358,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:32"},"returnParameters":{"id":3363,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3362,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3372,"src":"646:7:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3361,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:9:32"},"scope":4195,"src":"588:104:32","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3394,"nodeType":"Block","src":"876:82:32","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3382,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3375,"src":"931:1:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":3383,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3377,"src":"935:1:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"931:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3385,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"930:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3391,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3388,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3386,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3375,"src":"941:1:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":3387,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3377,"src":"945:1:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3389,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"940:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":3390,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"950:1:32","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"940:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"930:21:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3381,"id":3393,"nodeType":"Return","src":"923:28:32"}]},"documentation":{"id":3373,"nodeType":"StructuredDocumentation","src":"698:102:32","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":3395,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"814:7:32","nodeType":"FunctionDefinition","parameters":{"id":3378,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3375,"mutability":"mutable","name":"a","nameLocation":"830:1:32","nodeType":"VariableDeclaration","scope":3395,"src":"822:9:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3374,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3377,"mutability":"mutable","name":"b","nameLocation":"841:1:32","nodeType":"VariableDeclaration","scope":3395,"src":"833:9:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3376,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:22:32"},"returnParameters":{"id":3381,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3380,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3395,"src":"867:7:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3379,"name":"uint256","nodeType":"ElementaryTypeName","src":"867:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"866:9:32"},"scope":4195,"src":"805:153:32","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3419,"nodeType":"Block","src":"1228:123:32","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3405,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"1316:1:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3406,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1321:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1316:6:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3409,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3398,"src":"1330:1:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3410,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1334:1:32","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1330:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3412,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1329:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3413,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3400,"src":"1339:1:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1329:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3415,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1343:1:32","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1329:15:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3417,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1316:28:32","trueExpression":{"hexValue":"30","id":3408,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1325:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3404,"id":3418,"nodeType":"Return","src":"1309:35:32"}]},"documentation":{"id":3396,"nodeType":"StructuredDocumentation","src":"964:188:32","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":3420,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1166:7:32","nodeType":"FunctionDefinition","parameters":{"id":3401,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3398,"mutability":"mutable","name":"a","nameLocation":"1182:1:32","nodeType":"VariableDeclaration","scope":3420,"src":"1174:9:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3397,"name":"uint256","nodeType":"ElementaryTypeName","src":"1174:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3400,"mutability":"mutable","name":"b","nameLocation":"1193:1:32","nodeType":"VariableDeclaration","scope":3420,"src":"1185:9:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3399,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1173:22:32"},"returnParameters":{"id":3404,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3403,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3420,"src":"1219:7:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3402,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1218:9:32"},"scope":4195,"src":"1157:194:32","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3542,"nodeType":"Block","src":"1765:4115:32","statements":[{"id":3541,"nodeType":"UncheckedBlock","src":"1775:4099:32","statements":[{"assignments":[3433],"declarations":[{"constant":false,"id":3433,"mutability":"mutable","name":"prod0","nameLocation":"2104:5:32","nodeType":"VariableDeclaration","scope":3541,"src":"2096:13:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3432,"name":"uint256","nodeType":"ElementaryTypeName","src":"2096:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3434,"nodeType":"VariableDeclarationStatement","src":"2096:13:32"},{"assignments":[3436],"declarations":[{"constant":false,"id":3436,"mutability":"mutable","name":"prod1","nameLocation":"2176:5:32","nodeType":"VariableDeclaration","scope":3541,"src":"2168:13:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3435,"name":"uint256","nodeType":"ElementaryTypeName","src":"2168:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3437,"nodeType":"VariableDeclarationStatement","src":"2168:13:32"},{"AST":{"nodeType":"YulBlock","src":"2248:157:32","statements":[{"nodeType":"YulVariableDeclaration","src":"2266:30:32","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2283:1:32"},{"name":"y","nodeType":"YulIdentifier","src":"2286:1:32"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2293:1:32","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2289:3:32"},"nodeType":"YulFunctionCall","src":"2289:6:32"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"2276:6:32"},"nodeType":"YulFunctionCall","src":"2276:20:32"},"variables":[{"name":"mm","nodeType":"YulTypedName","src":"2270:2:32","type":""}]},{"nodeType":"YulAssignment","src":"2313:18:32","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"2326:1:32"},{"name":"y","nodeType":"YulIdentifier","src":"2329:1:32"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"2322:3:32"},"nodeType":"YulFunctionCall","src":"2322:9:32"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"2313:5:32"}]},{"nodeType":"YulAssignment","src":"2348:43:32","value":{"arguments":[{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2365:2:32"},{"name":"prod0","nodeType":"YulIdentifier","src":"2369:5:32"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2361:3:32"},"nodeType":"YulFunctionCall","src":"2361:14:32"},{"arguments":[{"name":"mm","nodeType":"YulIdentifier","src":"2380:2:32"},{"name":"prod0","nodeType":"YulIdentifier","src":"2384:5:32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2377:2:32"},"nodeType":"YulFunctionCall","src":"2377:13:32"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2357:3:32"},"nodeType":"YulFunctionCall","src":"2357:34:32"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"2348:5:32"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3433,"isOffset":false,"isSlot":false,"src":"2313:5:32","valueSize":1},{"declaration":3433,"isOffset":false,"isSlot":false,"src":"2369:5:32","valueSize":1},{"declaration":3433,"isOffset":false,"isSlot":false,"src":"2384:5:32","valueSize":1},{"declaration":3436,"isOffset":false,"isSlot":false,"src":"2348:5:32","valueSize":1},{"declaration":3423,"isOffset":false,"isSlot":false,"src":"2283:1:32","valueSize":1},{"declaration":3423,"isOffset":false,"isSlot":false,"src":"2326:1:32","valueSize":1},{"declaration":3425,"isOffset":false,"isSlot":false,"src":"2286:1:32","valueSize":1},{"declaration":3425,"isOffset":false,"isSlot":false,"src":"2329:1:32","valueSize":1}],"id":3438,"nodeType":"InlineAssembly","src":"2239:166:32"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3441,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3439,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3436,"src":"2486:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3440,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2495:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2486:10:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3447,"nodeType":"IfStatement","src":"2482:368:32","trueBody":{"id":3446,"nodeType":"Block","src":"2498:352:32","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3444,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3442,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3433,"src":"2816:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3443,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3427,"src":"2824:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2816:19:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3431,"id":3445,"nodeType":"Return","src":"2809:26:32"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3451,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3449,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3427,"src":"2960:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":3450,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3436,"src":"2974:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2960:19:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d6174683a206d756c446976206f766572666c6f77","id":3452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2981:23:32","typeDescriptions":{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""},"value":"Math: mulDiv overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""}],"id":3448,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2952:7:32","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3453,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2952:53:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3454,"nodeType":"ExpressionStatement","src":"2952:53:32"},{"assignments":[3456],"declarations":[{"constant":false,"id":3456,"mutability":"mutable","name":"remainder","nameLocation":"3269:9:32","nodeType":"VariableDeclaration","scope":3541,"src":"3261:17:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3455,"name":"uint256","nodeType":"ElementaryTypeName","src":"3261:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3457,"nodeType":"VariableDeclarationStatement","src":"3261:17:32"},{"AST":{"nodeType":"YulBlock","src":"3301:291:32","statements":[{"nodeType":"YulAssignment","src":"3370:38:32","value":{"arguments":[{"name":"x","nodeType":"YulIdentifier","src":"3390:1:32"},{"name":"y","nodeType":"YulIdentifier","src":"3393:1:32"},{"name":"denominator","nodeType":"YulIdentifier","src":"3396:11:32"}],"functionName":{"name":"mulmod","nodeType":"YulIdentifier","src":"3383:6:32"},"nodeType":"YulFunctionCall","src":"3383:25:32"},"variableNames":[{"name":"remainder","nodeType":"YulIdentifier","src":"3370:9:32"}]},{"nodeType":"YulAssignment","src":"3490:41:32","value":{"arguments":[{"name":"prod1","nodeType":"YulIdentifier","src":"3503:5:32"},{"arguments":[{"name":"remainder","nodeType":"YulIdentifier","src":"3513:9:32"},{"name":"prod0","nodeType":"YulIdentifier","src":"3524:5:32"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3510:2:32"},"nodeType":"YulFunctionCall","src":"3510:20:32"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3499:3:32"},"nodeType":"YulFunctionCall","src":"3499:32:32"},"variableNames":[{"name":"prod1","nodeType":"YulIdentifier","src":"3490:5:32"}]},{"nodeType":"YulAssignment","src":"3548:30:32","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"3561:5:32"},{"name":"remainder","nodeType":"YulIdentifier","src":"3568:9:32"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3557:3:32"},"nodeType":"YulFunctionCall","src":"3557:21:32"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"3548:5:32"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3427,"isOffset":false,"isSlot":false,"src":"3396:11:32","valueSize":1},{"declaration":3433,"isOffset":false,"isSlot":false,"src":"3524:5:32","valueSize":1},{"declaration":3433,"isOffset":false,"isSlot":false,"src":"3548:5:32","valueSize":1},{"declaration":3433,"isOffset":false,"isSlot":false,"src":"3561:5:32","valueSize":1},{"declaration":3436,"isOffset":false,"isSlot":false,"src":"3490:5:32","valueSize":1},{"declaration":3436,"isOffset":false,"isSlot":false,"src":"3503:5:32","valueSize":1},{"declaration":3456,"isOffset":false,"isSlot":false,"src":"3370:9:32","valueSize":1},{"declaration":3456,"isOffset":false,"isSlot":false,"src":"3513:9:32","valueSize":1},{"declaration":3456,"isOffset":false,"isSlot":false,"src":"3568:9:32","valueSize":1},{"declaration":3423,"isOffset":false,"isSlot":false,"src":"3390:1:32","valueSize":1},{"declaration":3425,"isOffset":false,"isSlot":false,"src":"3393:1:32","valueSize":1}],"id":3458,"nodeType":"InlineAssembly","src":"3292:300:32"},{"assignments":[3460],"declarations":[{"constant":false,"id":3460,"mutability":"mutable","name":"twos","nameLocation":"3907:4:32","nodeType":"VariableDeclaration","scope":3541,"src":"3899:12:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3459,"name":"uint256","nodeType":"ElementaryTypeName","src":"3899:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3468,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3461,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3427,"src":"3914:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3465,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3929:12:32","subExpression":{"id":3462,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3427,"src":"3930:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":3464,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3944:1:32","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3929:16:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3466,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3928:18:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3914:32:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3899:47:32"},{"AST":{"nodeType":"YulBlock","src":"3969:362:32","statements":[{"nodeType":"YulAssignment","src":"4034:37:32","value":{"arguments":[{"name":"denominator","nodeType":"YulIdentifier","src":"4053:11:32"},{"name":"twos","nodeType":"YulIdentifier","src":"4066:4:32"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4049:3:32"},"nodeType":"YulFunctionCall","src":"4049:22:32"},"variableNames":[{"name":"denominator","nodeType":"YulIdentifier","src":"4034:11:32"}]},{"nodeType":"YulAssignment","src":"4138:25:32","value":{"arguments":[{"name":"prod0","nodeType":"YulIdentifier","src":"4151:5:32"},{"name":"twos","nodeType":"YulIdentifier","src":"4158:4:32"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4147:3:32"},"nodeType":"YulFunctionCall","src":"4147:16:32"},"variableNames":[{"name":"prod0","nodeType":"YulIdentifier","src":"4138:5:32"}]},{"nodeType":"YulAssignment","src":"4278:39:32","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4298:1:32","type":"","value":"0"},{"name":"twos","nodeType":"YulIdentifier","src":"4301:4:32"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4294:3:32"},"nodeType":"YulFunctionCall","src":"4294:12:32"},{"name":"twos","nodeType":"YulIdentifier","src":"4308:4:32"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4290:3:32"},"nodeType":"YulFunctionCall","src":"4290:23:32"},{"kind":"number","nodeType":"YulLiteral","src":"4315:1:32","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4286:3:32"},"nodeType":"YulFunctionCall","src":"4286:31:32"},"variableNames":[{"name":"twos","nodeType":"YulIdentifier","src":"4278:4:32"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3427,"isOffset":false,"isSlot":false,"src":"4034:11:32","valueSize":1},{"declaration":3427,"isOffset":false,"isSlot":false,"src":"4053:11:32","valueSize":1},{"declaration":3433,"isOffset":false,"isSlot":false,"src":"4138:5:32","valueSize":1},{"declaration":3433,"isOffset":false,"isSlot":false,"src":"4151:5:32","valueSize":1},{"declaration":3460,"isOffset":false,"isSlot":false,"src":"4066:4:32","valueSize":1},{"declaration":3460,"isOffset":false,"isSlot":false,"src":"4158:4:32","valueSize":1},{"declaration":3460,"isOffset":false,"isSlot":false,"src":"4278:4:32","valueSize":1},{"declaration":3460,"isOffset":false,"isSlot":false,"src":"4301:4:32","valueSize":1},{"declaration":3460,"isOffset":false,"isSlot":false,"src":"4308:4:32","valueSize":1}],"id":3469,"nodeType":"InlineAssembly","src":"3960:371:32"},{"expression":{"id":3474,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3470,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3433,"src":"4397:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3471,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3436,"src":"4406:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3472,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3460,"src":"4414:4:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4406:12:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4397:21:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3475,"nodeType":"ExpressionStatement","src":"4397:21:32"},{"assignments":[3477],"declarations":[{"constant":false,"id":3477,"mutability":"mutable","name":"inverse","nameLocation":"4744:7:32","nodeType":"VariableDeclaration","scope":3541,"src":"4736:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3476,"name":"uint256","nodeType":"ElementaryTypeName","src":"4736:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3484,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3483,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":3478,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4755:1:32","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3479,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3427,"src":"4759:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4755:15:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3481,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4754:17:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":3482,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4774:1:32","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4754:21:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4736:39:32"},{"expression":{"id":3491,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3485,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3477,"src":"4992:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3490,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3486,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5003:1:32","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3487,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3427,"src":"5007:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3488,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3477,"src":"5021:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5007:21:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5003:25:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4992:36:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3492,"nodeType":"ExpressionStatement","src":"4992:36:32"},{"expression":{"id":3499,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3493,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3477,"src":"5061:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5072:1:32","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3495,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3427,"src":"5076:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3496,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3477,"src":"5090:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5076:21:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5072:25:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5061:36:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3500,"nodeType":"ExpressionStatement","src":"5061:36:32"},{"expression":{"id":3507,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3501,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3477,"src":"5131:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3502,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5142:1:32","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3503,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3427,"src":"5146:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3504,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3477,"src":"5160:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5146:21:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5142:25:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5131:36:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3508,"nodeType":"ExpressionStatement","src":"5131:36:32"},{"expression":{"id":3515,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3509,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3477,"src":"5201:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3510,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5212:1:32","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3511,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3427,"src":"5216:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3512,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3477,"src":"5230:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5216:21:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5212:25:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5201:36:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3516,"nodeType":"ExpressionStatement","src":"5201:36:32"},{"expression":{"id":3523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3517,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3477,"src":"5271:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3518,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5282:1:32","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3521,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3519,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3427,"src":"5286:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3520,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3477,"src":"5300:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5286:21:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5282:25:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5271:36:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3524,"nodeType":"ExpressionStatement","src":"5271:36:32"},{"expression":{"id":3531,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3525,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3477,"src":"5342:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":3526,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5353:1:32","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3527,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3427,"src":"5357:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3528,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3477,"src":"5371:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5357:21:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5353:25:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5342:36:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3532,"nodeType":"ExpressionStatement","src":"5342:36:32"},{"expression":{"id":3537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3533,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3430,"src":"5812:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3536,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3534,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3433,"src":"5821:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3535,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3477,"src":"5829:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5821:15:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5812:24:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3538,"nodeType":"ExpressionStatement","src":"5812:24:32"},{"expression":{"id":3539,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3430,"src":"5857:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3431,"id":3540,"nodeType":"Return","src":"5850:13:32"}]}]},"documentation":{"id":3421,"nodeType":"StructuredDocumentation","src":"1357:305:32","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":3543,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1676:6:32","nodeType":"FunctionDefinition","parameters":{"id":3428,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3423,"mutability":"mutable","name":"x","nameLocation":"1691:1:32","nodeType":"VariableDeclaration","scope":3543,"src":"1683:9:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3422,"name":"uint256","nodeType":"ElementaryTypeName","src":"1683:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3425,"mutability":"mutable","name":"y","nameLocation":"1702:1:32","nodeType":"VariableDeclaration","scope":3543,"src":"1694:9:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3424,"name":"uint256","nodeType":"ElementaryTypeName","src":"1694:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3427,"mutability":"mutable","name":"denominator","nameLocation":"1713:11:32","nodeType":"VariableDeclaration","scope":3543,"src":"1705:19:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3426,"name":"uint256","nodeType":"ElementaryTypeName","src":"1705:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1682:43:32"},"returnParameters":{"id":3431,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3430,"mutability":"mutable","name":"result","nameLocation":"1757:6:32","nodeType":"VariableDeclaration","scope":3543,"src":"1749:14:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3429,"name":"uint256","nodeType":"ElementaryTypeName","src":"1749:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1748:16:32"},"scope":4195,"src":"1667:4213:32","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3586,"nodeType":"Block","src":"6122:189:32","statements":[{"assignments":[3559],"declarations":[{"constant":false,"id":3559,"mutability":"mutable","name":"result","nameLocation":"6140:6:32","nodeType":"VariableDeclaration","scope":3586,"src":"6132:14:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3558,"name":"uint256","nodeType":"ElementaryTypeName","src":"6132:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3565,"initialValue":{"arguments":[{"id":3561,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3546,"src":"6156:1:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3562,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3548,"src":"6159:1:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3563,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3550,"src":"6162:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3560,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[3543,3587],"referencedDeclaration":3543,"src":"6149:6:32","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":3564,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6149:25:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6132:42:32"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3577,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3336","typeString":"enum Math.Rounding"},"id":3569,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3566,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3553,"src":"6188:8:32","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3336","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3567,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3336,"src":"6200:8:32","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3336_$","typeString":"type(enum Math.Rounding)"}},"id":3568,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6209:2:32","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3334,"src":"6200:11:32","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3336","typeString":"enum Math.Rounding"}},"src":"6188:23:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3576,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3571,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3546,"src":"6222:1:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3572,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3548,"src":"6225:1:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3573,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3550,"src":"6228:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3570,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"6215:6:32","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":3574,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6215:25:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3575,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6243:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6215:29:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6188:56:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3583,"nodeType":"IfStatement","src":"6184:98:32","trueBody":{"id":3582,"nodeType":"Block","src":"6246:36:32","statements":[{"expression":{"id":3580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3578,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3559,"src":"6260:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3579,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6270:1:32","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6260:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3581,"nodeType":"ExpressionStatement","src":"6260:11:32"}]}},{"expression":{"id":3584,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3559,"src":"6298:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3557,"id":3585,"nodeType":"Return","src":"6291:13:32"}]},"documentation":{"id":3544,"nodeType":"StructuredDocumentation","src":"5886:121:32","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":3587,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"6021:6:32","nodeType":"FunctionDefinition","parameters":{"id":3554,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3546,"mutability":"mutable","name":"x","nameLocation":"6036:1:32","nodeType":"VariableDeclaration","scope":3587,"src":"6028:9:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3545,"name":"uint256","nodeType":"ElementaryTypeName","src":"6028:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3548,"mutability":"mutable","name":"y","nameLocation":"6047:1:32","nodeType":"VariableDeclaration","scope":3587,"src":"6039:9:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3547,"name":"uint256","nodeType":"ElementaryTypeName","src":"6039:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3550,"mutability":"mutable","name":"denominator","nameLocation":"6058:11:32","nodeType":"VariableDeclaration","scope":3587,"src":"6050:19:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3549,"name":"uint256","nodeType":"ElementaryTypeName","src":"6050:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3553,"mutability":"mutable","name":"rounding","nameLocation":"6080:8:32","nodeType":"VariableDeclaration","scope":3587,"src":"6071:17:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3336","typeString":"enum Math.Rounding"},"typeName":{"id":3552,"nodeType":"UserDefinedTypeName","pathNode":{"id":3551,"name":"Rounding","nameLocations":["6071:8:32"],"nodeType":"IdentifierPath","referencedDeclaration":3336,"src":"6071:8:32"},"referencedDeclaration":3336,"src":"6071:8:32","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3336","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"6027:62:32"},"returnParameters":{"id":3557,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3556,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3587,"src":"6113:7:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3555,"name":"uint256","nodeType":"ElementaryTypeName","src":"6113:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6112:9:32"},"scope":4195,"src":"6012:299:32","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3698,"nodeType":"Block","src":"6587:1585:32","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3597,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3595,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3590,"src":"6601:1:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3596,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6606:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6601:6:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3601,"nodeType":"IfStatement","src":"6597:45:32","trueBody":{"id":3600,"nodeType":"Block","src":"6609:33:32","statements":[{"expression":{"hexValue":"30","id":3598,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6630:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":3594,"id":3599,"nodeType":"Return","src":"6623:8:32"}]}},{"assignments":[3603],"declarations":[{"constant":false,"id":3603,"mutability":"mutable","name":"result","nameLocation":"7329:6:32","nodeType":"VariableDeclaration","scope":3698,"src":"7321:14:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3602,"name":"uint256","nodeType":"ElementaryTypeName","src":"7321:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3612,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3604,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7338:1:32","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3606,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3590,"src":"7349:1:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3605,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[3867,3903],"referencedDeclaration":3867,"src":"7344:4:32","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3607,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7344:7:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3608,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7355:1:32","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7344:12:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3610,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7343:14:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7338:19:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7321:36:32"},{"id":3697,"nodeType":"UncheckedBlock","src":"7758:408:32","statements":[{"expression":{"id":3622,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3613,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3603,"src":"7782:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3618,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3614,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3603,"src":"7792:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3617,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3615,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3590,"src":"7801:1:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3616,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3603,"src":"7805:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7801:10:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7792:19:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3619,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7791:21:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3620,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7816:1:32","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7791:26:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7782:35:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3623,"nodeType":"ExpressionStatement","src":"7782:35:32"},{"expression":{"id":3633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3624,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3603,"src":"7831:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3629,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3625,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3603,"src":"7841:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3626,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3590,"src":"7850:1:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3627,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3603,"src":"7854:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7850:10:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7841:19:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3630,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7840:21:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3631,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7865:1:32","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7840:26:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7831:35:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3634,"nodeType":"ExpressionStatement","src":"7831:35:32"},{"expression":{"id":3644,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3635,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3603,"src":"7880:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3636,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3603,"src":"7890:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3637,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3590,"src":"7899:1:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3638,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3603,"src":"7903:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7899:10:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7890:19:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3641,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7889:21:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3642,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7914:1:32","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7889:26:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7880:35:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3645,"nodeType":"ExpressionStatement","src":"7880:35:32"},{"expression":{"id":3655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3646,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3603,"src":"7929:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3654,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3647,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3603,"src":"7939:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3648,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3590,"src":"7948:1:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3649,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3603,"src":"7952:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7948:10:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7939:19:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3652,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7938:21:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3653,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7963:1:32","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7938:26:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7929:35:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3656,"nodeType":"ExpressionStatement","src":"7929:35:32"},{"expression":{"id":3666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3657,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3603,"src":"7978:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3658,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3603,"src":"7988:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3661,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3659,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3590,"src":"7997:1:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3660,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3603,"src":"8001:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7997:10:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7988:19:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3663,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7987:21:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3664,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8012:1:32","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7987:26:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7978:35:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3667,"nodeType":"ExpressionStatement","src":"7978:35:32"},{"expression":{"id":3677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3668,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3603,"src":"8027:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3676,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3673,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3669,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3603,"src":"8037:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3672,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3670,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3590,"src":"8046:1:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3671,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3603,"src":"8050:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8046:10:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8037:19:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3674,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8036:21:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3675,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8061:1:32","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8036:26:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8027:35:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3678,"nodeType":"ExpressionStatement","src":"8027:35:32"},{"expression":{"id":3688,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3679,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3603,"src":"8076:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3687,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3680,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3603,"src":"8086:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3681,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3590,"src":"8095:1:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3682,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3603,"src":"8099:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8095:10:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8086:19:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":3685,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8085:21:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3686,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8110:1:32","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8085:26:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8076:35:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3689,"nodeType":"ExpressionStatement","src":"8076:35:32"},{"expression":{"arguments":[{"id":3691,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3603,"src":"8136:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3694,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3692,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3590,"src":"8144:1:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":3693,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3603,"src":"8148:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8144:10:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3690,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3372,"src":"8132:3:32","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":3695,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8132:23:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3594,"id":3696,"nodeType":"Return","src":"8125:30:32"}]}]},"documentation":{"id":3588,"nodeType":"StructuredDocumentation","src":"6317:208:32","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":3699,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6539:4:32","nodeType":"FunctionDefinition","parameters":{"id":3591,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3590,"mutability":"mutable","name":"a","nameLocation":"6552:1:32","nodeType":"VariableDeclaration","scope":3699,"src":"6544:9:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3589,"name":"uint256","nodeType":"ElementaryTypeName","src":"6544:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6543:11:32"},"returnParameters":{"id":3594,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3593,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3699,"src":"6578:7:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3592,"name":"uint256","nodeType":"ElementaryTypeName","src":"6578:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6577:9:32"},"scope":4195,"src":"6530:1642:32","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3734,"nodeType":"Block","src":"8348:161:32","statements":[{"id":3733,"nodeType":"UncheckedBlock","src":"8358:145:32","statements":[{"assignments":[3711],"declarations":[{"constant":false,"id":3711,"mutability":"mutable","name":"result","nameLocation":"8390:6:32","nodeType":"VariableDeclaration","scope":3733,"src":"8382:14:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3710,"name":"uint256","nodeType":"ElementaryTypeName","src":"8382:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3715,"initialValue":{"arguments":[{"id":3713,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3702,"src":"8404:1:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3712,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[3699,3735],"referencedDeclaration":3699,"src":"8399:4:32","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3714,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8399:7:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8382:24:32"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3731,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3716,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3711,"src":"8427:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3336","typeString":"enum Math.Rounding"},"id":3720,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3717,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3705,"src":"8437:8:32","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3336","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3718,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3336,"src":"8449:8:32","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3336_$","typeString":"type(enum Math.Rounding)"}},"id":3719,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8458:2:32","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3334,"src":"8449:11:32","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3336","typeString":"enum Math.Rounding"}},"src":"8437:23:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3725,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3721,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3711,"src":"8464:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":3722,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3711,"src":"8473:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8464:15:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3724,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3702,"src":"8482:1:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8464:19:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8437:46:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3728,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8490:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8437:54:32","trueExpression":{"hexValue":"31","id":3727,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8486:1:32","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3730,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8436:56:32","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8427:65:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3709,"id":3732,"nodeType":"Return","src":"8420:72:32"}]}]},"documentation":{"id":3700,"nodeType":"StructuredDocumentation","src":"8178:89:32","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":3735,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8281:4:32","nodeType":"FunctionDefinition","parameters":{"id":3706,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3702,"mutability":"mutable","name":"a","nameLocation":"8294:1:32","nodeType":"VariableDeclaration","scope":3735,"src":"8286:9:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3701,"name":"uint256","nodeType":"ElementaryTypeName","src":"8286:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3705,"mutability":"mutable","name":"rounding","nameLocation":"8306:8:32","nodeType":"VariableDeclaration","scope":3735,"src":"8297:17:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3336","typeString":"enum Math.Rounding"},"typeName":{"id":3704,"nodeType":"UserDefinedTypeName","pathNode":{"id":3703,"name":"Rounding","nameLocations":["8297:8:32"],"nodeType":"IdentifierPath","referencedDeclaration":3336,"src":"8297:8:32"},"referencedDeclaration":3336,"src":"8297:8:32","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3336","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8285:30:32"},"returnParameters":{"id":3709,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3708,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3735,"src":"8339:7:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3707,"name":"uint256","nodeType":"ElementaryTypeName","src":"8339:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8338:9:32"},"scope":4195,"src":"8272:237:32","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3866,"nodeType":"Block","src":"8694:922:32","statements":[{"assignments":[3744],"declarations":[{"constant":false,"id":3744,"mutability":"mutable","name":"result","nameLocation":"8712:6:32","nodeType":"VariableDeclaration","scope":3866,"src":"8704:14:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3743,"name":"uint256","nodeType":"ElementaryTypeName","src":"8704:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3746,"initialValue":{"hexValue":"30","id":3745,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8721:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8704:18:32"},{"id":3863,"nodeType":"UncheckedBlock","src":"8732:855:32","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3747,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3738,"src":"8760:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":3748,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8769:3:32","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8760:12:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3750,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8775:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8760:16:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3761,"nodeType":"IfStatement","src":"8756:99:32","trueBody":{"id":3760,"nodeType":"Block","src":"8778:77:32","statements":[{"expression":{"id":3754,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3752,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3738,"src":"8796:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":3753,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8806:3:32","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8796:13:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3755,"nodeType":"ExpressionStatement","src":"8796:13:32"},{"expression":{"id":3758,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3756,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3744,"src":"8827:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":3757,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8837:3:32","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8827:13:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3759,"nodeType":"ExpressionStatement","src":"8827:13:32"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3766,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3762,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3738,"src":"8872:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":3763,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8881:2:32","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8872:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3765,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8886:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8872:15:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3776,"nodeType":"IfStatement","src":"8868:96:32","trueBody":{"id":3775,"nodeType":"Block","src":"8889:75:32","statements":[{"expression":{"id":3769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3767,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3738,"src":"8907:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":3768,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8917:2:32","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8907:12:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3770,"nodeType":"ExpressionStatement","src":"8907:12:32"},{"expression":{"id":3773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3771,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3744,"src":"8937:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":3772,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8947:2:32","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8937:12:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3774,"nodeType":"ExpressionStatement","src":"8937:12:32"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3781,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3777,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3738,"src":"8981:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":3778,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8990:2:32","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8981:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3780,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8995:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8981:15:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3791,"nodeType":"IfStatement","src":"8977:96:32","trueBody":{"id":3790,"nodeType":"Block","src":"8998:75:32","statements":[{"expression":{"id":3784,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3782,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3738,"src":"9016:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":3783,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9026:2:32","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9016:12:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3785,"nodeType":"ExpressionStatement","src":"9016:12:32"},{"expression":{"id":3788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3786,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3744,"src":"9046:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":3787,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9056:2:32","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9046:12:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3789,"nodeType":"ExpressionStatement","src":"9046:12:32"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3792,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3738,"src":"9090:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":3793,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9099:2:32","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9090:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3795,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9104:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9090:15:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3806,"nodeType":"IfStatement","src":"9086:96:32","trueBody":{"id":3805,"nodeType":"Block","src":"9107:75:32","statements":[{"expression":{"id":3799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3797,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3738,"src":"9125:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":3798,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9135:2:32","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9125:12:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3800,"nodeType":"ExpressionStatement","src":"9125:12:32"},{"expression":{"id":3803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3801,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3744,"src":"9155:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3802,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9165:2:32","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9155:12:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3804,"nodeType":"ExpressionStatement","src":"9155:12:32"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3809,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3807,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3738,"src":"9199:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":3808,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9208:1:32","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9199:10:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3810,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9212:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9199:14:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3821,"nodeType":"IfStatement","src":"9195:93:32","trueBody":{"id":3820,"nodeType":"Block","src":"9215:73:32","statements":[{"expression":{"id":3814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3812,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3738,"src":"9233:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":3813,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9243:1:32","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9233:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3815,"nodeType":"ExpressionStatement","src":"9233:11:32"},{"expression":{"id":3818,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3816,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3744,"src":"9262:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3817,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9272:1:32","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9262:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3819,"nodeType":"ExpressionStatement","src":"9262:11:32"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3826,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3824,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3822,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3738,"src":"9305:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":3823,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9314:1:32","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9305:10:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3825,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9318:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9305:14:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3836,"nodeType":"IfStatement","src":"9301:93:32","trueBody":{"id":3835,"nodeType":"Block","src":"9321:73:32","statements":[{"expression":{"id":3829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3827,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3738,"src":"9339:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":3828,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9349:1:32","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9339:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3830,"nodeType":"ExpressionStatement","src":"9339:11:32"},{"expression":{"id":3833,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3831,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3744,"src":"9368:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3832,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9378:1:32","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9368:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3834,"nodeType":"ExpressionStatement","src":"9368:11:32"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3837,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3738,"src":"9411:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":3838,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9420:1:32","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9411:10:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3840,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9424:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9411:14:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3851,"nodeType":"IfStatement","src":"9407:93:32","trueBody":{"id":3850,"nodeType":"Block","src":"9427:73:32","statements":[{"expression":{"id":3844,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3842,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3738,"src":"9445:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":3843,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9455:1:32","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9445:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3845,"nodeType":"ExpressionStatement","src":"9445:11:32"},{"expression":{"id":3848,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3846,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3744,"src":"9474:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":3847,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9484:1:32","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9474:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3849,"nodeType":"ExpressionStatement","src":"9474:11:32"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3854,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3852,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3738,"src":"9517:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":3853,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9526:1:32","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9517:10:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3855,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9530:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9517:14:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3862,"nodeType":"IfStatement","src":"9513:64:32","trueBody":{"id":3861,"nodeType":"Block","src":"9533:44:32","statements":[{"expression":{"id":3859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3857,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3744,"src":"9551:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":3858,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9561:1:32","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9551:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3860,"nodeType":"ExpressionStatement","src":"9551:11:32"}]}}]},{"expression":{"id":3864,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3744,"src":"9603:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3742,"id":3865,"nodeType":"Return","src":"9596:13:32"}]},"documentation":{"id":3736,"nodeType":"StructuredDocumentation","src":"8515:113:32","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":3867,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8642:4:32","nodeType":"FunctionDefinition","parameters":{"id":3739,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3738,"mutability":"mutable","name":"value","nameLocation":"8655:5:32","nodeType":"VariableDeclaration","scope":3867,"src":"8647:13:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3737,"name":"uint256","nodeType":"ElementaryTypeName","src":"8647:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8646:15:32"},"returnParameters":{"id":3742,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3741,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3867,"src":"8685:7:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3740,"name":"uint256","nodeType":"ElementaryTypeName","src":"8685:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8684:9:32"},"scope":4195,"src":"8633:983:32","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3902,"nodeType":"Block","src":"9849:165:32","statements":[{"id":3901,"nodeType":"UncheckedBlock","src":"9859:149:32","statements":[{"assignments":[3879],"declarations":[{"constant":false,"id":3879,"mutability":"mutable","name":"result","nameLocation":"9891:6:32","nodeType":"VariableDeclaration","scope":3901,"src":"9883:14:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3878,"name":"uint256","nodeType":"ElementaryTypeName","src":"9883:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3883,"initialValue":{"arguments":[{"id":3881,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3870,"src":"9905:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3880,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[3867,3903],"referencedDeclaration":3867,"src":"9900:4:32","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":3882,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9900:11:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9883:28:32"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3899,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3884,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3879,"src":"9932:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3894,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3336","typeString":"enum Math.Rounding"},"id":3888,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3885,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3873,"src":"9942:8:32","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3336","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":3886,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3336,"src":"9954:8:32","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3336_$","typeString":"type(enum Math.Rounding)"}},"id":3887,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9963:2:32","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3334,"src":"9954:11:32","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3336","typeString":"enum Math.Rounding"}},"src":"9942:23:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":3889,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9969:1:32","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":3890,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3879,"src":"9974:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9969:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":3892,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3870,"src":"9983:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9969:19:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9942:46:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":3896,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9995:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":3897,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9942:54:32","trueExpression":{"hexValue":"31","id":3895,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9991:1:32","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":3898,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9941:56:32","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9932:65:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3877,"id":3900,"nodeType":"Return","src":"9925:72:32"}]}]},"documentation":{"id":3868,"nodeType":"StructuredDocumentation","src":"9622:142:32","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":3903,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9778:4:32","nodeType":"FunctionDefinition","parameters":{"id":3874,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3870,"mutability":"mutable","name":"value","nameLocation":"9791:5:32","nodeType":"VariableDeclaration","scope":3903,"src":"9783:13:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3869,"name":"uint256","nodeType":"ElementaryTypeName","src":"9783:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3873,"mutability":"mutable","name":"rounding","nameLocation":"9807:8:32","nodeType":"VariableDeclaration","scope":3903,"src":"9798:17:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3336","typeString":"enum Math.Rounding"},"typeName":{"id":3872,"nodeType":"UserDefinedTypeName","pathNode":{"id":3871,"name":"Rounding","nameLocations":["9798:8:32"],"nodeType":"IdentifierPath","referencedDeclaration":3336,"src":"9798:8:32"},"referencedDeclaration":3336,"src":"9798:8:32","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3336","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"9782:34:32"},"returnParameters":{"id":3877,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3876,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3903,"src":"9840:7:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3875,"name":"uint256","nodeType":"ElementaryTypeName","src":"9840:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9839:9:32"},"scope":4195,"src":"9769:245:32","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4031,"nodeType":"Block","src":"10201:854:32","statements":[{"assignments":[3912],"declarations":[{"constant":false,"id":3912,"mutability":"mutable","name":"result","nameLocation":"10219:6:32","nodeType":"VariableDeclaration","scope":4031,"src":"10211:14:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3911,"name":"uint256","nodeType":"ElementaryTypeName","src":"10211:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3914,"initialValue":{"hexValue":"30","id":3913,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10228:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10211:18:32"},{"id":4028,"nodeType":"UncheckedBlock","src":"10239:787:32","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3919,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3915,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3906,"src":"10267:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":3918,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3916,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10276:2:32","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":3917,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10282:2:32","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10276:8:32","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10267:17:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3931,"nodeType":"IfStatement","src":"10263:103:32","trueBody":{"id":3930,"nodeType":"Block","src":"10286:80:32","statements":[{"expression":{"id":3924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3920,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3906,"src":"10304:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":3923,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3921,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10313:2:32","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":3922,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10319:2:32","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10313:8:32","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10304:17:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3925,"nodeType":"ExpressionStatement","src":"10304:17:32"},{"expression":{"id":3928,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3926,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3912,"src":"10339:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":3927,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10349:2:32","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10339:12:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3929,"nodeType":"ExpressionStatement","src":"10339:12:32"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3932,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3906,"src":"10383:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":3935,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3933,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10392:2:32","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":3934,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10398:2:32","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10392:8:32","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10383:17:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3948,"nodeType":"IfStatement","src":"10379:103:32","trueBody":{"id":3947,"nodeType":"Block","src":"10402:80:32","statements":[{"expression":{"id":3941,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3937,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3906,"src":"10420:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":3940,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3938,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10429:2:32","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":3939,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10435:2:32","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10429:8:32","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10420:17:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3942,"nodeType":"ExpressionStatement","src":"10420:17:32"},{"expression":{"id":3945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3943,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3912,"src":"10455:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":3944,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10465:2:32","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10455:12:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3946,"nodeType":"ExpressionStatement","src":"10455:12:32"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3953,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3949,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3906,"src":"10499:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":3952,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3950,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10508:2:32","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":3951,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10514:2:32","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10508:8:32","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10499:17:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3965,"nodeType":"IfStatement","src":"10495:103:32","trueBody":{"id":3964,"nodeType":"Block","src":"10518:80:32","statements":[{"expression":{"id":3958,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3954,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3906,"src":"10536:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":3957,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3955,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10545:2:32","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":3956,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10551:2:32","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10545:8:32","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10536:17:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3959,"nodeType":"ExpressionStatement","src":"10536:17:32"},{"expression":{"id":3962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3960,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3912,"src":"10571:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":3961,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10581:2:32","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10571:12:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3963,"nodeType":"ExpressionStatement","src":"10571:12:32"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3970,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3966,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3906,"src":"10615:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":3969,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3967,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10624:2:32","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3968,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10630:1:32","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10624:7:32","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10615:16:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3982,"nodeType":"IfStatement","src":"10611:100:32","trueBody":{"id":3981,"nodeType":"Block","src":"10633:78:32","statements":[{"expression":{"id":3975,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3971,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3906,"src":"10651:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":3974,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3972,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10660:2:32","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":3973,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10666:1:32","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10660:7:32","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10651:16:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3976,"nodeType":"ExpressionStatement","src":"10651:16:32"},{"expression":{"id":3979,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3977,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3912,"src":"10685:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":3978,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10695:1:32","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10685:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3980,"nodeType":"ExpressionStatement","src":"10685:11:32"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3987,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3983,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3906,"src":"10728:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":3986,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3984,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10737:2:32","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":3985,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10743:1:32","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10737:7:32","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10728:16:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3999,"nodeType":"IfStatement","src":"10724:100:32","trueBody":{"id":3998,"nodeType":"Block","src":"10746:78:32","statements":[{"expression":{"id":3992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3988,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3906,"src":"10764:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":3991,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":3989,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10773:2:32","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":3990,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10779:1:32","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10773:7:32","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10764:16:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3993,"nodeType":"ExpressionStatement","src":"10764:16:32"},{"expression":{"id":3996,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3994,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3912,"src":"10798:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":3995,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10808:1:32","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10798:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3997,"nodeType":"ExpressionStatement","src":"10798:11:32"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4000,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3906,"src":"10841:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":4003,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4001,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10850:2:32","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":4002,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10856:1:32","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10850:7:32","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10841:16:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4016,"nodeType":"IfStatement","src":"10837:100:32","trueBody":{"id":4015,"nodeType":"Block","src":"10859:78:32","statements":[{"expression":{"id":4009,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4005,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3906,"src":"10877:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":4008,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4006,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10886:2:32","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":4007,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10892:1:32","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10886:7:32","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10877:16:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4010,"nodeType":"ExpressionStatement","src":"10877:16:32"},{"expression":{"id":4013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4011,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3912,"src":"10911:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":4012,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10921:1:32","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10911:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4014,"nodeType":"ExpressionStatement","src":"10911:11:32"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4017,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3906,"src":"10954:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":4020,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4018,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10963:2:32","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":4019,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10969:1:32","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10963:7:32","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10954:16:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4027,"nodeType":"IfStatement","src":"10950:66:32","trueBody":{"id":4026,"nodeType":"Block","src":"10972:44:32","statements":[{"expression":{"id":4024,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4022,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3912,"src":"10990:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4023,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11000:1:32","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10990:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4025,"nodeType":"ExpressionStatement","src":"10990:11:32"}]}}]},{"expression":{"id":4029,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3912,"src":"11042:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3910,"id":4030,"nodeType":"Return","src":"11035:13:32"}]},"documentation":{"id":3904,"nodeType":"StructuredDocumentation","src":"10020:114:32","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":4032,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10148:5:32","nodeType":"FunctionDefinition","parameters":{"id":3907,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3906,"mutability":"mutable","name":"value","nameLocation":"10162:5:32","nodeType":"VariableDeclaration","scope":4032,"src":"10154:13:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3905,"name":"uint256","nodeType":"ElementaryTypeName","src":"10154:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10153:15:32"},"returnParameters":{"id":3910,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3909,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4032,"src":"10192:7:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3908,"name":"uint256","nodeType":"ElementaryTypeName","src":"10192:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10191:9:32"},"scope":4195,"src":"10139:916:32","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4067,"nodeType":"Block","src":"11290:167:32","statements":[{"id":4066,"nodeType":"UncheckedBlock","src":"11300:151:32","statements":[{"assignments":[4044],"declarations":[{"constant":false,"id":4044,"mutability":"mutable","name":"result","nameLocation":"11332:6:32","nodeType":"VariableDeclaration","scope":4066,"src":"11324:14:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4043,"name":"uint256","nodeType":"ElementaryTypeName","src":"11324:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4048,"initialValue":{"arguments":[{"id":4046,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4035,"src":"11347:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4045,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[4032,4068],"referencedDeclaration":4032,"src":"11341:5:32","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4047,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11341:12:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11324:29:32"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4049,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4044,"src":"11374:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4059,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3336","typeString":"enum Math.Rounding"},"id":4053,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4050,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4038,"src":"11384:8:32","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3336","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4051,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3336,"src":"11396:8:32","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3336_$","typeString":"type(enum Math.Rounding)"}},"id":4052,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11405:2:32","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3334,"src":"11396:11:32","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3336","typeString":"enum Math.Rounding"}},"src":"11384:23:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":4054,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11411:2:32","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":4055,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4044,"src":"11417:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11411:12:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4057,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4035,"src":"11426:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11411:20:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11384:47:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4061,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11438:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11384:55:32","trueExpression":{"hexValue":"31","id":4060,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11434:1:32","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4063,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11383:57:32","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11374:66:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4042,"id":4065,"nodeType":"Return","src":"11367:73:32"}]}]},"documentation":{"id":4033,"nodeType":"StructuredDocumentation","src":"11061:143:32","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4068,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"11218:5:32","nodeType":"FunctionDefinition","parameters":{"id":4039,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4035,"mutability":"mutable","name":"value","nameLocation":"11232:5:32","nodeType":"VariableDeclaration","scope":4068,"src":"11224:13:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4034,"name":"uint256","nodeType":"ElementaryTypeName","src":"11224:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4038,"mutability":"mutable","name":"rounding","nameLocation":"11248:8:32","nodeType":"VariableDeclaration","scope":4068,"src":"11239:17:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3336","typeString":"enum Math.Rounding"},"typeName":{"id":4037,"nodeType":"UserDefinedTypeName","pathNode":{"id":4036,"name":"Rounding","nameLocations":["11239:8:32"],"nodeType":"IdentifierPath","referencedDeclaration":3336,"src":"11239:8:32"},"referencedDeclaration":3336,"src":"11239:8:32","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3336","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"11223:34:32"},"returnParameters":{"id":4042,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4041,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4068,"src":"11281:7:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4040,"name":"uint256","nodeType":"ElementaryTypeName","src":"11281:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11280:9:32"},"scope":4195,"src":"11209:248:32","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4154,"nodeType":"Block","src":"11771:600:32","statements":[{"assignments":[4077],"declarations":[{"constant":false,"id":4077,"mutability":"mutable","name":"result","nameLocation":"11789:6:32","nodeType":"VariableDeclaration","scope":4154,"src":"11781:14:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4076,"name":"uint256","nodeType":"ElementaryTypeName","src":"11781:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4079,"initialValue":{"hexValue":"30","id":4078,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11798:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11781:18:32"},{"id":4151,"nodeType":"UncheckedBlock","src":"11809:533:32","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4084,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4082,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4080,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4071,"src":"11837:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":4081,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11846:3:32","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11837:12:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4083,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11852:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11837:16:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4094,"nodeType":"IfStatement","src":"11833:98:32","trueBody":{"id":4093,"nodeType":"Block","src":"11855:76:32","statements":[{"expression":{"id":4087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4085,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4071,"src":"11873:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":4086,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11883:3:32","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11873:13:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4088,"nodeType":"ExpressionStatement","src":"11873:13:32"},{"expression":{"id":4091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4089,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4077,"src":"11904:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":4090,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11914:2:32","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11904:12:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4092,"nodeType":"ExpressionStatement","src":"11904:12:32"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4099,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4095,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4071,"src":"11948:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":4096,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11957:2:32","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11948:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4098,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11962:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11948:15:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4109,"nodeType":"IfStatement","src":"11944:95:32","trueBody":{"id":4108,"nodeType":"Block","src":"11965:74:32","statements":[{"expression":{"id":4102,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4100,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4071,"src":"11983:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":4101,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11993:2:32","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11983:12:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4103,"nodeType":"ExpressionStatement","src":"11983:12:32"},{"expression":{"id":4106,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4104,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4077,"src":"12013:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":4105,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12023:1:32","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12013:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4107,"nodeType":"ExpressionStatement","src":"12013:11:32"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4114,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4110,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4071,"src":"12056:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":4111,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12065:2:32","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12056:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4113,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12070:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12056:15:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4124,"nodeType":"IfStatement","src":"12052:95:32","trueBody":{"id":4123,"nodeType":"Block","src":"12073:74:32","statements":[{"expression":{"id":4117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4115,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4071,"src":"12091:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":4116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12101:2:32","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12091:12:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4118,"nodeType":"ExpressionStatement","src":"12091:12:32"},{"expression":{"id":4121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4119,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4077,"src":"12121:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":4120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12131:1:32","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12121:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4122,"nodeType":"ExpressionStatement","src":"12121:11:32"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4125,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4071,"src":"12164:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":4126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12173:2:32","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12164:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4128,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12178:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12164:15:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4139,"nodeType":"IfStatement","src":"12160:95:32","trueBody":{"id":4138,"nodeType":"Block","src":"12181:74:32","statements":[{"expression":{"id":4132,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4130,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4071,"src":"12199:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":4131,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12209:2:32","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12199:12:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4133,"nodeType":"ExpressionStatement","src":"12199:12:32"},{"expression":{"id":4136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4134,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4077,"src":"12229:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":4135,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12239:1:32","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12229:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4137,"nodeType":"ExpressionStatement","src":"12229:11:32"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4140,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4071,"src":"12272:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":4141,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12281:1:32","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12272:10:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4143,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12285:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12272:14:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4150,"nodeType":"IfStatement","src":"12268:64:32","trueBody":{"id":4149,"nodeType":"Block","src":"12288:44:32","statements":[{"expression":{"id":4147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4145,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4077,"src":"12306:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":4146,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12316:1:32","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12306:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4148,"nodeType":"ExpressionStatement","src":"12306:11:32"}]}}]},{"expression":{"id":4152,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4077,"src":"12358:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4075,"id":4153,"nodeType":"Return","src":"12351:13:32"}]},"documentation":{"id":4069,"nodeType":"StructuredDocumentation","src":"11463:240:32","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":4155,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11717:6:32","nodeType":"FunctionDefinition","parameters":{"id":4072,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4071,"mutability":"mutable","name":"value","nameLocation":"11732:5:32","nodeType":"VariableDeclaration","scope":4155,"src":"11724:13:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4070,"name":"uint256","nodeType":"ElementaryTypeName","src":"11724:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11723:15:32"},"returnParameters":{"id":4075,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4074,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4155,"src":"11762:7:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4073,"name":"uint256","nodeType":"ElementaryTypeName","src":"11762:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11761:9:32"},"scope":4195,"src":"11708:663:32","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4193,"nodeType":"Block","src":"12608:174:32","statements":[{"id":4192,"nodeType":"UncheckedBlock","src":"12618:158:32","statements":[{"assignments":[4167],"declarations":[{"constant":false,"id":4167,"mutability":"mutable","name":"result","nameLocation":"12650:6:32","nodeType":"VariableDeclaration","scope":4192,"src":"12642:14:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4166,"name":"uint256","nodeType":"ElementaryTypeName","src":"12642:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4171,"initialValue":{"arguments":[{"id":4169,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4158,"src":"12666:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4168,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[4155,4194],"referencedDeclaration":4155,"src":"12659:6:32","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":4170,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12659:13:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12642:30:32"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4172,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4167,"src":"12693:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$3336","typeString":"enum Math.Rounding"},"id":4176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4173,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4161,"src":"12703:8:32","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3336","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":4174,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3336,"src":"12715:8:32","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$3336_$","typeString":"type(enum Math.Rounding)"}},"id":4175,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12724:2:32","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":3334,"src":"12715:11:32","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3336","typeString":"enum Math.Rounding"}},"src":"12703:23:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4184,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":4177,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12730:1:32","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4180,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4178,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4167,"src":"12736:6:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":4179,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12746:1:32","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"12736:11:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":4181,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12735:13:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12730:18:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4183,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4158,"src":"12751:5:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12730:26:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12703:53:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":4187,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12763:1:32","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":4188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12703:61:32","trueExpression":{"hexValue":"31","id":4186,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12759:1:32","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":4189,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12702:63:32","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12693:72:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4165,"id":4191,"nodeType":"Return","src":"12686:79:32"}]}]},"documentation":{"id":4156,"nodeType":"StructuredDocumentation","src":"12377:144:32","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":4194,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12535:6:32","nodeType":"FunctionDefinition","parameters":{"id":4162,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4158,"mutability":"mutable","name":"value","nameLocation":"12550:5:32","nodeType":"VariableDeclaration","scope":4194,"src":"12542:13:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4157,"name":"uint256","nodeType":"ElementaryTypeName","src":"12542:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4161,"mutability":"mutable","name":"rounding","nameLocation":"12566:8:32","nodeType":"VariableDeclaration","scope":4194,"src":"12557:17:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3336","typeString":"enum Math.Rounding"},"typeName":{"id":4160,"nodeType":"UserDefinedTypeName","pathNode":{"id":4159,"name":"Rounding","nameLocations":["12557:8:32"],"nodeType":"IdentifierPath","referencedDeclaration":3336,"src":"12557:8:32"},"referencedDeclaration":3336,"src":"12557:8:32","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$3336","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"12541:34:32"},"returnParameters":{"id":4165,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4164,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4194,"src":"12599:7:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4163,"name":"uint256","nodeType":"ElementaryTypeName","src":"12599:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12598:9:32"},"scope":4195,"src":"12526:256:32","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4196,"src":"202:12582:32","usedErrors":[]}],"src":"103:12682:32"},"id":32},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","exportedSymbols":{"SignedMath":[4300]},"id":4301,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4197,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"109:23:33"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMath","contractDependencies":[],"contractKind":"library","documentation":{"id":4198,"nodeType":"StructuredDocumentation","src":"134:80:33","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":4300,"linearizedBaseContracts":[4300],"name":"SignedMath","nameLocation":"223:10:33","nodeType":"ContractDefinition","nodes":[{"body":{"id":4215,"nodeType":"Block","src":"375:37:33","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4208,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4201,"src":"392:1:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4209,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4203,"src":"396:1:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"392:5:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4212,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4203,"src":"404:1:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"392:13:33","trueExpression":{"id":4211,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4201,"src":"400:1:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":4207,"id":4214,"nodeType":"Return","src":"385:20:33"}]},"documentation":{"id":4199,"nodeType":"StructuredDocumentation","src":"240:66:33","text":" @dev Returns the largest of two signed numbers."},"id":4216,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"320:3:33","nodeType":"FunctionDefinition","parameters":{"id":4204,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4201,"mutability":"mutable","name":"a","nameLocation":"331:1:33","nodeType":"VariableDeclaration","scope":4216,"src":"324:8:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4200,"name":"int256","nodeType":"ElementaryTypeName","src":"324:6:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":4203,"mutability":"mutable","name":"b","nameLocation":"341:1:33","nodeType":"VariableDeclaration","scope":4216,"src":"334:8:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4202,"name":"int256","nodeType":"ElementaryTypeName","src":"334:6:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"323:20:33"},"returnParameters":{"id":4207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4206,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4216,"src":"367:6:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4205,"name":"int256","nodeType":"ElementaryTypeName","src":"367:6:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"366:8:33"},"scope":4300,"src":"311:101:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4233,"nodeType":"Block","src":"554:37:33","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4226,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4219,"src":"571:1:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":4227,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4221,"src":"575:1:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"571:5:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4230,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4221,"src":"583:1:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"571:13:33","trueExpression":{"id":4229,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4219,"src":"579:1:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":4225,"id":4232,"nodeType":"Return","src":"564:20:33"}]},"documentation":{"id":4217,"nodeType":"StructuredDocumentation","src":"418:67:33","text":" @dev Returns the smallest of two signed numbers."},"id":4234,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"499:3:33","nodeType":"FunctionDefinition","parameters":{"id":4222,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4219,"mutability":"mutable","name":"a","nameLocation":"510:1:33","nodeType":"VariableDeclaration","scope":4234,"src":"503:8:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4218,"name":"int256","nodeType":"ElementaryTypeName","src":"503:6:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":4221,"mutability":"mutable","name":"b","nameLocation":"520:1:33","nodeType":"VariableDeclaration","scope":4234,"src":"513:8:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4220,"name":"int256","nodeType":"ElementaryTypeName","src":"513:6:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"502:20:33"},"returnParameters":{"id":4225,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4224,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4234,"src":"546:6:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4223,"name":"int256","nodeType":"ElementaryTypeName","src":"546:6:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"545:8:33"},"scope":4300,"src":"490:101:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4277,"nodeType":"Block","src":"796:162:33","statements":[{"assignments":[4245],"declarations":[{"constant":false,"id":4245,"mutability":"mutable","name":"x","nameLocation":"865:1:33","nodeType":"VariableDeclaration","scope":4277,"src":"858:8:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4244,"name":"int256","nodeType":"ElementaryTypeName","src":"858:6:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":4258,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4248,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4246,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4237,"src":"870:1:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":4247,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4239,"src":"874:1:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"870:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4249,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"869:7:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4255,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4250,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4237,"src":"881:1:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":4251,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4239,"src":"885:1:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"881:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4253,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:7:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":4254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"891:1:33","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"880:12:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4256,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"879:14:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"869:24:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"858:35:33"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4259,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4245,"src":"910:1:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4267,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":4264,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4245,"src":"930:1:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4263,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"922:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4262,"name":"uint256","nodeType":"ElementaryTypeName","src":"922:7:33","typeDescriptions":{}}},"id":4265,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"922:10:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":4266,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"936:3:33","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"922:17:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4261,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"915:6:33","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":4260,"name":"int256","nodeType":"ElementaryTypeName","src":"915:6:33","typeDescriptions":{}}},"id":4268,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"915:25:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4269,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4237,"src":"944:1:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":4270,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4239,"src":"948:1:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"944:5:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4272,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"943:7:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"915:35:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":4274,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"914:37:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"910:41:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":4243,"id":4276,"nodeType":"Return","src":"903:48:33"}]},"documentation":{"id":4235,"nodeType":"StructuredDocumentation","src":"597:126:33","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":4278,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"737:7:33","nodeType":"FunctionDefinition","parameters":{"id":4240,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4237,"mutability":"mutable","name":"a","nameLocation":"752:1:33","nodeType":"VariableDeclaration","scope":4278,"src":"745:8:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4236,"name":"int256","nodeType":"ElementaryTypeName","src":"745:6:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":4239,"mutability":"mutable","name":"b","nameLocation":"762:1:33","nodeType":"VariableDeclaration","scope":4278,"src":"755:8:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4238,"name":"int256","nodeType":"ElementaryTypeName","src":"755:6:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"744:20:33"},"returnParameters":{"id":4243,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4242,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4278,"src":"788:6:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4241,"name":"int256","nodeType":"ElementaryTypeName","src":"788:6:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"787:8:33"},"scope":4300,"src":"728:230:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4298,"nodeType":"Block","src":"1102:158:33","statements":[{"id":4297,"nodeType":"UncheckedBlock","src":"1112:142:33","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":4290,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4288,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4281,"src":"1227:1:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":4289,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1232:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1227:6:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":4293,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1240:2:33","subExpression":{"id":4292,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4281,"src":"1241:1:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":4294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1227:15:33","trueExpression":{"id":4291,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4281,"src":"1236:1:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":4287,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1219:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4286,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:33","typeDescriptions":{}}},"id":4295,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1219:24:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4285,"id":4296,"nodeType":"Return","src":"1212:31:33"}]}]},"documentation":{"id":4279,"nodeType":"StructuredDocumentation","src":"964:78:33","text":" @dev Returns the absolute unsigned value of a signed value."},"id":4299,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1056:3:33","nodeType":"FunctionDefinition","parameters":{"id":4282,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4281,"mutability":"mutable","name":"n","nameLocation":"1067:1:33","nodeType":"VariableDeclaration","scope":4299,"src":"1060:8:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":4280,"name":"int256","nodeType":"ElementaryTypeName","src":"1060:6:33","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1059:10:33"},"returnParameters":{"id":4285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4284,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4299,"src":"1093:7:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4283,"name":"uint256","nodeType":"ElementaryTypeName","src":"1093:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1092:9:33"},"scope":4300,"src":"1047:213:33","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4301,"src":"215:1047:33","usedErrors":[]}],"src":"109:1154:33"},"id":33},"contracts/LendNFTPlugin.sol":{"ast":{"absolutePath":"contracts/LendNFTPlugin.sol","exportedSymbols":{"Address":[2664],"Context":[2686],"Counters":[2760],"ERC165":[3123],"ERC721":[2017],"ERC721URIStorage":[2307],"FactoryNFT":[4347],"IDAO":[155],"IERC165":[3329],"IERC4906":[594],"IERC721":[2133],"IERC721Metadata":[2334],"IERC721Receiver":[2151],"LendNFTPlugin":[4387],"Math":[4195],"Plugin":[268],"SignedMath":[4300],"Strings":[3099]},"id":4388,"license":"AGPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":4302,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"46:23:34"},{"absolutePath":"@openzeppelin/contracts/utils/Counters.sol","file":"@openzeppelin/contracts/utils/Counters.sol","id":4303,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4388,"sourceUnit":2761,"src":"71:52:34","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol","file":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol","id":4304,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4388,"sourceUnit":2308,"src":"124:78:34","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC721/ERC721.sol","file":"@openzeppelin/contracts/token/ERC721/ERC721.sol","id":4305,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4388,"sourceUnit":2018,"src":"203:57:34","symbolAliases":[],"unitAlias":""},{"absolutePath":"@aragon/osx/core/plugin/Plugin.sol","file":"@aragon/osx/core/plugin/Plugin.sol","id":4308,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4388,"sourceUnit":269,"src":"263:64:34","symbolAliases":[{"foreign":{"id":4306,"name":"Plugin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":268,"src":"271:6:34","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":4307,"name":"IDAO","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":155,"src":"279:4:34","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4309,"name":"ERC721URIStorage","nameLocations":["352:16:34"],"nodeType":"IdentifierPath","referencedDeclaration":2307,"src":"352:16:34"},"id":4310,"nodeType":"InheritanceSpecifier","src":"352:16:34"}],"canonicalName":"FactoryNFT","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4347,"linearizedBaseContracts":[4347,2307,2017,2334,594,2133,3123,3329,2686],"name":"FactoryNFT","nameLocation":"338:10:34","nodeType":"ContractDefinition","nodes":[{"global":false,"id":4314,"libraryName":{"id":4311,"name":"Counters","nameLocations":["381:8:34"],"nodeType":"IdentifierPath","referencedDeclaration":2760,"src":"381:8:34"},"nodeType":"UsingForDirective","src":"375:36:34","typeName":{"id":4313,"nodeType":"UserDefinedTypeName","pathNode":{"id":4312,"name":"Counters.Counter","nameLocations":["394:8:34","403:7:34"],"nodeType":"IdentifierPath","referencedDeclaration":2692,"src":"394:16:34"},"referencedDeclaration":2692,"src":"394:16:34","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2692_storage_ptr","typeString":"struct Counters.Counter"}}},{"constant":false,"id":4317,"mutability":"mutable","name":"_tokenIds","nameLocation":"440:9:34","nodeType":"VariableDeclaration","scope":4347,"src":"415:34:34","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2692_storage","typeString":"struct Counters.Counter"},"typeName":{"id":4316,"nodeType":"UserDefinedTypeName","pathNode":{"id":4315,"name":"Counters.Counter","nameLocations":["415:8:34","424:7:34"],"nodeType":"IdentifierPath","referencedDeclaration":2692,"src":"415:16:34"},"referencedDeclaration":2692,"src":"415:16:34","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2692_storage_ptr","typeString":"struct Counters.Counter"}},"visibility":"private"},{"body":{"id":4324,"nodeType":"Block","src":"501:2:34","statements":[]},"id":4325,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"hexValue":"4661726d204c656e646572204e4654","id":4320,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"475:17:34","typeDescriptions":{"typeIdentifier":"t_stringliteral_8cf02ec7b2b98424ef23c398fec628ab5be56c76a8ad6f224bb72c7ba90ff84f","typeString":"literal_string \"Farm Lender NFT\""},"value":"Farm Lender NFT"},{"hexValue":"464c4e","id":4321,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"494:5:34","typeDescriptions":{"typeIdentifier":"t_stringliteral_9f3d874a1b0b838ee8707f2a2f4dafb4f16bd71bda8d23118d809c27598e5410","typeString":"literal_string \"FLN\""},"value":"FLN"}],"id":4322,"kind":"baseConstructorSpecifier","modifierName":{"id":4319,"name":"ERC721","nameLocations":["468:6:34"],"nodeType":"IdentifierPath","referencedDeclaration":2017,"src":"468:6:34"},"nodeType":"ModifierInvocation","src":"468:32:34"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4318,"nodeType":"ParameterList","parameters":[],"src":"465:2:34"},"returnParameters":{"id":4323,"nodeType":"ParameterList","parameters":[],"src":"501:0:34"},"scope":4347,"src":"454:49:34","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4345,"nodeType":"Block","src":"537:118:34","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4328,"name":"_tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4317,"src":"545:9:34","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2692_storage","typeString":"struct Counters.Counter storage ref"}},"id":4330,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"555:9:34","memberName":"increment","nodeType":"MemberAccess","referencedDeclaration":2718,"src":"545:19:34","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Counter_$2692_storage_ptr_$returns$__$attached_to$_t_struct$_Counter_$2692_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer)"}},"id":4331,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"545:21:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4332,"nodeType":"ExpressionStatement","src":"545:21:34"},{"assignments":[4334],"declarations":[{"constant":false,"id":4334,"mutability":"mutable","name":"newItemId","nameLocation":"582:9:34","nodeType":"VariableDeclaration","scope":4345,"src":"574:17:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4333,"name":"uint256","nodeType":"ElementaryTypeName","src":"574:7:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4338,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4335,"name":"_tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4317,"src":"594:9:34","typeDescriptions":{"typeIdentifier":"t_struct$_Counter_$2692_storage","typeString":"struct Counters.Counter storage ref"}},"id":4336,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"604:7:34","memberName":"current","nodeType":"MemberAccess","referencedDeclaration":2704,"src":"594:17:34","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Counter_$2692_storage_ptr_$returns$_t_uint256_$attached_to$_t_struct$_Counter_$2692_storage_ptr_$","typeString":"function (struct Counters.Counter storage pointer) view returns (uint256)"}},"id":4337,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"594:19:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"574:39:34"},{"expression":{"arguments":[{"expression":{"id":4340,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"628:3:34","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"632:6:34","memberName":"sender","nodeType":"MemberAccess","src":"628:10:34","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4342,"name":"newItemId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4334,"src":"640:9:34","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4339,"name":"_mint","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1691,"src":"622:5:34","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256)"}},"id":4343,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"622:28:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4344,"nodeType":"ExpressionStatement","src":"622:28:34"}]},"functionSelector":"9cbf9e36","id":4346,"implemented":true,"kind":"function","modifiers":[],"name":"createToken","nameLocation":"516:11:34","nodeType":"FunctionDefinition","parameters":{"id":4326,"nodeType":"ParameterList","parameters":[],"src":"527:2:34"},"returnParameters":{"id":4327,"nodeType":"ParameterList","parameters":[],"src":"537:0:34"},"scope":4347,"src":"507:148:34","stateMutability":"nonpayable","virtual":false,"visibility":"public"}],"scope":4388,"src":"329:332:34","usedErrors":[]},{"abstract":false,"baseContracts":[{"baseName":{"id":4348,"name":"Plugin","nameLocations":["689:6:34"],"nodeType":"IdentifierPath","referencedDeclaration":268,"src":"689:6:34"},"id":4349,"nodeType":"InheritanceSpecifier","src":"689:6:34"}],"canonicalName":"LendNFTPlugin","contractDependencies":[4347],"contractKind":"contract","fullyImplemented":true,"id":4387,"linearizedBaseContracts":[4387,268,326,2686,3123,3329,205],"name":"LendNFTPlugin","nameLocation":"672:13:34","nodeType":"ContractDefinition","nodes":[{"constant":true,"functionSelector":"1c7b4de4","id":4354,"mutability":"constant","name":"GREET_PERMISSION_ID","nameLocation":"995:19:34","nodeType":"VariableDeclaration","scope":4387,"src":"971:75:34","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4350,"name":"bytes32","nodeType":"ElementaryTypeName","src":"971:7:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"47524545545f5045524d495353494f4e","id":4352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1027:18:34","typeDescriptions":{"typeIdentifier":"t_stringliteral_1bd70c5aa931fa900de716024b36e36cc236a1ce16d32948668c08aa04e680f2","typeString":"literal_string \"GREET_PERMISSION\""},"value":"GREET_PERMISSION"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1bd70c5aa931fa900de716024b36e36cc236a1ce16d32948668c08aa04e680f2","typeString":"literal_string \"GREET_PERMISSION\""}],"id":4351,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1017:9:34","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4353,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1017:29:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"public"},{"constant":false,"id":4357,"mutability":"mutable","name":"factory_NFT","nameLocation":"1070:11:34","nodeType":"VariableDeclaration","scope":4387,"src":"1051:30:34","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_FactoryNFT_$4347","typeString":"contract FactoryNFT"},"typeName":{"id":4356,"nodeType":"UserDefinedTypeName","pathNode":{"id":4355,"name":"FactoryNFT","nameLocations":["1051:10:34"],"nodeType":"IdentifierPath","referencedDeclaration":4347,"src":"1051:10:34"},"referencedDeclaration":4347,"src":"1051:10:34","typeDescriptions":{"typeIdentifier":"t_contract$_FactoryNFT_$4347","typeString":"contract FactoryNFT"}},"visibility":"private"},{"body":{"id":4373,"nodeType":"Block","src":"1122:41:34","statements":[{"expression":{"id":4371,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4366,"name":"factory_NFT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4357,"src":"1128:11:34","typeDescriptions":{"typeIdentifier":"t_contract$_FactoryNFT_$4347","typeString":"contract FactoryNFT"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[],"expression":{"argumentTypes":[],"id":4369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"NewExpression","src":"1142:14:34","typeDescriptions":{"typeIdentifier":"t_function_creation_nonpayable$__$returns$_t_contract$_FactoryNFT_$4347_$","typeString":"function () returns (contract FactoryNFT)"},"typeName":{"id":4368,"nodeType":"UserDefinedTypeName","pathNode":{"id":4367,"name":"FactoryNFT","nameLocations":["1146:10:34"],"nodeType":"IdentifierPath","referencedDeclaration":4347,"src":"1146:10:34"},"referencedDeclaration":4347,"src":"1146:10:34","typeDescriptions":{"typeIdentifier":"t_contract$_FactoryNFT_$4347","typeString":"contract FactoryNFT"}}},"id":4370,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1142:16:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_FactoryNFT_$4347","typeString":"contract FactoryNFT"}},"src":"1128:30:34","typeDescriptions":{"typeIdentifier":"t_contract$_FactoryNFT_$4347","typeString":"contract FactoryNFT"}},"id":4372,"nodeType":"ExpressionStatement","src":"1128:30:34"}]},"id":4374,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":4363,"name":"_dao","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4360,"src":"1116:4:34","typeDescriptions":{"typeIdentifier":"t_contract$_IDAO_$155","typeString":"contract IDAO"}}],"id":4364,"kind":"baseConstructorSpecifier","modifierName":{"id":4362,"name":"Plugin","nameLocations":["1109:6:34"],"nodeType":"IdentifierPath","referencedDeclaration":268,"src":"1109:6:34"},"nodeType":"ModifierInvocation","src":"1109:12:34"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4361,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4360,"mutability":"mutable","name":"_dao","nameLocation":"1103:4:34","nodeType":"VariableDeclaration","scope":4374,"src":"1098:9:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IDAO_$155","typeString":"contract IDAO"},"typeName":{"id":4359,"nodeType":"UserDefinedTypeName","pathNode":{"id":4358,"name":"IDAO","nameLocations":["1098:4:34"],"nodeType":"IdentifierPath","referencedDeclaration":155,"src":"1098:4:34"},"referencedDeclaration":155,"src":"1098:4:34","typeDescriptions":{"typeIdentifier":"t_contract$_IDAO_$155","typeString":"contract IDAO"}},"visibility":"internal"}],"src":"1097:11:34"},"returnParameters":{"id":4365,"nodeType":"ParameterList","parameters":[],"src":"1122:0:34"},"scope":4387,"src":"1086:77:34","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4385,"nodeType":"Block","src":"1224:36:34","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4380,"name":"factory_NFT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4357,"src":"1230:11:34","typeDescriptions":{"typeIdentifier":"t_contract$_FactoryNFT_$4347","typeString":"contract FactoryNFT"}},"id":4382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1242:11:34","memberName":"createToken","nodeType":"MemberAccess","referencedDeclaration":4346,"src":"1230:23:34","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$__$returns$__$","typeString":"function () external"}},"id":4383,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1230:25:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4384,"nodeType":"ExpressionStatement","src":"1230:25:34"}]},"functionSelector":"1a0d8610","id":4386,"implemented":true,"kind":"function","modifiers":[{"arguments":[{"id":4377,"name":"GREET_PERMISSION_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4354,"src":"1203:19:34","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"id":4378,"kind":"modifierInvocation","modifierName":{"id":4376,"name":"auth","nameLocations":["1198:4:34"],"nodeType":"IdentifierPath","referencedDeclaration":325,"src":"1198:4:34"},"nodeType":"ModifierInvocation","src":"1198:25:34"}],"name":"lend_money","nameLocation":"1176:10:34","nodeType":"FunctionDefinition","parameters":{"id":4375,"nodeType":"ParameterList","parameters":[],"src":"1186:2:34"},"returnParameters":{"id":4379,"nodeType":"ParameterList","parameters":[],"src":"1224:0:34"},"scope":4387,"src":"1167:93:34","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":4388,"src":"663:600:34","usedErrors":[341]}],"src":"46:1218:34"},"id":34},"contracts/LendPluginSetup.sol":{"ast":{"absolutePath":"contracts/LendPluginSetup.sol","exportedSymbols":{"Address":[2664],"Context":[2686],"Counters":[2760],"ERC165":[3123],"ERC721":[2017],"ERC721URIStorage":[2307],"FactoryNFT":[4347],"IDAO":[155],"IERC165":[3329],"IERC4906":[594],"IERC721":[2133],"IERC721Metadata":[2334],"IERC721Receiver":[2151],"LendNFTPlugin":[4387],"LendPluginSetup":[4507],"Math":[4195],"PermissionLib":[190],"Plugin":[268],"PluginSetup":[524],"SignedMath":[4300],"Strings":[3099]},"id":4508,"license":"AGPL-3.0-or-later","nodeType":"SourceUnit","nodes":[{"id":4389,"literals":["solidity","0.8",".19"],"nodeType":"PragmaDirective","src":"46:23:35"},{"absolutePath":"@aragon/osx/framework/plugin/setup/PluginSetup.sol","file":"@aragon/osx/framework/plugin/setup/PluginSetup.sol","id":4391,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4508,"sourceUnit":525,"src":"71:79:35","symbolAliases":[{"foreign":{"id":4390,"name":"PluginSetup","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":524,"src":"79:11:35","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@aragon/osx/core/permission/PermissionLib.sol","file":"@aragon/osx/core/permission/PermissionLib.sol","id":4393,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4508,"sourceUnit":191,"src":"151:76:35","symbolAliases":[{"foreign":{"id":4392,"name":"PermissionLib","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":190,"src":"159:13:35","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/LendNFTPlugin.sol","file":"./LendNFTPlugin.sol","id":4394,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4508,"sourceUnit":4388,"src":"229:29:35","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4395,"name":"PluginSetup","nameLocations":["288:11:35"],"nodeType":"IdentifierPath","referencedDeclaration":524,"src":"288:11:35"},"id":4396,"nodeType":"InheritanceSpecifier","src":"288:11:35"}],"canonicalName":"LendPluginSetup","contractDependencies":[4387],"contractKind":"contract","fullyImplemented":true,"id":4507,"linearizedBaseContracts":[4507,524,448,3123,3329],"name":"LendPluginSetup","nameLocation":"269:15:35","nodeType":"ContractDefinition","nodes":[{"baseFunctions":[412],"body":{"id":4458,"nodeType":"Block","src":"451:473:35","statements":[{"expression":{"id":4419,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4408,"name":"plugin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4403,"src":"457:6:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"arguments":[{"id":4415,"name":"_dao","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4398,"src":"497:4:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4414,"name":"IDAO","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":155,"src":"492:4:35","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IDAO_$155_$","typeString":"type(contract IDAO)"}},"id":4416,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"492:10:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IDAO_$155","typeString":"contract IDAO"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IDAO_$155","typeString":"contract IDAO"}],"id":4413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"NewExpression","src":"474:17:35","typeDescriptions":{"typeIdentifier":"t_function_creation_nonpayable$_t_contract$_IDAO_$155_$returns$_t_contract$_LendNFTPlugin_$4387_$","typeString":"function (contract IDAO) returns (contract LendNFTPlugin)"},"typeName":{"id":4412,"nodeType":"UserDefinedTypeName","pathNode":{"id":4411,"name":"LendNFTPlugin","nameLocations":["478:13:35"],"nodeType":"IdentifierPath","referencedDeclaration":4387,"src":"478:13:35"},"referencedDeclaration":4387,"src":"478:13:35","typeDescriptions":{"typeIdentifier":"t_contract$_LendNFTPlugin_$4387","typeString":"contract LendNFTPlugin"}}},"id":4417,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"474:29:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_LendNFTPlugin_$4387","typeString":"contract LendNFTPlugin"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_LendNFTPlugin_$4387","typeString":"contract LendNFTPlugin"}],"id":4410,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"466:7:35","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4409,"name":"address","nodeType":"ElementaryTypeName","src":"466:7:35","typeDescriptions":{}}},"id":4418,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"466:38:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"457:47:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4420,"nodeType":"ExpressionStatement","src":"457:47:35"},{"assignments":[4426],"declarations":[{"constant":false,"id":4426,"mutability":"mutable","name":"permissions","nameLocation":"562:11:35","nodeType":"VariableDeclaration","scope":4458,"src":"511:62:35","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr","typeString":"struct PermissionLib.MultiTargetPermission[]"},"typeName":{"baseType":{"id":4424,"nodeType":"UserDefinedTypeName","pathNode":{"id":4423,"name":"PermissionLib.MultiTargetPermission","nameLocations":["511:13:35","525:21:35"],"nodeType":"IdentifierPath","referencedDeclaration":189,"src":"511:35:35"},"referencedDeclaration":189,"src":"511:35:35","typeDescriptions":{"typeIdentifier":"t_struct$_MultiTargetPermission_$189_storage_ptr","typeString":"struct PermissionLib.MultiTargetPermission"}},"id":4425,"nodeType":"ArrayTypeName","src":"511:37:35","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiTargetPermission_$189_storage_$dyn_storage_ptr","typeString":"struct PermissionLib.MultiTargetPermission[]"}},"visibility":"internal"}],"id":4433,"initialValue":{"arguments":[{"hexValue":"31","id":4431,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"618:1:35","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":4430,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"576:41:35","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (struct PermissionLib.MultiTargetPermission memory[] memory)"},"typeName":{"baseType":{"id":4428,"nodeType":"UserDefinedTypeName","pathNode":{"id":4427,"name":"PermissionLib.MultiTargetPermission","nameLocations":["580:13:35","594:21:35"],"nodeType":"IdentifierPath","referencedDeclaration":189,"src":"580:35:35"},"referencedDeclaration":189,"src":"580:35:35","typeDescriptions":{"typeIdentifier":"t_struct$_MultiTargetPermission_$189_storage_ptr","typeString":"struct PermissionLib.MultiTargetPermission"}},"id":4429,"nodeType":"ArrayTypeName","src":"580:37:35","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiTargetPermission_$189_storage_$dyn_storage_ptr","typeString":"struct PermissionLib.MultiTargetPermission[]"}}},"id":4432,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"576:44:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr","typeString":"struct PermissionLib.MultiTargetPermission memory[] memory"}},"nodeType":"VariableDeclarationStatement","src":"511:109:35"},{"expression":{"id":4450,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4434,"name":"permissions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4426,"src":"627:11:35","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr","typeString":"struct PermissionLib.MultiTargetPermission memory[] memory"}},"id":4436,"indexExpression":{"hexValue":"30","id":4435,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"639:1:35","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"627:14:35","typeDescriptions":{"typeIdentifier":"t_struct$_MultiTargetPermission_$189_memory_ptr","typeString":"struct PermissionLib.MultiTargetPermission memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"expression":{"id":4439,"name":"PermissionLib","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":190,"src":"699:13:35","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_PermissionLib_$190_$","typeString":"type(library PermissionLib)"}},"id":4440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"713:9:35","memberName":"Operation","nodeType":"MemberAccess","referencedDeclaration":169,"src":"699:23:35","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Operation_$169_$","typeString":"type(enum PermissionLib.Operation)"}},"id":4441,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"723:5:35","memberName":"Grant","nodeType":"MemberAccess","referencedDeclaration":166,"src":"699:29:35","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$169","typeString":"enum PermissionLib.Operation"}},{"id":4442,"name":"plugin","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4403,"src":"743:6:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4443,"name":"_dao","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4398,"src":"762:4:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":4444,"name":"PermissionLib","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":190,"src":"785:13:35","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_PermissionLib_$190_$","typeString":"type(library PermissionLib)"}},"id":4445,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"799:12:35","memberName":"NO_CONDITION","nodeType":"MemberAccess","referencedDeclaration":165,"src":"785:26:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"47524545545f5045524d495353494f4e","id":4447,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"843:18:35","typeDescriptions":{"typeIdentifier":"t_stringliteral_1bd70c5aa931fa900de716024b36e36cc236a1ce16d32948668c08aa04e680f2","typeString":"literal_string \"GREET_PERMISSION\""},"value":"GREET_PERMISSION"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1bd70c5aa931fa900de716024b36e36cc236a1ce16d32948668c08aa04e680f2","typeString":"literal_string \"GREET_PERMISSION\""}],"id":4446,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"833:9:35","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4448,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"833:29:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Operation_$169","typeString":"enum PermissionLib.Operation"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4437,"name":"PermissionLib","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":190,"src":"644:13:35","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_PermissionLib_$190_$","typeString":"type(library PermissionLib)"}},"id":4438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"658:21:35","memberName":"MultiTargetPermission","nodeType":"MemberAccess","referencedDeclaration":189,"src":"644:35:35","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_MultiTargetPermission_$189_storage_ptr_$","typeString":"type(struct PermissionLib.MultiTargetPermission storage pointer)"}},"id":4449,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["688:9:35","736:5:35","757:3:35","774:9:35","819:12:35"],"names":["operation","where","who","condition","permissionId"],"nodeType":"FunctionCall","src":"644:225:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_MultiTargetPermission_$189_memory_ptr","typeString":"struct PermissionLib.MultiTargetPermission memory"}},"src":"627:242:35","typeDescriptions":{"typeIdentifier":"t_struct$_MultiTargetPermission_$189_memory_ptr","typeString":"struct PermissionLib.MultiTargetPermission memory"}},"id":4451,"nodeType":"ExpressionStatement","src":"627:242:35"},{"expression":{"id":4456,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":4452,"name":"preparedSetupData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4406,"src":"876:17:35","typeDescriptions":{"typeIdentifier":"t_struct$_PreparedSetupData_$391_memory_ptr","typeString":"struct IPluginSetup.PreparedSetupData memory"}},"id":4454,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"894:11:35","memberName":"permissions","nodeType":"MemberAccess","referencedDeclaration":390,"src":"876:29:35","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr","typeString":"struct PermissionLib.MultiTargetPermission memory[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4455,"name":"permissions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4426,"src":"908:11:35","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr","typeString":"struct PermissionLib.MultiTargetPermission memory[] memory"}},"src":"876:43:35","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr","typeString":"struct PermissionLib.MultiTargetPermission memory[] memory"}},"id":4457,"nodeType":"ExpressionStatement","src":"876:43:35"}]},"functionSelector":"f10832f1","id":4459,"implemented":true,"kind":"function","modifiers":[],"name":"prepareInstallation","nameLocation":"313:19:35","nodeType":"FunctionDefinition","parameters":{"id":4401,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4398,"mutability":"mutable","name":"_dao","nameLocation":"346:4:35","nodeType":"VariableDeclaration","scope":4459,"src":"338:12:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4397,"name":"address","nodeType":"ElementaryTypeName","src":"338:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4400,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4459,"src":"356:12:35","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4399,"name":"bytes","nodeType":"ElementaryTypeName","src":"356:5:35","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"332:40:35"},"returnParameters":{"id":4407,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4403,"mutability":"mutable","name":"plugin","nameLocation":"399:6:35","nodeType":"VariableDeclaration","scope":4459,"src":"391:14:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4402,"name":"address","nodeType":"ElementaryTypeName","src":"391:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4406,"mutability":"mutable","name":"preparedSetupData","nameLocation":"432:17:35","nodeType":"VariableDeclaration","scope":4459,"src":"407:42:35","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_struct$_PreparedSetupData_$391_memory_ptr","typeString":"struct IPluginSetup.PreparedSetupData"},"typeName":{"id":4405,"nodeType":"UserDefinedTypeName","pathNode":{"id":4404,"name":"PreparedSetupData","nameLocations":["407:17:35"],"nodeType":"IdentifierPath","referencedDeclaration":391,"src":"407:17:35"},"referencedDeclaration":391,"src":"407:17:35","typeDescriptions":{"typeIdentifier":"t_struct$_PreparedSetupData_$391_storage_ptr","typeString":"struct IPluginSetup.PreparedSetupData"}},"visibility":"internal"}],"src":"390:60:35"},"scope":4507,"src":"304:620:35","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[441],"body":{"id":4499,"nodeType":"Block","src":"1098:328:35","statements":[{"expression":{"id":4478,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4471,"name":"permissions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4469,"src":"1104:11:35","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr","typeString":"struct PermissionLib.MultiTargetPermission memory[] memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"hexValue":"31","id":4476,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1160:1:35","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"id":4475,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1118:41:35","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr_$","typeString":"function (uint256) pure returns (struct PermissionLib.MultiTargetPermission memory[] memory)"},"typeName":{"baseType":{"id":4473,"nodeType":"UserDefinedTypeName","pathNode":{"id":4472,"name":"PermissionLib.MultiTargetPermission","nameLocations":["1122:13:35","1136:21:35"],"nodeType":"IdentifierPath","referencedDeclaration":189,"src":"1122:35:35"},"referencedDeclaration":189,"src":"1122:35:35","typeDescriptions":{"typeIdentifier":"t_struct$_MultiTargetPermission_$189_storage_ptr","typeString":"struct PermissionLib.MultiTargetPermission"}},"id":4474,"nodeType":"ArrayTypeName","src":"1122:37:35","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiTargetPermission_$189_storage_$dyn_storage_ptr","typeString":"struct PermissionLib.MultiTargetPermission[]"}}},"id":4477,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1118:44:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr","typeString":"struct PermissionLib.MultiTargetPermission memory[] memory"}},"src":"1104:58:35","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr","typeString":"struct PermissionLib.MultiTargetPermission memory[] memory"}},"id":4479,"nodeType":"ExpressionStatement","src":"1104:58:35"},{"expression":{"id":4497,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4480,"name":"permissions","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4469,"src":"1169:11:35","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr","typeString":"struct PermissionLib.MultiTargetPermission memory[] memory"}},"id":4482,"indexExpression":{"hexValue":"30","id":4481,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1181:1:35","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1169:14:35","typeDescriptions":{"typeIdentifier":"t_struct$_MultiTargetPermission_$189_memory_ptr","typeString":"struct PermissionLib.MultiTargetPermission memory"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"expression":{"expression":{"id":4485,"name":"PermissionLib","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":190,"src":"1241:13:35","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_PermissionLib_$190_$","typeString":"type(library PermissionLib)"}},"id":4486,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1255:9:35","memberName":"Operation","nodeType":"MemberAccess","referencedDeclaration":169,"src":"1241:23:35","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Operation_$169_$","typeString":"type(enum PermissionLib.Operation)"}},"id":4487,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1265:6:35","memberName":"Revoke","nodeType":"MemberAccess","referencedDeclaration":167,"src":"1241:30:35","typeDescriptions":{"typeIdentifier":"t_enum$_Operation_$169","typeString":"enum PermissionLib.Operation"}},{"expression":{"id":4488,"name":"_payload","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4464,"src":"1286:8:35","typeDescriptions":{"typeIdentifier":"t_struct$_SetupPayload_$399_calldata_ptr","typeString":"struct IPluginSetup.SetupPayload calldata"}},"id":4489,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1295:6:35","memberName":"plugin","nodeType":"MemberAccess","referencedDeclaration":393,"src":"1286:15:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4490,"name":"_dao","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4461,"src":"1314:4:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":4491,"name":"PermissionLib","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":190,"src":"1337:13:35","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_PermissionLib_$190_$","typeString":"type(library PermissionLib)"}},"id":4492,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1351:12:35","memberName":"NO_CONDITION","nodeType":"MemberAccess","referencedDeclaration":165,"src":"1337:26:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"47524545545f5045524d495353494f4e","id":4494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1395:18:35","typeDescriptions":{"typeIdentifier":"t_stringliteral_1bd70c5aa931fa900de716024b36e36cc236a1ce16d32948668c08aa04e680f2","typeString":"literal_string \"GREET_PERMISSION\""},"value":"GREET_PERMISSION"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1bd70c5aa931fa900de716024b36e36cc236a1ce16d32948668c08aa04e680f2","typeString":"literal_string \"GREET_PERMISSION\""}],"id":4493,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1385:9:35","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4495,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1385:29:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_Operation_$169","typeString":"enum PermissionLib.Operation"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4483,"name":"PermissionLib","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":190,"src":"1186:13:35","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_PermissionLib_$190_$","typeString":"type(library PermissionLib)"}},"id":4484,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1200:21:35","memberName":"MultiTargetPermission","nodeType":"MemberAccess","referencedDeclaration":189,"src":"1186:35:35","typeDescriptions":{"typeIdentifier":"t_type$_t_struct$_MultiTargetPermission_$189_storage_ptr_$","typeString":"type(struct PermissionLib.MultiTargetPermission storage pointer)"}},"id":4496,"isConstant":false,"isLValue":false,"isPure":false,"kind":"structConstructorCall","lValueRequested":false,"nameLocations":["1230:9:35","1279:5:35","1309:3:35","1326:9:35","1371:12:35"],"names":["operation","where","who","condition","permissionId"],"nodeType":"FunctionCall","src":"1186:235:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_MultiTargetPermission_$189_memory_ptr","typeString":"struct PermissionLib.MultiTargetPermission memory"}},"src":"1169:252:35","typeDescriptions":{"typeIdentifier":"t_struct$_MultiTargetPermission_$189_memory_ptr","typeString":"struct PermissionLib.MultiTargetPermission memory"}},"id":4498,"nodeType":"ExpressionStatement","src":"1169:252:35"}]},"functionSelector":"9cb0a124","id":4500,"implemented":true,"kind":"function","modifiers":[],"name":"prepareUninstallation","nameLocation":"937:21:35","nodeType":"FunctionDefinition","parameters":{"id":4465,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4461,"mutability":"mutable","name":"_dao","nameLocation":"972:4:35","nodeType":"VariableDeclaration","scope":4500,"src":"964:12:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4460,"name":"address","nodeType":"ElementaryTypeName","src":"964:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4464,"mutability":"mutable","name":"_payload","nameLocation":"1004:8:35","nodeType":"VariableDeclaration","scope":4500,"src":"982:30:35","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_SetupPayload_$399_calldata_ptr","typeString":"struct IPluginSetup.SetupPayload"},"typeName":{"id":4463,"nodeType":"UserDefinedTypeName","pathNode":{"id":4462,"name":"SetupPayload","nameLocations":["982:12:35"],"nodeType":"IdentifierPath","referencedDeclaration":399,"src":"982:12:35"},"referencedDeclaration":399,"src":"982:12:35","typeDescriptions":{"typeIdentifier":"t_struct$_SetupPayload_$399_storage_ptr","typeString":"struct IPluginSetup.SetupPayload"}},"visibility":"internal"}],"src":"958:58:35"},"returnParameters":{"id":4470,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4469,"mutability":"mutable","name":"permissions","nameLocation":"1085:11:35","nodeType":"VariableDeclaration","scope":4500,"src":"1040:56:35","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr","typeString":"struct PermissionLib.MultiTargetPermission[]"},"typeName":{"baseType":{"id":4467,"nodeType":"UserDefinedTypeName","pathNode":{"id":4466,"name":"PermissionLib.MultiTargetPermission","nameLocations":["1040:13:35","1054:21:35"],"nodeType":"IdentifierPath","referencedDeclaration":189,"src":"1040:35:35"},"referencedDeclaration":189,"src":"1040:35:35","typeDescriptions":{"typeIdentifier":"t_struct$_MultiTargetPermission_$189_storage_ptr","typeString":"struct PermissionLib.MultiTargetPermission"}},"id":4468,"nodeType":"ArrayTypeName","src":"1040:37:35","typeDescriptions":{"typeIdentifier":"t_array$_t_struct$_MultiTargetPermission_$189_storage_$dyn_storage_ptr","typeString":"struct PermissionLib.MultiTargetPermission[]"}},"visibility":"internal"}],"src":"1039:58:35"},"scope":4507,"src":"928:498:35","stateMutability":"pure","virtual":false,"visibility":"external"},{"baseFunctions":[447],"body":{"id":4505,"nodeType":"Block","src":"1488:2:35","statements":[]},"functionSelector":"5c60da1b","id":4506,"implemented":true,"kind":"function","modifiers":[],"name":"implementation","nameLocation":"1439:14:35","nodeType":"FunctionDefinition","parameters":{"id":4501,"nodeType":"ParameterList","parameters":[],"src":"1453:2:35"},"returnParameters":{"id":4504,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4503,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4506,"src":"1479:7:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4502,"name":"address","nodeType":"ElementaryTypeName","src":"1479:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1478:9:35"},"scope":4507,"src":"1430:60:35","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4508,"src":"260:1232:35","usedErrors":[]}],"src":"46:1446:35"},"id":35}},"contracts":{"@aragon/osx/core/dao/IDAO.sol":{"IDAO":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"},{"indexed":false,"internalType":"string","name":"_reference","type":"string"}],"name":"Deposited","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"actor","type":"address"},{"indexed":false,"internalType":"bytes32","name":"callId","type":"bytes32"},{"components":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"indexed":false,"internalType":"struct IDAO.Action[]","name":"actions","type":"tuple[]"},{"indexed":false,"internalType":"uint256","name":"allowFailureMap","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"failureMap","type":"uint256"},{"indexed":false,"internalType":"bytes[]","name":"execResults","type":"bytes[]"}],"name":"Executed","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes","name":"metadata","type":"bytes"}],"name":"MetadataSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"NativeTokenDeposited","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"signatureValidator","type":"address"}],"name":"SignatureValidatorSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes4","name":"interfaceId","type":"bytes4"},{"indexed":false,"internalType":"bytes4","name":"callbackSelector","type":"bytes4"},{"indexed":false,"internalType":"bytes4","name":"magicNumber","type":"bytes4"}],"name":"StandardCallbackRegistered","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"forwarder","type":"address"}],"name":"TrustedForwarderSet","type":"event"},{"inputs":[{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_amount","type":"uint256"},{"internalType":"string","name":"_reference","type":"string"}],"name":"deposit","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_callId","type":"bytes32"},{"components":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct IDAO.Action[]","name":"_actions","type":"tuple[]"},{"internalType":"uint256","name":"_allowFailureMap","type":"uint256"}],"name":"execute","outputs":[{"internalType":"bytes[]","name":"","type":"bytes[]"},{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getTrustedForwarder","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_where","type":"address"},{"internalType":"address","name":"_who","type":"address"},{"internalType":"bytes32","name":"_permissionId","type":"bytes32"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"hasPermission","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_hash","type":"bytes32"},{"internalType":"bytes","name":"_signature","type":"bytes"}],"name":"isValidSignature","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"_interfaceId","type":"bytes4"},{"internalType":"bytes4","name":"_callbackSelector","type":"bytes4"},{"internalType":"bytes4","name":"_magicNumber","type":"bytes4"}],"name":"registerStandardCallback","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"_metadata","type":"bytes"}],"name":"setMetadata","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_signatureValidator","type":"address"}],"name":"setSignatureValidator","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_trustedForwarder","type":"address"}],"name":"setTrustedForwarder","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Aragon Association - 2022-2023","events":{"Deposited(address,address,uint256,string)":{"params":{"_reference":"The reference describing the deposit reason.","amount":"The amount of tokens deposited.","sender":"The address of the sender.","token":"The address of the deposited token."}},"Executed(address,bytes32,(address,uint256,bytes)[],uint256,uint256,bytes[])":{"details":"The value of `callId` is defined by the component/contract calling the execute function. A `Plugin` implementation can use it, for example, as a nonce.","params":{"actions":"The array of actions executed.","actor":"The address of the caller.","allowFailureMap":"The allow failure map encoding which actions are allowed to fail.","callId":"The ID of the call.","execResults":"The array with the results of the executed actions.","failureMap":"The failure map encoding which actions have failed."}},"MetadataSet(bytes)":{"params":{"metadata":"The IPFS hash of the new metadata object."}},"NativeTokenDeposited(address,uint256)":{"details":"This event is intended to be emitted in the `receive` function and is therefore bound by the gas limitations for `send`/`transfer` calls introduced by [ERC-2929](https://eips.ethereum.org/EIPS/eip-2929).","params":{"amount":"The amount of native tokens deposited.","sender":"The address of the sender."}},"SignatureValidatorSet(address)":{"params":{"signatureValidator":"The address of the signature validator."}},"StandardCallbackRegistered(bytes4,bytes4,bytes4)":{"params":{"callbackSelector":"The selector of the callback function.","interfaceId":"The ID of the interface.","magicNumber":"The magic number to be registered for the callback function selector."}},"TrustedForwarderSet(address)":{"params":{"forwarder":"the new forwarder address."}}},"kind":"dev","methods":{"deposit(address,uint256,string)":{"params":{"_amount":"The amount of tokens to deposit.","_reference":"The reference describing the deposit reason.","_token":"The address of the token or address(0) in case of the native token."}},"execute(bytes32,(address,uint256,bytes)[],uint256)":{"params":{"_actions":"The array of actions.","_allowFailureMap":"A bitmap allowing execution to succeed, even if individual actions might revert. If the bit at index `i` is 1, the execution succeeds even if the `i`th action reverts. A failure map value of 0 requires every action to not revert.","_callId":"The ID of the call. The definition of the value of `callId` is up to the calling contract and can be used, e.g., as a nonce."},"returns":{"_0":"The array of results obtained from the executed actions in `bytes`.","_1":"The resulting failure map containing the actions have actually failed."}},"getTrustedForwarder()":{"returns":{"_0":"The trusted forwarder address."}},"hasPermission(address,address,bytes32,bytes)":{"params":{"_data":"The optional data passed to the `PermissionCondition` registered.","_permissionId":"The permission identifier.","_where":"The address of the contract.","_who":"The address of a EOA or contract to give the permissions."},"returns":{"_0":"Returns true if the address has permission, false if not."}},"isValidSignature(bytes32,bytes)":{"params":{"_hash":"The hash of the data to be signed.","_signature":"The signature byte array associated with `_hash`."},"returns":{"_0":"Returns the `bytes4` magic value `0x1626ba7e` if the signature is valid."}},"registerStandardCallback(bytes4,bytes4,bytes4)":{"params":{"_callbackSelector":"The selector of the callback function.","_interfaceId":"The ID of the interface.","_magicNumber":"The magic number to be registered for the function signature."}},"setMetadata(bytes)":{"params":{"_metadata":"The IPFS hash of the new metadata object."}},"setSignatureValidator(address)":{"params":{"_signatureValidator":"The address of the signature validator."}},"setTrustedForwarder(address)":{"params":{"_trustedForwarder":"The trusted forwarder address."}}},"title":"IDAO","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"deposit(address,uint256,string)":"bfe07da6","execute(bytes32,(address,uint256,bytes)[],uint256)":"c71bf324","getTrustedForwarder()":"ce1b815f","hasPermission(address,address,bytes32,bytes)":"fdef9106","isValidSignature(bytes32,bytes)":"1626ba7e","registerStandardCallback(bytes4,bytes4,bytes4)":"c4a50145","setMetadata(bytes)":"ee57e36f","setSignatureValidator(address)":"3e2ab0d9","setTrustedForwarder(address)":"da742228"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"callId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"indexed\":false,\"internalType\":\"struct IDAO.Action[]\",\"name\":\"actions\",\"type\":\"tuple[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allowFailureMap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"failureMap\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes[]\",\"name\":\"execResults\",\"type\":\"bytes[]\"}],\"name\":\"Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"name\":\"MetadataSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NativeTokenDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"signatureValidator\",\"type\":\"address\"}],\"name\":\"SignatureValidatorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"callbackSelector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"magicNumber\",\"type\":\"bytes4\"}],\"name\":\"StandardCallbackRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"TrustedForwarderSet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_reference\",\"type\":\"string\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_callId\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IDAO.Action[]\",\"name\":\"_actions\",\"type\":\"tuple[]\"},{\"internalType\":\"uint256\",\"name\":\"_allowFailureMap\",\"type\":\"uint256\"}],\"name\":\"execute\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"\",\"type\":\"bytes[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_where\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_who\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_permissionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"hasPermission\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"isValidSignature\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"},{\"internalType\":\"bytes4\",\"name\":\"_callbackSelector\",\"type\":\"bytes4\"},{\"internalType\":\"bytes4\",\"name\":\"_magicNumber\",\"type\":\"bytes4\"}],\"name\":\"registerStandardCallback\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_metadata\",\"type\":\"bytes\"}],\"name\":\"setMetadata\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signatureValidator\",\"type\":\"address\"}],\"name\":\"setSignatureValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trustedForwarder\",\"type\":\"address\"}],\"name\":\"setTrustedForwarder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Aragon Association - 2022-2023\",\"events\":{\"Deposited(address,address,uint256,string)\":{\"params\":{\"_reference\":\"The reference describing the deposit reason.\",\"amount\":\"The amount of tokens deposited.\",\"sender\":\"The address of the sender.\",\"token\":\"The address of the deposited token.\"}},\"Executed(address,bytes32,(address,uint256,bytes)[],uint256,uint256,bytes[])\":{\"details\":\"The value of `callId` is defined by the component/contract calling the execute function. A `Plugin` implementation can use it, for example, as a nonce.\",\"params\":{\"actions\":\"The array of actions executed.\",\"actor\":\"The address of the caller.\",\"allowFailureMap\":\"The allow failure map encoding which actions are allowed to fail.\",\"callId\":\"The ID of the call.\",\"execResults\":\"The array with the results of the executed actions.\",\"failureMap\":\"The failure map encoding which actions have failed.\"}},\"MetadataSet(bytes)\":{\"params\":{\"metadata\":\"The IPFS hash of the new metadata object.\"}},\"NativeTokenDeposited(address,uint256)\":{\"details\":\"This event is intended to be emitted in the `receive` function and is therefore bound by the gas limitations for `send`/`transfer` calls introduced by [ERC-2929](https://eips.ethereum.org/EIPS/eip-2929).\",\"params\":{\"amount\":\"The amount of native tokens deposited.\",\"sender\":\"The address of the sender.\"}},\"SignatureValidatorSet(address)\":{\"params\":{\"signatureValidator\":\"The address of the signature validator.\"}},\"StandardCallbackRegistered(bytes4,bytes4,bytes4)\":{\"params\":{\"callbackSelector\":\"The selector of the callback function.\",\"interfaceId\":\"The ID of the interface.\",\"magicNumber\":\"The magic number to be registered for the callback function selector.\"}},\"TrustedForwarderSet(address)\":{\"params\":{\"forwarder\":\"the new forwarder address.\"}}},\"kind\":\"dev\",\"methods\":{\"deposit(address,uint256,string)\":{\"params\":{\"_amount\":\"The amount of tokens to deposit.\",\"_reference\":\"The reference describing the deposit reason.\",\"_token\":\"The address of the token or address(0) in case of the native token.\"}},\"execute(bytes32,(address,uint256,bytes)[],uint256)\":{\"params\":{\"_actions\":\"The array of actions.\",\"_allowFailureMap\":\"A bitmap allowing execution to succeed, even if individual actions might revert. If the bit at index `i` is 1, the execution succeeds even if the `i`th action reverts. A failure map value of 0 requires every action to not revert.\",\"_callId\":\"The ID of the call. The definition of the value of `callId` is up to the calling contract and can be used, e.g., as a nonce.\"},\"returns\":{\"_0\":\"The array of results obtained from the executed actions in `bytes`.\",\"_1\":\"The resulting failure map containing the actions have actually failed.\"}},\"getTrustedForwarder()\":{\"returns\":{\"_0\":\"The trusted forwarder address.\"}},\"hasPermission(address,address,bytes32,bytes)\":{\"params\":{\"_data\":\"The optional data passed to the `PermissionCondition` registered.\",\"_permissionId\":\"The permission identifier.\",\"_where\":\"The address of the contract.\",\"_who\":\"The address of a EOA or contract to give the permissions.\"},\"returns\":{\"_0\":\"Returns true if the address has permission, false if not.\"}},\"isValidSignature(bytes32,bytes)\":{\"params\":{\"_hash\":\"The hash of the data to be signed.\",\"_signature\":\"The signature byte array associated with `_hash`.\"},\"returns\":{\"_0\":\"Returns the `bytes4` magic value `0x1626ba7e` if the signature is valid.\"}},\"registerStandardCallback(bytes4,bytes4,bytes4)\":{\"params\":{\"_callbackSelector\":\"The selector of the callback function.\",\"_interfaceId\":\"The ID of the interface.\",\"_magicNumber\":\"The magic number to be registered for the function signature.\"}},\"setMetadata(bytes)\":{\"params\":{\"_metadata\":\"The IPFS hash of the new metadata object.\"}},\"setSignatureValidator(address)\":{\"params\":{\"_signatureValidator\":\"The address of the signature validator.\"}},\"setTrustedForwarder(address)\":{\"params\":{\"_trustedForwarder\":\"The trusted forwarder address.\"}}},\"title\":\"IDAO\",\"version\":1},\"userdoc\":{\"events\":{\"Deposited(address,address,uint256,string)\":{\"notice\":\"Emitted when a token deposit has been made to the DAO.\"},\"Executed(address,bytes32,(address,uint256,bytes)[],uint256,uint256,bytes[])\":{\"notice\":\"Emitted when a proposal is executed.\"},\"MetadataSet(bytes)\":{\"notice\":\"Emitted when the DAO metadata is updated.\"},\"NativeTokenDeposited(address,uint256)\":{\"notice\":\"Emitted when a native token deposit has been made to the DAO.\"},\"SignatureValidatorSet(address)\":{\"notice\":\"Emitted when the signature validator address is updated.\"},\"StandardCallbackRegistered(bytes4,bytes4,bytes4)\":{\"notice\":\"Emitted when a standard callback is registered.\"},\"TrustedForwarderSet(address)\":{\"notice\":\"Emitted when a new TrustedForwarder is set on the DAO.\"}},\"kind\":\"user\",\"methods\":{\"deposit(address,uint256,string)\":{\"notice\":\"Deposits (native) tokens to the DAO contract with a reference string.\"},\"execute(bytes32,(address,uint256,bytes)[],uint256)\":{\"notice\":\"Executes a list of actions. If a zero allow-failure map is provided, a failing action reverts the entire execution. If a non-zero allow-failure map is provided, allowed actions can fail without the entire call being reverted.\"},\"getTrustedForwarder()\":{\"notice\":\"Getter for the trusted forwarder verifying the meta transaction.\"},\"hasPermission(address,address,bytes32,bytes)\":{\"notice\":\"Checks if an address has permission on a contract via a permission identifier and considers if `ANY_ADDRESS` was used in the granting process.\"},\"isValidSignature(bytes32,bytes)\":{\"notice\":\"Checks whether a signature is valid for the provided hash by forwarding the call to the set [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract.\"},\"registerStandardCallback(bytes4,bytes4,bytes4)\":{\"notice\":\"Registers an ERC standard having a callback by registering its [ERC-165](https://eips.ethereum.org/EIPS/eip-165) interface ID and callback function signature.\"},\"setMetadata(bytes)\":{\"notice\":\"Updates the DAO metadata (e.g., an IPFS hash).\"},\"setSignatureValidator(address)\":{\"notice\":\"Setter for the [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract.\"},\"setTrustedForwarder(address)\":{\"notice\":\"Setter for the trusted forwarder verifying the meta transaction.\"}},\"notice\":\"The interface required for DAOs within the Aragon App DAO framework.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@aragon/osx/core/dao/IDAO.sol\":\"IDAO\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@aragon/osx/core/dao/IDAO.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\n/// @title IDAO\\n/// @author Aragon Association - 2022-2023\\n/// @notice The interface required for DAOs within the Aragon App DAO framework.\\ninterface IDAO {\\n    /// @notice The action struct to be consumed by the DAO's `execute` function resulting in an external call.\\n    /// @param to The address to call.\\n    /// @param value The native token value to be sent with the call.\\n    /// @param data The bytes-encoded function selector and calldata for the call.\\n    struct Action {\\n        address to;\\n        uint256 value;\\n        bytes data;\\n    }\\n\\n    /// @notice Checks if an address has permission on a contract via a permission identifier and considers if `ANY_ADDRESS` was used in the granting process.\\n    /// @param _where The address of the contract.\\n    /// @param _who The address of a EOA or contract to give the permissions.\\n    /// @param _permissionId The permission identifier.\\n    /// @param _data The optional data passed to the `PermissionCondition` registered.\\n    /// @return Returns true if the address has permission, false if not.\\n    function hasPermission(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId,\\n        bytes memory _data\\n    ) external view returns (bool);\\n\\n    /// @notice Updates the DAO metadata (e.g., an IPFS hash).\\n    /// @param _metadata The IPFS hash of the new metadata object.\\n    function setMetadata(bytes calldata _metadata) external;\\n\\n    /// @notice Emitted when the DAO metadata is updated.\\n    /// @param metadata The IPFS hash of the new metadata object.\\n    event MetadataSet(bytes metadata);\\n\\n    /// @notice Executes a list of actions. If a zero allow-failure map is provided, a failing action reverts the entire execution. If a non-zero allow-failure map is provided, allowed actions can fail without the entire call being reverted.\\n    /// @param _callId The ID of the call. The definition of the value of `callId` is up to the calling contract and can be used, e.g., as a nonce.\\n    /// @param _actions The array of actions.\\n    /// @param _allowFailureMap A bitmap allowing execution to succeed, even if individual actions might revert. If the bit at index `i` is 1, the execution succeeds even if the `i`th action reverts. A failure map value of 0 requires every action to not revert.\\n    /// @return The array of results obtained from the executed actions in `bytes`.\\n    /// @return The resulting failure map containing the actions have actually failed.\\n    function execute(\\n        bytes32 _callId,\\n        Action[] memory _actions,\\n        uint256 _allowFailureMap\\n    ) external returns (bytes[] memory, uint256);\\n\\n    /// @notice Emitted when a proposal is executed.\\n    /// @param actor The address of the caller.\\n    /// @param callId The ID of the call.\\n    /// @param actions The array of actions executed.\\n    /// @param allowFailureMap The allow failure map encoding which actions are allowed to fail.\\n    /// @param failureMap The failure map encoding which actions have failed.\\n    /// @param execResults The array with the results of the executed actions.\\n    /// @dev The value of `callId` is defined by the component/contract calling the execute function. A `Plugin` implementation can use it, for example, as a nonce.\\n    event Executed(\\n        address indexed actor,\\n        bytes32 callId,\\n        Action[] actions,\\n        uint256 allowFailureMap,\\n        uint256 failureMap,\\n        bytes[] execResults\\n    );\\n\\n    /// @notice Emitted when a standard callback is registered.\\n    /// @param interfaceId The ID of the interface.\\n    /// @param callbackSelector The selector of the callback function.\\n    /// @param magicNumber The magic number to be registered for the callback function selector.\\n    event StandardCallbackRegistered(\\n        bytes4 interfaceId,\\n        bytes4 callbackSelector,\\n        bytes4 magicNumber\\n    );\\n\\n    /// @notice Deposits (native) tokens to the DAO contract with a reference string.\\n    /// @param _token The address of the token or address(0) in case of the native token.\\n    /// @param _amount The amount of tokens to deposit.\\n    /// @param _reference The reference describing the deposit reason.\\n    function deposit(address _token, uint256 _amount, string calldata _reference) external payable;\\n\\n    /// @notice Emitted when a token deposit has been made to the DAO.\\n    /// @param sender The address of the sender.\\n    /// @param token The address of the deposited token.\\n    /// @param amount The amount of tokens deposited.\\n    /// @param _reference The reference describing the deposit reason.\\n    event Deposited(\\n        address indexed sender,\\n        address indexed token,\\n        uint256 amount,\\n        string _reference\\n    );\\n\\n    /// @notice Emitted when a native token deposit has been made to the DAO.\\n    /// @dev This event is intended to be emitted in the `receive` function and is therefore bound by the gas limitations for `send`/`transfer` calls introduced by [ERC-2929](https://eips.ethereum.org/EIPS/eip-2929).\\n    /// @param sender The address of the sender.\\n    /// @param amount The amount of native tokens deposited.\\n    event NativeTokenDeposited(address sender, uint256 amount);\\n\\n    /// @notice Setter for the trusted forwarder verifying the meta transaction.\\n    /// @param _trustedForwarder The trusted forwarder address.\\n    function setTrustedForwarder(address _trustedForwarder) external;\\n\\n    /// @notice Getter for the trusted forwarder verifying the meta transaction.\\n    /// @return The trusted forwarder address.\\n    function getTrustedForwarder() external view returns (address);\\n\\n    /// @notice Emitted when a new TrustedForwarder is set on the DAO.\\n    /// @param forwarder the new forwarder address.\\n    event TrustedForwarderSet(address forwarder);\\n\\n    /// @notice Setter for the [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract.\\n    /// @param _signatureValidator The address of the signature validator.\\n    function setSignatureValidator(address _signatureValidator) external;\\n\\n    /// @notice Emitted when the signature validator address is updated.\\n    /// @param signatureValidator The address of the signature validator.\\n    event SignatureValidatorSet(address signatureValidator);\\n\\n    /// @notice Checks whether a signature is valid for the provided hash by forwarding the call to the set [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract.\\n    /// @param _hash The hash of the data to be signed.\\n    /// @param _signature The signature byte array associated with `_hash`.\\n    /// @return Returns the `bytes4` magic value `0x1626ba7e` if the signature is valid.\\n    function isValidSignature(bytes32 _hash, bytes memory _signature) external returns (bytes4);\\n\\n    /// @notice Registers an ERC standard having a callback by registering its [ERC-165](https://eips.ethereum.org/EIPS/eip-165) interface ID and callback function signature.\\n    /// @param _interfaceId The ID of the interface.\\n    /// @param _callbackSelector The selector of the callback function.\\n    /// @param _magicNumber The magic number to be registered for the function signature.\\n    function registerStandardCallback(\\n        bytes4 _interfaceId,\\n        bytes4 _callbackSelector,\\n        bytes4 _magicNumber\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3876d62c73312234c1e2ab4e75cdac2783a6688c3445a67a15b767cd98e01f80\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"Deposited(address,address,uint256,string)":{"notice":"Emitted when a token deposit has been made to the DAO."},"Executed(address,bytes32,(address,uint256,bytes)[],uint256,uint256,bytes[])":{"notice":"Emitted when a proposal is executed."},"MetadataSet(bytes)":{"notice":"Emitted when the DAO metadata is updated."},"NativeTokenDeposited(address,uint256)":{"notice":"Emitted when a native token deposit has been made to the DAO."},"SignatureValidatorSet(address)":{"notice":"Emitted when the signature validator address is updated."},"StandardCallbackRegistered(bytes4,bytes4,bytes4)":{"notice":"Emitted when a standard callback is registered."},"TrustedForwarderSet(address)":{"notice":"Emitted when a new TrustedForwarder is set on the DAO."}},"kind":"user","methods":{"deposit(address,uint256,string)":{"notice":"Deposits (native) tokens to the DAO contract with a reference string."},"execute(bytes32,(address,uint256,bytes)[],uint256)":{"notice":"Executes a list of actions. If a zero allow-failure map is provided, a failing action reverts the entire execution. If a non-zero allow-failure map is provided, allowed actions can fail without the entire call being reverted."},"getTrustedForwarder()":{"notice":"Getter for the trusted forwarder verifying the meta transaction."},"hasPermission(address,address,bytes32,bytes)":{"notice":"Checks if an address has permission on a contract via a permission identifier and considers if `ANY_ADDRESS` was used in the granting process."},"isValidSignature(bytes32,bytes)":{"notice":"Checks whether a signature is valid for the provided hash by forwarding the call to the set [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract."},"registerStandardCallback(bytes4,bytes4,bytes4)":{"notice":"Registers an ERC standard having a callback by registering its [ERC-165](https://eips.ethereum.org/EIPS/eip-165) interface ID and callback function signature."},"setMetadata(bytes)":{"notice":"Updates the DAO metadata (e.g., an IPFS hash)."},"setSignatureValidator(address)":{"notice":"Setter for the [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract."},"setTrustedForwarder(address)":{"notice":"Setter for the trusted forwarder verifying the meta transaction."}},"notice":"The interface required for DAOs within the Aragon App DAO framework.","version":1}}},"@aragon/osx/core/permission/PermissionLib.sol":{"PermissionLib":{"abi":[{"inputs":[],"name":"NO_CONDITION","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"author":"Aragon Association - 2021-2023","kind":"dev","methods":{},"title":"PermissionLib","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60e3610052600b82828239805160001a607314610045577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c80636dd02a5b146038575b600080fd5b603e6052565b604051604991906094565b60405180910390f35b600081565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006080826057565b9050919050565b608e816077565b82525050565b600060208201905060a760008301846087565b9291505056fea264697066735822122082c3141d6f9c29c1557893823728d2500de6b1ab106aa33e2ed47759baba5d9b64736f6c63430008130033","opcodes":"PUSH1 0xE3 PUSH2 0x52 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH2 0x45 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH1 0x33 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6DD02A5B EQ PUSH1 0x38 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3E PUSH1 0x52 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x49 SWAP2 SWAP1 PUSH1 0x94 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 PUSH1 0x57 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x8E DUP2 PUSH1 0x77 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0xA7 PUSH1 0x0 DUP4 ADD DUP5 PUSH1 0x87 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP3 0xC3 EQ SAR PUSH16 0x9C29C1557893823728D2500DE6B1AB10 PUSH11 0xA33E2ED47759BABA5D9B64 PUSH20 0x6F6C634300081300330000000000000000000000 ","sourceMap":"208:1810:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@NO_CONDITION_165":{"entryPoint":82,"id":165,"parameterSlots":0,"returnSlots":0},"abi_encode_t_address_to_t_address_fromStack_library":{"entryPoint":135,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_address__to_t_address__fromStack_library_reversed":{"entryPoint":148,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":119,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":87,"id":null,"parameterSlots":1,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:614:36","statements":[{"body":{"nodeType":"YulBlock","src":"52:81:36","statements":[{"nodeType":"YulAssignment","src":"62:65:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"77:5:36"},{"kind":"number","nodeType":"YulLiteral","src":"84:42:36","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"73:3:36"},"nodeType":"YulFunctionCall","src":"73:54:36"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"62:7:36"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"34:5:36","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"44:7:36","type":""}],"src":"7:126:36"},{"body":{"nodeType":"YulBlock","src":"184:51:36","statements":[{"nodeType":"YulAssignment","src":"194:35:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"223:5:36"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"205:17:36"},"nodeType":"YulFunctionCall","src":"205:24:36"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"194:7:36"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"166:5:36","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"176:7:36","type":""}],"src":"139:96:36"},{"body":{"nodeType":"YulBlock","src":"314:53:36","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"331:3:36"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"354:5:36"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"336:17:36"},"nodeType":"YulFunctionCall","src":"336:24:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"324:6:36"},"nodeType":"YulFunctionCall","src":"324:37:36"},"nodeType":"YulExpressionStatement","src":"324:37:36"}]},"name":"abi_encode_t_address_to_t_address_fromStack_library","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"302:5:36","type":""},{"name":"pos","nodeType":"YulTypedName","src":"309:3:36","type":""}],"src":"241:126:36"},{"body":{"nodeType":"YulBlock","src":"479:132:36","statements":[{"nodeType":"YulAssignment","src":"489:26:36","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"501:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"512:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"497:3:36"},"nodeType":"YulFunctionCall","src":"497:18:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"489:4:36"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"577:6:36"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"590:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"601:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"586:3:36"},"nodeType":"YulFunctionCall","src":"586:17:36"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack_library","nodeType":"YulIdentifier","src":"525:51:36"},"nodeType":"YulFunctionCall","src":"525:79:36"},"nodeType":"YulExpressionStatement","src":"525:79:36"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_library_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"451:9:36","type":""},{"name":"value0","nodeType":"YulTypedName","src":"463:6:36","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"474:4:36","type":""}],"src":"373:238:36"}]},"contents":"{\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack_library(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_library_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack_library(value0,  add(headStart, 0))\n\n    }\n\n}\n","id":36,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"730000000000000000000000000000000000000000301460806040526004361060335760003560e01c80636dd02a5b146038575b600080fd5b603e6052565b604051604991906094565b60405180910390f35b600081565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006080826057565b9050919050565b608e816077565b82525050565b600060208201905060a760008301846087565b9291505056fea264697066735822122082c3141d6f9c29c1557893823728d2500de6b1ab106aa33e2ed47759baba5d9b64736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH1 0x33 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6DD02A5B EQ PUSH1 0x38 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3E PUSH1 0x52 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x49 SWAP2 SWAP1 PUSH1 0x94 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 PUSH1 0x57 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x8E DUP2 PUSH1 0x77 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH1 0xA7 PUSH1 0x0 DUP4 ADD DUP5 PUSH1 0x87 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP3 0xC3 EQ SAR PUSH16 0x9C29C1557893823728D2500DE6B1AB10 PUSH11 0xA33E2ED47759BABA5D9B64 PUSH20 0x6F6C634300081300330000000000000000000000 ","sourceMap":"208:1810:1:-:0;;;;;;;;;;;;;;;;;;;;;;;;320:49;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;367:1;320:49;:::o;7:126:36:-;44:7;84:42;77:5;73:54;62:65;;7:126;;;:::o;139:96::-;176:7;205:24;223:5;205:24;:::i;:::-;194:35;;139:96;;;:::o;241:126::-;336:24;354:5;336:24;:::i;:::-;331:3;324:37;241:126;;:::o;373:238::-;474:4;512:2;501:9;497:18;489:26;;525:79;601:1;590:9;586:17;577:6;525:79;:::i;:::-;373:238;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"45400","executionCost":"124","totalCost":"45524"},"external":{"NO_CONDITION()":"340"}},"methodIdentifiers":{"NO_CONDITION()":"6dd02a5b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"NO_CONDITION\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Aragon Association - 2021-2023\",\"kind\":\"dev\",\"methods\":{},\"title\":\"PermissionLib\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"NO_CONDITION()\":{\"notice\":\"A constant expressing that no condition is applied to a permission.\"}},\"notice\":\"A library containing objects for permission processing.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@aragon/osx/core/permission/PermissionLib.sol\":\"PermissionLib\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@aragon/osx/core/permission/PermissionLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\n/// @title PermissionLib\\n/// @author Aragon Association - 2021-2023\\n/// @notice A library containing objects for permission processing.\\nlibrary PermissionLib {\\n    /// @notice A constant expressing that no condition is applied to a permission.\\n    address public constant NO_CONDITION = address(0);\\n\\n    /// @notice The types of permission operations available in the `PermissionManager`.\\n    /// @param Grant The grant operation setting a permission without a condition.\\n    /// @param Revoke The revoke operation removing a permission (that was granted with or without a condition).\\n    /// @param GrantWithCondition The grant operation setting a permission with a condition.\\n    enum Operation {\\n        Grant,\\n        Revoke,\\n        GrantWithCondition\\n    }\\n\\n    /// @notice A struct containing the information for a permission to be applied on a single target contract without a condition.\\n    /// @param operation The permission operation type.\\n    /// @param who The address (EOA or contract) receiving the permission.\\n    /// @param permissionId The permission identifier.\\n    struct SingleTargetPermission {\\n        Operation operation;\\n        address who;\\n        bytes32 permissionId;\\n    }\\n\\n    /// @notice A struct containing the information for a permission to be applied on multiple target contracts, optionally, with a condition.\\n    /// @param operation The permission operation type.\\n    /// @param where The address of the target contract for which `who` receives permission.\\n    /// @param who The address (EOA or contract) receiving the permission.\\n    /// @param condition The `PermissionCondition` that will be asked for authorization on calls connected to the specified permission identifier.\\n    /// @param permissionId The permission identifier.\\n    struct MultiTargetPermission {\\n        Operation operation;\\n        address where;\\n        address who;\\n        address condition;\\n        bytes32 permissionId;\\n    }\\n}\\n\",\"keccak256\":\"0x9b27fa8990e0f1623055187b8ade9363a6c8a1f15aab900e3a6e5cb312545c02\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"NO_CONDITION()":{"notice":"A constant expressing that no condition is applied to a permission."}},"notice":"A library containing objects for permission processing.","version":1}}},"@aragon/osx/core/plugin/IPlugin.sol":{"IPlugin":{"abi":[{"inputs":[],"name":"pluginType","outputs":[{"internalType":"enum IPlugin.PluginType","name":"","type":"uint8"}],"stateMutability":"view","type":"function"}],"devdoc":{"author":"Aragon Association - 2022-2023","kind":"dev","methods":{},"title":"IPlugin","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"pluginType()":"41de6830"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"pluginType\",\"outputs\":[{\"internalType\":\"enum IPlugin.PluginType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Aragon Association - 2022-2023\",\"kind\":\"dev\",\"methods\":{},\"title\":\"IPlugin\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"pluginType()\":{\"notice\":\"Returns the plugin's type\"}},\"notice\":\"An interface defining the traits of a plugin.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@aragon/osx/core/plugin/IPlugin.sol\":\"IPlugin\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@aragon/osx/core/plugin/IPlugin.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\n/// @title IPlugin\\n/// @author Aragon Association - 2022-2023\\n/// @notice An interface defining the traits of a plugin.\\ninterface IPlugin {\\n    enum PluginType {\\n        UUPS,\\n        Cloneable,\\n        Constructable\\n    }\\n\\n    /// @notice Returns the plugin's type\\n    function pluginType() external view returns (PluginType);\\n}\\n\",\"keccak256\":\"0xcdb72c04ca35478e4d786fbbe12cf0e6de7d76aa0510028432312697f42c7355\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"pluginType()":{"notice":"Returns the plugin's type"}},"notice":"An interface defining the traits of a plugin.","version":1}}},"@aragon/osx/core/plugin/Plugin.sol":{"Plugin":{"abi":[{"inputs":[],"name":"dao","outputs":[{"internalType":"contract IDAO","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pluginType","outputs":[{"internalType":"enum IPlugin.PluginType","name":"","type":"uint8"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes4","name":"_interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"author":"Aragon Association - 2022-2023","kind":"dev","methods":{"constructor":{"params":{"_dao":"The DAO contract."}},"dao()":{"returns":{"_0":"The DAO contract."}},"supportsInterface(bytes4)":{"params":{"_interfaceId":"The ID of the interface."},"returns":{"_0":"Returns `true` if the interface is supported."}}},"title":"Plugin","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"dao()":"4162169f","pluginType()":"41de6830","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"contract IDAO\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pluginType\",\"outputs\":[{\"internalType\":\"enum IPlugin.PluginType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Aragon Association - 2022-2023\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_dao\":\"The DAO contract.\"}},\"dao()\":{\"returns\":{\"_0\":\"The DAO contract.\"}},\"supportsInterface(bytes4)\":{\"params\":{\"_interfaceId\":\"The ID of the interface.\"},\"returns\":{\"_0\":\"Returns `true` if the interface is supported.\"}}},\"title\":\"Plugin\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructs the plugin by storing the associated DAO.\"},\"dao()\":{\"notice\":\"Returns the DAO contract.\"},\"pluginType()\":{\"notice\":\"Returns the plugin's type\"},\"supportsInterface(bytes4)\":{\"notice\":\"Checks if this or the parent contract supports an interface by its ID.\"}},\"notice\":\"An abstract, non-upgradeable contract to inherit from when creating a plugin being deployed via the `new` keyword.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@aragon/osx/core/plugin/Plugin.sol\":\"Plugin\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@aragon/osx/core/dao/IDAO.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\n/// @title IDAO\\n/// @author Aragon Association - 2022-2023\\n/// @notice The interface required for DAOs within the Aragon App DAO framework.\\ninterface IDAO {\\n    /// @notice The action struct to be consumed by the DAO's `execute` function resulting in an external call.\\n    /// @param to The address to call.\\n    /// @param value The native token value to be sent with the call.\\n    /// @param data The bytes-encoded function selector and calldata for the call.\\n    struct Action {\\n        address to;\\n        uint256 value;\\n        bytes data;\\n    }\\n\\n    /// @notice Checks if an address has permission on a contract via a permission identifier and considers if `ANY_ADDRESS` was used in the granting process.\\n    /// @param _where The address of the contract.\\n    /// @param _who The address of a EOA or contract to give the permissions.\\n    /// @param _permissionId The permission identifier.\\n    /// @param _data The optional data passed to the `PermissionCondition` registered.\\n    /// @return Returns true if the address has permission, false if not.\\n    function hasPermission(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId,\\n        bytes memory _data\\n    ) external view returns (bool);\\n\\n    /// @notice Updates the DAO metadata (e.g., an IPFS hash).\\n    /// @param _metadata The IPFS hash of the new metadata object.\\n    function setMetadata(bytes calldata _metadata) external;\\n\\n    /// @notice Emitted when the DAO metadata is updated.\\n    /// @param metadata The IPFS hash of the new metadata object.\\n    event MetadataSet(bytes metadata);\\n\\n    /// @notice Executes a list of actions. If a zero allow-failure map is provided, a failing action reverts the entire execution. If a non-zero allow-failure map is provided, allowed actions can fail without the entire call being reverted.\\n    /// @param _callId The ID of the call. The definition of the value of `callId` is up to the calling contract and can be used, e.g., as a nonce.\\n    /// @param _actions The array of actions.\\n    /// @param _allowFailureMap A bitmap allowing execution to succeed, even if individual actions might revert. If the bit at index `i` is 1, the execution succeeds even if the `i`th action reverts. A failure map value of 0 requires every action to not revert.\\n    /// @return The array of results obtained from the executed actions in `bytes`.\\n    /// @return The resulting failure map containing the actions have actually failed.\\n    function execute(\\n        bytes32 _callId,\\n        Action[] memory _actions,\\n        uint256 _allowFailureMap\\n    ) external returns (bytes[] memory, uint256);\\n\\n    /// @notice Emitted when a proposal is executed.\\n    /// @param actor The address of the caller.\\n    /// @param callId The ID of the call.\\n    /// @param actions The array of actions executed.\\n    /// @param allowFailureMap The allow failure map encoding which actions are allowed to fail.\\n    /// @param failureMap The failure map encoding which actions have failed.\\n    /// @param execResults The array with the results of the executed actions.\\n    /// @dev The value of `callId` is defined by the component/contract calling the execute function. A `Plugin` implementation can use it, for example, as a nonce.\\n    event Executed(\\n        address indexed actor,\\n        bytes32 callId,\\n        Action[] actions,\\n        uint256 allowFailureMap,\\n        uint256 failureMap,\\n        bytes[] execResults\\n    );\\n\\n    /// @notice Emitted when a standard callback is registered.\\n    /// @param interfaceId The ID of the interface.\\n    /// @param callbackSelector The selector of the callback function.\\n    /// @param magicNumber The magic number to be registered for the callback function selector.\\n    event StandardCallbackRegistered(\\n        bytes4 interfaceId,\\n        bytes4 callbackSelector,\\n        bytes4 magicNumber\\n    );\\n\\n    /// @notice Deposits (native) tokens to the DAO contract with a reference string.\\n    /// @param _token The address of the token or address(0) in case of the native token.\\n    /// @param _amount The amount of tokens to deposit.\\n    /// @param _reference The reference describing the deposit reason.\\n    function deposit(address _token, uint256 _amount, string calldata _reference) external payable;\\n\\n    /// @notice Emitted when a token deposit has been made to the DAO.\\n    /// @param sender The address of the sender.\\n    /// @param token The address of the deposited token.\\n    /// @param amount The amount of tokens deposited.\\n    /// @param _reference The reference describing the deposit reason.\\n    event Deposited(\\n        address indexed sender,\\n        address indexed token,\\n        uint256 amount,\\n        string _reference\\n    );\\n\\n    /// @notice Emitted when a native token deposit has been made to the DAO.\\n    /// @dev This event is intended to be emitted in the `receive` function and is therefore bound by the gas limitations for `send`/`transfer` calls introduced by [ERC-2929](https://eips.ethereum.org/EIPS/eip-2929).\\n    /// @param sender The address of the sender.\\n    /// @param amount The amount of native tokens deposited.\\n    event NativeTokenDeposited(address sender, uint256 amount);\\n\\n    /// @notice Setter for the trusted forwarder verifying the meta transaction.\\n    /// @param _trustedForwarder The trusted forwarder address.\\n    function setTrustedForwarder(address _trustedForwarder) external;\\n\\n    /// @notice Getter for the trusted forwarder verifying the meta transaction.\\n    /// @return The trusted forwarder address.\\n    function getTrustedForwarder() external view returns (address);\\n\\n    /// @notice Emitted when a new TrustedForwarder is set on the DAO.\\n    /// @param forwarder the new forwarder address.\\n    event TrustedForwarderSet(address forwarder);\\n\\n    /// @notice Setter for the [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract.\\n    /// @param _signatureValidator The address of the signature validator.\\n    function setSignatureValidator(address _signatureValidator) external;\\n\\n    /// @notice Emitted when the signature validator address is updated.\\n    /// @param signatureValidator The address of the signature validator.\\n    event SignatureValidatorSet(address signatureValidator);\\n\\n    /// @notice Checks whether a signature is valid for the provided hash by forwarding the call to the set [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract.\\n    /// @param _hash The hash of the data to be signed.\\n    /// @param _signature The signature byte array associated with `_hash`.\\n    /// @return Returns the `bytes4` magic value `0x1626ba7e` if the signature is valid.\\n    function isValidSignature(bytes32 _hash, bytes memory _signature) external returns (bytes4);\\n\\n    /// @notice Registers an ERC standard having a callback by registering its [ERC-165](https://eips.ethereum.org/EIPS/eip-165) interface ID and callback function signature.\\n    /// @param _interfaceId The ID of the interface.\\n    /// @param _callbackSelector The selector of the callback function.\\n    /// @param _magicNumber The magic number to be registered for the function signature.\\n    function registerStandardCallback(\\n        bytes4 _interfaceId,\\n        bytes4 _callbackSelector,\\n        bytes4 _magicNumber\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3876d62c73312234c1e2ab4e75cdac2783a6688c3445a67a15b767cd98e01f80\",\"license\":\"AGPL-3.0-or-later\"},\"@aragon/osx/core/plugin/IPlugin.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\n/// @title IPlugin\\n/// @author Aragon Association - 2022-2023\\n/// @notice An interface defining the traits of a plugin.\\ninterface IPlugin {\\n    enum PluginType {\\n        UUPS,\\n        Cloneable,\\n        Constructable\\n    }\\n\\n    /// @notice Returns the plugin's type\\n    function pluginType() external view returns (PluginType);\\n}\\n\",\"keccak256\":\"0xcdb72c04ca35478e4d786fbbe12cf0e6de7d76aa0510028432312697f42c7355\",\"license\":\"AGPL-3.0-or-later\"},\"@aragon/osx/core/plugin/Plugin.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nimport {IDAO} from \\\"../dao/IDAO.sol\\\";\\nimport {DaoAuthorizable} from \\\"./dao-authorizable/DaoAuthorizable.sol\\\";\\nimport {IPlugin} from \\\"./IPlugin.sol\\\";\\n\\n/// @title Plugin\\n/// @author Aragon Association - 2022-2023\\n/// @notice An abstract, non-upgradeable contract to inherit from when creating a plugin being deployed via the `new` keyword.\\nabstract contract Plugin is IPlugin, ERC165, DaoAuthorizable {\\n    /// @notice Constructs the plugin by storing the associated DAO.\\n    /// @param _dao The DAO contract.\\n    constructor(IDAO _dao) DaoAuthorizable(_dao) {}\\n\\n    /// @inheritdoc IPlugin\\n    function pluginType() public pure override returns (PluginType) {\\n        return PluginType.Constructable;\\n    }\\n\\n    /// @notice Checks if this or the parent contract supports an interface by its ID.\\n    /// @param _interfaceId The ID of the interface.\\n    /// @return Returns `true` if the interface is supported.\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\\n        return _interfaceId == type(IPlugin).interfaceId || super.supportsInterface(_interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xf4ba8a3d7e3e626ed07619acc9ab616e17615e7ce2983b634a0bba0662897452\",\"license\":\"AGPL-3.0-or-later\"},\"@aragon/osx/core/plugin/dao-authorizable/DaoAuthorizable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport {IDAO} from \\\"../../dao/IDAO.sol\\\";\\nimport {_auth} from \\\"../../utils/auth.sol\\\";\\n\\n/// @title DaoAuthorizable\\n/// @author Aragon Association - 2022-2023\\n/// @notice An abstract contract providing a meta-transaction compatible modifier for non-upgradeable contracts instantiated via the `new` keyword to authorize function calls through an associated DAO.\\nabstract contract DaoAuthorizable is Context {\\n    /// @notice The associated DAO managing the permissions of inheriting contracts.\\n    IDAO private immutable dao_;\\n\\n    /// @notice Constructs the contract by setting the associated DAO.\\n    /// @param _dao The associated DAO address.\\n    constructor(IDAO _dao) {\\n        dao_ = _dao;\\n    }\\n\\n    /// @notice Returns the DAO contract.\\n    /// @return The DAO contract.\\n    function dao() public view returns (IDAO) {\\n        return dao_;\\n    }\\n\\n    /// @notice A modifier to make functions on inheriting contracts authorized. Permissions to call the function are checked through the associated DAO's permission manager.\\n    /// @param _permissionId The permission identifier required to call the method this modifier is applied to.\\n    modifier auth(bytes32 _permissionId) {\\n        _auth(dao_, address(this), _msgSender(), _permissionId, _msgData());\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xfb9de789f0266a61a5cfbd17a247b4ba4212ff091ccd10739318763331bdd154\",\"license\":\"AGPL-3.0-or-later\"},\"@aragon/osx/core/utils/auth.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\nimport {IDAO} from \\\"../dao/IDAO.sol\\\";\\n\\n/// @notice Thrown if a call is unauthorized in the associated DAO.\\n/// @param dao The associated DAO.\\n/// @param where The context in which the authorization reverted.\\n/// @param who The address (EOA or contract) missing the permission.\\n/// @param permissionId The permission identifier.\\nerror DaoUnauthorized(address dao, address where, address who, bytes32 permissionId);\\n\\n/// @notice A free function checking if a caller is granted permissions on a target contract via a permission identifier that redirects the approval to a `PermissionCondition` if this was specified in the setup.\\n/// @param _where The address of the target contract for which `who` receives permission.\\n/// @param _who The address (EOA or contract) owning the permission.\\n/// @param _permissionId The permission identifier.\\n/// @param _data The optional data passed to the `PermissionCondition` registered.\\nfunction _auth(\\n    IDAO _dao,\\n    address _where,\\n    address _who,\\n    bytes32 _permissionId,\\n    bytes calldata _data\\n) view {\\n    if (!_dao.hasPermission(_where, _who, _permissionId, _data))\\n        revert DaoUnauthorized({\\n            dao: address(_dao),\\n            where: _where,\\n            who: _who,\\n            permissionId: _permissionId\\n        });\\n}\\n\",\"keccak256\":\"0x1c9cf22583c8b5a08c6d2c02a68d9f05e58900a9bb27efa3b30abca2ecfabfe4\",\"license\":\"AGPL-3.0-or-later\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"constructor":{"notice":"Constructs the plugin by storing the associated DAO."},"dao()":{"notice":"Returns the DAO contract."},"pluginType()":{"notice":"Returns the plugin's type"},"supportsInterface(bytes4)":{"notice":"Checks if this or the parent contract supports an interface by its ID."}},"notice":"An abstract, non-upgradeable contract to inherit from when creating a plugin being deployed via the `new` keyword.","version":1}}},"@aragon/osx/core/plugin/dao-authorizable/DaoAuthorizable.sol":{"DaoAuthorizable":{"abi":[{"inputs":[],"name":"dao","outputs":[{"internalType":"contract IDAO","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"author":"Aragon Association - 2022-2023","kind":"dev","methods":{"constructor":{"params":{"_dao":"The associated DAO address."}},"dao()":{"returns":{"_0":"The DAO contract."}}},"title":"DaoAuthorizable","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"dao()":"4162169f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"contract IDAO\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Aragon Association - 2022-2023\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_dao\":\"The associated DAO address.\"}},\"dao()\":{\"returns\":{\"_0\":\"The DAO contract.\"}}},\"title\":\"DaoAuthorizable\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructs the contract by setting the associated DAO.\"},\"dao()\":{\"notice\":\"Returns the DAO contract.\"}},\"notice\":\"An abstract contract providing a meta-transaction compatible modifier for non-upgradeable contracts instantiated via the `new` keyword to authorize function calls through an associated DAO.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@aragon/osx/core/plugin/dao-authorizable/DaoAuthorizable.sol\":\"DaoAuthorizable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@aragon/osx/core/dao/IDAO.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\n/// @title IDAO\\n/// @author Aragon Association - 2022-2023\\n/// @notice The interface required for DAOs within the Aragon App DAO framework.\\ninterface IDAO {\\n    /// @notice The action struct to be consumed by the DAO's `execute` function resulting in an external call.\\n    /// @param to The address to call.\\n    /// @param value The native token value to be sent with the call.\\n    /// @param data The bytes-encoded function selector and calldata for the call.\\n    struct Action {\\n        address to;\\n        uint256 value;\\n        bytes data;\\n    }\\n\\n    /// @notice Checks if an address has permission on a contract via a permission identifier and considers if `ANY_ADDRESS` was used in the granting process.\\n    /// @param _where The address of the contract.\\n    /// @param _who The address of a EOA or contract to give the permissions.\\n    /// @param _permissionId The permission identifier.\\n    /// @param _data The optional data passed to the `PermissionCondition` registered.\\n    /// @return Returns true if the address has permission, false if not.\\n    function hasPermission(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId,\\n        bytes memory _data\\n    ) external view returns (bool);\\n\\n    /// @notice Updates the DAO metadata (e.g., an IPFS hash).\\n    /// @param _metadata The IPFS hash of the new metadata object.\\n    function setMetadata(bytes calldata _metadata) external;\\n\\n    /// @notice Emitted when the DAO metadata is updated.\\n    /// @param metadata The IPFS hash of the new metadata object.\\n    event MetadataSet(bytes metadata);\\n\\n    /// @notice Executes a list of actions. If a zero allow-failure map is provided, a failing action reverts the entire execution. If a non-zero allow-failure map is provided, allowed actions can fail without the entire call being reverted.\\n    /// @param _callId The ID of the call. The definition of the value of `callId` is up to the calling contract and can be used, e.g., as a nonce.\\n    /// @param _actions The array of actions.\\n    /// @param _allowFailureMap A bitmap allowing execution to succeed, even if individual actions might revert. If the bit at index `i` is 1, the execution succeeds even if the `i`th action reverts. A failure map value of 0 requires every action to not revert.\\n    /// @return The array of results obtained from the executed actions in `bytes`.\\n    /// @return The resulting failure map containing the actions have actually failed.\\n    function execute(\\n        bytes32 _callId,\\n        Action[] memory _actions,\\n        uint256 _allowFailureMap\\n    ) external returns (bytes[] memory, uint256);\\n\\n    /// @notice Emitted when a proposal is executed.\\n    /// @param actor The address of the caller.\\n    /// @param callId The ID of the call.\\n    /// @param actions The array of actions executed.\\n    /// @param allowFailureMap The allow failure map encoding which actions are allowed to fail.\\n    /// @param failureMap The failure map encoding which actions have failed.\\n    /// @param execResults The array with the results of the executed actions.\\n    /// @dev The value of `callId` is defined by the component/contract calling the execute function. A `Plugin` implementation can use it, for example, as a nonce.\\n    event Executed(\\n        address indexed actor,\\n        bytes32 callId,\\n        Action[] actions,\\n        uint256 allowFailureMap,\\n        uint256 failureMap,\\n        bytes[] execResults\\n    );\\n\\n    /// @notice Emitted when a standard callback is registered.\\n    /// @param interfaceId The ID of the interface.\\n    /// @param callbackSelector The selector of the callback function.\\n    /// @param magicNumber The magic number to be registered for the callback function selector.\\n    event StandardCallbackRegistered(\\n        bytes4 interfaceId,\\n        bytes4 callbackSelector,\\n        bytes4 magicNumber\\n    );\\n\\n    /// @notice Deposits (native) tokens to the DAO contract with a reference string.\\n    /// @param _token The address of the token or address(0) in case of the native token.\\n    /// @param _amount The amount of tokens to deposit.\\n    /// @param _reference The reference describing the deposit reason.\\n    function deposit(address _token, uint256 _amount, string calldata _reference) external payable;\\n\\n    /// @notice Emitted when a token deposit has been made to the DAO.\\n    /// @param sender The address of the sender.\\n    /// @param token The address of the deposited token.\\n    /// @param amount The amount of tokens deposited.\\n    /// @param _reference The reference describing the deposit reason.\\n    event Deposited(\\n        address indexed sender,\\n        address indexed token,\\n        uint256 amount,\\n        string _reference\\n    );\\n\\n    /// @notice Emitted when a native token deposit has been made to the DAO.\\n    /// @dev This event is intended to be emitted in the `receive` function and is therefore bound by the gas limitations for `send`/`transfer` calls introduced by [ERC-2929](https://eips.ethereum.org/EIPS/eip-2929).\\n    /// @param sender The address of the sender.\\n    /// @param amount The amount of native tokens deposited.\\n    event NativeTokenDeposited(address sender, uint256 amount);\\n\\n    /// @notice Setter for the trusted forwarder verifying the meta transaction.\\n    /// @param _trustedForwarder The trusted forwarder address.\\n    function setTrustedForwarder(address _trustedForwarder) external;\\n\\n    /// @notice Getter for the trusted forwarder verifying the meta transaction.\\n    /// @return The trusted forwarder address.\\n    function getTrustedForwarder() external view returns (address);\\n\\n    /// @notice Emitted when a new TrustedForwarder is set on the DAO.\\n    /// @param forwarder the new forwarder address.\\n    event TrustedForwarderSet(address forwarder);\\n\\n    /// @notice Setter for the [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract.\\n    /// @param _signatureValidator The address of the signature validator.\\n    function setSignatureValidator(address _signatureValidator) external;\\n\\n    /// @notice Emitted when the signature validator address is updated.\\n    /// @param signatureValidator The address of the signature validator.\\n    event SignatureValidatorSet(address signatureValidator);\\n\\n    /// @notice Checks whether a signature is valid for the provided hash by forwarding the call to the set [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract.\\n    /// @param _hash The hash of the data to be signed.\\n    /// @param _signature The signature byte array associated with `_hash`.\\n    /// @return Returns the `bytes4` magic value `0x1626ba7e` if the signature is valid.\\n    function isValidSignature(bytes32 _hash, bytes memory _signature) external returns (bytes4);\\n\\n    /// @notice Registers an ERC standard having a callback by registering its [ERC-165](https://eips.ethereum.org/EIPS/eip-165) interface ID and callback function signature.\\n    /// @param _interfaceId The ID of the interface.\\n    /// @param _callbackSelector The selector of the callback function.\\n    /// @param _magicNumber The magic number to be registered for the function signature.\\n    function registerStandardCallback(\\n        bytes4 _interfaceId,\\n        bytes4 _callbackSelector,\\n        bytes4 _magicNumber\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3876d62c73312234c1e2ab4e75cdac2783a6688c3445a67a15b767cd98e01f80\",\"license\":\"AGPL-3.0-or-later\"},\"@aragon/osx/core/plugin/dao-authorizable/DaoAuthorizable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport {IDAO} from \\\"../../dao/IDAO.sol\\\";\\nimport {_auth} from \\\"../../utils/auth.sol\\\";\\n\\n/// @title DaoAuthorizable\\n/// @author Aragon Association - 2022-2023\\n/// @notice An abstract contract providing a meta-transaction compatible modifier for non-upgradeable contracts instantiated via the `new` keyword to authorize function calls through an associated DAO.\\nabstract contract DaoAuthorizable is Context {\\n    /// @notice The associated DAO managing the permissions of inheriting contracts.\\n    IDAO private immutable dao_;\\n\\n    /// @notice Constructs the contract by setting the associated DAO.\\n    /// @param _dao The associated DAO address.\\n    constructor(IDAO _dao) {\\n        dao_ = _dao;\\n    }\\n\\n    /// @notice Returns the DAO contract.\\n    /// @return The DAO contract.\\n    function dao() public view returns (IDAO) {\\n        return dao_;\\n    }\\n\\n    /// @notice A modifier to make functions on inheriting contracts authorized. Permissions to call the function are checked through the associated DAO's permission manager.\\n    /// @param _permissionId The permission identifier required to call the method this modifier is applied to.\\n    modifier auth(bytes32 _permissionId) {\\n        _auth(dao_, address(this), _msgSender(), _permissionId, _msgData());\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xfb9de789f0266a61a5cfbd17a247b4ba4212ff091ccd10739318763331bdd154\",\"license\":\"AGPL-3.0-or-later\"},\"@aragon/osx/core/utils/auth.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\nimport {IDAO} from \\\"../dao/IDAO.sol\\\";\\n\\n/// @notice Thrown if a call is unauthorized in the associated DAO.\\n/// @param dao The associated DAO.\\n/// @param where The context in which the authorization reverted.\\n/// @param who The address (EOA or contract) missing the permission.\\n/// @param permissionId The permission identifier.\\nerror DaoUnauthorized(address dao, address where, address who, bytes32 permissionId);\\n\\n/// @notice A free function checking if a caller is granted permissions on a target contract via a permission identifier that redirects the approval to a `PermissionCondition` if this was specified in the setup.\\n/// @param _where The address of the target contract for which `who` receives permission.\\n/// @param _who The address (EOA or contract) owning the permission.\\n/// @param _permissionId The permission identifier.\\n/// @param _data The optional data passed to the `PermissionCondition` registered.\\nfunction _auth(\\n    IDAO _dao,\\n    address _where,\\n    address _who,\\n    bytes32 _permissionId,\\n    bytes calldata _data\\n) view {\\n    if (!_dao.hasPermission(_where, _who, _permissionId, _data))\\n        revert DaoUnauthorized({\\n            dao: address(_dao),\\n            where: _where,\\n            who: _who,\\n            permissionId: _permissionId\\n        });\\n}\\n\",\"keccak256\":\"0x1c9cf22583c8b5a08c6d2c02a68d9f05e58900a9bb27efa3b30abca2ecfabfe4\",\"license\":\"AGPL-3.0-or-later\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"constructor":{"notice":"Constructs the contract by setting the associated DAO."},"dao()":{"notice":"Returns the DAO contract."}},"notice":"An abstract contract providing a meta-transaction compatible modifier for non-upgradeable contracts instantiated via the `new` keyword to authorize function calls through an associated DAO.","version":1}}},"@aragon/osx/framework/plugin/setup/IPluginSetup.sol":{"IPluginSetup":{"abi":[{"inputs":[],"name":"implementation","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_dao","type":"address"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"prepareInstallation","outputs":[{"internalType":"address","name":"plugin","type":"address"},{"components":[{"internalType":"address[]","name":"helpers","type":"address[]"},{"components":[{"internalType":"enum PermissionLib.Operation","name":"operation","type":"uint8"},{"internalType":"address","name":"where","type":"address"},{"internalType":"address","name":"who","type":"address"},{"internalType":"address","name":"condition","type":"address"},{"internalType":"bytes32","name":"permissionId","type":"bytes32"}],"internalType":"struct PermissionLib.MultiTargetPermission[]","name":"permissions","type":"tuple[]"}],"internalType":"struct IPluginSetup.PreparedSetupData","name":"preparedSetupData","type":"tuple"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_dao","type":"address"},{"components":[{"internalType":"address","name":"plugin","type":"address"},{"internalType":"address[]","name":"currentHelpers","type":"address[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct IPluginSetup.SetupPayload","name":"_payload","type":"tuple"}],"name":"prepareUninstallation","outputs":[{"components":[{"internalType":"enum PermissionLib.Operation","name":"operation","type":"uint8"},{"internalType":"address","name":"where","type":"address"},{"internalType":"address","name":"who","type":"address"},{"internalType":"address","name":"condition","type":"address"},{"internalType":"bytes32","name":"permissionId","type":"bytes32"}],"internalType":"struct PermissionLib.MultiTargetPermission[]","name":"permissions","type":"tuple[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_dao","type":"address"},{"internalType":"uint16","name":"_currentBuild","type":"uint16"},{"components":[{"internalType":"address","name":"plugin","type":"address"},{"internalType":"address[]","name":"currentHelpers","type":"address[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct IPluginSetup.SetupPayload","name":"_payload","type":"tuple"}],"name":"prepareUpdate","outputs":[{"internalType":"bytes","name":"initData","type":"bytes"},{"components":[{"internalType":"address[]","name":"helpers","type":"address[]"},{"components":[{"internalType":"enum PermissionLib.Operation","name":"operation","type":"uint8"},{"internalType":"address","name":"where","type":"address"},{"internalType":"address","name":"who","type":"address"},{"internalType":"address","name":"condition","type":"address"},{"internalType":"bytes32","name":"permissionId","type":"bytes32"}],"internalType":"struct PermissionLib.MultiTargetPermission[]","name":"permissions","type":"tuple[]"}],"internalType":"struct IPluginSetup.PreparedSetupData","name":"preparedSetupData","type":"tuple"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"author":"Aragon Association - 2022-2023","kind":"dev","methods":{"implementation()":{"details":"The implementation can be instantiated via the `new` keyword, cloned via the minimal clones pattern (see [ERC-1167](https://eips.ethereum.org/EIPS/eip-1167)), or proxied via the UUPS pattern (see [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822)).","returns":{"_0":"The address of the plugin implementation contract."}},"prepareInstallation(address,bytes)":{"params":{"_dao":"The address of the installing DAO.","_data":"The bytes-encoded data containing the input parameters for the installation as specified in the plugin's build metadata JSON file."},"returns":{"plugin":"The address of the `Plugin` contract being prepared for installation.","preparedSetupData":"The deployed plugin's relevant data which consists of helpers and permissions."}},"prepareUninstallation(address,(address,address[],bytes))":{"params":{"_dao":"The address of the uninstalling DAO.","_payload":"The relevant data necessary for the `prepareUninstallation`. See above."},"returns":{"permissions":"The array of multi-targeted permission operations to be applied by the `PluginSetupProcessor` to the uninstalling DAO."}},"prepareUpdate(address,uint16,(address,address[],bytes))":{"params":{"_currentBuild":"The build number of the plugin to update from.","_dao":"The address of the updating DAO.","_payload":"The relevant data necessary for the `prepareUpdate`. See above."},"returns":{"initData":"The initialization data to be passed to upgradeable contracts when the update is applied in the `PluginSetupProcessor`.","preparedSetupData":"The deployed plugin's relevant data which consists of helpers and permissions."}}},"title":"IPluginSetup","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"implementation()":"5c60da1b","prepareInstallation(address,bytes)":"f10832f1","prepareUninstallation(address,(address,address[],bytes))":"9cb0a124","prepareUpdate(address,uint16,(address,address[],bytes))":"a8a9c29e"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"prepareInstallation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"plugin\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"helpers\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"enum PermissionLib.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"where\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"condition\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"permissionId\",\"type\":\"bytes32\"}],\"internalType\":\"struct PermissionLib.MultiTargetPermission[]\",\"name\":\"permissions\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IPluginSetup.PreparedSetupData\",\"name\":\"preparedSetupData\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"plugin\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"currentHelpers\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IPluginSetup.SetupPayload\",\"name\":\"_payload\",\"type\":\"tuple\"}],\"name\":\"prepareUninstallation\",\"outputs\":[{\"components\":[{\"internalType\":\"enum PermissionLib.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"where\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"condition\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"permissionId\",\"type\":\"bytes32\"}],\"internalType\":\"struct PermissionLib.MultiTargetPermission[]\",\"name\":\"permissions\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_currentBuild\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"plugin\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"currentHelpers\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IPluginSetup.SetupPayload\",\"name\":\"_payload\",\"type\":\"tuple\"}],\"name\":\"prepareUpdate\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"initData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"helpers\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"enum PermissionLib.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"where\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"condition\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"permissionId\",\"type\":\"bytes32\"}],\"internalType\":\"struct PermissionLib.MultiTargetPermission[]\",\"name\":\"permissions\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IPluginSetup.PreparedSetupData\",\"name\":\"preparedSetupData\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Aragon Association - 2022-2023\",\"kind\":\"dev\",\"methods\":{\"implementation()\":{\"details\":\"The implementation can be instantiated via the `new` keyword, cloned via the minimal clones pattern (see [ERC-1167](https://eips.ethereum.org/EIPS/eip-1167)), or proxied via the UUPS pattern (see [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822)).\",\"returns\":{\"_0\":\"The address of the plugin implementation contract.\"}},\"prepareInstallation(address,bytes)\":{\"params\":{\"_dao\":\"The address of the installing DAO.\",\"_data\":\"The bytes-encoded data containing the input parameters for the installation as specified in the plugin's build metadata JSON file.\"},\"returns\":{\"plugin\":\"The address of the `Plugin` contract being prepared for installation.\",\"preparedSetupData\":\"The deployed plugin's relevant data which consists of helpers and permissions.\"}},\"prepareUninstallation(address,(address,address[],bytes))\":{\"params\":{\"_dao\":\"The address of the uninstalling DAO.\",\"_payload\":\"The relevant data necessary for the `prepareUninstallation`. See above.\"},\"returns\":{\"permissions\":\"The array of multi-targeted permission operations to be applied by the `PluginSetupProcessor` to the uninstalling DAO.\"}},\"prepareUpdate(address,uint16,(address,address[],bytes))\":{\"params\":{\"_currentBuild\":\"The build number of the plugin to update from.\",\"_dao\":\"The address of the updating DAO.\",\"_payload\":\"The relevant data necessary for the `prepareUpdate`. See above.\"},\"returns\":{\"initData\":\"The initialization data to be passed to upgradeable contracts when the update is applied in the `PluginSetupProcessor`.\",\"preparedSetupData\":\"The deployed plugin's relevant data which consists of helpers and permissions.\"}}},\"title\":\"IPluginSetup\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"implementation()\":{\"notice\":\"Returns the plugin implementation address.\"},\"prepareInstallation(address,bytes)\":{\"notice\":\"Prepares the installation of a plugin.\"},\"prepareUninstallation(address,(address,address[],bytes))\":{\"notice\":\"Prepares the uninstallation of a plugin.\"},\"prepareUpdate(address,uint16,(address,address[],bytes))\":{\"notice\":\"Prepares the update of a plugin.\"}},\"notice\":\"The interface required for a plugin setup contract to be consumed by the `PluginSetupProcessor` for plugin installations, updates, and uninstallations.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@aragon/osx/framework/plugin/setup/IPluginSetup.sol\":\"IPluginSetup\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@aragon/osx/core/dao/IDAO.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\n/// @title IDAO\\n/// @author Aragon Association - 2022-2023\\n/// @notice The interface required for DAOs within the Aragon App DAO framework.\\ninterface IDAO {\\n    /// @notice The action struct to be consumed by the DAO's `execute` function resulting in an external call.\\n    /// @param to The address to call.\\n    /// @param value The native token value to be sent with the call.\\n    /// @param data The bytes-encoded function selector and calldata for the call.\\n    struct Action {\\n        address to;\\n        uint256 value;\\n        bytes data;\\n    }\\n\\n    /// @notice Checks if an address has permission on a contract via a permission identifier and considers if `ANY_ADDRESS` was used in the granting process.\\n    /// @param _where The address of the contract.\\n    /// @param _who The address of a EOA or contract to give the permissions.\\n    /// @param _permissionId The permission identifier.\\n    /// @param _data The optional data passed to the `PermissionCondition` registered.\\n    /// @return Returns true if the address has permission, false if not.\\n    function hasPermission(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId,\\n        bytes memory _data\\n    ) external view returns (bool);\\n\\n    /// @notice Updates the DAO metadata (e.g., an IPFS hash).\\n    /// @param _metadata The IPFS hash of the new metadata object.\\n    function setMetadata(bytes calldata _metadata) external;\\n\\n    /// @notice Emitted when the DAO metadata is updated.\\n    /// @param metadata The IPFS hash of the new metadata object.\\n    event MetadataSet(bytes metadata);\\n\\n    /// @notice Executes a list of actions. If a zero allow-failure map is provided, a failing action reverts the entire execution. If a non-zero allow-failure map is provided, allowed actions can fail without the entire call being reverted.\\n    /// @param _callId The ID of the call. The definition of the value of `callId` is up to the calling contract and can be used, e.g., as a nonce.\\n    /// @param _actions The array of actions.\\n    /// @param _allowFailureMap A bitmap allowing execution to succeed, even if individual actions might revert. If the bit at index `i` is 1, the execution succeeds even if the `i`th action reverts. A failure map value of 0 requires every action to not revert.\\n    /// @return The array of results obtained from the executed actions in `bytes`.\\n    /// @return The resulting failure map containing the actions have actually failed.\\n    function execute(\\n        bytes32 _callId,\\n        Action[] memory _actions,\\n        uint256 _allowFailureMap\\n    ) external returns (bytes[] memory, uint256);\\n\\n    /// @notice Emitted when a proposal is executed.\\n    /// @param actor The address of the caller.\\n    /// @param callId The ID of the call.\\n    /// @param actions The array of actions executed.\\n    /// @param allowFailureMap The allow failure map encoding which actions are allowed to fail.\\n    /// @param failureMap The failure map encoding which actions have failed.\\n    /// @param execResults The array with the results of the executed actions.\\n    /// @dev The value of `callId` is defined by the component/contract calling the execute function. A `Plugin` implementation can use it, for example, as a nonce.\\n    event Executed(\\n        address indexed actor,\\n        bytes32 callId,\\n        Action[] actions,\\n        uint256 allowFailureMap,\\n        uint256 failureMap,\\n        bytes[] execResults\\n    );\\n\\n    /// @notice Emitted when a standard callback is registered.\\n    /// @param interfaceId The ID of the interface.\\n    /// @param callbackSelector The selector of the callback function.\\n    /// @param magicNumber The magic number to be registered for the callback function selector.\\n    event StandardCallbackRegistered(\\n        bytes4 interfaceId,\\n        bytes4 callbackSelector,\\n        bytes4 magicNumber\\n    );\\n\\n    /// @notice Deposits (native) tokens to the DAO contract with a reference string.\\n    /// @param _token The address of the token or address(0) in case of the native token.\\n    /// @param _amount The amount of tokens to deposit.\\n    /// @param _reference The reference describing the deposit reason.\\n    function deposit(address _token, uint256 _amount, string calldata _reference) external payable;\\n\\n    /// @notice Emitted when a token deposit has been made to the DAO.\\n    /// @param sender The address of the sender.\\n    /// @param token The address of the deposited token.\\n    /// @param amount The amount of tokens deposited.\\n    /// @param _reference The reference describing the deposit reason.\\n    event Deposited(\\n        address indexed sender,\\n        address indexed token,\\n        uint256 amount,\\n        string _reference\\n    );\\n\\n    /// @notice Emitted when a native token deposit has been made to the DAO.\\n    /// @dev This event is intended to be emitted in the `receive` function and is therefore bound by the gas limitations for `send`/`transfer` calls introduced by [ERC-2929](https://eips.ethereum.org/EIPS/eip-2929).\\n    /// @param sender The address of the sender.\\n    /// @param amount The amount of native tokens deposited.\\n    event NativeTokenDeposited(address sender, uint256 amount);\\n\\n    /// @notice Setter for the trusted forwarder verifying the meta transaction.\\n    /// @param _trustedForwarder The trusted forwarder address.\\n    function setTrustedForwarder(address _trustedForwarder) external;\\n\\n    /// @notice Getter for the trusted forwarder verifying the meta transaction.\\n    /// @return The trusted forwarder address.\\n    function getTrustedForwarder() external view returns (address);\\n\\n    /// @notice Emitted when a new TrustedForwarder is set on the DAO.\\n    /// @param forwarder the new forwarder address.\\n    event TrustedForwarderSet(address forwarder);\\n\\n    /// @notice Setter for the [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract.\\n    /// @param _signatureValidator The address of the signature validator.\\n    function setSignatureValidator(address _signatureValidator) external;\\n\\n    /// @notice Emitted when the signature validator address is updated.\\n    /// @param signatureValidator The address of the signature validator.\\n    event SignatureValidatorSet(address signatureValidator);\\n\\n    /// @notice Checks whether a signature is valid for the provided hash by forwarding the call to the set [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract.\\n    /// @param _hash The hash of the data to be signed.\\n    /// @param _signature The signature byte array associated with `_hash`.\\n    /// @return Returns the `bytes4` magic value `0x1626ba7e` if the signature is valid.\\n    function isValidSignature(bytes32 _hash, bytes memory _signature) external returns (bytes4);\\n\\n    /// @notice Registers an ERC standard having a callback by registering its [ERC-165](https://eips.ethereum.org/EIPS/eip-165) interface ID and callback function signature.\\n    /// @param _interfaceId The ID of the interface.\\n    /// @param _callbackSelector The selector of the callback function.\\n    /// @param _magicNumber The magic number to be registered for the function signature.\\n    function registerStandardCallback(\\n        bytes4 _interfaceId,\\n        bytes4 _callbackSelector,\\n        bytes4 _magicNumber\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3876d62c73312234c1e2ab4e75cdac2783a6688c3445a67a15b767cd98e01f80\",\"license\":\"AGPL-3.0-or-later\"},\"@aragon/osx/core/permission/PermissionLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\n/// @title PermissionLib\\n/// @author Aragon Association - 2021-2023\\n/// @notice A library containing objects for permission processing.\\nlibrary PermissionLib {\\n    /// @notice A constant expressing that no condition is applied to a permission.\\n    address public constant NO_CONDITION = address(0);\\n\\n    /// @notice The types of permission operations available in the `PermissionManager`.\\n    /// @param Grant The grant operation setting a permission without a condition.\\n    /// @param Revoke The revoke operation removing a permission (that was granted with or without a condition).\\n    /// @param GrantWithCondition The grant operation setting a permission with a condition.\\n    enum Operation {\\n        Grant,\\n        Revoke,\\n        GrantWithCondition\\n    }\\n\\n    /// @notice A struct containing the information for a permission to be applied on a single target contract without a condition.\\n    /// @param operation The permission operation type.\\n    /// @param who The address (EOA or contract) receiving the permission.\\n    /// @param permissionId The permission identifier.\\n    struct SingleTargetPermission {\\n        Operation operation;\\n        address who;\\n        bytes32 permissionId;\\n    }\\n\\n    /// @notice A struct containing the information for a permission to be applied on multiple target contracts, optionally, with a condition.\\n    /// @param operation The permission operation type.\\n    /// @param where The address of the target contract for which `who` receives permission.\\n    /// @param who The address (EOA or contract) receiving the permission.\\n    /// @param condition The `PermissionCondition` that will be asked for authorization on calls connected to the specified permission identifier.\\n    /// @param permissionId The permission identifier.\\n    struct MultiTargetPermission {\\n        Operation operation;\\n        address where;\\n        address who;\\n        address condition;\\n        bytes32 permissionId;\\n    }\\n}\\n\",\"keccak256\":\"0x9b27fa8990e0f1623055187b8ade9363a6c8a1f15aab900e3a6e5cb312545c02\",\"license\":\"AGPL-3.0-or-later\"},\"@aragon/osx/framework/plugin/setup/IPluginSetup.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\nimport {PermissionLib} from \\\"../../../core/permission/PermissionLib.sol\\\";\\nimport {IDAO} from \\\"../../../core/dao/IDAO.sol\\\";\\n\\n/// @title IPluginSetup\\n/// @author Aragon Association - 2022-2023\\n/// @notice The interface required for a plugin setup contract to be consumed by the `PluginSetupProcessor` for plugin installations, updates, and uninstallations.\\ninterface IPluginSetup {\\n    /// @notice The data associated with a prepared setup.\\n    /// @param helpers The address array of helpers (contracts or EOAs) associated with this plugin version after the installation or update.\\n    /// @param permissions The array of multi-targeted permission operations to be applied by the `PluginSetupProcessor` to the installing or updating DAO.\\n    struct PreparedSetupData {\\n        address[] helpers;\\n        PermissionLib.MultiTargetPermission[] permissions;\\n    }\\n\\n    /// @notice The payload for plugin updates and uninstallations containing the existing contracts as well as optional data to be consumed by the plugin setup.\\n    /// @param plugin The address of the `Plugin`.\\n    /// @param currentHelpers The address array of all current helpers (contracts or EOAs) associated with the plugin to update from.\\n    /// @param data The bytes-encoded data containing the input parameters for the preparation of update/uninstall as specified in the corresponding ABI on the version's metadata.\\n    struct SetupPayload {\\n        address plugin;\\n        address[] currentHelpers;\\n        bytes data;\\n    }\\n\\n    /// @notice Prepares the installation of a plugin.\\n    /// @param _dao The address of the installing DAO.\\n    /// @param _data The bytes-encoded data containing the input parameters for the installation as specified in the plugin's build metadata JSON file.\\n    /// @return plugin The address of the `Plugin` contract being prepared for installation.\\n    /// @return preparedSetupData The deployed plugin's relevant data which consists of helpers and permissions.\\n    function prepareInstallation(\\n        address _dao,\\n        bytes calldata _data\\n    ) external returns (address plugin, PreparedSetupData memory preparedSetupData);\\n\\n    /// @notice Prepares the update of a plugin.\\n    /// @param _dao The address of the updating DAO.\\n    /// @param _currentBuild The build number of the plugin to update from.\\n    /// @param _payload The relevant data necessary for the `prepareUpdate`. See above.\\n    /// @return initData The initialization data to be passed to upgradeable contracts when the update is applied in the `PluginSetupProcessor`.\\n    /// @return preparedSetupData The deployed plugin's relevant data which consists of helpers and permissions.\\n    function prepareUpdate(\\n        address _dao,\\n        uint16 _currentBuild,\\n        SetupPayload calldata _payload\\n    ) external returns (bytes memory initData, PreparedSetupData memory preparedSetupData);\\n\\n    /// @notice Prepares the uninstallation of a plugin.\\n    /// @param _dao The address of the uninstalling DAO.\\n    /// @param _payload The relevant data necessary for the `prepareUninstallation`. See above.\\n    /// @return permissions The array of multi-targeted permission operations to be applied by the `PluginSetupProcessor` to the uninstalling DAO.\\n    function prepareUninstallation(\\n        address _dao,\\n        SetupPayload calldata _payload\\n    ) external returns (PermissionLib.MultiTargetPermission[] memory permissions);\\n\\n    /// @notice Returns the plugin implementation address.\\n    /// @return The address of the plugin implementation contract.\\n    /// @dev The implementation can be instantiated via the `new` keyword, cloned via the minimal clones pattern (see [ERC-1167](https://eips.ethereum.org/EIPS/eip-1167)), or proxied via the UUPS pattern (see [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822)).\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x81d1e60154e672372318f6fccf337b6094bb8fe1192e2f755b8cc0d645ff5332\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"implementation()":{"notice":"Returns the plugin implementation address."},"prepareInstallation(address,bytes)":{"notice":"Prepares the installation of a plugin."},"prepareUninstallation(address,(address,address[],bytes))":{"notice":"Prepares the uninstallation of a plugin."},"prepareUpdate(address,uint16,(address,address[],bytes))":{"notice":"Prepares the update of a plugin."}},"notice":"The interface required for a plugin setup contract to be consumed by the `PluginSetupProcessor` for plugin installations, updates, and uninstallations.","version":1}}},"@aragon/osx/framework/plugin/setup/PluginSetup.sol":{"PluginSetup":{"abi":[{"inputs":[],"name":"implementation","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_dao","type":"address"},{"internalType":"bytes","name":"_data","type":"bytes"}],"name":"prepareInstallation","outputs":[{"internalType":"address","name":"plugin","type":"address"},{"components":[{"internalType":"address[]","name":"helpers","type":"address[]"},{"components":[{"internalType":"enum PermissionLib.Operation","name":"operation","type":"uint8"},{"internalType":"address","name":"where","type":"address"},{"internalType":"address","name":"who","type":"address"},{"internalType":"address","name":"condition","type":"address"},{"internalType":"bytes32","name":"permissionId","type":"bytes32"}],"internalType":"struct PermissionLib.MultiTargetPermission[]","name":"permissions","type":"tuple[]"}],"internalType":"struct IPluginSetup.PreparedSetupData","name":"preparedSetupData","type":"tuple"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_dao","type":"address"},{"components":[{"internalType":"address","name":"plugin","type":"address"},{"internalType":"address[]","name":"currentHelpers","type":"address[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct IPluginSetup.SetupPayload","name":"_payload","type":"tuple"}],"name":"prepareUninstallation","outputs":[{"components":[{"internalType":"enum PermissionLib.Operation","name":"operation","type":"uint8"},{"internalType":"address","name":"where","type":"address"},{"internalType":"address","name":"who","type":"address"},{"internalType":"address","name":"condition","type":"address"},{"internalType":"bytes32","name":"permissionId","type":"bytes32"}],"internalType":"struct PermissionLib.MultiTargetPermission[]","name":"permissions","type":"tuple[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_dao","type":"address"},{"internalType":"uint16","name":"_currentBuild","type":"uint16"},{"components":[{"internalType":"address","name":"plugin","type":"address"},{"internalType":"address[]","name":"currentHelpers","type":"address[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct IPluginSetup.SetupPayload","name":"_payload","type":"tuple"}],"name":"prepareUpdate","outputs":[{"internalType":"bytes","name":"initData","type":"bytes"},{"components":[{"internalType":"address[]","name":"helpers","type":"address[]"},{"components":[{"internalType":"enum PermissionLib.Operation","name":"operation","type":"uint8"},{"internalType":"address","name":"where","type":"address"},{"internalType":"address","name":"who","type":"address"},{"internalType":"address","name":"condition","type":"address"},{"internalType":"bytes32","name":"permissionId","type":"bytes32"}],"internalType":"struct PermissionLib.MultiTargetPermission[]","name":"permissions","type":"tuple[]"}],"internalType":"struct IPluginSetup.PreparedSetupData","name":"preparedSetupData","type":"tuple"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"_interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"author":"Aragon Association - 2022-2023","kind":"dev","methods":{"implementation()":{"details":"The implementation can be instantiated via the `new` keyword, cloned via the minimal clones pattern (see [ERC-1167](https://eips.ethereum.org/EIPS/eip-1167)), or proxied via the UUPS pattern (see [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822)).","returns":{"_0":"The address of the plugin implementation contract."}},"prepareInstallation(address,bytes)":{"params":{"_dao":"The address of the installing DAO.","_data":"The bytes-encoded data containing the input parameters for the installation as specified in the plugin's build metadata JSON file."},"returns":{"plugin":"The address of the `Plugin` contract being prepared for installation.","preparedSetupData":"The deployed plugin's relevant data which consists of helpers and permissions."}},"prepareUninstallation(address,(address,address[],bytes))":{"params":{"_dao":"The address of the uninstalling DAO.","_payload":"The relevant data necessary for the `prepareUninstallation`. See above."},"returns":{"permissions":"The array of multi-targeted permission operations to be applied by the `PluginSetupProcessor` to the uninstalling DAO."}},"prepareUpdate(address,uint16,(address,address[],bytes))":{"params":{"_currentBuild":"The build number of the plugin to update from.","_dao":"The address of the updating DAO.","_payload":"The relevant data necessary for the `prepareUpdate`. See above."},"returns":{"initData":"The initialization data to be passed to upgradeable contracts when the update is applied in the `PluginSetupProcessor`.","preparedSetupData":"The deployed plugin's relevant data which consists of helpers and permissions."}},"supportsInterface(bytes4)":{"params":{"_interfaceId":"The ID of the interface."},"returns":{"_0":"Returns `true` if the interface is supported."}}},"title":"PluginSetup","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"implementation()":"5c60da1b","prepareInstallation(address,bytes)":"f10832f1","prepareUninstallation(address,(address,address[],bytes))":"9cb0a124","prepareUpdate(address,uint16,(address,address[],bytes))":"a8a9c29e","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"prepareInstallation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"plugin\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"helpers\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"enum PermissionLib.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"where\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"condition\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"permissionId\",\"type\":\"bytes32\"}],\"internalType\":\"struct PermissionLib.MultiTargetPermission[]\",\"name\":\"permissions\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IPluginSetup.PreparedSetupData\",\"name\":\"preparedSetupData\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"plugin\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"currentHelpers\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IPluginSetup.SetupPayload\",\"name\":\"_payload\",\"type\":\"tuple\"}],\"name\":\"prepareUninstallation\",\"outputs\":[{\"components\":[{\"internalType\":\"enum PermissionLib.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"where\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"condition\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"permissionId\",\"type\":\"bytes32\"}],\"internalType\":\"struct PermissionLib.MultiTargetPermission[]\",\"name\":\"permissions\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_currentBuild\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"plugin\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"currentHelpers\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IPluginSetup.SetupPayload\",\"name\":\"_payload\",\"type\":\"tuple\"}],\"name\":\"prepareUpdate\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"initData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"helpers\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"enum PermissionLib.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"where\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"condition\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"permissionId\",\"type\":\"bytes32\"}],\"internalType\":\"struct PermissionLib.MultiTargetPermission[]\",\"name\":\"permissions\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IPluginSetup.PreparedSetupData\",\"name\":\"preparedSetupData\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Aragon Association - 2022-2023\",\"kind\":\"dev\",\"methods\":{\"implementation()\":{\"details\":\"The implementation can be instantiated via the `new` keyword, cloned via the minimal clones pattern (see [ERC-1167](https://eips.ethereum.org/EIPS/eip-1167)), or proxied via the UUPS pattern (see [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822)).\",\"returns\":{\"_0\":\"The address of the plugin implementation contract.\"}},\"prepareInstallation(address,bytes)\":{\"params\":{\"_dao\":\"The address of the installing DAO.\",\"_data\":\"The bytes-encoded data containing the input parameters for the installation as specified in the plugin's build metadata JSON file.\"},\"returns\":{\"plugin\":\"The address of the `Plugin` contract being prepared for installation.\",\"preparedSetupData\":\"The deployed plugin's relevant data which consists of helpers and permissions.\"}},\"prepareUninstallation(address,(address,address[],bytes))\":{\"params\":{\"_dao\":\"The address of the uninstalling DAO.\",\"_payload\":\"The relevant data necessary for the `prepareUninstallation`. See above.\"},\"returns\":{\"permissions\":\"The array of multi-targeted permission operations to be applied by the `PluginSetupProcessor` to the uninstalling DAO.\"}},\"prepareUpdate(address,uint16,(address,address[],bytes))\":{\"params\":{\"_currentBuild\":\"The build number of the plugin to update from.\",\"_dao\":\"The address of the updating DAO.\",\"_payload\":\"The relevant data necessary for the `prepareUpdate`. See above.\"},\"returns\":{\"initData\":\"The initialization data to be passed to upgradeable contracts when the update is applied in the `PluginSetupProcessor`.\",\"preparedSetupData\":\"The deployed plugin's relevant data which consists of helpers and permissions.\"}},\"supportsInterface(bytes4)\":{\"params\":{\"_interfaceId\":\"The ID of the interface.\"},\"returns\":{\"_0\":\"Returns `true` if the interface is supported.\"}}},\"title\":\"PluginSetup\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"implementation()\":{\"notice\":\"Returns the plugin implementation address.\"},\"prepareInstallation(address,bytes)\":{\"notice\":\"Prepares the installation of a plugin.\"},\"prepareUninstallation(address,(address,address[],bytes))\":{\"notice\":\"Prepares the uninstallation of a plugin.\"},\"prepareUpdate(address,uint16,(address,address[],bytes))\":{\"notice\":\"Prepares the update of a plugin.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Checks if this or the parent contract supports an interface by its ID.\"}},\"notice\":\"An abstract contract that developers have to inherit from to write the setup of a plugin.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@aragon/osx/framework/plugin/setup/PluginSetup.sol\":\"PluginSetup\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@aragon/osx/core/dao/IDAO.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\n/// @title IDAO\\n/// @author Aragon Association - 2022-2023\\n/// @notice The interface required for DAOs within the Aragon App DAO framework.\\ninterface IDAO {\\n    /// @notice The action struct to be consumed by the DAO's `execute` function resulting in an external call.\\n    /// @param to The address to call.\\n    /// @param value The native token value to be sent with the call.\\n    /// @param data The bytes-encoded function selector and calldata for the call.\\n    struct Action {\\n        address to;\\n        uint256 value;\\n        bytes data;\\n    }\\n\\n    /// @notice Checks if an address has permission on a contract via a permission identifier and considers if `ANY_ADDRESS` was used in the granting process.\\n    /// @param _where The address of the contract.\\n    /// @param _who The address of a EOA or contract to give the permissions.\\n    /// @param _permissionId The permission identifier.\\n    /// @param _data The optional data passed to the `PermissionCondition` registered.\\n    /// @return Returns true if the address has permission, false if not.\\n    function hasPermission(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId,\\n        bytes memory _data\\n    ) external view returns (bool);\\n\\n    /// @notice Updates the DAO metadata (e.g., an IPFS hash).\\n    /// @param _metadata The IPFS hash of the new metadata object.\\n    function setMetadata(bytes calldata _metadata) external;\\n\\n    /// @notice Emitted when the DAO metadata is updated.\\n    /// @param metadata The IPFS hash of the new metadata object.\\n    event MetadataSet(bytes metadata);\\n\\n    /// @notice Executes a list of actions. If a zero allow-failure map is provided, a failing action reverts the entire execution. If a non-zero allow-failure map is provided, allowed actions can fail without the entire call being reverted.\\n    /// @param _callId The ID of the call. The definition of the value of `callId` is up to the calling contract and can be used, e.g., as a nonce.\\n    /// @param _actions The array of actions.\\n    /// @param _allowFailureMap A bitmap allowing execution to succeed, even if individual actions might revert. If the bit at index `i` is 1, the execution succeeds even if the `i`th action reverts. A failure map value of 0 requires every action to not revert.\\n    /// @return The array of results obtained from the executed actions in `bytes`.\\n    /// @return The resulting failure map containing the actions have actually failed.\\n    function execute(\\n        bytes32 _callId,\\n        Action[] memory _actions,\\n        uint256 _allowFailureMap\\n    ) external returns (bytes[] memory, uint256);\\n\\n    /// @notice Emitted when a proposal is executed.\\n    /// @param actor The address of the caller.\\n    /// @param callId The ID of the call.\\n    /// @param actions The array of actions executed.\\n    /// @param allowFailureMap The allow failure map encoding which actions are allowed to fail.\\n    /// @param failureMap The failure map encoding which actions have failed.\\n    /// @param execResults The array with the results of the executed actions.\\n    /// @dev The value of `callId` is defined by the component/contract calling the execute function. A `Plugin` implementation can use it, for example, as a nonce.\\n    event Executed(\\n        address indexed actor,\\n        bytes32 callId,\\n        Action[] actions,\\n        uint256 allowFailureMap,\\n        uint256 failureMap,\\n        bytes[] execResults\\n    );\\n\\n    /// @notice Emitted when a standard callback is registered.\\n    /// @param interfaceId The ID of the interface.\\n    /// @param callbackSelector The selector of the callback function.\\n    /// @param magicNumber The magic number to be registered for the callback function selector.\\n    event StandardCallbackRegistered(\\n        bytes4 interfaceId,\\n        bytes4 callbackSelector,\\n        bytes4 magicNumber\\n    );\\n\\n    /// @notice Deposits (native) tokens to the DAO contract with a reference string.\\n    /// @param _token The address of the token or address(0) in case of the native token.\\n    /// @param _amount The amount of tokens to deposit.\\n    /// @param _reference The reference describing the deposit reason.\\n    function deposit(address _token, uint256 _amount, string calldata _reference) external payable;\\n\\n    /// @notice Emitted when a token deposit has been made to the DAO.\\n    /// @param sender The address of the sender.\\n    /// @param token The address of the deposited token.\\n    /// @param amount The amount of tokens deposited.\\n    /// @param _reference The reference describing the deposit reason.\\n    event Deposited(\\n        address indexed sender,\\n        address indexed token,\\n        uint256 amount,\\n        string _reference\\n    );\\n\\n    /// @notice Emitted when a native token deposit has been made to the DAO.\\n    /// @dev This event is intended to be emitted in the `receive` function and is therefore bound by the gas limitations for `send`/`transfer` calls introduced by [ERC-2929](https://eips.ethereum.org/EIPS/eip-2929).\\n    /// @param sender The address of the sender.\\n    /// @param amount The amount of native tokens deposited.\\n    event NativeTokenDeposited(address sender, uint256 amount);\\n\\n    /// @notice Setter for the trusted forwarder verifying the meta transaction.\\n    /// @param _trustedForwarder The trusted forwarder address.\\n    function setTrustedForwarder(address _trustedForwarder) external;\\n\\n    /// @notice Getter for the trusted forwarder verifying the meta transaction.\\n    /// @return The trusted forwarder address.\\n    function getTrustedForwarder() external view returns (address);\\n\\n    /// @notice Emitted when a new TrustedForwarder is set on the DAO.\\n    /// @param forwarder the new forwarder address.\\n    event TrustedForwarderSet(address forwarder);\\n\\n    /// @notice Setter for the [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract.\\n    /// @param _signatureValidator The address of the signature validator.\\n    function setSignatureValidator(address _signatureValidator) external;\\n\\n    /// @notice Emitted when the signature validator address is updated.\\n    /// @param signatureValidator The address of the signature validator.\\n    event SignatureValidatorSet(address signatureValidator);\\n\\n    /// @notice Checks whether a signature is valid for the provided hash by forwarding the call to the set [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract.\\n    /// @param _hash The hash of the data to be signed.\\n    /// @param _signature The signature byte array associated with `_hash`.\\n    /// @return Returns the `bytes4` magic value `0x1626ba7e` if the signature is valid.\\n    function isValidSignature(bytes32 _hash, bytes memory _signature) external returns (bytes4);\\n\\n    /// @notice Registers an ERC standard having a callback by registering its [ERC-165](https://eips.ethereum.org/EIPS/eip-165) interface ID and callback function signature.\\n    /// @param _interfaceId The ID of the interface.\\n    /// @param _callbackSelector The selector of the callback function.\\n    /// @param _magicNumber The magic number to be registered for the function signature.\\n    function registerStandardCallback(\\n        bytes4 _interfaceId,\\n        bytes4 _callbackSelector,\\n        bytes4 _magicNumber\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3876d62c73312234c1e2ab4e75cdac2783a6688c3445a67a15b767cd98e01f80\",\"license\":\"AGPL-3.0-or-later\"},\"@aragon/osx/core/permission/PermissionLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\n/// @title PermissionLib\\n/// @author Aragon Association - 2021-2023\\n/// @notice A library containing objects for permission processing.\\nlibrary PermissionLib {\\n    /// @notice A constant expressing that no condition is applied to a permission.\\n    address public constant NO_CONDITION = address(0);\\n\\n    /// @notice The types of permission operations available in the `PermissionManager`.\\n    /// @param Grant The grant operation setting a permission without a condition.\\n    /// @param Revoke The revoke operation removing a permission (that was granted with or without a condition).\\n    /// @param GrantWithCondition The grant operation setting a permission with a condition.\\n    enum Operation {\\n        Grant,\\n        Revoke,\\n        GrantWithCondition\\n    }\\n\\n    /// @notice A struct containing the information for a permission to be applied on a single target contract without a condition.\\n    /// @param operation The permission operation type.\\n    /// @param who The address (EOA or contract) receiving the permission.\\n    /// @param permissionId The permission identifier.\\n    struct SingleTargetPermission {\\n        Operation operation;\\n        address who;\\n        bytes32 permissionId;\\n    }\\n\\n    /// @notice A struct containing the information for a permission to be applied on multiple target contracts, optionally, with a condition.\\n    /// @param operation The permission operation type.\\n    /// @param where The address of the target contract for which `who` receives permission.\\n    /// @param who The address (EOA or contract) receiving the permission.\\n    /// @param condition The `PermissionCondition` that will be asked for authorization on calls connected to the specified permission identifier.\\n    /// @param permissionId The permission identifier.\\n    struct MultiTargetPermission {\\n        Operation operation;\\n        address where;\\n        address who;\\n        address condition;\\n        bytes32 permissionId;\\n    }\\n}\\n\",\"keccak256\":\"0x9b27fa8990e0f1623055187b8ade9363a6c8a1f15aab900e3a6e5cb312545c02\",\"license\":\"AGPL-3.0-or-later\"},\"@aragon/osx/framework/plugin/setup/IPluginSetup.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\nimport {PermissionLib} from \\\"../../../core/permission/PermissionLib.sol\\\";\\nimport {IDAO} from \\\"../../../core/dao/IDAO.sol\\\";\\n\\n/// @title IPluginSetup\\n/// @author Aragon Association - 2022-2023\\n/// @notice The interface required for a plugin setup contract to be consumed by the `PluginSetupProcessor` for plugin installations, updates, and uninstallations.\\ninterface IPluginSetup {\\n    /// @notice The data associated with a prepared setup.\\n    /// @param helpers The address array of helpers (contracts or EOAs) associated with this plugin version after the installation or update.\\n    /// @param permissions The array of multi-targeted permission operations to be applied by the `PluginSetupProcessor` to the installing or updating DAO.\\n    struct PreparedSetupData {\\n        address[] helpers;\\n        PermissionLib.MultiTargetPermission[] permissions;\\n    }\\n\\n    /// @notice The payload for plugin updates and uninstallations containing the existing contracts as well as optional data to be consumed by the plugin setup.\\n    /// @param plugin The address of the `Plugin`.\\n    /// @param currentHelpers The address array of all current helpers (contracts or EOAs) associated with the plugin to update from.\\n    /// @param data The bytes-encoded data containing the input parameters for the preparation of update/uninstall as specified in the corresponding ABI on the version's metadata.\\n    struct SetupPayload {\\n        address plugin;\\n        address[] currentHelpers;\\n        bytes data;\\n    }\\n\\n    /// @notice Prepares the installation of a plugin.\\n    /// @param _dao The address of the installing DAO.\\n    /// @param _data The bytes-encoded data containing the input parameters for the installation as specified in the plugin's build metadata JSON file.\\n    /// @return plugin The address of the `Plugin` contract being prepared for installation.\\n    /// @return preparedSetupData The deployed plugin's relevant data which consists of helpers and permissions.\\n    function prepareInstallation(\\n        address _dao,\\n        bytes calldata _data\\n    ) external returns (address plugin, PreparedSetupData memory preparedSetupData);\\n\\n    /// @notice Prepares the update of a plugin.\\n    /// @param _dao The address of the updating DAO.\\n    /// @param _currentBuild The build number of the plugin to update from.\\n    /// @param _payload The relevant data necessary for the `prepareUpdate`. See above.\\n    /// @return initData The initialization data to be passed to upgradeable contracts when the update is applied in the `PluginSetupProcessor`.\\n    /// @return preparedSetupData The deployed plugin's relevant data which consists of helpers and permissions.\\n    function prepareUpdate(\\n        address _dao,\\n        uint16 _currentBuild,\\n        SetupPayload calldata _payload\\n    ) external returns (bytes memory initData, PreparedSetupData memory preparedSetupData);\\n\\n    /// @notice Prepares the uninstallation of a plugin.\\n    /// @param _dao The address of the uninstalling DAO.\\n    /// @param _payload The relevant data necessary for the `prepareUninstallation`. See above.\\n    /// @return permissions The array of multi-targeted permission operations to be applied by the `PluginSetupProcessor` to the uninstalling DAO.\\n    function prepareUninstallation(\\n        address _dao,\\n        SetupPayload calldata _payload\\n    ) external returns (PermissionLib.MultiTargetPermission[] memory permissions);\\n\\n    /// @notice Returns the plugin implementation address.\\n    /// @return The address of the plugin implementation contract.\\n    /// @dev The implementation can be instantiated via the `new` keyword, cloned via the minimal clones pattern (see [ERC-1167](https://eips.ethereum.org/EIPS/eip-1167)), or proxied via the UUPS pattern (see [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822)).\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x81d1e60154e672372318f6fccf337b6094bb8fe1192e2f755b8cc0d645ff5332\",\"license\":\"AGPL-3.0-or-later\"},\"@aragon/osx/framework/plugin/setup/PluginSetup.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {ERC165Checker} from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport {Clones} from \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\nimport {PermissionLib} from \\\"../../../core/permission/PermissionLib.sol\\\";\\nimport {createERC1967Proxy as createERC1967} from \\\"../../../utils/Proxy.sol\\\";\\nimport {IPluginSetup} from \\\"./IPluginSetup.sol\\\";\\n\\n/// @title PluginSetup\\n/// @author Aragon Association - 2022-2023\\n/// @notice An abstract contract that developers have to inherit from to write the setup of a plugin.\\nabstract contract PluginSetup is ERC165, IPluginSetup {\\n    /// @inheritdoc IPluginSetup\\n    function prepareUpdate(\\n        address _dao,\\n        uint16 _currentBuild,\\n        SetupPayload calldata _payload\\n    )\\n        external\\n        virtual\\n        override\\n        returns (bytes memory initData, PreparedSetupData memory preparedSetupData)\\n    {}\\n\\n    /// @notice A convenience function to create an [ERC-1967](https://eips.ethereum.org/EIPS/eip-1967) proxy contract pointing to an implementation and being associated to a DAO.\\n    /// @param _implementation The address of the implementation contract to which the proxy is pointing to.\\n    /// @param _data The data to initialize the storage of the proxy contract.\\n    /// @return The address of the created proxy contract.\\n    function createERC1967Proxy(\\n        address _implementation,\\n        bytes memory _data\\n    ) internal returns (address) {\\n        return createERC1967(_implementation, _data);\\n    }\\n\\n    /// @notice Checks if this or the parent contract supports an interface by its ID.\\n    /// @param _interfaceId The ID of the interface.\\n    /// @return Returns `true` if the interface is supported.\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\\n        return\\n            _interfaceId == type(IPluginSetup).interfaceId || super.supportsInterface(_interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x04ff3ec8a5b121ef3972dbb8140b7cf313f9ed514f8471841e3dcf5304ef6950\",\"license\":\"AGPL-3.0-or-later\"},\"@aragon/osx/utils/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\n\\n/// @notice Free function to create a [ERC-1967](https://eips.ethereum.org/EIPS/eip-1967) proxy contract based on the passed base contract address.\\n/// @param _logic The base contract address.\\n/// @param _data The constructor arguments for this contract.\\n/// @return The address of the proxy contract created.\\n/// @dev Initializes the upgradeable proxy with an initial implementation specified by _logic. If _data is non-empty, it\\u2019s used as data in a delegate call to _logic. This will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity constructor (see [OpenZeppelin ERC1967Proxy-constructor](https://docs.openzeppelin.com/contracts/4.x/api/proxy#ERC1967Proxy-constructor-address-bytes-)).\\nfunction createERC1967Proxy(address _logic, bytes memory _data) returns (address) {\\n    return address(new ERC1967Proxy(_logic, _data));\\n}\\n\",\"keccak256\":\"0x9d871292dfac2f42957e4d10eec56fd74dda0bd7803c01e849d2e9f5e2799fff\",\"license\":\"AGPL-3.0-or-later\"},\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x01f055f5c26ba25d7f83e9aa9ba877fbea4d0bf22227de046ea67494bc932999\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x5a08ad61f4e82b8a3323562661a86fb10b10190848073fdc13d4ac43710ffba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"implementation()":{"notice":"Returns the plugin implementation address."},"prepareInstallation(address,bytes)":{"notice":"Prepares the installation of a plugin."},"prepareUninstallation(address,(address,address[],bytes))":{"notice":"Prepares the uninstallation of a plugin."},"prepareUpdate(address,uint16,(address,address[],bytes))":{"notice":"Prepares the update of a plugin."},"supportsInterface(bytes4)":{"notice":"Checks if this or the parent contract supports an interface by its ID."}},"notice":"An abstract contract that developers have to inherit from to write the setup of a plugin.","version":1}}},"@openzeppelin/contracts/interfaces/IERC1967.sol":{"IERC1967":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"}],"devdoc":{"details":"ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC. _Available since v4.8.3._","events":{"AdminChanged(address,address)":{"details":"Emitted when the admin account has changed."},"BeaconUpgraded(address)":{"details":"Emitted when the beacon is changed."},"Upgraded(address)":{"details":"Emitted when the implementation is upgraded."}},"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC. _Available since v4.8.3._\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/IERC1967.sol\":\"IERC1967\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/interfaces/IERC4906.sol":{"IERC4906":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_fromTokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_toTokenId","type":"uint256"}],"name":"BatchMetadataUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"MetadataUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"BatchMetadataUpdate(uint256,uint256)":{"details":"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs."},"MetadataUpdate(uint256)":{"details":"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"title":"EIP-721 Metadata Update Extension","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"BatchMetadataUpdate(uint256,uint256)\":{\"details\":\"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"EIP-721 Metadata Update Extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/IERC4906.sol\":\"IERC4906\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0x2a9dadb806be80dd451821f1f1190eb9aa6f6edae85b185db29d60767cc0c5f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/interfaces/draft-IERC1822.sol":{"IERC1822Proxiable":{"abi":[{"inputs":[],"name":"proxiableUUID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.","kind":"dev","methods":{"proxiableUUID()":{"details":"Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"proxiableUUID()":"52d1902d"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified proxy whose upgrades are fully controlled by the current implementation.\",\"kind\":\"dev\",\"methods\":{\"proxiableUUID()\":{\"details\":\"Returns the storage slot that the proxiable contract assumes is being used to store the implementation address. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":\"IERC1822Proxiable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/proxy/Clones.sol":{"Clones":{"abi":[],"devdoc":{"details":"https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for deploying minimal proxy contracts, also known as \"clones\". > To simply and cheaply clone contract functionality in an immutable way, this standard specifies > a minimal bytecode implementation that delegates all calls to a known, fixed address. The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2` (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the deterministic method. _Available since v3.4._","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204540f549185a43642355d7be27d9ec47951bde4c51cce2f00b6cae022c94ebab64736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GASLIMIT BLOCKHASH CREATE2 0x49 XOR GAS NUMBER PUSH5 0x2355D7BE27 0xD9 0xEC SELFBALANCE SWAP6 SHL 0xDE 0x4C MLOAD 0xCC 0xE2 CREATE SIGNEXTEND PUSH13 0xAE022C94EBAB64736F6C634300 ADDMOD SGT STOP CALLER ","sourceMap":"755:3275:14:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212204540f549185a43642355d7be27d9ec47951bde4c51cce2f00b6cae022c94ebab64736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GASLIMIT BLOCKHASH CREATE2 0x49 XOR GAS NUMBER PUSH5 0x2355D7BE27 0xD9 0xEC SELFBALANCE SWAP6 SHL 0xDE 0x4C MLOAD 0xCC 0xE2 CREATE SIGNEXTEND PUSH13 0xAE022C94EBAB64736F6C634300 ADDMOD SGT STOP CALLER ","sourceMap":"755:3275:14:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"clone(address)":"infinite","cloneDeterministic(address,bytes32)":"infinite","predictDeterministicAddress(address,bytes32)":"infinite","predictDeterministicAddress(address,bytes32,address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for deploying minimal proxy contracts, also known as \\\"clones\\\". > To simply and cheaply clone contract functionality in an immutable way, this standard specifies > a minimal bytecode implementation that delegates all calls to a known, fixed address. The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2` (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the deterministic method. _Available since v3.4._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/proxy/Clones.sol\":\"Clones\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x01f055f5c26ba25d7f83e9aa9ba877fbea4d0bf22227de046ea67494bc932999\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol":{"ERC1967Proxy":{"abi":[{"inputs":[{"internalType":"address","name":"_logic","type":"address"},{"internalType":"bytes","name":"_data","type":"bytes"}],"stateMutability":"payable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"},{"stateMutability":"payable","type":"fallback"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"details":"This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an implementation address that can be changed. This address is stored in storage in the location specified by https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the implementation behind the proxy.","events":{"AdminChanged(address,address)":{"details":"Emitted when the admin account has changed."},"BeaconUpgraded(address)":{"details":"Emitted when the beacon is changed."},"Upgraded(address)":{"details":"Emitted when the implementation is upgraded."}},"kind":"dev","methods":{"constructor":{"details":"Initializes the upgradeable proxy with an initial implementation specified by `_logic`. If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity constructor."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_711":{"entryPoint":null,"id":711,"parameterSlots":2,"returnSlots":0},"@_revert_2663":{"entryPoint":765,"id":2663,"parameterSlots":2,"returnSlots":0},"@_setImplementation_778":{"entryPoint":254,"id":778,"parameterSlots":1,"returnSlots":0},"@_upgradeToAndCall_823":{"entryPoint":62,"id":823,"parameterSlots":3,"returnSlots":0},"@_upgradeTo_793":{"entryPoint":118,"id":793,"parameterSlots":1,"returnSlots":0},"@functionDelegateCall_2551":{"entryPoint":203,"id":2551,"parameterSlots":2,"returnSlots":1},"@functionDelegateCall_2580":{"entryPoint":451,"id":2580,"parameterSlots":3,"returnSlots":1},"@getAddressSlot_2792":{"entryPoint":626,"id":2792,"parameterSlots":1,"returnSlots":1},"@isContract_2352":{"entryPoint":591,"id":2352,"parameterSlots":1,"returnSlots":1},"@verifyCallResultFromTarget_2619":{"entryPoint":636,"id":2619,"parameterSlots":4,"returnSlots":1},"abi_decode_available_length_t_bytes_memory_ptr_fromMemory":{"entryPoint":1200,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address_fromMemory":{"entryPoint":938,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_memory_ptr_fromMemory":{"entryPoint":1266,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_bytes_memory_ptr_fromMemory":{"entryPoint":1312,"id":null,"parameterSlots":2,"returnSlots":2},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":1589,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":1780,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65_to_t_string_memory_ptr_fromStack":{"entryPoint":1500,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack":{"entryPoint":1702,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":1638,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":1837,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":1535,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":1737,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_memory":{"entryPoint":1082,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":845,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_bytes_memory_ptr":{"entryPoint":1109,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":1567,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":1769,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":1578,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":1404,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":897,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":865,"id":null,"parameterSlots":1,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":1158,"id":null,"parameterSlots":3,"returnSlots":0},"finalize_allocation":{"entryPoint":1033,"id":null,"parameterSlots":2,"returnSlots":0},"panic_error_0x41":{"entryPoint":986,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":959,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":964,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":860,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":855,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":969,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65":{"entryPoint":1421,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad":{"entryPoint":1661,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":915,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:7788:36","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:36","statements":[{"nodeType":"YulAssignment","src":"57:19:36","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:36","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:36"},"nodeType":"YulFunctionCall","src":"67:9:36"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:36"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:36","type":""}],"src":"7:75:36"},{"body":{"nodeType":"YulBlock","src":"177:28:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:36"},"nodeType":"YulFunctionCall","src":"187:12:36"},"nodeType":"YulExpressionStatement","src":"187:12:36"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:36"},{"body":{"nodeType":"YulBlock","src":"300:28:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:36"},"nodeType":"YulFunctionCall","src":"310:12:36"},"nodeType":"YulExpressionStatement","src":"310:12:36"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:36"},{"body":{"nodeType":"YulBlock","src":"379:81:36","statements":[{"nodeType":"YulAssignment","src":"389:65:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"404:5:36"},{"kind":"number","nodeType":"YulLiteral","src":"411:42:36","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"400:3:36"},"nodeType":"YulFunctionCall","src":"400:54:36"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:36"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:36","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:36","type":""}],"src":"334:126:36"},{"body":{"nodeType":"YulBlock","src":"511:51:36","statements":[{"nodeType":"YulAssignment","src":"521:35:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"550:5:36"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"532:17:36"},"nodeType":"YulFunctionCall","src":"532:24:36"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"521:7:36"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"493:5:36","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"503:7:36","type":""}],"src":"466:96:36"},{"body":{"nodeType":"YulBlock","src":"611:79:36","statements":[{"body":{"nodeType":"YulBlock","src":"668:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"677:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"680:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"670:6:36"},"nodeType":"YulFunctionCall","src":"670:12:36"},"nodeType":"YulExpressionStatement","src":"670:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"634:5:36"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"659:5:36"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"641:17:36"},"nodeType":"YulFunctionCall","src":"641:24:36"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"631:2:36"},"nodeType":"YulFunctionCall","src":"631:35:36"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"624:6:36"},"nodeType":"YulFunctionCall","src":"624:43:36"},"nodeType":"YulIf","src":"621:63:36"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"604:5:36","type":""}],"src":"568:122:36"},{"body":{"nodeType":"YulBlock","src":"759:80:36","statements":[{"nodeType":"YulAssignment","src":"769:22:36","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"784:6:36"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"778:5:36"},"nodeType":"YulFunctionCall","src":"778:13:36"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"769:5:36"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"827:5:36"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"800:26:36"},"nodeType":"YulFunctionCall","src":"800:33:36"},"nodeType":"YulExpressionStatement","src":"800:33:36"}]},"name":"abi_decode_t_address_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"737:6:36","type":""},{"name":"end","nodeType":"YulTypedName","src":"745:3:36","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"753:5:36","type":""}],"src":"696:143:36"},{"body":{"nodeType":"YulBlock","src":"934:28:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"951:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"954:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"944:6:36"},"nodeType":"YulFunctionCall","src":"944:12:36"},"nodeType":"YulExpressionStatement","src":"944:12:36"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"845:117:36"},{"body":{"nodeType":"YulBlock","src":"1057:28:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1074:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1077:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1067:6:36"},"nodeType":"YulFunctionCall","src":"1067:12:36"},"nodeType":"YulExpressionStatement","src":"1067:12:36"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"968:117:36"},{"body":{"nodeType":"YulBlock","src":"1139:54:36","statements":[{"nodeType":"YulAssignment","src":"1149:38:36","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1167:5:36"},{"kind":"number","nodeType":"YulLiteral","src":"1174:2:36","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1163:3:36"},"nodeType":"YulFunctionCall","src":"1163:14:36"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1183:2:36","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1179:3:36"},"nodeType":"YulFunctionCall","src":"1179:7:36"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1159:3:36"},"nodeType":"YulFunctionCall","src":"1159:28:36"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"1149:6:36"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1122:5:36","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"1132:6:36","type":""}],"src":"1091:102:36"},{"body":{"nodeType":"YulBlock","src":"1227:152:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1244:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1247:77:36","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1237:6:36"},"nodeType":"YulFunctionCall","src":"1237:88:36"},"nodeType":"YulExpressionStatement","src":"1237:88:36"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1341:1:36","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"1344:4:36","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1334:6:36"},"nodeType":"YulFunctionCall","src":"1334:15:36"},"nodeType":"YulExpressionStatement","src":"1334:15:36"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1365:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"1368:4:36","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"1358:6:36"},"nodeType":"YulFunctionCall","src":"1358:15:36"},"nodeType":"YulExpressionStatement","src":"1358:15:36"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"1199:180:36"},{"body":{"nodeType":"YulBlock","src":"1428:238:36","statements":[{"nodeType":"YulVariableDeclaration","src":"1438:58:36","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1460:6:36"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"1490:4:36"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"1468:21:36"},"nodeType":"YulFunctionCall","src":"1468:27:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1456:3:36"},"nodeType":"YulFunctionCall","src":"1456:40:36"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"1442:10:36","type":""}]},{"body":{"nodeType":"YulBlock","src":"1607:22:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1609:16:36"},"nodeType":"YulFunctionCall","src":"1609:18:36"},"nodeType":"YulExpressionStatement","src":"1609:18:36"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1550:10:36"},{"kind":"number","nodeType":"YulLiteral","src":"1562:18:36","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1547:2:36"},"nodeType":"YulFunctionCall","src":"1547:34:36"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1586:10:36"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1598:6:36"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1583:2:36"},"nodeType":"YulFunctionCall","src":"1583:22:36"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1544:2:36"},"nodeType":"YulFunctionCall","src":"1544:62:36"},"nodeType":"YulIf","src":"1541:88:36"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1645:2:36","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1649:10:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1638:6:36"},"nodeType":"YulFunctionCall","src":"1638:22:36"},"nodeType":"YulExpressionStatement","src":"1638:22:36"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"1414:6:36","type":""},{"name":"size","nodeType":"YulTypedName","src":"1422:4:36","type":""}],"src":"1385:281:36"},{"body":{"nodeType":"YulBlock","src":"1713:88:36","statements":[{"nodeType":"YulAssignment","src":"1723:30:36","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"1733:18:36"},"nodeType":"YulFunctionCall","src":"1733:20:36"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1723:6:36"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1782:6:36"},{"name":"size","nodeType":"YulIdentifier","src":"1790:4:36"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"1762:19:36"},"nodeType":"YulFunctionCall","src":"1762:33:36"},"nodeType":"YulExpressionStatement","src":"1762:33:36"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"1697:4:36","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1706:6:36","type":""}],"src":"1672:129:36"},{"body":{"nodeType":"YulBlock","src":"1873:241:36","statements":[{"body":{"nodeType":"YulBlock","src":"1978:22:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1980:16:36"},"nodeType":"YulFunctionCall","src":"1980:18:36"},"nodeType":"YulExpressionStatement","src":"1980:18:36"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1950:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"1958:18:36","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1947:2:36"},"nodeType":"YulFunctionCall","src":"1947:30:36"},"nodeType":"YulIf","src":"1944:56:36"},{"nodeType":"YulAssignment","src":"2010:37:36","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2040:6:36"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"2018:21:36"},"nodeType":"YulFunctionCall","src":"2018:29:36"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"2010:4:36"}]},{"nodeType":"YulAssignment","src":"2084:23:36","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"2096:4:36"},{"kind":"number","nodeType":"YulLiteral","src":"2102:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2092:3:36"},"nodeType":"YulFunctionCall","src":"2092:15:36"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"2084:4:36"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"1857:6:36","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"1868:4:36","type":""}],"src":"1807:307:36"},{"body":{"nodeType":"YulBlock","src":"2182:184:36","statements":[{"nodeType":"YulVariableDeclaration","src":"2192:10:36","value":{"kind":"number","nodeType":"YulLiteral","src":"2201:1:36","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"2196:1:36","type":""}]},{"body":{"nodeType":"YulBlock","src":"2261:63:36","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2286:3:36"},{"name":"i","nodeType":"YulIdentifier","src":"2291:1:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2282:3:36"},"nodeType":"YulFunctionCall","src":"2282:11:36"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2305:3:36"},{"name":"i","nodeType":"YulIdentifier","src":"2310:1:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2301:3:36"},"nodeType":"YulFunctionCall","src":"2301:11:36"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2295:5:36"},"nodeType":"YulFunctionCall","src":"2295:18:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2275:6:36"},"nodeType":"YulFunctionCall","src":"2275:39:36"},"nodeType":"YulExpressionStatement","src":"2275:39:36"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2222:1:36"},{"name":"length","nodeType":"YulIdentifier","src":"2225:6:36"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2219:2:36"},"nodeType":"YulFunctionCall","src":"2219:13:36"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2233:19:36","statements":[{"nodeType":"YulAssignment","src":"2235:15:36","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"2244:1:36"},{"kind":"number","nodeType":"YulLiteral","src":"2247:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2240:3:36"},"nodeType":"YulFunctionCall","src":"2240:10:36"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"2235:1:36"}]}]},"pre":{"nodeType":"YulBlock","src":"2215:3:36","statements":[]},"src":"2211:113:36"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2344:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"2349:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2340:3:36"},"nodeType":"YulFunctionCall","src":"2340:16:36"},{"kind":"number","nodeType":"YulLiteral","src":"2358:1:36","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2333:6:36"},"nodeType":"YulFunctionCall","src":"2333:27:36"},"nodeType":"YulExpressionStatement","src":"2333:27:36"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"2164:3:36","type":""},{"name":"dst","nodeType":"YulTypedName","src":"2169:3:36","type":""},{"name":"length","nodeType":"YulTypedName","src":"2174:6:36","type":""}],"src":"2120:246:36"},{"body":{"nodeType":"YulBlock","src":"2466:338:36","statements":[{"nodeType":"YulAssignment","src":"2476:74:36","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2542:6:36"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"2501:40:36"},"nodeType":"YulFunctionCall","src":"2501:48:36"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"2485:15:36"},"nodeType":"YulFunctionCall","src":"2485:65:36"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2476:5:36"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2566:5:36"},{"name":"length","nodeType":"YulIdentifier","src":"2573:6:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2559:6:36"},"nodeType":"YulFunctionCall","src":"2559:21:36"},"nodeType":"YulExpressionStatement","src":"2559:21:36"},{"nodeType":"YulVariableDeclaration","src":"2589:27:36","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2604:5:36"},{"kind":"number","nodeType":"YulLiteral","src":"2611:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2600:3:36"},"nodeType":"YulFunctionCall","src":"2600:16:36"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"2593:3:36","type":""}]},{"body":{"nodeType":"YulBlock","src":"2654:83:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"2656:77:36"},"nodeType":"YulFunctionCall","src":"2656:79:36"},"nodeType":"YulExpressionStatement","src":"2656:79:36"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2635:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"2640:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2631:3:36"},"nodeType":"YulFunctionCall","src":"2631:16:36"},{"name":"end","nodeType":"YulIdentifier","src":"2649:3:36"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2628:2:36"},"nodeType":"YulFunctionCall","src":"2628:25:36"},"nodeType":"YulIf","src":"2625:112:36"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2781:3:36"},{"name":"dst","nodeType":"YulIdentifier","src":"2786:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"2791:6:36"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"2746:34:36"},"nodeType":"YulFunctionCall","src":"2746:52:36"},"nodeType":"YulExpressionStatement","src":"2746:52:36"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"2439:3:36","type":""},{"name":"length","nodeType":"YulTypedName","src":"2444:6:36","type":""},{"name":"end","nodeType":"YulTypedName","src":"2452:3:36","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2460:5:36","type":""}],"src":"2372:432:36"},{"body":{"nodeType":"YulBlock","src":"2895:281:36","statements":[{"body":{"nodeType":"YulBlock","src":"2944:83:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"2946:77:36"},"nodeType":"YulFunctionCall","src":"2946:79:36"},"nodeType":"YulExpressionStatement","src":"2946:79:36"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2923:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"2931:4:36","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2919:3:36"},"nodeType":"YulFunctionCall","src":"2919:17:36"},{"name":"end","nodeType":"YulIdentifier","src":"2938:3:36"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2915:3:36"},"nodeType":"YulFunctionCall","src":"2915:27:36"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2908:6:36"},"nodeType":"YulFunctionCall","src":"2908:35:36"},"nodeType":"YulIf","src":"2905:122:36"},{"nodeType":"YulVariableDeclaration","src":"3036:27:36","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3056:6:36"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3050:5:36"},"nodeType":"YulFunctionCall","src":"3050:13:36"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"3040:6:36","type":""}]},{"nodeType":"YulAssignment","src":"3072:98:36","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3143:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"3151:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3139:3:36"},"nodeType":"YulFunctionCall","src":"3139:17:36"},{"name":"length","nodeType":"YulIdentifier","src":"3158:6:36"},{"name":"end","nodeType":"YulIdentifier","src":"3166:3:36"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"3081:57:36"},"nodeType":"YulFunctionCall","src":"3081:89:36"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"3072:5:36"}]}]},"name":"abi_decode_t_bytes_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2873:6:36","type":""},{"name":"end","nodeType":"YulTypedName","src":"2881:3:36","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2889:5:36","type":""}],"src":"2823:353:36"},{"body":{"nodeType":"YulBlock","src":"3285:575:36","statements":[{"body":{"nodeType":"YulBlock","src":"3331:83:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3333:77:36"},"nodeType":"YulFunctionCall","src":"3333:79:36"},"nodeType":"YulExpressionStatement","src":"3333:79:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3306:7:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"3315:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3302:3:36"},"nodeType":"YulFunctionCall","src":"3302:23:36"},{"kind":"number","nodeType":"YulLiteral","src":"3327:2:36","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3298:3:36"},"nodeType":"YulFunctionCall","src":"3298:32:36"},"nodeType":"YulIf","src":"3295:119:36"},{"nodeType":"YulBlock","src":"3424:128:36","statements":[{"nodeType":"YulVariableDeclaration","src":"3439:15:36","value":{"kind":"number","nodeType":"YulLiteral","src":"3453:1:36","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3443:6:36","type":""}]},{"nodeType":"YulAssignment","src":"3468:74:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3514:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"3525:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3510:3:36"},"nodeType":"YulFunctionCall","src":"3510:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3534:7:36"}],"functionName":{"name":"abi_decode_t_address_fromMemory","nodeType":"YulIdentifier","src":"3478:31:36"},"nodeType":"YulFunctionCall","src":"3478:64:36"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3468:6:36"}]}]},{"nodeType":"YulBlock","src":"3562:291:36","statements":[{"nodeType":"YulVariableDeclaration","src":"3577:39:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3601:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"3612:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3597:3:36"},"nodeType":"YulFunctionCall","src":"3597:18:36"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3591:5:36"},"nodeType":"YulFunctionCall","src":"3591:25:36"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3581:6:36","type":""}]},{"body":{"nodeType":"YulBlock","src":"3663:83:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"3665:77:36"},"nodeType":"YulFunctionCall","src":"3665:79:36"},"nodeType":"YulExpressionStatement","src":"3665:79:36"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3635:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"3643:18:36","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3632:2:36"},"nodeType":"YulFunctionCall","src":"3632:30:36"},"nodeType":"YulIf","src":"3629:117:36"},{"nodeType":"YulAssignment","src":"3760:83:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3815:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"3826:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3811:3:36"},"nodeType":"YulFunctionCall","src":"3811:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3835:7:36"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"3770:40:36"},"nodeType":"YulFunctionCall","src":"3770:73:36"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3760:6:36"}]}]}]},"name":"abi_decode_tuple_t_addresst_bytes_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3247:9:36","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3258:7:36","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3270:6:36","type":""},{"name":"value1","nodeType":"YulTypedName","src":"3278:6:36","type":""}],"src":"3182:678:36"},{"body":{"nodeType":"YulBlock","src":"3962:73:36","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3979:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"3984:6:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3972:6:36"},"nodeType":"YulFunctionCall","src":"3972:19:36"},"nodeType":"YulExpressionStatement","src":"3972:19:36"},{"nodeType":"YulAssignment","src":"4000:29:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4019:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"4024:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4015:3:36"},"nodeType":"YulFunctionCall","src":"4015:14:36"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"4000:11:36"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"3934:3:36","type":""},{"name":"length","nodeType":"YulTypedName","src":"3939:6:36","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"3950:11:36","type":""}],"src":"3866:169:36"},{"body":{"nodeType":"YulBlock","src":"4147:126:36","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4169:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"4177:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4165:3:36"},"nodeType":"YulFunctionCall","src":"4165:14:36"},{"hexValue":"455243313936373a206e657720696d706c656d656e746174696f6e206973206e","kind":"string","nodeType":"YulLiteral","src":"4181:34:36","type":"","value":"ERC1967: new implementation is n"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4158:6:36"},"nodeType":"YulFunctionCall","src":"4158:58:36"},"nodeType":"YulExpressionStatement","src":"4158:58:36"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"4237:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"4245:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4233:3:36"},"nodeType":"YulFunctionCall","src":"4233:15:36"},{"hexValue":"6f74206120636f6e7472616374","kind":"string","nodeType":"YulLiteral","src":"4250:15:36","type":"","value":"ot a contract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4226:6:36"},"nodeType":"YulFunctionCall","src":"4226:40:36"},"nodeType":"YulExpressionStatement","src":"4226:40:36"}]},"name":"store_literal_in_memory_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"4139:6:36","type":""}],"src":"4041:232:36"},{"body":{"nodeType":"YulBlock","src":"4425:220:36","statements":[{"nodeType":"YulAssignment","src":"4435:74:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4501:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"4506:2:36","type":"","value":"45"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"4442:58:36"},"nodeType":"YulFunctionCall","src":"4442:67:36"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"4435:3:36"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4607:3:36"}],"functionName":{"name":"store_literal_in_memory_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65","nodeType":"YulIdentifier","src":"4518:88:36"},"nodeType":"YulFunctionCall","src":"4518:93:36"},"nodeType":"YulExpressionStatement","src":"4518:93:36"},{"nodeType":"YulAssignment","src":"4620:19:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4631:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"4636:2:36","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4627:3:36"},"nodeType":"YulFunctionCall","src":"4627:12:36"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"4620:3:36"}]}]},"name":"abi_encode_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"4413:3:36","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"4421:3:36","type":""}],"src":"4279:366:36"},{"body":{"nodeType":"YulBlock","src":"4822:248:36","statements":[{"nodeType":"YulAssignment","src":"4832:26:36","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4844:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"4855:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4840:3:36"},"nodeType":"YulFunctionCall","src":"4840:18:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4832:4:36"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4879:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"4890:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4875:3:36"},"nodeType":"YulFunctionCall","src":"4875:17:36"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"4898:4:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"4904:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4894:3:36"},"nodeType":"YulFunctionCall","src":"4894:20:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4868:6:36"},"nodeType":"YulFunctionCall","src":"4868:47:36"},"nodeType":"YulExpressionStatement","src":"4868:47:36"},{"nodeType":"YulAssignment","src":"4924:139:36","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"5058:4:36"}],"functionName":{"name":"abi_encode_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"4932:124:36"},"nodeType":"YulFunctionCall","src":"4932:131:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4924:4:36"}]}]},"name":"abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4802:9:36","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4817:4:36","type":""}],"src":"4651:419:36"},{"body":{"nodeType":"YulBlock","src":"5134:40:36","statements":[{"nodeType":"YulAssignment","src":"5145:22:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5161:5:36"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5155:5:36"},"nodeType":"YulFunctionCall","src":"5155:12:36"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"5145:6:36"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5117:5:36","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"5127:6:36","type":""}],"src":"5076:98:36"},{"body":{"nodeType":"YulBlock","src":"5293:34:36","statements":[{"nodeType":"YulAssignment","src":"5303:18:36","value":{"name":"pos","nodeType":"YulIdentifier","src":"5318:3:36"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"5303:11:36"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"5265:3:36","type":""},{"name":"length","nodeType":"YulTypedName","src":"5270:6:36","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"5281:11:36","type":""}],"src":"5180:147:36"},{"body":{"nodeType":"YulBlock","src":"5441:278:36","statements":[{"nodeType":"YulVariableDeclaration","src":"5451:52:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5497:5:36"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"5465:31:36"},"nodeType":"YulFunctionCall","src":"5465:38:36"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"5455:6:36","type":""}]},{"nodeType":"YulAssignment","src":"5512:95:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5595:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"5600:6:36"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"5519:75:36"},"nodeType":"YulFunctionCall","src":"5519:88:36"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"5512:3:36"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5655:5:36"},{"kind":"number","nodeType":"YulLiteral","src":"5662:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5651:3:36"},"nodeType":"YulFunctionCall","src":"5651:16:36"},{"name":"pos","nodeType":"YulIdentifier","src":"5669:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"5674:6:36"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"5616:34:36"},"nodeType":"YulFunctionCall","src":"5616:65:36"},"nodeType":"YulExpressionStatement","src":"5616:65:36"},{"nodeType":"YulAssignment","src":"5690:23:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5701:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"5706:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5697:3:36"},"nodeType":"YulFunctionCall","src":"5697:16:36"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"5690:3:36"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5422:5:36","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5429:3:36","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"5437:3:36","type":""}],"src":"5333:386:36"},{"body":{"nodeType":"YulBlock","src":"5859:137:36","statements":[{"nodeType":"YulAssignment","src":"5870:100:36","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5957:6:36"},{"name":"pos","nodeType":"YulIdentifier","src":"5966:3:36"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"5877:79:36"},"nodeType":"YulFunctionCall","src":"5877:93:36"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"5870:3:36"}]},{"nodeType":"YulAssignment","src":"5980:10:36","value":{"name":"pos","nodeType":"YulIdentifier","src":"5987:3:36"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"5980:3:36"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"5838:3:36","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5844:6:36","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"5855:3:36","type":""}],"src":"5725:271:36"},{"body":{"nodeType":"YulBlock","src":"6108:73:36","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"6130:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"6138:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6126:3:36"},"nodeType":"YulFunctionCall","src":"6126:14:36"},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","kind":"string","nodeType":"YulLiteral","src":"6142:31:36","type":"","value":"Address: call to non-contract"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6119:6:36"},"nodeType":"YulFunctionCall","src":"6119:55:36"},"nodeType":"YulExpressionStatement","src":"6119:55:36"}]},"name":"store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"6100:6:36","type":""}],"src":"6002:179:36"},{"body":{"nodeType":"YulBlock","src":"6333:220:36","statements":[{"nodeType":"YulAssignment","src":"6343:74:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6409:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"6414:2:36","type":"","value":"29"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"6350:58:36"},"nodeType":"YulFunctionCall","src":"6350:67:36"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"6343:3:36"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6515:3:36"}],"functionName":{"name":"store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","nodeType":"YulIdentifier","src":"6426:88:36"},"nodeType":"YulFunctionCall","src":"6426:93:36"},"nodeType":"YulExpressionStatement","src":"6426:93:36"},{"nodeType":"YulAssignment","src":"6528:19:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6539:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"6544:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6535:3:36"},"nodeType":"YulFunctionCall","src":"6535:12:36"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"6528:3:36"}]}]},"name":"abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"6321:3:36","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"6329:3:36","type":""}],"src":"6187:366:36"},{"body":{"nodeType":"YulBlock","src":"6730:248:36","statements":[{"nodeType":"YulAssignment","src":"6740:26:36","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6752:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"6763:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6748:3:36"},"nodeType":"YulFunctionCall","src":"6748:18:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6740:4:36"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6787:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"6798:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6783:3:36"},"nodeType":"YulFunctionCall","src":"6783:17:36"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"6806:4:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"6812:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6802:3:36"},"nodeType":"YulFunctionCall","src":"6802:20:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"6776:6:36"},"nodeType":"YulFunctionCall","src":"6776:47:36"},"nodeType":"YulExpressionStatement","src":"6776:47:36"},{"nodeType":"YulAssignment","src":"6832:139:36","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"6966:4:36"}],"functionName":{"name":"abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"6840:124:36"},"nodeType":"YulFunctionCall","src":"6840:131:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6832:4:36"}]}]},"name":"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6710:9:36","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6725:4:36","type":""}],"src":"6559:419:36"},{"body":{"nodeType":"YulBlock","src":"7043:40:36","statements":[{"nodeType":"YulAssignment","src":"7054:22:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7070:5:36"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7064:5:36"},"nodeType":"YulFunctionCall","src":"7064:12:36"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"7054:6:36"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7026:5:36","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"7036:6:36","type":""}],"src":"6984:99:36"},{"body":{"nodeType":"YulBlock","src":"7181:285:36","statements":[{"nodeType":"YulVariableDeclaration","src":"7191:53:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7238:5:36"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"7205:32:36"},"nodeType":"YulFunctionCall","src":"7205:39:36"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"7195:6:36","type":""}]},{"nodeType":"YulAssignment","src":"7253:78:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7319:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"7324:6:36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7260:58:36"},"nodeType":"YulFunctionCall","src":"7260:71:36"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7253:3:36"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7379:5:36"},{"kind":"number","nodeType":"YulLiteral","src":"7386:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7375:3:36"},"nodeType":"YulFunctionCall","src":"7375:16:36"},{"name":"pos","nodeType":"YulIdentifier","src":"7393:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"7398:6:36"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"7340:34:36"},"nodeType":"YulFunctionCall","src":"7340:65:36"},"nodeType":"YulExpressionStatement","src":"7340:65:36"},{"nodeType":"YulAssignment","src":"7414:46:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7425:3:36"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7452:6:36"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"7430:21:36"},"nodeType":"YulFunctionCall","src":"7430:29:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7421:3:36"},"nodeType":"YulFunctionCall","src":"7421:39:36"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7414:3:36"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7162:5:36","type":""},{"name":"pos","nodeType":"YulTypedName","src":"7169:3:36","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7177:3:36","type":""}],"src":"7089:377:36"},{"body":{"nodeType":"YulBlock","src":"7590:195:36","statements":[{"nodeType":"YulAssignment","src":"7600:26:36","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7612:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"7623:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7608:3:36"},"nodeType":"YulFunctionCall","src":"7608:18:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7600:4:36"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"7647:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"7658:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7643:3:36"},"nodeType":"YulFunctionCall","src":"7643:17:36"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"7666:4:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"7672:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"7662:3:36"},"nodeType":"YulFunctionCall","src":"7662:20:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7636:6:36"},"nodeType":"YulFunctionCall","src":"7636:47:36"},"nodeType":"YulExpressionStatement","src":"7636:47:36"},{"nodeType":"YulAssignment","src":"7692:86:36","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"7764:6:36"},{"name":"tail","nodeType":"YulIdentifier","src":"7773:4:36"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7700:63:36"},"nodeType":"YulFunctionCall","src":"7700:78:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"7692:4:36"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"7562:9:36","type":""},{"name":"value0","nodeType":"YulTypedName","src":"7574:6:36","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"7585:4:36","type":""}],"src":"7472:313:36"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr_fromMemory(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_memory_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_addresst_bytes_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_bytes_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function store_literal_in_memory_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC1967: new implementation is n\")\n\n        mstore(add(memPtr, 32), \"ot a contract\")\n\n    }\n\n    function abi_encode_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 45)\n        store_literal_in_memory_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_972b7028e8de0bff0d553b3264eba2312ec98a552add05e58853b313f9f4ac65_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value0) -> end {\n\n        pos := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad(memPtr) {\n\n        mstore(add(memPtr, 0), \"Address: call to non-contract\")\n\n    }\n\n    function abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 29)\n        store_literal_in_memory_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n}\n","id":36,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"608060405260405161087938038061087983398181016040528101906100259190610520565b6100378282600061003e60201b60201c565b505061074f565b61004d8361007660201b60201c565b60008251118061005a5750805b156100715761006f83836100cb60201b60201c565b505b505050565b610085816100fe60201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b60606100f68383604051806060016040528060278152602001610852602791396101c360201b60201c565b905092915050565b61010d8161024f60201b60201c565b61014c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610143906105ff565b60405180910390fd5b8061017f7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61027260201b60201c565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516101ed9190610666565b600060405180830381855af49150503d8060008114610228576040519150601f19603f3d011682016040523d82523d6000602084013e61022d565b606091505b50915091506102448683838761027c60201b60201c565b925050509392505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000819050919050565b606083156102e45760008351036102dc5761029c8561024f60201b60201c565b6102db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d2906106c9565b60405180910390fd5b5b8290506102f5565b6102f483836102fd60201b60201c565b5b949350505050565b6000825111156103105781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610344919061072d565b60405180910390fd5b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061038c82610361565b9050919050565b61039c81610381565b81146103a757600080fd5b50565b6000815190506103b981610393565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610412826103c9565b810181811067ffffffffffffffff82111715610431576104306103da565b5b80604052505050565b600061044461034d565b90506104508282610409565b919050565b600067ffffffffffffffff8211156104705761046f6103da565b5b610479826103c9565b9050602081019050919050565b60005b838110156104a4578082015181840152602081019050610489565b60008484015250505050565b60006104c36104be84610455565b61043a565b9050828152602081018484840111156104df576104de6103c4565b5b6104ea848285610486565b509392505050565b600082601f830112610507576105066103bf565b5b81516105178482602086016104b0565b91505092915050565b6000806040838503121561053757610536610357565b5b6000610545858286016103aa565b925050602083015167ffffffffffffffff8111156105665761056561035c565b5b610572858286016104f2565b9150509250929050565b600082825260208201905092915050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b60006105e9602d8361057c565b91506105f48261058d565b604082019050919050565b60006020820190508181036000830152610618816105dc565b9050919050565b600081519050919050565b600081905092915050565b60006106408261061f565b61064a818561062a565b935061065a818560208601610486565b80840191505092915050565b60006106728284610635565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006106b3601d8361057c565b91506106be8261067d565b602082019050919050565b600060208201905081810360008301526106e2816106a6565b9050919050565b600081519050919050565b60006106ff826106e9565b610709818561057c565b9350610719818560208601610486565b610722816103c9565b840191505092915050565b6000602082019050818103600083015261074781846106f4565b905092915050565b60f58061075d6000396000f3fe608060405236601057600e6018565b005b60166018565b005b601e602c565b602a6026602e565b603b565b565b565b600060366060565b905090565b3660008037600080366000845af43d6000803e8060008114605b573d6000f35b3d6000fd5b6000608c7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b60b5565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600081905091905056fea2646970667358221220404231478476d0836c45ca1dd9071786393ae16c95f87363908750439632ebf164736f6c63430008130033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x879 CODESIZE SUB DUP1 PUSH2 0x879 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH2 0x25 SWAP2 SWAP1 PUSH2 0x520 JUMP JUMPDEST PUSH2 0x37 DUP3 DUP3 PUSH1 0x0 PUSH2 0x3E PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP POP PUSH2 0x74F JUMP JUMPDEST PUSH2 0x4D DUP4 PUSH2 0x76 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT DUP1 PUSH2 0x5A JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 0x71 JUMPI PUSH2 0x6F DUP4 DUP4 PUSH2 0xCB PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x85 DUP2 PUSH2 0xFE PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xBC7CD75A20EE27FD9ADEBAB32041F755214DBC6BFFA90CC0225B39DA2E5C2D3B PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0xF6 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x27 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x852 PUSH1 0x27 SWAP2 CODECOPY PUSH2 0x1C3 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x10D DUP2 PUSH2 0x24F PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH2 0x14C JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x143 SWAP1 PUSH2 0x5FF JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH2 0x17F PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH1 0x0 SHL PUSH2 0x272 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH1 0x0 ADD PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH1 0x40 MLOAD PUSH2 0x1ED SWAP2 SWAP1 PUSH2 0x666 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 GAS DELEGATECALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x228 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x22D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x244 DUP7 DUP4 DUP4 DUP8 PUSH2 0x27C PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x2E4 JUMPI PUSH1 0x0 DUP4 MLOAD SUB PUSH2 0x2DC JUMPI PUSH2 0x29C DUP6 PUSH2 0x24F PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST PUSH2 0x2DB JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2D2 SWAP1 PUSH2 0x6C9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST DUP3 SWAP1 POP PUSH2 0x2F5 JUMP JUMPDEST PUSH2 0x2F4 DUP4 DUP4 PUSH2 0x2FD PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x310 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x344 SWAP2 SWAP1 PUSH2 0x72D JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x38C DUP3 PUSH2 0x361 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x39C DUP2 PUSH2 0x381 JUMP JUMPDEST DUP2 EQ PUSH2 0x3A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x3B9 DUP2 PUSH2 0x393 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x412 DUP3 PUSH2 0x3C9 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x431 JUMPI PUSH2 0x430 PUSH2 0x3DA JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x444 PUSH2 0x34D JUMP JUMPDEST SWAP1 POP PUSH2 0x450 DUP3 DUP3 PUSH2 0x409 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x470 JUMPI PUSH2 0x46F PUSH2 0x3DA JUMP JUMPDEST JUMPDEST PUSH2 0x479 DUP3 PUSH2 0x3C9 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x4A4 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x489 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C3 PUSH2 0x4BE DUP5 PUSH2 0x455 JUMP JUMPDEST PUSH2 0x43A JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x4DF JUMPI PUSH2 0x4DE PUSH2 0x3C4 JUMP JUMPDEST JUMPDEST PUSH2 0x4EA DUP5 DUP3 DUP6 PUSH2 0x486 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x507 JUMPI PUSH2 0x506 PUSH2 0x3BF JUMP JUMPDEST JUMPDEST DUP2 MLOAD PUSH2 0x517 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x4B0 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x537 JUMPI PUSH2 0x536 PUSH2 0x357 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x545 DUP6 DUP3 DUP7 ADD PUSH2 0x3AA JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x566 JUMPI PUSH2 0x565 PUSH2 0x35C JUMP JUMPDEST JUMPDEST PUSH2 0x572 DUP6 DUP3 DUP7 ADD PUSH2 0x4F2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x455243313936373A206E657720696D706C656D656E746174696F6E206973206E PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F74206120636F6E747261637400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5E9 PUSH1 0x2D DUP4 PUSH2 0x57C JUMP JUMPDEST SWAP2 POP PUSH2 0x5F4 DUP3 PUSH2 0x58D JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x618 DUP2 PUSH2 0x5DC JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x640 DUP3 PUSH2 0x61F JUMP JUMPDEST PUSH2 0x64A DUP2 DUP6 PUSH2 0x62A JUMP JUMPDEST SWAP4 POP PUSH2 0x65A DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x486 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x672 DUP3 DUP5 PUSH2 0x635 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6B3 PUSH1 0x1D DUP4 PUSH2 0x57C JUMP JUMPDEST SWAP2 POP PUSH2 0x6BE DUP3 PUSH2 0x67D JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x6E2 DUP2 PUSH2 0x6A6 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6FF DUP3 PUSH2 0x6E9 JUMP JUMPDEST PUSH2 0x709 DUP2 DUP6 PUSH2 0x57C JUMP JUMPDEST SWAP4 POP PUSH2 0x719 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x486 JUMP JUMPDEST PUSH2 0x722 DUP2 PUSH2 0x3C9 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x747 DUP2 DUP5 PUSH2 0x6F4 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0xF5 DUP1 PUSH2 0x75D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE PUSH1 0x10 JUMPI PUSH1 0xE PUSH1 0x18 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x16 PUSH1 0x18 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1E PUSH1 0x2C JUMP JUMPDEST PUSH1 0x2A PUSH1 0x26 PUSH1 0x2E JUMP JUMPDEST PUSH1 0x3B JUMP JUMPDEST JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x36 PUSH1 0x60 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 DUP1 CALLDATACOPY PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x0 DUP5 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY DUP1 PUSH1 0x0 DUP2 EQ PUSH1 0x5B JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x8C PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH1 0x0 SHL PUSH1 0xB5 JUMP JUMPDEST PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BLOCKHASH TIMESTAMP BALANCE SELFBALANCE DUP5 PUSH23 0xD0836C45CA1DD9071786393AE16C95F873639087504396 ORIGIN 0xEB CALL PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER COINBASE PUSH5 0x6472657373 GASPRICE KECCAK256 PUSH13 0x6F772D6C6576656C2064656C65 PUSH8 0x6174652063616C6C KECCAK256 PUSH7 0x61696C65640000 ","sourceMap":"567:723:15:-:0;;;958:112;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1024:39;1042:6;1050:5;1057;1024:17;;;:39;;:::i;:::-;958:112;;567:723;;2057:265:16;2165:29;2176:17;2165:10;;;:29;;:::i;:::-;2222:1;2208:4;:11;:15;:28;;;;2227:9;2208:28;2204:112;;;2252:53;2281:17;2300:4;2252:28;;;:53;;:::i;:::-;;2204:112;2057:265;;;:::o;1771:152::-;1837:37;1856:17;1837:18;;;:37;;:::i;:::-;1898:17;1889:27;;;;;;;;;;;;1771:152;:::o;6674:198:24:-;6757:12;6788:77;6809:6;6817:4;6788:77;;;;;;;;;;;;;;;;;:20;;;:77;;:::i;:::-;6781:84;;6674:198;;;;:::o;1406:259:16:-;1487:37;1506:17;1487:18;;;:37;;:::i;:::-;1479:95;;;;;;;;;;;;:::i;:::-;;;;;;;;;1641:17;1584:48;1030:66;1611:20;;1584:26;;;:48;;:::i;:::-;:54;;;:74;;;;;;;;;;;;;;;;;;1406:259;:::o;7058:325:24:-;7199:12;7224;7238:23;7265:6;:19;;7285:4;7265:25;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7223:67;;;;7307:69;7334:6;7342:7;7351:10;7363:12;7307:26;;;:69;;:::i;:::-;7300:76;;;;7058:325;;;;;:::o;1412:320::-;1472:4;1724:1;1702:7;:19;;;:23;1695:30;;1412:320;;;:::o;1859:190:27:-;1920:21;2029:4;2019:14;;1859:190;;;:::o;7671:628:24:-;7851:12;7879:7;7875:418;;;7927:1;7906:10;:17;:22;7902:286;;8121:18;8132:6;8121:10;;;:18;;:::i;:::-;8113:60;;;;;;;;;;;;:::i;:::-;;;;;;;;;7902:286;8208:10;8201:17;;;;7875:418;8249:33;8257:10;8269:12;8249:7;;;:33;;:::i;:::-;7671:628;;;;;;;:::o;8821:540::-;9000:1;8980:10;:17;:21;8976:379;;;9208:10;9202:17;9264:15;9251:10;9247:2;9243:19;9236:44;8976:379;9331:12;9324:20;;;;;;;;;;;:::i;:::-;;;;;;;;7:75:36;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:122::-;641:24;659:5;641:24;:::i;:::-;634:5;631:35;621:63;;680:1;677;670:12;621:63;568:122;:::o;696:143::-;753:5;784:6;778:13;769:22;;800:33;827:5;800:33;:::i;:::-;696:143;;;;:::o;845:117::-;954:1;951;944:12;968:117;1077:1;1074;1067:12;1091:102;1132:6;1183:2;1179:7;1174:2;1167:5;1163:14;1159:28;1149:38;;1091:102;;;:::o;1199:180::-;1247:77;1244:1;1237:88;1344:4;1341:1;1334:15;1368:4;1365:1;1358:15;1385:281;1468:27;1490:4;1468:27;:::i;:::-;1460:6;1456:40;1598:6;1586:10;1583:22;1562:18;1550:10;1547:34;1544:62;1541:88;;;1609:18;;:::i;:::-;1541:88;1649:10;1645:2;1638:22;1428:238;1385:281;;:::o;1672:129::-;1706:6;1733:20;;:::i;:::-;1723:30;;1762:33;1790:4;1782:6;1762:33;:::i;:::-;1672:129;;;:::o;1807:307::-;1868:4;1958:18;1950:6;1947:30;1944:56;;;1980:18;;:::i;:::-;1944:56;2018:29;2040:6;2018:29;:::i;:::-;2010:37;;2102:4;2096;2092:15;2084:23;;1807:307;;;:::o;2120:246::-;2201:1;2211:113;2225:6;2222:1;2219:13;2211:113;;;2310:1;2305:3;2301:11;2295:18;2291:1;2286:3;2282:11;2275:39;2247:2;2244:1;2240:10;2235:15;;2211:113;;;2358:1;2349:6;2344:3;2340:16;2333:27;2182:184;2120:246;;;:::o;2372:432::-;2460:5;2485:65;2501:48;2542:6;2501:48;:::i;:::-;2485:65;:::i;:::-;2476:74;;2573:6;2566:5;2559:21;2611:4;2604:5;2600:16;2649:3;2640:6;2635:3;2631:16;2628:25;2625:112;;;2656:79;;:::i;:::-;2625:112;2746:52;2791:6;2786:3;2781;2746:52;:::i;:::-;2466:338;2372:432;;;;;:::o;2823:353::-;2889:5;2938:3;2931:4;2923:6;2919:17;2915:27;2905:122;;2946:79;;:::i;:::-;2905:122;3056:6;3050:13;3081:89;3166:3;3158:6;3151:4;3143:6;3139:17;3081:89;:::i;:::-;3072:98;;2895:281;2823:353;;;;:::o;3182:678::-;3270:6;3278;3327:2;3315:9;3306:7;3302:23;3298:32;3295:119;;;3333:79;;:::i;:::-;3295:119;3453:1;3478:64;3534:7;3525:6;3514:9;3510:22;3478:64;:::i;:::-;3468:74;;3424:128;3612:2;3601:9;3597:18;3591:25;3643:18;3635:6;3632:30;3629:117;;;3665:79;;:::i;:::-;3629:117;3770:73;3835:7;3826:6;3815:9;3811:22;3770:73;:::i;:::-;3760:83;;3562:291;3182:678;;;;;:::o;3866:169::-;3950:11;3984:6;3979:3;3972:19;4024:4;4019:3;4015:14;4000:29;;3866:169;;;;:::o;4041:232::-;4181:34;4177:1;4169:6;4165:14;4158:58;4250:15;4245:2;4237:6;4233:15;4226:40;4041:232;:::o;4279:366::-;4421:3;4442:67;4506:2;4501:3;4442:67;:::i;:::-;4435:74;;4518:93;4607:3;4518:93;:::i;:::-;4636:2;4631:3;4627:12;4620:19;;4279:366;;;:::o;4651:419::-;4817:4;4855:2;4844:9;4840:18;4832:26;;4904:9;4898:4;4894:20;4890:1;4879:9;4875:17;4868:47;4932:131;5058:4;4932:131;:::i;:::-;4924:139;;4651:419;;;:::o;5076:98::-;5127:6;5161:5;5155:12;5145:22;;5076:98;;;:::o;5180:147::-;5281:11;5318:3;5303:18;;5180:147;;;;:::o;5333:386::-;5437:3;5465:38;5497:5;5465:38;:::i;:::-;5519:88;5600:6;5595:3;5519:88;:::i;:::-;5512:95;;5616:65;5674:6;5669:3;5662:4;5655:5;5651:16;5616:65;:::i;:::-;5706:6;5701:3;5697:16;5690:23;;5441:278;5333:386;;;;:::o;5725:271::-;5855:3;5877:93;5966:3;5957:6;5877:93;:::i;:::-;5870:100;;5987:3;5980:10;;5725:271;;;;:::o;6002:179::-;6142:31;6138:1;6130:6;6126:14;6119:55;6002:179;:::o;6187:366::-;6329:3;6350:67;6414:2;6409:3;6350:67;:::i;:::-;6343:74;;6426:93;6515:3;6426:93;:::i;:::-;6544:2;6539:3;6535:12;6528:19;;6187:366;;;:::o;6559:419::-;6725:4;6763:2;6752:9;6748:18;6740:26;;6812:9;6806:4;6802:20;6798:1;6787:9;6783:17;6776:47;6840:131;6966:4;6840:131;:::i;:::-;6832:139;;6559:419;;;:::o;6984:99::-;7036:6;7070:5;7064:12;7054:22;;6984:99;;;:::o;7089:377::-;7177:3;7205:39;7238:5;7205:39;:::i;:::-;7260:71;7324:6;7319:3;7260:71;:::i;:::-;7253:78;;7340:65;7398:6;7393:3;7386:4;7379:5;7375:16;7340:65;:::i;:::-;7430:29;7452:6;7430:29;:::i;:::-;7425:3;7421:39;7414:46;;7181:285;7089:377;;;;:::o;7472:313::-;7585:4;7623:2;7612:9;7608:18;7600:26;;7672:9;7666:4;7662:20;7658:1;7647:9;7643:17;7636:47;7700:78;7773:4;7764:6;7700:78;:::i;:::-;7692:86;;7472:313;;;;:::o;567:723:15:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_1066":{"entryPoint":null,"id":1066,"parameterSlots":0,"returnSlots":0},"@_1074":{"entryPoint":null,"id":1074,"parameterSlots":0,"returnSlots":0},"@_beforeFallback_1079":{"entryPoint":44,"id":1079,"parameterSlots":0,"returnSlots":0},"@_delegate_1039":{"entryPoint":59,"id":1039,"parameterSlots":1,"returnSlots":0},"@_fallback_1058":{"entryPoint":24,"id":1058,"parameterSlots":0,"returnSlots":0},"@_getImplementation_754":{"entryPoint":96,"id":754,"parameterSlots":0,"returnSlots":1},"@_implementation_723":{"entryPoint":46,"id":723,"parameterSlots":0,"returnSlots":1},"@getAddressSlot_2792":{"entryPoint":181,"id":2792,"parameterSlots":1,"returnSlots":1}},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"608060405236601057600e6018565b005b60166018565b005b601e602c565b602a6026602e565b603b565b565b565b600060366060565b905090565b3660008037600080366000845af43d6000803e8060008114605b573d6000f35b3d6000fd5b6000608c7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b60b5565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600081905091905056fea2646970667358221220404231478476d0836c45ca1dd9071786393ae16c95f87363908750439632ebf164736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLDATASIZE PUSH1 0x10 JUMPI PUSH1 0xE PUSH1 0x18 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x16 PUSH1 0x18 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x1E PUSH1 0x2C JUMP JUMPDEST PUSH1 0x2A PUSH1 0x26 PUSH1 0x2E JUMP JUMPDEST PUSH1 0x3B JUMP JUMPDEST JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0x36 PUSH1 0x60 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 DUP1 CALLDATACOPY PUSH1 0x0 DUP1 CALLDATASIZE PUSH1 0x0 DUP5 GAS DELEGATECALL RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY DUP1 PUSH1 0x0 DUP2 EQ PUSH1 0x5B JUMPI RETURNDATASIZE PUSH1 0x0 RETURN JUMPDEST RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x8C PUSH32 0x360894A13BA1A3210667C828492DB98DCA3E2076CC3735A920A3CA505D382BBC PUSH1 0x0 SHL PUSH1 0xB5 JUMP JUMPDEST PUSH1 0x0 ADD PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 BLOCKHASH TIMESTAMP BALANCE SELFBALANCE DUP5 PUSH23 0xD0836C45CA1DD9071786393AE16C95F873639087504396 ORIGIN 0xEB CALL PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"567:723:15:-:0;;;;;;2898:11:17;:9;:11::i;:::-;567:723:15;;2675:11:17;:9;:11::i;:::-;567:723:15;2322:110:17;2370:17;:15;:17::i;:::-;2397:28;2407:17;:15;:17::i;:::-;2397:9;:28::i;:::-;2322:110::o;3198:46::-;:::o;1148:140:15:-;1215:12;1246:35;:33;:35::i;:::-;1239:42;;1148:140;:::o;948:895:17:-;1286:14;1283:1;1280;1267:34;1500:1;1497;1481:14;1478:1;1462:14;1455:5;1442:60;1576:16;1573:1;1570;1555:38;1614:6;1686:1;1681:66;;;;1796:16;1793:1;1786:27;1681:66;1716:16;1713:1;1706:27;1175:140:16;1228:7;1254:48;1030:66;1281:20;;1254:26;:48::i;:::-;:54;;;;;;;;;;;;1247:61;;1175:140;:::o;1859:190:27:-;1920:21;2029:4;2019:14;;1859:190;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"49000","executionCost":"infinite","totalCost":"infinite"},"external":{"":"infinite"},"internal":{"_implementation()":"2249"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_logic\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an implementation address that can be changed. This address is stored in storage in the location specified by https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the implementation behind the proxy.\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the upgradeable proxy with an initial implementation specified by `_logic`. If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity constructor.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":\"ERC1967Proxy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol":{"ERC1967Upgrade":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"previousAdmin","type":"address"},{"indexed":false,"internalType":"address","name":"newAdmin","type":"address"}],"name":"AdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"beacon","type":"address"}],"name":"BeaconUpgraded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"implementation","type":"address"}],"name":"Upgraded","type":"event"}],"devdoc":{"details":"This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._","events":{"AdminChanged(address,address)":{"details":"Emitted when the admin account has changed."},"BeaconUpgraded(address)":{"details":"Emitted when the beacon is changed."},"Upgraded(address)":{"details":"Emitted when the implementation is upgraded."}},"kind":"dev","methods":{},"stateVariables":{"_ADMIN_SLOT":{"details":"Storage slot with the admin of the contract. This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is validated in the constructor."},"_BEACON_SLOT":{"details":"The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor."},"_IMPLEMENTATION_SLOT":{"details":"Storage slot with the address of the current implementation. This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is validated in the constructor."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"This abstract contract provides getters and event emitting update functions for https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots. _Available since v4.1._\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is changed.\"},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_ADMIN_SLOT\":{\"details\":\"Storage slot with the admin of the contract. This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is validated in the constructor.\"},\"_BEACON_SLOT\":{\"details\":\"The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy. This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\"},\"_IMPLEMENTATION_SLOT\":{\"details\":\"Storage slot with the address of the current implementation. This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is validated in the constructor.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":\"ERC1967Upgrade\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/proxy/Proxy.sol":{"Proxy":{"abi":[{"stateMutability":"payable","type":"fallback"},{"stateMutability":"payable","type":"receive"}],"devdoc":{"details":"This abstract contract provides a fallback function that delegates all calls to another contract using the EVM instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to be specified by overriding the virtual {_implementation} function. Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a different contract through the {_delegate} function. The success and return data of the delegated call will be returned back to the caller of the proxy.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"This abstract contract provides a fallback function that delegates all calls to another contract using the EVM instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to be specified by overriding the virtual {_implementation} function. Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a different contract through the {_delegate} function. The success and return data of the delegated call will be returned back to the caller of the proxy.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/proxy/Proxy.sol\":\"Proxy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/proxy/beacon/IBeacon.sol":{"IBeacon":{"abi":[{"inputs":[],"name":"implementation","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This is the interface that {BeaconProxy} expects of its beacon.","kind":"dev","methods":{"implementation()":{"details":"Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"implementation()":"5c60da1b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This is the interface that {BeaconProxy} expects of its beacon.\",\"kind\":\"dev\",\"methods\":{\"implementation()\":{\"details\":\"Must return an address that can be used as a delegate call target. {BeaconProxy} will check that this address is a contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":\"IBeacon\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/ERC721.sol":{"ERC721":{"abi":[{"inputs":[{"internalType":"string","name":"name_","type":"string"},{"internalType":"string","name":"symbol_","type":"string"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"constructor":{"details":"Initializes the contract by setting a `name` and a `symbol` to the token collection."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_1153":{"entryPoint":null,"id":1153,"parameterSlots":2,"returnSlots":0},"abi_decode_available_length_t_string_memory_ptr_fromMemory":{"entryPoint":376,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_string_memory_ptr_fromMemory":{"entryPoint":451,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory":{"entryPoint":502,"id":null,"parameterSlots":2,"returnSlots":2},"allocate_memory":{"entryPoint":247,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":99,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_string_memory_ptr":{"entryPoint":278,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_string_storage":{"entryPoint":746,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":635,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_t_string_storage":{"entryPoint":1067,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_t_uint256":{"entryPoint":882,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_t_bytes1":{"entryPoint":1028,"id":null,"parameterSlots":2,"returnSlots":0},"convert_t_uint256_to_t_uint256":{"entryPoint":902,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":1222,"id":null,"parameterSlots":2,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":332,"id":null,"parameterSlots":3,"returnSlots":0},"divide_by_32_ceil":{"entryPoint":767,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":693,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":1192,"id":null,"parameterSlots":2,"returnSlots":1},"finalize_allocation":{"entryPoint":193,"id":null,"parameterSlots":2,"returnSlots":0},"identity":{"entryPoint":892,"id":null,"parameterSlots":1,"returnSlots":1},"mask_bytes_dynamic":{"entryPoint":1160,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x22":{"entryPoint":646,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":146,"id":null,"parameterSlots":0,"returnSlots":0},"prepare_store_t_uint256":{"entryPoint":942,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":119,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":124,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":114,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":109,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":129,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_dynamic":{"entryPoint":783,"id":null,"parameterSlots":2,"returnSlots":1},"shift_right_unsigned_dynamic":{"entryPoint":1147,"id":null,"parameterSlots":2,"returnSlots":1},"storage_set_to_zero_t_uint256":{"entryPoint":1000,"id":null,"parameterSlots":2,"returnSlots":0},"update_byte_slice_dynamic32":{"entryPoint":796,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_t_uint256_to_t_uint256":{"entryPoint":952,"id":null,"parameterSlots":3,"returnSlots":0},"zero_value_for_split_t_uint256":{"entryPoint":995,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:8574:36","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:36","statements":[{"nodeType":"YulAssignment","src":"57:19:36","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:36","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:36"},"nodeType":"YulFunctionCall","src":"67:9:36"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:36"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:36","type":""}],"src":"7:75:36"},{"body":{"nodeType":"YulBlock","src":"177:28:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:36"},"nodeType":"YulFunctionCall","src":"187:12:36"},"nodeType":"YulExpressionStatement","src":"187:12:36"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:36"},{"body":{"nodeType":"YulBlock","src":"300:28:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:36"},"nodeType":"YulFunctionCall","src":"310:12:36"},"nodeType":"YulExpressionStatement","src":"310:12:36"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:36"},{"body":{"nodeType":"YulBlock","src":"423:28:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"440:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"443:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"433:6:36"},"nodeType":"YulFunctionCall","src":"433:12:36"},"nodeType":"YulExpressionStatement","src":"433:12:36"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"334:117:36"},{"body":{"nodeType":"YulBlock","src":"546:28:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"563:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"566:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"556:6:36"},"nodeType":"YulFunctionCall","src":"556:12:36"},"nodeType":"YulExpressionStatement","src":"556:12:36"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"457:117:36"},{"body":{"nodeType":"YulBlock","src":"628:54:36","statements":[{"nodeType":"YulAssignment","src":"638:38:36","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"656:5:36"},{"kind":"number","nodeType":"YulLiteral","src":"663:2:36","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"652:3:36"},"nodeType":"YulFunctionCall","src":"652:14:36"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"672:2:36","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"668:3:36"},"nodeType":"YulFunctionCall","src":"668:7:36"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"648:3:36"},"nodeType":"YulFunctionCall","src":"648:28:36"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"638:6:36"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"611:5:36","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"621:6:36","type":""}],"src":"580:102:36"},{"body":{"nodeType":"YulBlock","src":"716:152:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"733:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"736:77:36","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"726:6:36"},"nodeType":"YulFunctionCall","src":"726:88:36"},"nodeType":"YulExpressionStatement","src":"726:88:36"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"830:1:36","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"833:4:36","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"823:6:36"},"nodeType":"YulFunctionCall","src":"823:15:36"},"nodeType":"YulExpressionStatement","src":"823:15:36"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"854:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"857:4:36","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"847:6:36"},"nodeType":"YulFunctionCall","src":"847:15:36"},"nodeType":"YulExpressionStatement","src":"847:15:36"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"688:180:36"},{"body":{"nodeType":"YulBlock","src":"917:238:36","statements":[{"nodeType":"YulVariableDeclaration","src":"927:58:36","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"949:6:36"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"979:4:36"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"957:21:36"},"nodeType":"YulFunctionCall","src":"957:27:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"945:3:36"},"nodeType":"YulFunctionCall","src":"945:40:36"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"931:10:36","type":""}]},{"body":{"nodeType":"YulBlock","src":"1096:22:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1098:16:36"},"nodeType":"YulFunctionCall","src":"1098:18:36"},"nodeType":"YulExpressionStatement","src":"1098:18:36"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1039:10:36"},{"kind":"number","nodeType":"YulLiteral","src":"1051:18:36","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1036:2:36"},"nodeType":"YulFunctionCall","src":"1036:34:36"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1075:10:36"},{"name":"memPtr","nodeType":"YulIdentifier","src":"1087:6:36"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1072:2:36"},"nodeType":"YulFunctionCall","src":"1072:22:36"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1033:2:36"},"nodeType":"YulFunctionCall","src":"1033:62:36"},"nodeType":"YulIf","src":"1030:88:36"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"1134:2:36","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"1138:10:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1127:6:36"},"nodeType":"YulFunctionCall","src":"1127:22:36"},"nodeType":"YulExpressionStatement","src":"1127:22:36"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"903:6:36","type":""},{"name":"size","nodeType":"YulTypedName","src":"911:4:36","type":""}],"src":"874:281:36"},{"body":{"nodeType":"YulBlock","src":"1202:88:36","statements":[{"nodeType":"YulAssignment","src":"1212:30:36","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"1222:18:36"},"nodeType":"YulFunctionCall","src":"1222:20:36"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1212:6:36"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"1271:6:36"},{"name":"size","nodeType":"YulIdentifier","src":"1279:4:36"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"1251:19:36"},"nodeType":"YulFunctionCall","src":"1251:33:36"},"nodeType":"YulExpressionStatement","src":"1251:33:36"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"1186:4:36","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"1195:6:36","type":""}],"src":"1161:129:36"},{"body":{"nodeType":"YulBlock","src":"1363:241:36","statements":[{"body":{"nodeType":"YulBlock","src":"1468:22:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"1470:16:36"},"nodeType":"YulFunctionCall","src":"1470:18:36"},"nodeType":"YulExpressionStatement","src":"1470:18:36"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1440:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"1448:18:36","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"1437:2:36"},"nodeType":"YulFunctionCall","src":"1437:30:36"},"nodeType":"YulIf","src":"1434:56:36"},{"nodeType":"YulAssignment","src":"1500:37:36","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"1530:6:36"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"1508:21:36"},"nodeType":"YulFunctionCall","src":"1508:29:36"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1500:4:36"}]},{"nodeType":"YulAssignment","src":"1574:23:36","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"1586:4:36"},{"kind":"number","nodeType":"YulLiteral","src":"1592:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1582:3:36"},"nodeType":"YulFunctionCall","src":"1582:15:36"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"1574:4:36"}]}]},"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"1347:6:36","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"1358:4:36","type":""}],"src":"1296:308:36"},{"body":{"nodeType":"YulBlock","src":"1672:184:36","statements":[{"nodeType":"YulVariableDeclaration","src":"1682:10:36","value":{"kind":"number","nodeType":"YulLiteral","src":"1691:1:36","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1686:1:36","type":""}]},{"body":{"nodeType":"YulBlock","src":"1751:63:36","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1776:3:36"},{"name":"i","nodeType":"YulIdentifier","src":"1781:1:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1772:3:36"},"nodeType":"YulFunctionCall","src":"1772:11:36"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1795:3:36"},{"name":"i","nodeType":"YulIdentifier","src":"1800:1:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1791:3:36"},"nodeType":"YulFunctionCall","src":"1791:11:36"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1785:5:36"},"nodeType":"YulFunctionCall","src":"1785:18:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1765:6:36"},"nodeType":"YulFunctionCall","src":"1765:39:36"},"nodeType":"YulExpressionStatement","src":"1765:39:36"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1712:1:36"},{"name":"length","nodeType":"YulIdentifier","src":"1715:6:36"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1709:2:36"},"nodeType":"YulFunctionCall","src":"1709:13:36"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1723:19:36","statements":[{"nodeType":"YulAssignment","src":"1725:15:36","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1734:1:36"},{"kind":"number","nodeType":"YulLiteral","src":"1737:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1730:3:36"},"nodeType":"YulFunctionCall","src":"1730:10:36"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1725:1:36"}]}]},"pre":{"nodeType":"YulBlock","src":"1705:3:36","statements":[]},"src":"1701:113:36"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1834:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"1839:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1830:3:36"},"nodeType":"YulFunctionCall","src":"1830:16:36"},{"kind":"number","nodeType":"YulLiteral","src":"1848:1:36","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1823:6:36"},"nodeType":"YulFunctionCall","src":"1823:27:36"},"nodeType":"YulExpressionStatement","src":"1823:27:36"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1654:3:36","type":""},{"name":"dst","nodeType":"YulTypedName","src":"1659:3:36","type":""},{"name":"length","nodeType":"YulTypedName","src":"1664:6:36","type":""}],"src":"1610:246:36"},{"body":{"nodeType":"YulBlock","src":"1957:339:36","statements":[{"nodeType":"YulAssignment","src":"1967:75:36","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2034:6:36"}],"functionName":{"name":"array_allocation_size_t_string_memory_ptr","nodeType":"YulIdentifier","src":"1992:41:36"},"nodeType":"YulFunctionCall","src":"1992:49:36"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"1976:15:36"},"nodeType":"YulFunctionCall","src":"1976:66:36"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"1967:5:36"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2058:5:36"},{"name":"length","nodeType":"YulIdentifier","src":"2065:6:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2051:6:36"},"nodeType":"YulFunctionCall","src":"2051:21:36"},"nodeType":"YulExpressionStatement","src":"2051:21:36"},{"nodeType":"YulVariableDeclaration","src":"2081:27:36","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2096:5:36"},{"kind":"number","nodeType":"YulLiteral","src":"2103:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2092:3:36"},"nodeType":"YulFunctionCall","src":"2092:16:36"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"2085:3:36","type":""}]},{"body":{"nodeType":"YulBlock","src":"2146:83:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"2148:77:36"},"nodeType":"YulFunctionCall","src":"2148:79:36"},"nodeType":"YulExpressionStatement","src":"2148:79:36"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2127:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"2132:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2123:3:36"},"nodeType":"YulFunctionCall","src":"2123:16:36"},{"name":"end","nodeType":"YulIdentifier","src":"2141:3:36"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2120:2:36"},"nodeType":"YulFunctionCall","src":"2120:25:36"},"nodeType":"YulIf","src":"2117:112:36"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"2273:3:36"},{"name":"dst","nodeType":"YulIdentifier","src":"2278:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"2283:6:36"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"2238:34:36"},"nodeType":"YulFunctionCall","src":"2238:52:36"},"nodeType":"YulExpressionStatement","src":"2238:52:36"}]},"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1930:3:36","type":""},{"name":"length","nodeType":"YulTypedName","src":"1935:6:36","type":""},{"name":"end","nodeType":"YulTypedName","src":"1943:3:36","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"1951:5:36","type":""}],"src":"1862:434:36"},{"body":{"nodeType":"YulBlock","src":"2389:282:36","statements":[{"body":{"nodeType":"YulBlock","src":"2438:83:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"2440:77:36"},"nodeType":"YulFunctionCall","src":"2440:79:36"},"nodeType":"YulExpressionStatement","src":"2440:79:36"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2417:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"2425:4:36","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2413:3:36"},"nodeType":"YulFunctionCall","src":"2413:17:36"},{"name":"end","nodeType":"YulIdentifier","src":"2432:3:36"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2409:3:36"},"nodeType":"YulFunctionCall","src":"2409:27:36"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2402:6:36"},"nodeType":"YulFunctionCall","src":"2402:35:36"},"nodeType":"YulIf","src":"2399:122:36"},{"nodeType":"YulVariableDeclaration","src":"2530:27:36","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2550:6:36"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2544:5:36"},"nodeType":"YulFunctionCall","src":"2544:13:36"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2534:6:36","type":""}]},{"nodeType":"YulAssignment","src":"2566:99:36","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2638:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"2646:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2634:3:36"},"nodeType":"YulFunctionCall","src":"2634:17:36"},{"name":"length","nodeType":"YulIdentifier","src":"2653:6:36"},{"name":"end","nodeType":"YulIdentifier","src":"2661:3:36"}],"functionName":{"name":"abi_decode_available_length_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"2575:58:36"},"nodeType":"YulFunctionCall","src":"2575:90:36"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"2566:5:36"}]}]},"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2367:6:36","type":""},{"name":"end","nodeType":"YulTypedName","src":"2375:3:36","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"2383:5:36","type":""}],"src":"2316:355:36"},{"body":{"nodeType":"YulBlock","src":"2791:739:36","statements":[{"body":{"nodeType":"YulBlock","src":"2837:83:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2839:77:36"},"nodeType":"YulFunctionCall","src":"2839:79:36"},"nodeType":"YulExpressionStatement","src":"2839:79:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2812:7:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"2821:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2808:3:36"},"nodeType":"YulFunctionCall","src":"2808:23:36"},{"kind":"number","nodeType":"YulLiteral","src":"2833:2:36","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2804:3:36"},"nodeType":"YulFunctionCall","src":"2804:32:36"},"nodeType":"YulIf","src":"2801:119:36"},{"nodeType":"YulBlock","src":"2930:291:36","statements":[{"nodeType":"YulVariableDeclaration","src":"2945:38:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2969:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"2980:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2965:3:36"},"nodeType":"YulFunctionCall","src":"2965:17:36"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"2959:5:36"},"nodeType":"YulFunctionCall","src":"2959:24:36"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"2949:6:36","type":""}]},{"body":{"nodeType":"YulBlock","src":"3030:83:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"3032:77:36"},"nodeType":"YulFunctionCall","src":"3032:79:36"},"nodeType":"YulExpressionStatement","src":"3032:79:36"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3002:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"3010:18:36","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2999:2:36"},"nodeType":"YulFunctionCall","src":"2999:30:36"},"nodeType":"YulIf","src":"2996:117:36"},{"nodeType":"YulAssignment","src":"3127:84:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3183:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"3194:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3179:3:36"},"nodeType":"YulFunctionCall","src":"3179:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3203:7:36"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"3137:41:36"},"nodeType":"YulFunctionCall","src":"3137:74:36"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3127:6:36"}]}]},{"nodeType":"YulBlock","src":"3231:292:36","statements":[{"nodeType":"YulVariableDeclaration","src":"3246:39:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3270:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"3281:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3266:3:36"},"nodeType":"YulFunctionCall","src":"3266:18:36"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3260:5:36"},"nodeType":"YulFunctionCall","src":"3260:25:36"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3250:6:36","type":""}]},{"body":{"nodeType":"YulBlock","src":"3332:83:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"3334:77:36"},"nodeType":"YulFunctionCall","src":"3334:79:36"},"nodeType":"YulExpressionStatement","src":"3334:79:36"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3304:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"3312:18:36","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3301:2:36"},"nodeType":"YulFunctionCall","src":"3301:30:36"},"nodeType":"YulIf","src":"3298:117:36"},{"nodeType":"YulAssignment","src":"3429:84:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3485:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"3496:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3481:3:36"},"nodeType":"YulFunctionCall","src":"3481:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3505:7:36"}],"functionName":{"name":"abi_decode_t_string_memory_ptr_fromMemory","nodeType":"YulIdentifier","src":"3439:41:36"},"nodeType":"YulFunctionCall","src":"3439:74:36"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3429:6:36"}]}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2753:9:36","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2764:7:36","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2776:6:36","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2784:6:36","type":""}],"src":"2677:853:36"},{"body":{"nodeType":"YulBlock","src":"3595:40:36","statements":[{"nodeType":"YulAssignment","src":"3606:22:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3622:5:36"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3616:5:36"},"nodeType":"YulFunctionCall","src":"3616:12:36"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"3606:6:36"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3578:5:36","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"3588:6:36","type":""}],"src":"3536:99:36"},{"body":{"nodeType":"YulBlock","src":"3669:152:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3686:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3689:77:36","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3679:6:36"},"nodeType":"YulFunctionCall","src":"3679:88:36"},"nodeType":"YulExpressionStatement","src":"3679:88:36"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3783:1:36","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3786:4:36","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3776:6:36"},"nodeType":"YulFunctionCall","src":"3776:15:36"},"nodeType":"YulExpressionStatement","src":"3776:15:36"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3807:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3810:4:36","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3800:6:36"},"nodeType":"YulFunctionCall","src":"3800:15:36"},"nodeType":"YulExpressionStatement","src":"3800:15:36"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"3641:180:36"},{"body":{"nodeType":"YulBlock","src":"3878:269:36","statements":[{"nodeType":"YulAssignment","src":"3888:22:36","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3902:4:36"},{"kind":"number","nodeType":"YulLiteral","src":"3908:1:36","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"3898:3:36"},"nodeType":"YulFunctionCall","src":"3898:12:36"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"3888:6:36"}]},{"nodeType":"YulVariableDeclaration","src":"3919:38:36","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3949:4:36"},{"kind":"number","nodeType":"YulLiteral","src":"3955:1:36","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3945:3:36"},"nodeType":"YulFunctionCall","src":"3945:12:36"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"3923:18:36","type":""}]},{"body":{"nodeType":"YulBlock","src":"3996:51:36","statements":[{"nodeType":"YulAssignment","src":"4010:27:36","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4024:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"4032:4:36","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4020:3:36"},"nodeType":"YulFunctionCall","src":"4020:17:36"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"4010:6:36"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"3976:18:36"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3969:6:36"},"nodeType":"YulFunctionCall","src":"3969:26:36"},"nodeType":"YulIf","src":"3966:81:36"},{"body":{"nodeType":"YulBlock","src":"4099:42:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"4113:16:36"},"nodeType":"YulFunctionCall","src":"4113:18:36"},"nodeType":"YulExpressionStatement","src":"4113:18:36"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"4063:18:36"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4086:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"4094:2:36","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4083:2:36"},"nodeType":"YulFunctionCall","src":"4083:14:36"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4060:2:36"},"nodeType":"YulFunctionCall","src":"4060:38:36"},"nodeType":"YulIf","src":"4057:84:36"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"3862:4:36","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"3871:6:36","type":""}],"src":"3827:320:36"},{"body":{"nodeType":"YulBlock","src":"4207:87:36","statements":[{"nodeType":"YulAssignment","src":"4217:11:36","value":{"name":"ptr","nodeType":"YulIdentifier","src":"4225:3:36"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"4217:4:36"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4245:1:36","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"4248:3:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4238:6:36"},"nodeType":"YulFunctionCall","src":"4238:14:36"},"nodeType":"YulExpressionStatement","src":"4238:14:36"},{"nodeType":"YulAssignment","src":"4261:26:36","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4279:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4282:4:36","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"4269:9:36"},"nodeType":"YulFunctionCall","src":"4269:18:36"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"4261:4:36"}]}]},"name":"array_dataslot_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"4194:3:36","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"4202:4:36","type":""}],"src":"4153:141:36"},{"body":{"nodeType":"YulBlock","src":"4344:49:36","statements":[{"nodeType":"YulAssignment","src":"4354:33:36","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4372:5:36"},{"kind":"number","nodeType":"YulLiteral","src":"4379:2:36","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4368:3:36"},"nodeType":"YulFunctionCall","src":"4368:14:36"},{"kind":"number","nodeType":"YulLiteral","src":"4384:2:36","type":"","value":"32"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"4364:3:36"},"nodeType":"YulFunctionCall","src":"4364:23:36"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"4354:6:36"}]}]},"name":"divide_by_32_ceil","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4327:5:36","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"4337:6:36","type":""}],"src":"4300:93:36"},{"body":{"nodeType":"YulBlock","src":"4452:54:36","statements":[{"nodeType":"YulAssignment","src":"4462:37:36","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"4487:4:36"},{"name":"value","nodeType":"YulIdentifier","src":"4493:5:36"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"4483:3:36"},"nodeType":"YulFunctionCall","src":"4483:16:36"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"4462:8:36"}]}]},"name":"shift_left_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"4427:4:36","type":""},{"name":"value","nodeType":"YulTypedName","src":"4433:5:36","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"4443:8:36","type":""}],"src":"4399:107:36"},{"body":{"nodeType":"YulBlock","src":"4588:317:36","statements":[{"nodeType":"YulVariableDeclaration","src":"4598:35:36","value":{"arguments":[{"name":"shiftBytes","nodeType":"YulIdentifier","src":"4619:10:36"},{"kind":"number","nodeType":"YulLiteral","src":"4631:1:36","type":"","value":"8"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"4615:3:36"},"nodeType":"YulFunctionCall","src":"4615:18:36"},"variables":[{"name":"shiftBits","nodeType":"YulTypedName","src":"4602:9:36","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4642:109:36","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"4673:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"4684:66:36","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"4654:18:36"},"nodeType":"YulFunctionCall","src":"4654:97:36"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"4646:4:36","type":""}]},{"nodeType":"YulAssignment","src":"4760:51:36","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"4791:9:36"},{"name":"toInsert","nodeType":"YulIdentifier","src":"4802:8:36"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"4772:18:36"},"nodeType":"YulFunctionCall","src":"4772:39:36"},"variableNames":[{"name":"toInsert","nodeType":"YulIdentifier","src":"4760:8:36"}]},{"nodeType":"YulAssignment","src":"4820:30:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4833:5:36"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"4844:4:36"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4840:3:36"},"nodeType":"YulFunctionCall","src":"4840:9:36"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4829:3:36"},"nodeType":"YulFunctionCall","src":"4829:21:36"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4820:5:36"}]},{"nodeType":"YulAssignment","src":"4859:40:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4872:5:36"},{"arguments":[{"name":"toInsert","nodeType":"YulIdentifier","src":"4883:8:36"},{"name":"mask","nodeType":"YulIdentifier","src":"4893:4:36"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4879:3:36"},"nodeType":"YulFunctionCall","src":"4879:19:36"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"4869:2:36"},"nodeType":"YulFunctionCall","src":"4869:30:36"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"4859:6:36"}]}]},"name":"update_byte_slice_dynamic32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4549:5:36","type":""},{"name":"shiftBytes","nodeType":"YulTypedName","src":"4556:10:36","type":""},{"name":"toInsert","nodeType":"YulTypedName","src":"4568:8:36","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"4581:6:36","type":""}],"src":"4512:393:36"},{"body":{"nodeType":"YulBlock","src":"4956:32:36","statements":[{"nodeType":"YulAssignment","src":"4966:16:36","value":{"name":"value","nodeType":"YulIdentifier","src":"4977:5:36"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4966:7:36"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4938:5:36","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4948:7:36","type":""}],"src":"4911:77:36"},{"body":{"nodeType":"YulBlock","src":"5026:28:36","statements":[{"nodeType":"YulAssignment","src":"5036:12:36","value":{"name":"value","nodeType":"YulIdentifier","src":"5043:5:36"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"5036:3:36"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5012:5:36","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"5022:3:36","type":""}],"src":"4994:60:36"},{"body":{"nodeType":"YulBlock","src":"5120:82:36","statements":[{"nodeType":"YulAssignment","src":"5130:66:36","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5188:5:36"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"5170:17:36"},"nodeType":"YulFunctionCall","src":"5170:24:36"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"5161:8:36"},"nodeType":"YulFunctionCall","src":"5161:34:36"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"5143:17:36"},"nodeType":"YulFunctionCall","src":"5143:53:36"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"5130:9:36"}]}]},"name":"convert_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5100:5:36","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"5110:9:36","type":""}],"src":"5060:142:36"},{"body":{"nodeType":"YulBlock","src":"5255:28:36","statements":[{"nodeType":"YulAssignment","src":"5265:12:36","value":{"name":"value","nodeType":"YulIdentifier","src":"5272:5:36"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"5265:3:36"}]}]},"name":"prepare_store_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5241:5:36","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"5251:3:36","type":""}],"src":"5208:75:36"},{"body":{"nodeType":"YulBlock","src":"5365:193:36","statements":[{"nodeType":"YulVariableDeclaration","src":"5375:63:36","value":{"arguments":[{"name":"value_0","nodeType":"YulIdentifier","src":"5430:7:36"}],"functionName":{"name":"convert_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"5399:30:36"},"nodeType":"YulFunctionCall","src":"5399:39:36"},"variables":[{"name":"convertedValue_0","nodeType":"YulTypedName","src":"5379:16:36","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"5454:4:36"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"5494:4:36"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"5488:5:36"},"nodeType":"YulFunctionCall","src":"5488:11:36"},{"name":"offset","nodeType":"YulIdentifier","src":"5501:6:36"},{"arguments":[{"name":"convertedValue_0","nodeType":"YulIdentifier","src":"5533:16:36"}],"functionName":{"name":"prepare_store_t_uint256","nodeType":"YulIdentifier","src":"5509:23:36"},"nodeType":"YulFunctionCall","src":"5509:41:36"}],"functionName":{"name":"update_byte_slice_dynamic32","nodeType":"YulIdentifier","src":"5460:27:36"},"nodeType":"YulFunctionCall","src":"5460:91:36"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"5447:6:36"},"nodeType":"YulFunctionCall","src":"5447:105:36"},"nodeType":"YulExpressionStatement","src":"5447:105:36"}]},"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"5342:4:36","type":""},{"name":"offset","nodeType":"YulTypedName","src":"5348:6:36","type":""},{"name":"value_0","nodeType":"YulTypedName","src":"5356:7:36","type":""}],"src":"5289:269:36"},{"body":{"nodeType":"YulBlock","src":"5613:24:36","statements":[{"nodeType":"YulAssignment","src":"5623:8:36","value":{"kind":"number","nodeType":"YulLiteral","src":"5630:1:36","type":"","value":"0"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"5623:3:36"}]}]},"name":"zero_value_for_split_t_uint256","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"5609:3:36","type":""}],"src":"5564:73:36"},{"body":{"nodeType":"YulBlock","src":"5696:136:36","statements":[{"nodeType":"YulVariableDeclaration","src":"5706:46:36","value":{"arguments":[],"functionName":{"name":"zero_value_for_split_t_uint256","nodeType":"YulIdentifier","src":"5720:30:36"},"nodeType":"YulFunctionCall","src":"5720:32:36"},"variables":[{"name":"zero_0","nodeType":"YulTypedName","src":"5710:6:36","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"5805:4:36"},{"name":"offset","nodeType":"YulIdentifier","src":"5811:6:36"},{"name":"zero_0","nodeType":"YulIdentifier","src":"5819:6:36"}],"functionName":{"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"5761:43:36"},"nodeType":"YulFunctionCall","src":"5761:65:36"},"nodeType":"YulExpressionStatement","src":"5761:65:36"}]},"name":"storage_set_to_zero_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"5682:4:36","type":""},{"name":"offset","nodeType":"YulTypedName","src":"5688:6:36","type":""}],"src":"5643:189:36"},{"body":{"nodeType":"YulBlock","src":"5888:136:36","statements":[{"body":{"nodeType":"YulBlock","src":"5955:63:36","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"5999:5:36"},{"kind":"number","nodeType":"YulLiteral","src":"6006:1:36","type":"","value":"0"}],"functionName":{"name":"storage_set_to_zero_t_uint256","nodeType":"YulIdentifier","src":"5969:29:36"},"nodeType":"YulFunctionCall","src":"5969:39:36"},"nodeType":"YulExpressionStatement","src":"5969:39:36"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"5908:5:36"},{"name":"end","nodeType":"YulIdentifier","src":"5915:3:36"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"5905:2:36"},"nodeType":"YulFunctionCall","src":"5905:14:36"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"5920:26:36","statements":[{"nodeType":"YulAssignment","src":"5922:22:36","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"5935:5:36"},{"kind":"number","nodeType":"YulLiteral","src":"5942:1:36","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5931:3:36"},"nodeType":"YulFunctionCall","src":"5931:13:36"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"5922:5:36"}]}]},"pre":{"nodeType":"YulBlock","src":"5902:2:36","statements":[]},"src":"5898:120:36"}]},"name":"clear_storage_range_t_bytes1","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"5876:5:36","type":""},{"name":"end","nodeType":"YulTypedName","src":"5883:3:36","type":""}],"src":"5838:186:36"},{"body":{"nodeType":"YulBlock","src":"6109:464:36","statements":[{"body":{"nodeType":"YulBlock","src":"6135:431:36","statements":[{"nodeType":"YulVariableDeclaration","src":"6149:54:36","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"6197:5:36"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"6165:31:36"},"nodeType":"YulFunctionCall","src":"6165:38:36"},"variables":[{"name":"dataArea","nodeType":"YulTypedName","src":"6153:8:36","type":""}]},{"nodeType":"YulVariableDeclaration","src":"6216:63:36","value":{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"6239:8:36"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"6267:10:36"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"6249:17:36"},"nodeType":"YulFunctionCall","src":"6249:29:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6235:3:36"},"nodeType":"YulFunctionCall","src":"6235:44:36"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"6220:11:36","type":""}]},{"body":{"nodeType":"YulBlock","src":"6436:27:36","statements":[{"nodeType":"YulAssignment","src":"6438:23:36","value":{"name":"dataArea","nodeType":"YulIdentifier","src":"6453:8:36"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"6438:11:36"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"6420:10:36"},{"kind":"number","nodeType":"YulLiteral","src":"6432:2:36","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"6417:2:36"},"nodeType":"YulFunctionCall","src":"6417:18:36"},"nodeType":"YulIf","src":"6414:49:36"},{"expression":{"arguments":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"6505:11:36"},{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"6522:8:36"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"6550:3:36"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"6532:17:36"},"nodeType":"YulFunctionCall","src":"6532:22:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6518:3:36"},"nodeType":"YulFunctionCall","src":"6518:37:36"}],"functionName":{"name":"clear_storage_range_t_bytes1","nodeType":"YulIdentifier","src":"6476:28:36"},"nodeType":"YulFunctionCall","src":"6476:80:36"},"nodeType":"YulExpressionStatement","src":"6476:80:36"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"6126:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"6131:2:36","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"6123:2:36"},"nodeType":"YulFunctionCall","src":"6123:11:36"},"nodeType":"YulIf","src":"6120:446:36"}]},"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"6085:5:36","type":""},{"name":"len","nodeType":"YulTypedName","src":"6092:3:36","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"6097:10:36","type":""}],"src":"6030:543:36"},{"body":{"nodeType":"YulBlock","src":"6642:54:36","statements":[{"nodeType":"YulAssignment","src":"6652:37:36","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"6677:4:36"},{"name":"value","nodeType":"YulIdentifier","src":"6683:5:36"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"6673:3:36"},"nodeType":"YulFunctionCall","src":"6673:16:36"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"6652:8:36"}]}]},"name":"shift_right_unsigned_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"6617:4:36","type":""},{"name":"value","nodeType":"YulTypedName","src":"6623:5:36","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"6633:8:36","type":""}],"src":"6579:117:36"},{"body":{"nodeType":"YulBlock","src":"6753:118:36","statements":[{"nodeType":"YulVariableDeclaration","src":"6763:68:36","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6812:1:36","type":"","value":"8"},{"name":"bytes","nodeType":"YulIdentifier","src":"6815:5:36"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"6808:3:36"},"nodeType":"YulFunctionCall","src":"6808:13:36"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6827:1:36","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"6823:3:36"},"nodeType":"YulFunctionCall","src":"6823:6:36"}],"functionName":{"name":"shift_right_unsigned_dynamic","nodeType":"YulIdentifier","src":"6779:28:36"},"nodeType":"YulFunctionCall","src":"6779:51:36"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"6775:3:36"},"nodeType":"YulFunctionCall","src":"6775:56:36"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"6767:4:36","type":""}]},{"nodeType":"YulAssignment","src":"6840:25:36","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"6854:4:36"},{"name":"mask","nodeType":"YulIdentifier","src":"6860:4:36"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"6850:3:36"},"nodeType":"YulFunctionCall","src":"6850:15:36"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"6840:6:36"}]}]},"name":"mask_bytes_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"6730:4:36","type":""},{"name":"bytes","nodeType":"YulTypedName","src":"6736:5:36","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"6746:6:36","type":""}],"src":"6702:169:36"},{"body":{"nodeType":"YulBlock","src":"6957:214:36","statements":[{"nodeType":"YulAssignment","src":"7090:37:36","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"7117:4:36"},{"name":"len","nodeType":"YulIdentifier","src":"7123:3:36"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"7098:18:36"},"nodeType":"YulFunctionCall","src":"7098:29:36"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"7090:4:36"}]},{"nodeType":"YulAssignment","src":"7136:29:36","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"7147:4:36"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7157:1:36","type":"","value":"2"},{"name":"len","nodeType":"YulIdentifier","src":"7160:3:36"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"7153:3:36"},"nodeType":"YulFunctionCall","src":"7153:11:36"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7144:2:36"},"nodeType":"YulFunctionCall","src":"7144:21:36"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"7136:4:36"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"6938:4:36","type":""},{"name":"len","nodeType":"YulTypedName","src":"6944:3:36","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"6952:4:36","type":""}],"src":"6876:295:36"},{"body":{"nodeType":"YulBlock","src":"7268:1303:36","statements":[{"nodeType":"YulVariableDeclaration","src":"7279:51:36","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"7326:3:36"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"7293:32:36"},"nodeType":"YulFunctionCall","src":"7293:37:36"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"7283:6:36","type":""}]},{"body":{"nodeType":"YulBlock","src":"7415:22:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"7417:16:36"},"nodeType":"YulFunctionCall","src":"7417:18:36"},"nodeType":"YulExpressionStatement","src":"7417:18:36"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"7387:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"7395:18:36","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7384:2:36"},"nodeType":"YulFunctionCall","src":"7384:30:36"},"nodeType":"YulIf","src":"7381:56:36"},{"nodeType":"YulVariableDeclaration","src":"7447:52:36","value":{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"7493:4:36"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"7487:5:36"},"nodeType":"YulFunctionCall","src":"7487:11:36"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"7461:25:36"},"nodeType":"YulFunctionCall","src":"7461:38:36"},"variables":[{"name":"oldLen","nodeType":"YulTypedName","src":"7451:6:36","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"7592:4:36"},{"name":"oldLen","nodeType":"YulIdentifier","src":"7598:6:36"},{"name":"newLen","nodeType":"YulIdentifier","src":"7606:6:36"}],"functionName":{"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulIdentifier","src":"7546:45:36"},"nodeType":"YulFunctionCall","src":"7546:67:36"},"nodeType":"YulExpressionStatement","src":"7546:67:36"},{"nodeType":"YulVariableDeclaration","src":"7623:18:36","value":{"kind":"number","nodeType":"YulLiteral","src":"7640:1:36","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"7627:9:36","type":""}]},{"nodeType":"YulAssignment","src":"7651:17:36","value":{"kind":"number","nodeType":"YulLiteral","src":"7664:4:36","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"7651:9:36"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"7715:611:36","statements":[{"nodeType":"YulVariableDeclaration","src":"7729:37:36","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"7748:6:36"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7760:4:36","type":"","value":"0x1f"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"7756:3:36"},"nodeType":"YulFunctionCall","src":"7756:9:36"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"7744:3:36"},"nodeType":"YulFunctionCall","src":"7744:22:36"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"7733:7:36","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7780:51:36","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"7826:4:36"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"7794:31:36"},"nodeType":"YulFunctionCall","src":"7794:37:36"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"7784:6:36","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7844:10:36","value":{"kind":"number","nodeType":"YulLiteral","src":"7853:1:36","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"7848:1:36","type":""}]},{"body":{"nodeType":"YulBlock","src":"7912:163:36","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"7937:6:36"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"7955:3:36"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"7960:9:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7951:3:36"},"nodeType":"YulFunctionCall","src":"7951:19:36"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7945:5:36"},"nodeType":"YulFunctionCall","src":"7945:26:36"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"7930:6:36"},"nodeType":"YulFunctionCall","src":"7930:42:36"},"nodeType":"YulExpressionStatement","src":"7930:42:36"},{"nodeType":"YulAssignment","src":"7989:24:36","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"8003:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"8011:1:36","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7999:3:36"},"nodeType":"YulFunctionCall","src":"7999:14:36"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"7989:6:36"}]},{"nodeType":"YulAssignment","src":"8030:31:36","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"8047:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"8058:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8043:3:36"},"nodeType":"YulFunctionCall","src":"8043:18:36"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"8030:9:36"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7878:1:36"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"7881:7:36"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7875:2:36"},"nodeType":"YulFunctionCall","src":"7875:14:36"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"7890:21:36","statements":[{"nodeType":"YulAssignment","src":"7892:17:36","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7901:1:36"},{"kind":"number","nodeType":"YulLiteral","src":"7904:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7897:3:36"},"nodeType":"YulFunctionCall","src":"7897:12:36"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"7892:1:36"}]}]},"pre":{"nodeType":"YulBlock","src":"7871:3:36","statements":[]},"src":"7867:208:36"},{"body":{"nodeType":"YulBlock","src":"8111:156:36","statements":[{"nodeType":"YulVariableDeclaration","src":"8129:43:36","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8156:3:36"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"8161:9:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8152:3:36"},"nodeType":"YulFunctionCall","src":"8152:19:36"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8146:5:36"},"nodeType":"YulFunctionCall","src":"8146:26:36"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"8133:9:36","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"8196:6:36"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"8223:9:36"},{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"8238:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"8246:4:36","type":"","value":"0x1f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8234:3:36"},"nodeType":"YulFunctionCall","src":"8234:17:36"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"8204:18:36"},"nodeType":"YulFunctionCall","src":"8204:48:36"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"8189:6:36"},"nodeType":"YulFunctionCall","src":"8189:64:36"},"nodeType":"YulExpressionStatement","src":"8189:64:36"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"8094:7:36"},{"name":"newLen","nodeType":"YulIdentifier","src":"8103:6:36"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"8091:2:36"},"nodeType":"YulFunctionCall","src":"8091:19:36"},"nodeType":"YulIf","src":"8088:179:36"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"8287:4:36"},{"arguments":[{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"8301:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"8309:1:36","type":"","value":"2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"8297:3:36"},"nodeType":"YulFunctionCall","src":"8297:14:36"},{"kind":"number","nodeType":"YulLiteral","src":"8313:1:36","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8293:3:36"},"nodeType":"YulFunctionCall","src":"8293:22:36"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"8280:6:36"},"nodeType":"YulFunctionCall","src":"8280:36:36"},"nodeType":"YulExpressionStatement","src":"8280:36:36"}]},"nodeType":"YulCase","src":"7708:618:36","value":{"kind":"number","nodeType":"YulLiteral","src":"7713:1:36","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"8343:222:36","statements":[{"nodeType":"YulVariableDeclaration","src":"8357:14:36","value":{"kind":"number","nodeType":"YulLiteral","src":"8370:1:36","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"8361:5:36","type":""}]},{"body":{"nodeType":"YulBlock","src":"8394:67:36","statements":[{"nodeType":"YulAssignment","src":"8412:35:36","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8431:3:36"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"8436:9:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8427:3:36"},"nodeType":"YulFunctionCall","src":"8427:19:36"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"8421:5:36"},"nodeType":"YulFunctionCall","src":"8421:26:36"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"8412:5:36"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"8387:6:36"},"nodeType":"YulIf","src":"8384:77:36"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"8481:4:36"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8540:5:36"},{"name":"newLen","nodeType":"YulIdentifier","src":"8547:6:36"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"8487:52:36"},"nodeType":"YulFunctionCall","src":"8487:67:36"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"8474:6:36"},"nodeType":"YulFunctionCall","src":"8474:81:36"},"nodeType":"YulExpressionStatement","src":"8474:81:36"}]},"nodeType":"YulCase","src":"8335:230:36","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"7688:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"7696:2:36","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7685:2:36"},"nodeType":"YulFunctionCall","src":"7685:14:36"},"nodeType":"YulSwitch","src":"7678:887:36"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"7257:4:36","type":""},{"name":"src","nodeType":"YulTypedName","src":"7263:3:36","type":""}],"src":"7176:1395:36"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr_fromMemory(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_memory_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := mload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n}\n","id":36,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60806040523480156200001157600080fd5b50604051620026dd380380620026dd8339818101604052810190620000379190620001f6565b8160009081620000489190620004c6565b5080600190816200005a9190620004c6565b505050620005ad565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620000cc8262000081565b810181811067ffffffffffffffff82111715620000ee57620000ed62000092565b5b80604052505050565b60006200010362000063565b9050620001118282620000c1565b919050565b600067ffffffffffffffff82111562000134576200013362000092565b5b6200013f8262000081565b9050602081019050919050565b60005b838110156200016c5780820151818401526020810190506200014f565b60008484015250505050565b60006200018f620001898462000116565b620000f7565b905082815260208101848484011115620001ae57620001ad6200007c565b5b620001bb8482856200014c565b509392505050565b600082601f830112620001db57620001da62000077565b5b8151620001ed84826020860162000178565b91505092915050565b6000806040838503121562000210576200020f6200006d565b5b600083015167ffffffffffffffff81111562000231576200023062000072565b5b6200023f85828601620001c3565b925050602083015167ffffffffffffffff81111562000263576200026262000072565b5b6200027185828601620001c3565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620002ce57607f821691505b602082108103620002e457620002e362000286565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026200034e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200030f565b6200035a86836200030f565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620003a7620003a16200039b8462000372565b6200037c565b62000372565b9050919050565b6000819050919050565b620003c38362000386565b620003db620003d282620003ae565b8484546200031c565b825550505050565b600090565b620003f2620003e3565b620003ff818484620003b8565b505050565b5b8181101562000427576200041b600082620003e8565b60018101905062000405565b5050565b601f82111562000476576200044081620002ea565b6200044b84620002ff565b810160208510156200045b578190505b620004736200046a85620002ff565b83018262000404565b50505b505050565b600082821c905092915050565b60006200049b600019846008026200047b565b1980831691505092915050565b6000620004b6838362000488565b9150826002028217905092915050565b620004d1826200027b565b67ffffffffffffffff811115620004ed57620004ec62000092565b5b620004f98254620002b5565b620005068282856200042b565b600060209050601f8311600181146200053e576000841562000529578287015190505b620005358582620004a8565b865550620005a5565b601f1984166200054e86620002ea565b60005b82811015620005785784890151825560018201915060208501945060208101905062000551565b8683101562000598578489015162000594601f89168262000488565b8355505b6001600288020188555050505b505050505050565b61212080620005bd6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb46514610224578063b88d4fde14610240578063c87b56dd1461025c578063e985e9c51461028c576100cf565b80636352211e146101a657806370a08231146101d657806395d89b4114610206576100cf565b806301ffc9a7146100d457806306fdde0314610104578063081812fc14610122578063095ea7b31461015257806323b872dd1461016e57806342842e0e1461018a575b600080fd5b6100ee60048036038101906100e991906114f4565b6102bc565b6040516100fb919061153c565b60405180910390f35b61010c61039e565b60405161011991906115e7565b60405180910390f35b61013c6004803603810190610137919061163f565b610430565b60405161014991906116ad565b60405180910390f35b61016c600480360381019061016791906116f4565b610476565b005b61018860048036038101906101839190611734565b61058d565b005b6101a4600480360381019061019f9190611734565b6105ed565b005b6101c060048036038101906101bb919061163f565b61060d565b6040516101cd91906116ad565b60405180910390f35b6101f060048036038101906101eb9190611787565b610693565b6040516101fd91906117c3565b60405180910390f35b61020e61074a565b60405161021b91906115e7565b60405180910390f35b61023e6004803603810190610239919061180a565b6107dc565b005b61025a6004803603810190610255919061197f565b6107f2565b005b6102766004803603810190610271919061163f565b610854565b60405161028391906115e7565b60405180910390f35b6102a660048036038101906102a19190611a02565b6108bc565b6040516102b3919061153c565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061038757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610397575061039682610950565b5b9050919050565b6060600080546103ad90611a71565b80601f01602080910402602001604051908101604052809291908181526020018280546103d990611a71565b80156104265780601f106103fb57610100808354040283529160200191610426565b820191906000526020600020905b81548152906001019060200180831161040957829003601f168201915b5050505050905090565b600061043b826109ba565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006104818261060d565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036104f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e890611b14565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610510610a05565b73ffffffffffffffffffffffffffffffffffffffff16148061053f575061053e81610539610a05565b6108bc565b5b61057e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057590611ba6565b60405180910390fd5b6105888383610a0d565b505050565b61059e610598610a05565b82610ac6565b6105dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d490611c38565b60405180910390fd5b6105e8838383610b5b565b505050565b610608838383604051806020016040528060008152506107f2565b505050565b60008061061983610e54565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361068a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068190611ca4565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610703576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106fa90611d36565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606001805461075990611a71565b80601f016020809104026020016040519081016040528092919081815260200182805461078590611a71565b80156107d25780601f106107a7576101008083540402835291602001916107d2565b820191906000526020600020905b8154815290600101906020018083116107b557829003601f168201915b5050505050905090565b6107ee6107e7610a05565b8383610e91565b5050565b6108036107fd610a05565b83610ac6565b610842576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083990611c38565b60405180910390fd5b61084e84848484610ffd565b50505050565b606061085f826109ba565b6000610869611059565b9050600081511161088957604051806020016040528060008152506108b4565b8061089384611070565b6040516020016108a4929190611d92565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6109c38161113e565b610a02576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f990611ca4565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610a808361060d565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610ad28361060d565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610b145750610b1381856108bc565b5b80610b5257508373ffffffffffffffffffffffffffffffffffffffff16610b3a84610430565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610b7b8261060d565b73ffffffffffffffffffffffffffffffffffffffff1614610bd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc890611e28565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3790611eba565b60405180910390fd5b610c4d838383600161117f565b8273ffffffffffffffffffffffffffffffffffffffff16610c6d8261060d565b73ffffffffffffffffffffffffffffffffffffffff1614610cc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cba90611e28565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610e4f8383836001611185565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610eff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef690611f26565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610ff0919061153c565b60405180910390a3505050565b611008848484610b5b565b6110148484848461118b565b611053576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104a90611fb8565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606000600161107f84611312565b01905060008167ffffffffffffffff81111561109e5761109d611854565b5b6040519080825280601f01601f1916602001820160405280156110d05781602001600182028036833780820191505090505b509050600082602001820190505b600115611133578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161112757611126611fd8565b5b049450600085036110de575b819350505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff1661116083610e54565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b50505050565b50505050565b60006111ac8473ffffffffffffffffffffffffffffffffffffffff16611465565b15611305578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026111d5610a05565b8786866040518563ffffffff1660e01b81526004016111f7949392919061205c565b6020604051808303816000875af192505050801561123357506040513d601f19601f8201168201806040525081019061123091906120bd565b60015b6112b5573d8060008114611263576040519150601f19603f3d011682016040523d82523d6000602084013e611268565b606091505b5060008151036112ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a490611fb8565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061130a565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611370577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161136657611365611fd8565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106113ad576d04ee2d6d415b85acef810000000083816113a3576113a2611fd8565b5b0492506020810190505b662386f26fc1000083106113dc57662386f26fc1000083816113d2576113d1611fd8565b5b0492506010810190505b6305f5e1008310611405576305f5e10083816113fb576113fa611fd8565b5b0492506008810190505b612710831061142a5761271083816114205761141f611fd8565b5b0492506004810190505b6064831061144d576064838161144357611442611fd8565b5b0492506002810190505b600a831061145c576001810190505b80915050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6114d18161149c565b81146114dc57600080fd5b50565b6000813590506114ee816114c8565b92915050565b60006020828403121561150a57611509611492565b5b6000611518848285016114df565b91505092915050565b60008115159050919050565b61153681611521565b82525050565b6000602082019050611551600083018461152d565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611591578082015181840152602081019050611576565b60008484015250505050565b6000601f19601f8301169050919050565b60006115b982611557565b6115c38185611562565b93506115d3818560208601611573565b6115dc8161159d565b840191505092915050565b6000602082019050818103600083015261160181846115ae565b905092915050565b6000819050919050565b61161c81611609565b811461162757600080fd5b50565b60008135905061163981611613565b92915050565b60006020828403121561165557611654611492565b5b60006116638482850161162a565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006116978261166c565b9050919050565b6116a78161168c565b82525050565b60006020820190506116c2600083018461169e565b92915050565b6116d18161168c565b81146116dc57600080fd5b50565b6000813590506116ee816116c8565b92915050565b6000806040838503121561170b5761170a611492565b5b6000611719858286016116df565b925050602061172a8582860161162a565b9150509250929050565b60008060006060848603121561174d5761174c611492565b5b600061175b868287016116df565b935050602061176c868287016116df565b925050604061177d8682870161162a565b9150509250925092565b60006020828403121561179d5761179c611492565b5b60006117ab848285016116df565b91505092915050565b6117bd81611609565b82525050565b60006020820190506117d860008301846117b4565b92915050565b6117e781611521565b81146117f257600080fd5b50565b600081359050611804816117de565b92915050565b6000806040838503121561182157611820611492565b5b600061182f858286016116df565b9250506020611840858286016117f5565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61188c8261159d565b810181811067ffffffffffffffff821117156118ab576118aa611854565b5b80604052505050565b60006118be611488565b90506118ca8282611883565b919050565b600067ffffffffffffffff8211156118ea576118e9611854565b5b6118f38261159d565b9050602081019050919050565b82818337600083830152505050565b600061192261191d846118cf565b6118b4565b90508281526020810184848401111561193e5761193d61184f565b5b611949848285611900565b509392505050565b600082601f8301126119665761196561184a565b5b813561197684826020860161190f565b91505092915050565b6000806000806080858703121561199957611998611492565b5b60006119a7878288016116df565b94505060206119b8878288016116df565b93505060406119c98782880161162a565b925050606085013567ffffffffffffffff8111156119ea576119e9611497565b5b6119f687828801611951565b91505092959194509250565b60008060408385031215611a1957611a18611492565b5b6000611a27858286016116df565b9250506020611a38858286016116df565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611a8957607f821691505b602082108103611a9c57611a9b611a42565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000611afe602183611562565b9150611b0982611aa2565b604082019050919050565b60006020820190508181036000830152611b2d81611af1565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000611b90603d83611562565b9150611b9b82611b34565b604082019050919050565b60006020820190508181036000830152611bbf81611b83565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000611c22602d83611562565b9150611c2d82611bc6565b604082019050919050565b60006020820190508181036000830152611c5181611c15565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000611c8e601883611562565b9150611c9982611c58565b602082019050919050565b60006020820190508181036000830152611cbd81611c81565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000611d20602983611562565b9150611d2b82611cc4565b604082019050919050565b60006020820190508181036000830152611d4f81611d13565b9050919050565b600081905092915050565b6000611d6c82611557565b611d768185611d56565b9350611d86818560208601611573565b80840191505092915050565b6000611d9e8285611d61565b9150611daa8284611d61565b91508190509392505050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000611e12602583611562565b9150611e1d82611db6565b604082019050919050565b60006020820190508181036000830152611e4181611e05565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000611ea4602483611562565b9150611eaf82611e48565b604082019050919050565b60006020820190508181036000830152611ed381611e97565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000611f10601983611562565b9150611f1b82611eda565b602082019050919050565b60006020820190508181036000830152611f3f81611f03565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000611fa2603283611562565b9150611fad82611f46565b604082019050919050565b60006020820190508181036000830152611fd181611f95565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600081519050919050565b600082825260208201905092915050565b600061202e82612007565b6120388185612012565b9350612048818560208601611573565b6120518161159d565b840191505092915050565b6000608082019050612071600083018761169e565b61207e602083018661169e565b61208b60408301856117b4565b818103606083015261209d8184612023565b905095945050505050565b6000815190506120b7816114c8565b92915050565b6000602082840312156120d3576120d2611492565b5b60006120e1848285016120a8565b9150509291505056fea2646970667358221220284ee25fe50ff5ed6a8afdce160046c560382a7e6d15a931f6fb4ad3d1649e4464736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x26DD CODESIZE SUB DUP1 PUSH3 0x26DD DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH3 0x37 SWAP2 SWAP1 PUSH3 0x1F6 JUMP JUMPDEST DUP2 PUSH1 0x0 SWAP1 DUP2 PUSH3 0x48 SWAP2 SWAP1 PUSH3 0x4C6 JUMP JUMPDEST POP DUP1 PUSH1 0x1 SWAP1 DUP2 PUSH3 0x5A SWAP2 SWAP1 PUSH3 0x4C6 JUMP JUMPDEST POP POP POP PUSH3 0x5AD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH3 0xCC DUP3 PUSH3 0x81 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0xEE JUMPI PUSH3 0xED PUSH3 0x92 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x103 PUSH3 0x63 JUMP JUMPDEST SWAP1 POP PUSH3 0x111 DUP3 DUP3 PUSH3 0xC1 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0x134 JUMPI PUSH3 0x133 PUSH3 0x92 JUMP JUMPDEST JUMPDEST PUSH3 0x13F DUP3 PUSH3 0x81 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x16C JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x14F JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x18F PUSH3 0x189 DUP5 PUSH3 0x116 JUMP JUMPDEST PUSH3 0xF7 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH3 0x1AE JUMPI PUSH3 0x1AD PUSH3 0x7C JUMP JUMPDEST JUMPDEST PUSH3 0x1BB DUP5 DUP3 DUP6 PUSH3 0x14C JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x1DB JUMPI PUSH3 0x1DA PUSH3 0x77 JUMP JUMPDEST JUMPDEST DUP2 MLOAD PUSH3 0x1ED DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0x178 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x210 JUMPI PUSH3 0x20F PUSH3 0x6D JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x231 JUMPI PUSH3 0x230 PUSH3 0x72 JUMP JUMPDEST JUMPDEST PUSH3 0x23F DUP6 DUP3 DUP7 ADD PUSH3 0x1C3 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x263 JUMPI PUSH3 0x262 PUSH3 0x72 JUMP JUMPDEST JUMPDEST PUSH3 0x271 DUP6 DUP3 DUP7 ADD PUSH3 0x1C3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x2CE JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x2E4 JUMPI PUSH3 0x2E3 PUSH3 0x286 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH3 0x34E PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH3 0x30F JUMP JUMPDEST PUSH3 0x35A DUP7 DUP4 PUSH3 0x30F JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x3A7 PUSH3 0x3A1 PUSH3 0x39B DUP5 PUSH3 0x372 JUMP JUMPDEST PUSH3 0x37C JUMP JUMPDEST PUSH3 0x372 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x3C3 DUP4 PUSH3 0x386 JUMP JUMPDEST PUSH3 0x3DB PUSH3 0x3D2 DUP3 PUSH3 0x3AE JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH3 0x31C JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH3 0x3F2 PUSH3 0x3E3 JUMP JUMPDEST PUSH3 0x3FF DUP2 DUP5 DUP5 PUSH3 0x3B8 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x427 JUMPI PUSH3 0x41B PUSH1 0x0 DUP3 PUSH3 0x3E8 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x405 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x476 JUMPI PUSH3 0x440 DUP2 PUSH3 0x2EA JUMP JUMPDEST PUSH3 0x44B DUP5 PUSH3 0x2FF JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH3 0x45B JUMPI DUP2 SWAP1 POP JUMPDEST PUSH3 0x473 PUSH3 0x46A DUP6 PUSH3 0x2FF JUMP JUMPDEST DUP4 ADD DUP3 PUSH3 0x404 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x49B PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH3 0x47B JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x4B6 DUP4 DUP4 PUSH3 0x488 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x4D1 DUP3 PUSH3 0x27B JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x4ED JUMPI PUSH3 0x4EC PUSH3 0x92 JUMP JUMPDEST JUMPDEST PUSH3 0x4F9 DUP3 SLOAD PUSH3 0x2B5 JUMP JUMPDEST PUSH3 0x506 DUP3 DUP3 DUP6 PUSH3 0x42B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x53E JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x529 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH3 0x535 DUP6 DUP3 PUSH3 0x4A8 JUMP JUMPDEST DUP7 SSTORE POP PUSH3 0x5A5 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH3 0x54E DUP7 PUSH3 0x2EA JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x578 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x551 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH3 0x598 JUMPI DUP5 DUP10 ADD MLOAD PUSH3 0x594 PUSH1 0x1F DUP10 AND DUP3 PUSH3 0x488 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x2120 DUP1 PUSH3 0x5BD PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x224 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x240 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x25C JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x28C JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x1A6 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1D6 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x206 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x104 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x152 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x18A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x14F4 JUMP JUMPDEST PUSH2 0x2BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFB SWAP2 SWAP1 PUSH2 0x153C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10C PUSH2 0x39E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x119 SWAP2 SWAP1 PUSH2 0x15E7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x137 SWAP2 SWAP1 PUSH2 0x163F JUMP JUMPDEST PUSH2 0x430 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x149 SWAP2 SWAP1 PUSH2 0x16AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x167 SWAP2 SWAP1 PUSH2 0x16F4 JUMP JUMPDEST PUSH2 0x476 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x188 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x183 SWAP2 SWAP1 PUSH2 0x1734 JUMP JUMPDEST PUSH2 0x58D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x19F SWAP2 SWAP1 PUSH2 0x1734 JUMP JUMPDEST PUSH2 0x5ED JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BB SWAP2 SWAP1 PUSH2 0x163F JUMP JUMPDEST PUSH2 0x60D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CD SWAP2 SWAP1 PUSH2 0x16AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EB SWAP2 SWAP1 PUSH2 0x1787 JUMP JUMPDEST PUSH2 0x693 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FD SWAP2 SWAP1 PUSH2 0x17C3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20E PUSH2 0x74A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21B SWAP2 SWAP1 PUSH2 0x15E7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x239 SWAP2 SWAP1 PUSH2 0x180A JUMP JUMPDEST PUSH2 0x7DC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x255 SWAP2 SWAP1 PUSH2 0x197F JUMP JUMPDEST PUSH2 0x7F2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x276 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x271 SWAP2 SWAP1 PUSH2 0x163F JUMP JUMPDEST PUSH2 0x854 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x283 SWAP2 SWAP1 PUSH2 0x15E7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x1A02 JUMP JUMPDEST PUSH2 0x8BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B3 SWAP2 SWAP1 PUSH2 0x153C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x387 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x397 JUMPI POP PUSH2 0x396 DUP3 PUSH2 0x950 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x3AD SWAP1 PUSH2 0x1A71 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3D9 SWAP1 PUSH2 0x1A71 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x426 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3FB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x426 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x409 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43B DUP3 PUSH2 0x9BA JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x481 DUP3 PUSH2 0x60D JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x4F1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E8 SWAP1 PUSH2 0x1B14 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x510 PUSH2 0xA05 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x53F JUMPI POP PUSH2 0x53E DUP2 PUSH2 0x539 PUSH2 0xA05 JUMP JUMPDEST PUSH2 0x8BC JUMP JUMPDEST JUMPDEST PUSH2 0x57E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x575 SWAP1 PUSH2 0x1BA6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x588 DUP4 DUP4 PUSH2 0xA0D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x59E PUSH2 0x598 PUSH2 0xA05 JUMP JUMPDEST DUP3 PUSH2 0xAC6 JUMP JUMPDEST PUSH2 0x5DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5D4 SWAP1 PUSH2 0x1C38 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5E8 DUP4 DUP4 DUP4 PUSH2 0xB5B JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x608 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x7F2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x619 DUP4 PUSH2 0xE54 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x68A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x681 SWAP1 PUSH2 0x1CA4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x703 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FA SWAP1 PUSH2 0x1D36 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x759 SWAP1 PUSH2 0x1A71 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x785 SWAP1 PUSH2 0x1A71 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7D2 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7A7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7D2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7B5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x7EE PUSH2 0x7E7 PUSH2 0xA05 JUMP JUMPDEST DUP4 DUP4 PUSH2 0xE91 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x803 PUSH2 0x7FD PUSH2 0xA05 JUMP JUMPDEST DUP4 PUSH2 0xAC6 JUMP JUMPDEST PUSH2 0x842 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x839 SWAP1 PUSH2 0x1C38 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x84E DUP5 DUP5 DUP5 DUP5 PUSH2 0xFFD JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x85F DUP3 PUSH2 0x9BA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x869 PUSH2 0x1059 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x889 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x8B4 JUMP JUMPDEST DUP1 PUSH2 0x893 DUP5 PUSH2 0x1070 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8A4 SWAP3 SWAP2 SWAP1 PUSH2 0x1D92 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x9C3 DUP2 PUSH2 0x113E JUMP JUMPDEST PUSH2 0xA02 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F9 SWAP1 PUSH2 0x1CA4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xA80 DUP4 PUSH2 0x60D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xAD2 DUP4 PUSH2 0x60D JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xB14 JUMPI POP PUSH2 0xB13 DUP2 DUP6 PUSH2 0x8BC JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xB52 JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB3A DUP5 PUSH2 0x430 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB7B DUP3 PUSH2 0x60D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBD1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBC8 SWAP1 PUSH2 0x1E28 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xC40 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC37 SWAP1 PUSH2 0x1EBA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC4D DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x117F JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC6D DUP3 PUSH2 0x60D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCC3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCBA SWAP1 PUSH2 0x1E28 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xE4F DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1185 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xEFF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEF6 SWAP1 PUSH2 0x1F26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0xFF0 SWAP2 SWAP1 PUSH2 0x153C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x1008 DUP5 DUP5 DUP5 PUSH2 0xB5B JUMP JUMPDEST PUSH2 0x1014 DUP5 DUP5 DUP5 DUP5 PUSH2 0x118B JUMP JUMPDEST PUSH2 0x1053 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x104A SWAP1 PUSH2 0x1FB8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x107F DUP5 PUSH2 0x1312 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x109E JUMPI PUSH2 0x109D PUSH2 0x1854 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x10D0 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x1133 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x1127 JUMPI PUSH2 0x1126 PUSH2 0x1FD8 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 SUB PUSH2 0x10DE JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1160 DUP4 PUSH2 0xE54 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11AC DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1465 JUMP JUMPDEST ISZERO PUSH2 0x1305 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x11D5 PUSH2 0xA05 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x11F7 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x205C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1233 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1230 SWAP2 SWAP1 PUSH2 0x20BD JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x12B5 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1263 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1268 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x12AD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A4 SWAP1 PUSH2 0x1FB8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x130A JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x1370 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x1366 JUMPI PUSH2 0x1365 PUSH2 0x1FD8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x13AD JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x13A3 JUMPI PUSH2 0x13A2 PUSH2 0x1FD8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x13DC JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x13D2 JUMPI PUSH2 0x13D1 PUSH2 0x1FD8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1405 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x13FB JUMPI PUSH2 0x13FA PUSH2 0x1FD8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x142A JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x1420 JUMPI PUSH2 0x141F PUSH2 0x1FD8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x144D JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x1443 JUMPI PUSH2 0x1442 PUSH2 0x1FD8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x145C JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x14D1 DUP2 PUSH2 0x149C JUMP JUMPDEST DUP2 EQ PUSH2 0x14DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x14EE DUP2 PUSH2 0x14C8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x150A JUMPI PUSH2 0x1509 PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1518 DUP5 DUP3 DUP6 ADD PUSH2 0x14DF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1536 DUP2 PUSH2 0x1521 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1551 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x152D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1591 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1576 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15B9 DUP3 PUSH2 0x1557 JUMP JUMPDEST PUSH2 0x15C3 DUP2 DUP6 PUSH2 0x1562 JUMP JUMPDEST SWAP4 POP PUSH2 0x15D3 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1573 JUMP JUMPDEST PUSH2 0x15DC DUP2 PUSH2 0x159D JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1601 DUP2 DUP5 PUSH2 0x15AE JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x161C DUP2 PUSH2 0x1609 JUMP JUMPDEST DUP2 EQ PUSH2 0x1627 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1639 DUP2 PUSH2 0x1613 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1655 JUMPI PUSH2 0x1654 PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1663 DUP5 DUP3 DUP6 ADD PUSH2 0x162A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1697 DUP3 PUSH2 0x166C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x16A7 DUP2 PUSH2 0x168C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x16C2 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x169E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x16D1 DUP2 PUSH2 0x168C JUMP JUMPDEST DUP2 EQ PUSH2 0x16DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x16EE DUP2 PUSH2 0x16C8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x170B JUMPI PUSH2 0x170A PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1719 DUP6 DUP3 DUP7 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x172A DUP6 DUP3 DUP7 ADD PUSH2 0x162A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x174D JUMPI PUSH2 0x174C PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x175B DUP7 DUP3 DUP8 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x176C DUP7 DUP3 DUP8 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x177D DUP7 DUP3 DUP8 ADD PUSH2 0x162A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x179D JUMPI PUSH2 0x179C PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x17AB DUP5 DUP3 DUP6 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x17BD DUP2 PUSH2 0x1609 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x17D8 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x17B4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x17E7 DUP2 PUSH2 0x1521 JUMP JUMPDEST DUP2 EQ PUSH2 0x17F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1804 DUP2 PUSH2 0x17DE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1821 JUMPI PUSH2 0x1820 PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x182F DUP6 DUP3 DUP7 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1840 DUP6 DUP3 DUP7 ADD PUSH2 0x17F5 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x188C DUP3 PUSH2 0x159D JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x18AB JUMPI PUSH2 0x18AA PUSH2 0x1854 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x18BE PUSH2 0x1488 JUMP JUMPDEST SWAP1 POP PUSH2 0x18CA DUP3 DUP3 PUSH2 0x1883 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x18EA JUMPI PUSH2 0x18E9 PUSH2 0x1854 JUMP JUMPDEST JUMPDEST PUSH2 0x18F3 DUP3 PUSH2 0x159D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1922 PUSH2 0x191D DUP5 PUSH2 0x18CF JUMP JUMPDEST PUSH2 0x18B4 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x193E JUMPI PUSH2 0x193D PUSH2 0x184F JUMP JUMPDEST JUMPDEST PUSH2 0x1949 DUP5 DUP3 DUP6 PUSH2 0x1900 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1966 JUMPI PUSH2 0x1965 PUSH2 0x184A JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1976 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x190F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1999 JUMPI PUSH2 0x1998 PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x19A7 DUP8 DUP3 DUP9 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x19B8 DUP8 DUP3 DUP9 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x19C9 DUP8 DUP3 DUP9 ADD PUSH2 0x162A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x19EA JUMPI PUSH2 0x19E9 PUSH2 0x1497 JUMP JUMPDEST JUMPDEST PUSH2 0x19F6 DUP8 DUP3 DUP9 ADD PUSH2 0x1951 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1A19 JUMPI PUSH2 0x1A18 PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1A27 DUP6 DUP3 DUP7 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1A38 DUP6 DUP3 DUP7 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1A89 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1A9C JUMPI PUSH2 0x1A9B PUSH2 0x1A42 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AFE PUSH1 0x21 DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B09 DUP3 PUSH2 0x1AA2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1B2D DUP2 PUSH2 0x1AF1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B90 PUSH1 0x3D DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B9B DUP3 PUSH2 0x1B34 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1BBF DUP2 PUSH2 0x1B83 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C22 PUSH1 0x2D DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1C2D DUP3 PUSH2 0x1BC6 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C51 DUP2 PUSH2 0x1C15 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C8E PUSH1 0x18 DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1C99 DUP3 PUSH2 0x1C58 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1CBD DUP2 PUSH2 0x1C81 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D20 PUSH1 0x29 DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1D2B DUP3 PUSH2 0x1CC4 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D4F DUP2 PUSH2 0x1D13 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D6C DUP3 PUSH2 0x1557 JUMP JUMPDEST PUSH2 0x1D76 DUP2 DUP6 PUSH2 0x1D56 JUMP JUMPDEST SWAP4 POP PUSH2 0x1D86 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1573 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D9E DUP3 DUP6 PUSH2 0x1D61 JUMP JUMPDEST SWAP2 POP PUSH2 0x1DAA DUP3 DUP5 PUSH2 0x1D61 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E12 PUSH1 0x25 DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1E1D DUP3 PUSH2 0x1DB6 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E41 DUP2 PUSH2 0x1E05 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EA4 PUSH1 0x24 DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1EAF DUP3 PUSH2 0x1E48 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1ED3 DUP2 PUSH2 0x1E97 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F10 PUSH1 0x19 DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1F1B DUP3 PUSH2 0x1EDA JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1F3F DUP2 PUSH2 0x1F03 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FA2 PUSH1 0x32 DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1FAD DUP3 PUSH2 0x1F46 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1FD1 DUP2 PUSH2 0x1F95 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x202E DUP3 PUSH2 0x2007 JUMP JUMPDEST PUSH2 0x2038 DUP2 DUP6 PUSH2 0x2012 JUMP JUMPDEST SWAP4 POP PUSH2 0x2048 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1573 JUMP JUMPDEST PUSH2 0x2051 DUP2 PUSH2 0x159D JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2071 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x169E JUMP JUMPDEST PUSH2 0x207E PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x169E JUMP JUMPDEST PUSH2 0x208B PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x17B4 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x209D DUP2 DUP5 PUSH2 0x2023 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x20B7 DUP2 PUSH2 0x14C8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x20D3 JUMPI PUSH2 0x20D2 PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x20E1 DUP5 DUP3 DUP6 ADD PUSH2 0x20A8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x28 0x4E 0xE2 0x5F 0xE5 0xF CREATE2 0xED PUSH11 0x8AFDCE160046C560382A7E PUSH14 0x15A931F6FB4AD3D1649E4464736F PUSH13 0x63430008130033000000000000 ","sourceMap":"628:16377:19:-:0;;;1390:113;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1464:5;1456;:13;;;;;;:::i;:::-;;1489:7;1479;:17;;;;;;:::i;:::-;;1390:113;;628:16377;;7:75:36;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:117;443:1;440;433:12;457:117;566:1;563;556:12;580:102;621:6;672:2;668:7;663:2;656:5;652:14;648:28;638:38;;580:102;;;:::o;688:180::-;736:77;733:1;726:88;833:4;830:1;823:15;857:4;854:1;847:15;874:281;957:27;979:4;957:27;:::i;:::-;949:6;945:40;1087:6;1075:10;1072:22;1051:18;1039:10;1036:34;1033:62;1030:88;;;1098:18;;:::i;:::-;1030:88;1138:10;1134:2;1127:22;917:238;874:281;;:::o;1161:129::-;1195:6;1222:20;;:::i;:::-;1212:30;;1251:33;1279:4;1271:6;1251:33;:::i;:::-;1161:129;;;:::o;1296:308::-;1358:4;1448:18;1440:6;1437:30;1434:56;;;1470:18;;:::i;:::-;1434:56;1508:29;1530:6;1508:29;:::i;:::-;1500:37;;1592:4;1586;1582:15;1574:23;;1296:308;;;:::o;1610:246::-;1691:1;1701:113;1715:6;1712:1;1709:13;1701:113;;;1800:1;1795:3;1791:11;1785:18;1781:1;1776:3;1772:11;1765:39;1737:2;1734:1;1730:10;1725:15;;1701:113;;;1848:1;1839:6;1834:3;1830:16;1823:27;1672:184;1610:246;;;:::o;1862:434::-;1951:5;1976:66;1992:49;2034:6;1992:49;:::i;:::-;1976:66;:::i;:::-;1967:75;;2065:6;2058:5;2051:21;2103:4;2096:5;2092:16;2141:3;2132:6;2127:3;2123:16;2120:25;2117:112;;;2148:79;;:::i;:::-;2117:112;2238:52;2283:6;2278:3;2273;2238:52;:::i;:::-;1957:339;1862:434;;;;;:::o;2316:355::-;2383:5;2432:3;2425:4;2417:6;2413:17;2409:27;2399:122;;2440:79;;:::i;:::-;2399:122;2550:6;2544:13;2575:90;2661:3;2653:6;2646:4;2638:6;2634:17;2575:90;:::i;:::-;2566:99;;2389:282;2316:355;;;;:::o;2677:853::-;2776:6;2784;2833:2;2821:9;2812:7;2808:23;2804:32;2801:119;;;2839:79;;:::i;:::-;2801:119;2980:1;2969:9;2965:17;2959:24;3010:18;3002:6;2999:30;2996:117;;;3032:79;;:::i;:::-;2996:117;3137:74;3203:7;3194:6;3183:9;3179:22;3137:74;:::i;:::-;3127:84;;2930:291;3281:2;3270:9;3266:18;3260:25;3312:18;3304:6;3301:30;3298:117;;;3334:79;;:::i;:::-;3298:117;3439:74;3505:7;3496:6;3485:9;3481:22;3439:74;:::i;:::-;3429:84;;3231:292;2677:853;;;;;:::o;3536:99::-;3588:6;3622:5;3616:12;3606:22;;3536:99;;;:::o;3641:180::-;3689:77;3686:1;3679:88;3786:4;3783:1;3776:15;3810:4;3807:1;3800:15;3827:320;3871:6;3908:1;3902:4;3898:12;3888:22;;3955:1;3949:4;3945:12;3976:18;3966:81;;4032:4;4024:6;4020:17;4010:27;;3966:81;4094:2;4086:6;4083:14;4063:18;4060:38;4057:84;;4113:18;;:::i;:::-;4057:84;3878:269;3827:320;;;:::o;4153:141::-;4202:4;4225:3;4217:11;;4248:3;4245:1;4238:14;4282:4;4279:1;4269:18;4261:26;;4153:141;;;:::o;4300:93::-;4337:6;4384:2;4379;4372:5;4368:14;4364:23;4354:33;;4300:93;;;:::o;4399:107::-;4443:8;4493:5;4487:4;4483:16;4462:37;;4399:107;;;;:::o;4512:393::-;4581:6;4631:1;4619:10;4615:18;4654:97;4684:66;4673:9;4654:97;:::i;:::-;4772:39;4802:8;4791:9;4772:39;:::i;:::-;4760:51;;4844:4;4840:9;4833:5;4829:21;4820:30;;4893:4;4883:8;4879:19;4872:5;4869:30;4859:40;;4588:317;;4512:393;;;;;:::o;4911:77::-;4948:7;4977:5;4966:16;;4911:77;;;:::o;4994:60::-;5022:3;5043:5;5036:12;;4994:60;;;:::o;5060:142::-;5110:9;5143:53;5161:34;5170:24;5188:5;5170:24;:::i;:::-;5161:34;:::i;:::-;5143:53;:::i;:::-;5130:66;;5060:142;;;:::o;5208:75::-;5251:3;5272:5;5265:12;;5208:75;;;:::o;5289:269::-;5399:39;5430:7;5399:39;:::i;:::-;5460:91;5509:41;5533:16;5509:41;:::i;:::-;5501:6;5494:4;5488:11;5460:91;:::i;:::-;5454:4;5447:105;5365:193;5289:269;;;:::o;5564:73::-;5609:3;5564:73;:::o;5643:189::-;5720:32;;:::i;:::-;5761:65;5819:6;5811;5805:4;5761:65;:::i;:::-;5696:136;5643:189;;:::o;5838:186::-;5898:120;5915:3;5908:5;5905:14;5898:120;;;5969:39;6006:1;5999:5;5969:39;:::i;:::-;5942:1;5935:5;5931:13;5922:22;;5898:120;;;5838:186;;:::o;6030:543::-;6131:2;6126:3;6123:11;6120:446;;;6165:38;6197:5;6165:38;:::i;:::-;6249:29;6267:10;6249:29;:::i;:::-;6239:8;6235:44;6432:2;6420:10;6417:18;6414:49;;;6453:8;6438:23;;6414:49;6476:80;6532:22;6550:3;6532:22;:::i;:::-;6522:8;6518:37;6505:11;6476:80;:::i;:::-;6135:431;;6120:446;6030:543;;;:::o;6579:117::-;6633:8;6683:5;6677:4;6673:16;6652:37;;6579:117;;;;:::o;6702:169::-;6746:6;6779:51;6827:1;6823:6;6815:5;6812:1;6808:13;6779:51;:::i;:::-;6775:56;6860:4;6854;6850:15;6840:25;;6753:118;6702:169;;;;:::o;6876:295::-;6952:4;7098:29;7123:3;7117:4;7098:29;:::i;:::-;7090:37;;7160:3;7157:1;7153:11;7147:4;7144:21;7136:29;;6876:295;;;;:::o;7176:1395::-;7293:37;7326:3;7293:37;:::i;:::-;7395:18;7387:6;7384:30;7381:56;;;7417:18;;:::i;:::-;7381:56;7461:38;7493:4;7487:11;7461:38;:::i;:::-;7546:67;7606:6;7598;7592:4;7546:67;:::i;:::-;7640:1;7664:4;7651:17;;7696:2;7688:6;7685:14;7713:1;7708:618;;;;8370:1;8387:6;8384:77;;;8436:9;8431:3;8427:19;8421:26;8412:35;;8384:77;8487:67;8547:6;8540:5;8487:67;:::i;:::-;8481:4;8474:81;8343:222;7678:887;;7708:618;7760:4;7756:9;7748:6;7744:22;7794:37;7826:4;7794:37;:::i;:::-;7853:1;7867:208;7881:7;7878:1;7875:14;7867:208;;;7960:9;7955:3;7951:19;7945:26;7937:6;7930:42;8011:1;8003:6;7999:14;7989:24;;8058:2;8047:9;8043:18;8030:31;;7904:4;7901:1;7897:12;7892:17;;7867:208;;;8103:6;8094:7;8091:19;8088:179;;;8161:9;8156:3;8152:19;8146:26;8204:48;8246:4;8238:6;8234:17;8223:9;8204:48;:::i;:::-;8196:6;8189:64;8111:156;8088:179;8313:1;8309;8301:6;8297:14;8293:22;8287:4;8280:36;7715:611;;;7678:887;;7268:1303;;;7176:1395;;:::o;628:16377:19:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_2001":{"entryPoint":4485,"id":2001,"parameterSlots":4,"returnSlots":0},"@_approve_1867":{"entryPoint":2573,"id":1867,"parameterSlots":2,"returnSlots":0},"@_baseURI_1304":{"entryPoint":4185,"id":1304,"parameterSlots":0,"returnSlots":1},"@_beforeTokenTransfer_1988":{"entryPoint":4479,"id":1988,"parameterSlots":4,"returnSlots":0},"@_checkOnERC721Received_1975":{"entryPoint":4491,"id":1975,"parameterSlots":4,"returnSlots":1},"@_exists_1536":{"entryPoint":4414,"id":1536,"parameterSlots":1,"returnSlots":1},"@_isApprovedOrOwner_1570":{"entryPoint":2758,"id":1570,"parameterSlots":2,"returnSlots":1},"@_msgSender_2676":{"entryPoint":2565,"id":2676,"parameterSlots":0,"returnSlots":1},"@_ownerOf_1518":{"entryPoint":3668,"id":1518,"parameterSlots":1,"returnSlots":1},"@_requireMinted_1913":{"entryPoint":2490,"id":1913,"parameterSlots":1,"returnSlots":0},"@_safeTransfer_1505":{"entryPoint":4093,"id":1505,"parameterSlots":4,"returnSlots":0},"@_setApprovalForAll_1899":{"entryPoint":3729,"id":1899,"parameterSlots":3,"returnSlots":0},"@_transfer_1843":{"entryPoint":2907,"id":1843,"parameterSlots":3,"returnSlots":0},"@approve_1347":{"entryPoint":1142,"id":1347,"parameterSlots":2,"returnSlots":0},"@balanceOf_1208":{"entryPoint":1683,"id":1208,"parameterSlots":1,"returnSlots":1},"@getApproved_1365":{"entryPoint":1072,"id":1365,"parameterSlots":1,"returnSlots":1},"@isApprovedForAll_1400":{"entryPoint":2236,"id":1400,"parameterSlots":2,"returnSlots":1},"@isContract_2352":{"entryPoint":5221,"id":2352,"parameterSlots":1,"returnSlots":1},"@log10_4032":{"entryPoint":4882,"id":4032,"parameterSlots":1,"returnSlots":1},"@name_1246":{"entryPoint":926,"id":1246,"parameterSlots":0,"returnSlots":1},"@ownerOf_1236":{"entryPoint":1549,"id":1236,"parameterSlots":1,"returnSlots":1},"@safeTransferFrom_1446":{"entryPoint":1517,"id":1446,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_1476":{"entryPoint":2034,"id":1476,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_1382":{"entryPoint":2012,"id":1382,"parameterSlots":2,"returnSlots":0},"@supportsInterface_1184":{"entryPoint":700,"id":1184,"parameterSlots":1,"returnSlots":1},"@supportsInterface_3122":{"entryPoint":2384,"id":3122,"parameterSlots":1,"returnSlots":1},"@symbol_1256":{"entryPoint":1866,"id":1256,"parameterSlots":0,"returnSlots":1},"@toString_2929":{"entryPoint":4208,"id":2929,"parameterSlots":1,"returnSlots":1},"@tokenURI_1295":{"entryPoint":2132,"id":1295,"parameterSlots":1,"returnSlots":1},"@transferFrom_1427":{"entryPoint":1421,"id":1427,"parameterSlots":3,"returnSlots":0},"abi_decode_available_length_t_bytes_memory_ptr":{"entryPoint":6415,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":5855,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":6133,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":5343,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4_fromMemory":{"entryPoint":8360,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_memory_ptr":{"entryPoint":6481,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":5674,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":6023,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":6658,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":5940,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":6527,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":6154,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":5876,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":5364,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":8381,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":5695,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":5790,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":5421,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":8227,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":5550,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":7521,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack":{"entryPoint":7189,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack":{"entryPoint":8085,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack":{"entryPoint":7685,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack":{"entryPoint":7831,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack":{"entryPoint":7939,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack":{"entryPoint":7443,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack":{"entryPoint":7297,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack":{"entryPoint":6897,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack":{"entryPoint":7043,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":6068,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":7570,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":5805,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":8284,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":5436,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":5607,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7224,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8120,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7720,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7866,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7974,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7478,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7332,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6932,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7078,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":6083,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":6324,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":5256,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_bytes_memory_ptr":{"entryPoint":6351,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":8199,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":5463,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":8210,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":5474,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":7510,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":5772,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":5409,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":5276,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":5740,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":5641,"id":null,"parameterSlots":1,"returnSlots":1},"copy_calldata_to_memory_with_cleanup":{"entryPoint":6400,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":5491,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":6769,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":6275,"id":null,"parameterSlots":2,"returnSlots":0},"panic_error_0x12":{"entryPoint":8152,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":6722,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":6228,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":6218,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":6223,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":5271,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":5266,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":5533,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af":{"entryPoint":7110,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e":{"entryPoint":8006,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48":{"entryPoint":7606,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4":{"entryPoint":7752,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05":{"entryPoint":7898,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159":{"entryPoint":7364,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f":{"entryPoint":7256,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942":{"entryPoint":6818,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83":{"entryPoint":6964,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":5832,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":6110,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":5320,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":5651,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:23150:36","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:36","statements":[{"nodeType":"YulAssignment","src":"57:19:36","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:36","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:36"},"nodeType":"YulFunctionCall","src":"67:9:36"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:36"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:36","type":""}],"src":"7:75:36"},{"body":{"nodeType":"YulBlock","src":"177:28:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:36"},"nodeType":"YulFunctionCall","src":"187:12:36"},"nodeType":"YulExpressionStatement","src":"187:12:36"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:36"},{"body":{"nodeType":"YulBlock","src":"300:28:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:36"},"nodeType":"YulFunctionCall","src":"310:12:36"},"nodeType":"YulExpressionStatement","src":"310:12:36"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:36"},{"body":{"nodeType":"YulBlock","src":"378:105:36","statements":[{"nodeType":"YulAssignment","src":"388:89:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"403:5:36"},{"kind":"number","nodeType":"YulLiteral","src":"410:66:36","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"399:3:36"},"nodeType":"YulFunctionCall","src":"399:78:36"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"388:7:36"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"360:5:36","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"370:7:36","type":""}],"src":"334:149:36"},{"body":{"nodeType":"YulBlock","src":"531:78:36","statements":[{"body":{"nodeType":"YulBlock","src":"587:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"596:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"599:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"589:6:36"},"nodeType":"YulFunctionCall","src":"589:12:36"},"nodeType":"YulExpressionStatement","src":"589:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"554:5:36"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"578:5:36"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"561:16:36"},"nodeType":"YulFunctionCall","src":"561:23:36"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"551:2:36"},"nodeType":"YulFunctionCall","src":"551:34:36"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"544:6:36"},"nodeType":"YulFunctionCall","src":"544:42:36"},"nodeType":"YulIf","src":"541:62:36"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"524:5:36","type":""}],"src":"489:120:36"},{"body":{"nodeType":"YulBlock","src":"666:86:36","statements":[{"nodeType":"YulAssignment","src":"676:29:36","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"698:6:36"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"685:12:36"},"nodeType":"YulFunctionCall","src":"685:20:36"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"676:5:36"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"740:5:36"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"714:25:36"},"nodeType":"YulFunctionCall","src":"714:32:36"},"nodeType":"YulExpressionStatement","src":"714:32:36"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"644:6:36","type":""},{"name":"end","nodeType":"YulTypedName","src":"652:3:36","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"660:5:36","type":""}],"src":"615:137:36"},{"body":{"nodeType":"YulBlock","src":"823:262:36","statements":[{"body":{"nodeType":"YulBlock","src":"869:83:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"871:77:36"},"nodeType":"YulFunctionCall","src":"871:79:36"},"nodeType":"YulExpressionStatement","src":"871:79:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"844:7:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"853:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"840:3:36"},"nodeType":"YulFunctionCall","src":"840:23:36"},{"kind":"number","nodeType":"YulLiteral","src":"865:2:36","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"836:3:36"},"nodeType":"YulFunctionCall","src":"836:32:36"},"nodeType":"YulIf","src":"833:119:36"},{"nodeType":"YulBlock","src":"962:116:36","statements":[{"nodeType":"YulVariableDeclaration","src":"977:15:36","value":{"kind":"number","nodeType":"YulLiteral","src":"991:1:36","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"981:6:36","type":""}]},{"nodeType":"YulAssignment","src":"1006:62:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1040:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"1051:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1036:3:36"},"nodeType":"YulFunctionCall","src":"1036:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1060:7:36"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"1016:19:36"},"nodeType":"YulFunctionCall","src":"1016:52:36"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1006:6:36"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"793:9:36","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"804:7:36","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"816:6:36","type":""}],"src":"758:327:36"},{"body":{"nodeType":"YulBlock","src":"1133:48:36","statements":[{"nodeType":"YulAssignment","src":"1143:32:36","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1168:5:36"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1161:6:36"},"nodeType":"YulFunctionCall","src":"1161:13:36"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1154:6:36"},"nodeType":"YulFunctionCall","src":"1154:21:36"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1143:7:36"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1115:5:36","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1125:7:36","type":""}],"src":"1091:90:36"},{"body":{"nodeType":"YulBlock","src":"1246:50:36","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1263:3:36"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1283:5:36"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"1268:14:36"},"nodeType":"YulFunctionCall","src":"1268:21:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1256:6:36"},"nodeType":"YulFunctionCall","src":"1256:34:36"},"nodeType":"YulExpressionStatement","src":"1256:34:36"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1234:5:36","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1241:3:36","type":""}],"src":"1187:109:36"},{"body":{"nodeType":"YulBlock","src":"1394:118:36","statements":[{"nodeType":"YulAssignment","src":"1404:26:36","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1416:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"1427:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1412:3:36"},"nodeType":"YulFunctionCall","src":"1412:18:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1404:4:36"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1478:6:36"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1491:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"1502:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1487:3:36"},"nodeType":"YulFunctionCall","src":"1487:17:36"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"1440:37:36"},"nodeType":"YulFunctionCall","src":"1440:65:36"},"nodeType":"YulExpressionStatement","src":"1440:65:36"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1366:9:36","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1378:6:36","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1389:4:36","type":""}],"src":"1302:210:36"},{"body":{"nodeType":"YulBlock","src":"1577:40:36","statements":[{"nodeType":"YulAssignment","src":"1588:22:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1604:5:36"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1598:5:36"},"nodeType":"YulFunctionCall","src":"1598:12:36"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1588:6:36"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1560:5:36","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1570:6:36","type":""}],"src":"1518:99:36"},{"body":{"nodeType":"YulBlock","src":"1719:73:36","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1736:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"1741:6:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1729:6:36"},"nodeType":"YulFunctionCall","src":"1729:19:36"},"nodeType":"YulExpressionStatement","src":"1729:19:36"},{"nodeType":"YulAssignment","src":"1757:29:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1776:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"1781:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1772:3:36"},"nodeType":"YulFunctionCall","src":"1772:14:36"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"1757:11:36"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"1691:3:36","type":""},{"name":"length","nodeType":"YulTypedName","src":"1696:6:36","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"1707:11:36","type":""}],"src":"1623:169:36"},{"body":{"nodeType":"YulBlock","src":"1860:184:36","statements":[{"nodeType":"YulVariableDeclaration","src":"1870:10:36","value":{"kind":"number","nodeType":"YulLiteral","src":"1879:1:36","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1874:1:36","type":""}]},{"body":{"nodeType":"YulBlock","src":"1939:63:36","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1964:3:36"},{"name":"i","nodeType":"YulIdentifier","src":"1969:1:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1960:3:36"},"nodeType":"YulFunctionCall","src":"1960:11:36"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1983:3:36"},{"name":"i","nodeType":"YulIdentifier","src":"1988:1:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1979:3:36"},"nodeType":"YulFunctionCall","src":"1979:11:36"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1973:5:36"},"nodeType":"YulFunctionCall","src":"1973:18:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1953:6:36"},"nodeType":"YulFunctionCall","src":"1953:39:36"},"nodeType":"YulExpressionStatement","src":"1953:39:36"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1900:1:36"},{"name":"length","nodeType":"YulIdentifier","src":"1903:6:36"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1897:2:36"},"nodeType":"YulFunctionCall","src":"1897:13:36"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1911:19:36","statements":[{"nodeType":"YulAssignment","src":"1913:15:36","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1922:1:36"},{"kind":"number","nodeType":"YulLiteral","src":"1925:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1918:3:36"},"nodeType":"YulFunctionCall","src":"1918:10:36"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1913:1:36"}]}]},"pre":{"nodeType":"YulBlock","src":"1893:3:36","statements":[]},"src":"1889:113:36"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2022:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"2027:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2018:3:36"},"nodeType":"YulFunctionCall","src":"2018:16:36"},{"kind":"number","nodeType":"YulLiteral","src":"2036:1:36","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2011:6:36"},"nodeType":"YulFunctionCall","src":"2011:27:36"},"nodeType":"YulExpressionStatement","src":"2011:27:36"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1842:3:36","type":""},{"name":"dst","nodeType":"YulTypedName","src":"1847:3:36","type":""},{"name":"length","nodeType":"YulTypedName","src":"1852:6:36","type":""}],"src":"1798:246:36"},{"body":{"nodeType":"YulBlock","src":"2098:54:36","statements":[{"nodeType":"YulAssignment","src":"2108:38:36","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2126:5:36"},{"kind":"number","nodeType":"YulLiteral","src":"2133:2:36","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2122:3:36"},"nodeType":"YulFunctionCall","src":"2122:14:36"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2142:2:36","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2138:3:36"},"nodeType":"YulFunctionCall","src":"2138:7:36"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2118:3:36"},"nodeType":"YulFunctionCall","src":"2118:28:36"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"2108:6:36"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2081:5:36","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"2091:6:36","type":""}],"src":"2050:102:36"},{"body":{"nodeType":"YulBlock","src":"2250:285:36","statements":[{"nodeType":"YulVariableDeclaration","src":"2260:53:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2307:5:36"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"2274:32:36"},"nodeType":"YulFunctionCall","src":"2274:39:36"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2264:6:36","type":""}]},{"nodeType":"YulAssignment","src":"2322:78:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2388:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"2393:6:36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2329:58:36"},"nodeType":"YulFunctionCall","src":"2329:71:36"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2322:3:36"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2448:5:36"},{"kind":"number","nodeType":"YulLiteral","src":"2455:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2444:3:36"},"nodeType":"YulFunctionCall","src":"2444:16:36"},{"name":"pos","nodeType":"YulIdentifier","src":"2462:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"2467:6:36"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"2409:34:36"},"nodeType":"YulFunctionCall","src":"2409:65:36"},"nodeType":"YulExpressionStatement","src":"2409:65:36"},{"nodeType":"YulAssignment","src":"2483:46:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2494:3:36"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2521:6:36"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"2499:21:36"},"nodeType":"YulFunctionCall","src":"2499:29:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2490:3:36"},"nodeType":"YulFunctionCall","src":"2490:39:36"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2483:3:36"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2231:5:36","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2238:3:36","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"2246:3:36","type":""}],"src":"2158:377:36"},{"body":{"nodeType":"YulBlock","src":"2659:195:36","statements":[{"nodeType":"YulAssignment","src":"2669:26:36","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2681:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"2692:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2677:3:36"},"nodeType":"YulFunctionCall","src":"2677:18:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2669:4:36"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2716:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"2727:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2712:3:36"},"nodeType":"YulFunctionCall","src":"2712:17:36"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"2735:4:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"2741:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2731:3:36"},"nodeType":"YulFunctionCall","src":"2731:20:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2705:6:36"},"nodeType":"YulFunctionCall","src":"2705:47:36"},"nodeType":"YulExpressionStatement","src":"2705:47:36"},{"nodeType":"YulAssignment","src":"2761:86:36","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2833:6:36"},{"name":"tail","nodeType":"YulIdentifier","src":"2842:4:36"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2769:63:36"},"nodeType":"YulFunctionCall","src":"2769:78:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2761:4:36"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2631:9:36","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2643:6:36","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2654:4:36","type":""}],"src":"2541:313:36"},{"body":{"nodeType":"YulBlock","src":"2905:32:36","statements":[{"nodeType":"YulAssignment","src":"2915:16:36","value":{"name":"value","nodeType":"YulIdentifier","src":"2926:5:36"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2915:7:36"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2887:5:36","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2897:7:36","type":""}],"src":"2860:77:36"},{"body":{"nodeType":"YulBlock","src":"2986:79:36","statements":[{"body":{"nodeType":"YulBlock","src":"3043:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3052:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3055:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3045:6:36"},"nodeType":"YulFunctionCall","src":"3045:12:36"},"nodeType":"YulExpressionStatement","src":"3045:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3009:5:36"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3034:5:36"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"3016:17:36"},"nodeType":"YulFunctionCall","src":"3016:24:36"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3006:2:36"},"nodeType":"YulFunctionCall","src":"3006:35:36"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2999:6:36"},"nodeType":"YulFunctionCall","src":"2999:43:36"},"nodeType":"YulIf","src":"2996:63:36"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2979:5:36","type":""}],"src":"2943:122:36"},{"body":{"nodeType":"YulBlock","src":"3123:87:36","statements":[{"nodeType":"YulAssignment","src":"3133:29:36","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3155:6:36"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3142:12:36"},"nodeType":"YulFunctionCall","src":"3142:20:36"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3133:5:36"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3198:5:36"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"3171:26:36"},"nodeType":"YulFunctionCall","src":"3171:33:36"},"nodeType":"YulExpressionStatement","src":"3171:33:36"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3101:6:36","type":""},{"name":"end","nodeType":"YulTypedName","src":"3109:3:36","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"3117:5:36","type":""}],"src":"3071:139:36"},{"body":{"nodeType":"YulBlock","src":"3282:263:36","statements":[{"body":{"nodeType":"YulBlock","src":"3328:83:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3330:77:36"},"nodeType":"YulFunctionCall","src":"3330:79:36"},"nodeType":"YulExpressionStatement","src":"3330:79:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3303:7:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"3312:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3299:3:36"},"nodeType":"YulFunctionCall","src":"3299:23:36"},{"kind":"number","nodeType":"YulLiteral","src":"3324:2:36","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3295:3:36"},"nodeType":"YulFunctionCall","src":"3295:32:36"},"nodeType":"YulIf","src":"3292:119:36"},{"nodeType":"YulBlock","src":"3421:117:36","statements":[{"nodeType":"YulVariableDeclaration","src":"3436:15:36","value":{"kind":"number","nodeType":"YulLiteral","src":"3450:1:36","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3440:6:36","type":""}]},{"nodeType":"YulAssignment","src":"3465:63:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3500:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"3511:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3496:3:36"},"nodeType":"YulFunctionCall","src":"3496:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3520:7:36"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"3475:20:36"},"nodeType":"YulFunctionCall","src":"3475:53:36"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3465:6:36"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3252:9:36","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3263:7:36","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3275:6:36","type":""}],"src":"3216:329:36"},{"body":{"nodeType":"YulBlock","src":"3596:81:36","statements":[{"nodeType":"YulAssignment","src":"3606:65:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3621:5:36"},{"kind":"number","nodeType":"YulLiteral","src":"3628:42:36","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3617:3:36"},"nodeType":"YulFunctionCall","src":"3617:54:36"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3606:7:36"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3578:5:36","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3588:7:36","type":""}],"src":"3551:126:36"},{"body":{"nodeType":"YulBlock","src":"3728:51:36","statements":[{"nodeType":"YulAssignment","src":"3738:35:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3767:5:36"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"3749:17:36"},"nodeType":"YulFunctionCall","src":"3749:24:36"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3738:7:36"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3710:5:36","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3720:7:36","type":""}],"src":"3683:96:36"},{"body":{"nodeType":"YulBlock","src":"3850:53:36","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3867:3:36"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3890:5:36"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"3872:17:36"},"nodeType":"YulFunctionCall","src":"3872:24:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3860:6:36"},"nodeType":"YulFunctionCall","src":"3860:37:36"},"nodeType":"YulExpressionStatement","src":"3860:37:36"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3838:5:36","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3845:3:36","type":""}],"src":"3785:118:36"},{"body":{"nodeType":"YulBlock","src":"4007:124:36","statements":[{"nodeType":"YulAssignment","src":"4017:26:36","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4029:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"4040:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4025:3:36"},"nodeType":"YulFunctionCall","src":"4025:18:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4017:4:36"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4097:6:36"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4110:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"4121:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4106:3:36"},"nodeType":"YulFunctionCall","src":"4106:17:36"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"4053:43:36"},"nodeType":"YulFunctionCall","src":"4053:71:36"},"nodeType":"YulExpressionStatement","src":"4053:71:36"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3979:9:36","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3991:6:36","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4002:4:36","type":""}],"src":"3909:222:36"},{"body":{"nodeType":"YulBlock","src":"4180:79:36","statements":[{"body":{"nodeType":"YulBlock","src":"4237:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4246:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4249:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4239:6:36"},"nodeType":"YulFunctionCall","src":"4239:12:36"},"nodeType":"YulExpressionStatement","src":"4239:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4203:5:36"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4228:5:36"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"4210:17:36"},"nodeType":"YulFunctionCall","src":"4210:24:36"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4200:2:36"},"nodeType":"YulFunctionCall","src":"4200:35:36"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4193:6:36"},"nodeType":"YulFunctionCall","src":"4193:43:36"},"nodeType":"YulIf","src":"4190:63:36"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4173:5:36","type":""}],"src":"4137:122:36"},{"body":{"nodeType":"YulBlock","src":"4317:87:36","statements":[{"nodeType":"YulAssignment","src":"4327:29:36","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4349:6:36"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4336:12:36"},"nodeType":"YulFunctionCall","src":"4336:20:36"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4327:5:36"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4392:5:36"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"4365:26:36"},"nodeType":"YulFunctionCall","src":"4365:33:36"},"nodeType":"YulExpressionStatement","src":"4365:33:36"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4295:6:36","type":""},{"name":"end","nodeType":"YulTypedName","src":"4303:3:36","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"4311:5:36","type":""}],"src":"4265:139:36"},{"body":{"nodeType":"YulBlock","src":"4493:391:36","statements":[{"body":{"nodeType":"YulBlock","src":"4539:83:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4541:77:36"},"nodeType":"YulFunctionCall","src":"4541:79:36"},"nodeType":"YulExpressionStatement","src":"4541:79:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4514:7:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"4523:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4510:3:36"},"nodeType":"YulFunctionCall","src":"4510:23:36"},{"kind":"number","nodeType":"YulLiteral","src":"4535:2:36","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4506:3:36"},"nodeType":"YulFunctionCall","src":"4506:32:36"},"nodeType":"YulIf","src":"4503:119:36"},{"nodeType":"YulBlock","src":"4632:117:36","statements":[{"nodeType":"YulVariableDeclaration","src":"4647:15:36","value":{"kind":"number","nodeType":"YulLiteral","src":"4661:1:36","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4651:6:36","type":""}]},{"nodeType":"YulAssignment","src":"4676:63:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4711:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"4722:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4707:3:36"},"nodeType":"YulFunctionCall","src":"4707:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4731:7:36"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4686:20:36"},"nodeType":"YulFunctionCall","src":"4686:53:36"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4676:6:36"}]}]},{"nodeType":"YulBlock","src":"4759:118:36","statements":[{"nodeType":"YulVariableDeclaration","src":"4774:16:36","value":{"kind":"number","nodeType":"YulLiteral","src":"4788:2:36","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4778:6:36","type":""}]},{"nodeType":"YulAssignment","src":"4804:63:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4839:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"4850:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4835:3:36"},"nodeType":"YulFunctionCall","src":"4835:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4859:7:36"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4814:20:36"},"nodeType":"YulFunctionCall","src":"4814:53:36"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4804:6:36"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4455:9:36","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4466:7:36","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4478:6:36","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4486:6:36","type":""}],"src":"4410:474:36"},{"body":{"nodeType":"YulBlock","src":"4990:519:36","statements":[{"body":{"nodeType":"YulBlock","src":"5036:83:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5038:77:36"},"nodeType":"YulFunctionCall","src":"5038:79:36"},"nodeType":"YulExpressionStatement","src":"5038:79:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5011:7:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"5020:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5007:3:36"},"nodeType":"YulFunctionCall","src":"5007:23:36"},{"kind":"number","nodeType":"YulLiteral","src":"5032:2:36","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5003:3:36"},"nodeType":"YulFunctionCall","src":"5003:32:36"},"nodeType":"YulIf","src":"5000:119:36"},{"nodeType":"YulBlock","src":"5129:117:36","statements":[{"nodeType":"YulVariableDeclaration","src":"5144:15:36","value":{"kind":"number","nodeType":"YulLiteral","src":"5158:1:36","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5148:6:36","type":""}]},{"nodeType":"YulAssignment","src":"5173:63:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5208:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"5219:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5204:3:36"},"nodeType":"YulFunctionCall","src":"5204:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5228:7:36"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5183:20:36"},"nodeType":"YulFunctionCall","src":"5183:53:36"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5173:6:36"}]}]},{"nodeType":"YulBlock","src":"5256:118:36","statements":[{"nodeType":"YulVariableDeclaration","src":"5271:16:36","value":{"kind":"number","nodeType":"YulLiteral","src":"5285:2:36","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5275:6:36","type":""}]},{"nodeType":"YulAssignment","src":"5301:63:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5336:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"5347:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5332:3:36"},"nodeType":"YulFunctionCall","src":"5332:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5356:7:36"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5311:20:36"},"nodeType":"YulFunctionCall","src":"5311:53:36"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5301:6:36"}]}]},{"nodeType":"YulBlock","src":"5384:118:36","statements":[{"nodeType":"YulVariableDeclaration","src":"5399:16:36","value":{"kind":"number","nodeType":"YulLiteral","src":"5413:2:36","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5403:6:36","type":""}]},{"nodeType":"YulAssignment","src":"5429:63:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5464:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"5475:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5460:3:36"},"nodeType":"YulFunctionCall","src":"5460:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5484:7:36"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"5439:20:36"},"nodeType":"YulFunctionCall","src":"5439:53:36"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"5429:6:36"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4944:9:36","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4955:7:36","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4967:6:36","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4975:6:36","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4983:6:36","type":""}],"src":"4890:619:36"},{"body":{"nodeType":"YulBlock","src":"5581:263:36","statements":[{"body":{"nodeType":"YulBlock","src":"5627:83:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5629:77:36"},"nodeType":"YulFunctionCall","src":"5629:79:36"},"nodeType":"YulExpressionStatement","src":"5629:79:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5602:7:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"5611:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5598:3:36"},"nodeType":"YulFunctionCall","src":"5598:23:36"},{"kind":"number","nodeType":"YulLiteral","src":"5623:2:36","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5594:3:36"},"nodeType":"YulFunctionCall","src":"5594:32:36"},"nodeType":"YulIf","src":"5591:119:36"},{"nodeType":"YulBlock","src":"5720:117:36","statements":[{"nodeType":"YulVariableDeclaration","src":"5735:15:36","value":{"kind":"number","nodeType":"YulLiteral","src":"5749:1:36","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5739:6:36","type":""}]},{"nodeType":"YulAssignment","src":"5764:63:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5799:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"5810:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5795:3:36"},"nodeType":"YulFunctionCall","src":"5795:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5819:7:36"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5774:20:36"},"nodeType":"YulFunctionCall","src":"5774:53:36"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5764:6:36"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5551:9:36","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5562:7:36","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5574:6:36","type":""}],"src":"5515:329:36"},{"body":{"nodeType":"YulBlock","src":"5915:53:36","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5932:3:36"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5955:5:36"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"5937:17:36"},"nodeType":"YulFunctionCall","src":"5937:24:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5925:6:36"},"nodeType":"YulFunctionCall","src":"5925:37:36"},"nodeType":"YulExpressionStatement","src":"5925:37:36"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5903:5:36","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5910:3:36","type":""}],"src":"5850:118:36"},{"body":{"nodeType":"YulBlock","src":"6072:124:36","statements":[{"nodeType":"YulAssignment","src":"6082:26:36","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6094:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"6105:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6090:3:36"},"nodeType":"YulFunctionCall","src":"6090:18:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6082:4:36"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6162:6:36"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6175:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"6186:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6171:3:36"},"nodeType":"YulFunctionCall","src":"6171:17:36"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"6118:43:36"},"nodeType":"YulFunctionCall","src":"6118:71:36"},"nodeType":"YulExpressionStatement","src":"6118:71:36"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6044:9:36","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6056:6:36","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6067:4:36","type":""}],"src":"5974:222:36"},{"body":{"nodeType":"YulBlock","src":"6242:76:36","statements":[{"body":{"nodeType":"YulBlock","src":"6296:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6305:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6308:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6298:6:36"},"nodeType":"YulFunctionCall","src":"6298:12:36"},"nodeType":"YulExpressionStatement","src":"6298:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6265:5:36"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6287:5:36"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"6272:14:36"},"nodeType":"YulFunctionCall","src":"6272:21:36"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6262:2:36"},"nodeType":"YulFunctionCall","src":"6262:32:36"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6255:6:36"},"nodeType":"YulFunctionCall","src":"6255:40:36"},"nodeType":"YulIf","src":"6252:60:36"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6235:5:36","type":""}],"src":"6202:116:36"},{"body":{"nodeType":"YulBlock","src":"6373:84:36","statements":[{"nodeType":"YulAssignment","src":"6383:29:36","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6405:6:36"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6392:12:36"},"nodeType":"YulFunctionCall","src":"6392:20:36"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"6383:5:36"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6445:5:36"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"6421:23:36"},"nodeType":"YulFunctionCall","src":"6421:30:36"},"nodeType":"YulExpressionStatement","src":"6421:30:36"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"6351:6:36","type":""},{"name":"end","nodeType":"YulTypedName","src":"6359:3:36","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"6367:5:36","type":""}],"src":"6324:133:36"},{"body":{"nodeType":"YulBlock","src":"6543:388:36","statements":[{"body":{"nodeType":"YulBlock","src":"6589:83:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6591:77:36"},"nodeType":"YulFunctionCall","src":"6591:79:36"},"nodeType":"YulExpressionStatement","src":"6591:79:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6564:7:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"6573:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6560:3:36"},"nodeType":"YulFunctionCall","src":"6560:23:36"},{"kind":"number","nodeType":"YulLiteral","src":"6585:2:36","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6556:3:36"},"nodeType":"YulFunctionCall","src":"6556:32:36"},"nodeType":"YulIf","src":"6553:119:36"},{"nodeType":"YulBlock","src":"6682:117:36","statements":[{"nodeType":"YulVariableDeclaration","src":"6697:15:36","value":{"kind":"number","nodeType":"YulLiteral","src":"6711:1:36","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6701:6:36","type":""}]},{"nodeType":"YulAssignment","src":"6726:63:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6761:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"6772:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6757:3:36"},"nodeType":"YulFunctionCall","src":"6757:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6781:7:36"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"6736:20:36"},"nodeType":"YulFunctionCall","src":"6736:53:36"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6726:6:36"}]}]},{"nodeType":"YulBlock","src":"6809:115:36","statements":[{"nodeType":"YulVariableDeclaration","src":"6824:16:36","value":{"kind":"number","nodeType":"YulLiteral","src":"6838:2:36","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6828:6:36","type":""}]},{"nodeType":"YulAssignment","src":"6854:60:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6886:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"6897:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6882:3:36"},"nodeType":"YulFunctionCall","src":"6882:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6906:7:36"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"6864:17:36"},"nodeType":"YulFunctionCall","src":"6864:50:36"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6854:6:36"}]}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6505:9:36","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6516:7:36","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6528:6:36","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6536:6:36","type":""}],"src":"6463:468:36"},{"body":{"nodeType":"YulBlock","src":"7026:28:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7043:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7046:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7036:6:36"},"nodeType":"YulFunctionCall","src":"7036:12:36"},"nodeType":"YulExpressionStatement","src":"7036:12:36"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"6937:117:36"},{"body":{"nodeType":"YulBlock","src":"7149:28:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7166:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7169:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7159:6:36"},"nodeType":"YulFunctionCall","src":"7159:12:36"},"nodeType":"YulExpressionStatement","src":"7159:12:36"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"7060:117:36"},{"body":{"nodeType":"YulBlock","src":"7211:152:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7228:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7231:77:36","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7221:6:36"},"nodeType":"YulFunctionCall","src":"7221:88:36"},"nodeType":"YulExpressionStatement","src":"7221:88:36"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7325:1:36","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"7328:4:36","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7318:6:36"},"nodeType":"YulFunctionCall","src":"7318:15:36"},"nodeType":"YulExpressionStatement","src":"7318:15:36"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7349:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7352:4:36","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7342:6:36"},"nodeType":"YulFunctionCall","src":"7342:15:36"},"nodeType":"YulExpressionStatement","src":"7342:15:36"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"7183:180:36"},{"body":{"nodeType":"YulBlock","src":"7412:238:36","statements":[{"nodeType":"YulVariableDeclaration","src":"7422:58:36","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7444:6:36"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"7474:4:36"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"7452:21:36"},"nodeType":"YulFunctionCall","src":"7452:27:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7440:3:36"},"nodeType":"YulFunctionCall","src":"7440:40:36"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"7426:10:36","type":""}]},{"body":{"nodeType":"YulBlock","src":"7591:22:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"7593:16:36"},"nodeType":"YulFunctionCall","src":"7593:18:36"},"nodeType":"YulExpressionStatement","src":"7593:18:36"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"7534:10:36"},{"kind":"number","nodeType":"YulLiteral","src":"7546:18:36","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7531:2:36"},"nodeType":"YulFunctionCall","src":"7531:34:36"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"7570:10:36"},{"name":"memPtr","nodeType":"YulIdentifier","src":"7582:6:36"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7567:2:36"},"nodeType":"YulFunctionCall","src":"7567:22:36"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7528:2:36"},"nodeType":"YulFunctionCall","src":"7528:62:36"},"nodeType":"YulIf","src":"7525:88:36"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7629:2:36","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"7633:10:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7622:6:36"},"nodeType":"YulFunctionCall","src":"7622:22:36"},"nodeType":"YulExpressionStatement","src":"7622:22:36"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"7398:6:36","type":""},{"name":"size","nodeType":"YulTypedName","src":"7406:4:36","type":""}],"src":"7369:281:36"},{"body":{"nodeType":"YulBlock","src":"7697:88:36","statements":[{"nodeType":"YulAssignment","src":"7707:30:36","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"7717:18:36"},"nodeType":"YulFunctionCall","src":"7717:20:36"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7707:6:36"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7766:6:36"},{"name":"size","nodeType":"YulIdentifier","src":"7774:4:36"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"7746:19:36"},"nodeType":"YulFunctionCall","src":"7746:33:36"},"nodeType":"YulExpressionStatement","src":"7746:33:36"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"7681:4:36","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"7690:6:36","type":""}],"src":"7656:129:36"},{"body":{"nodeType":"YulBlock","src":"7857:241:36","statements":[{"body":{"nodeType":"YulBlock","src":"7962:22:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"7964:16:36"},"nodeType":"YulFunctionCall","src":"7964:18:36"},"nodeType":"YulExpressionStatement","src":"7964:18:36"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7934:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"7942:18:36","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7931:2:36"},"nodeType":"YulFunctionCall","src":"7931:30:36"},"nodeType":"YulIf","src":"7928:56:36"},{"nodeType":"YulAssignment","src":"7994:37:36","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8024:6:36"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"8002:21:36"},"nodeType":"YulFunctionCall","src":"8002:29:36"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"7994:4:36"}]},{"nodeType":"YulAssignment","src":"8068:23:36","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"8080:4:36"},{"kind":"number","nodeType":"YulLiteral","src":"8086:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8076:3:36"},"nodeType":"YulFunctionCall","src":"8076:15:36"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"8068:4:36"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"7841:6:36","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"7852:4:36","type":""}],"src":"7791:307:36"},{"body":{"nodeType":"YulBlock","src":"8168:82:36","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"8191:3:36"},{"name":"src","nodeType":"YulIdentifier","src":"8196:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"8201:6:36"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"8178:12:36"},"nodeType":"YulFunctionCall","src":"8178:30:36"},"nodeType":"YulExpressionStatement","src":"8178:30:36"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"8228:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"8233:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8224:3:36"},"nodeType":"YulFunctionCall","src":"8224:16:36"},{"kind":"number","nodeType":"YulLiteral","src":"8242:1:36","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8217:6:36"},"nodeType":"YulFunctionCall","src":"8217:27:36"},"nodeType":"YulExpressionStatement","src":"8217:27:36"}]},"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"8150:3:36","type":""},{"name":"dst","nodeType":"YulTypedName","src":"8155:3:36","type":""},{"name":"length","nodeType":"YulTypedName","src":"8160:6:36","type":""}],"src":"8104:146:36"},{"body":{"nodeType":"YulBlock","src":"8339:340:36","statements":[{"nodeType":"YulAssignment","src":"8349:74:36","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8415:6:36"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"8374:40:36"},"nodeType":"YulFunctionCall","src":"8374:48:36"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"8358:15:36"},"nodeType":"YulFunctionCall","src":"8358:65:36"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"8349:5:36"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"8439:5:36"},{"name":"length","nodeType":"YulIdentifier","src":"8446:6:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8432:6:36"},"nodeType":"YulFunctionCall","src":"8432:21:36"},"nodeType":"YulExpressionStatement","src":"8432:21:36"},{"nodeType":"YulVariableDeclaration","src":"8462:27:36","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"8477:5:36"},{"kind":"number","nodeType":"YulLiteral","src":"8484:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8473:3:36"},"nodeType":"YulFunctionCall","src":"8473:16:36"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"8466:3:36","type":""}]},{"body":{"nodeType":"YulBlock","src":"8527:83:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"8529:77:36"},"nodeType":"YulFunctionCall","src":"8529:79:36"},"nodeType":"YulExpressionStatement","src":"8529:79:36"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8508:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"8513:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8504:3:36"},"nodeType":"YulFunctionCall","src":"8504:16:36"},{"name":"end","nodeType":"YulIdentifier","src":"8522:3:36"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8501:2:36"},"nodeType":"YulFunctionCall","src":"8501:25:36"},"nodeType":"YulIf","src":"8498:112:36"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8656:3:36"},{"name":"dst","nodeType":"YulIdentifier","src":"8661:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"8666:6:36"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"8619:36:36"},"nodeType":"YulFunctionCall","src":"8619:54:36"},"nodeType":"YulExpressionStatement","src":"8619:54:36"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"8312:3:36","type":""},{"name":"length","nodeType":"YulTypedName","src":"8317:6:36","type":""},{"name":"end","nodeType":"YulTypedName","src":"8325:3:36","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"8333:5:36","type":""}],"src":"8256:423:36"},{"body":{"nodeType":"YulBlock","src":"8759:277:36","statements":[{"body":{"nodeType":"YulBlock","src":"8808:83:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"8810:77:36"},"nodeType":"YulFunctionCall","src":"8810:79:36"},"nodeType":"YulExpressionStatement","src":"8810:79:36"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8787:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"8795:4:36","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8783:3:36"},"nodeType":"YulFunctionCall","src":"8783:17:36"},{"name":"end","nodeType":"YulIdentifier","src":"8802:3:36"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8779:3:36"},"nodeType":"YulFunctionCall","src":"8779:27:36"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8772:6:36"},"nodeType":"YulFunctionCall","src":"8772:35:36"},"nodeType":"YulIf","src":"8769:122:36"},{"nodeType":"YulVariableDeclaration","src":"8900:34:36","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8927:6:36"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8914:12:36"},"nodeType":"YulFunctionCall","src":"8914:20:36"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"8904:6:36","type":""}]},{"nodeType":"YulAssignment","src":"8943:87:36","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9003:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"9011:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8999:3:36"},"nodeType":"YulFunctionCall","src":"8999:17:36"},{"name":"length","nodeType":"YulIdentifier","src":"9018:6:36"},{"name":"end","nodeType":"YulIdentifier","src":"9026:3:36"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"8952:46:36"},"nodeType":"YulFunctionCall","src":"8952:78:36"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"8943:5:36"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"8737:6:36","type":""},{"name":"end","nodeType":"YulTypedName","src":"8745:3:36","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"8753:5:36","type":""}],"src":"8698:338:36"},{"body":{"nodeType":"YulBlock","src":"9168:817:36","statements":[{"body":{"nodeType":"YulBlock","src":"9215:83:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"9217:77:36"},"nodeType":"YulFunctionCall","src":"9217:79:36"},"nodeType":"YulExpressionStatement","src":"9217:79:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9189:7:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"9198:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9185:3:36"},"nodeType":"YulFunctionCall","src":"9185:23:36"},{"kind":"number","nodeType":"YulLiteral","src":"9210:3:36","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9181:3:36"},"nodeType":"YulFunctionCall","src":"9181:33:36"},"nodeType":"YulIf","src":"9178:120:36"},{"nodeType":"YulBlock","src":"9308:117:36","statements":[{"nodeType":"YulVariableDeclaration","src":"9323:15:36","value":{"kind":"number","nodeType":"YulLiteral","src":"9337:1:36","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9327:6:36","type":""}]},{"nodeType":"YulAssignment","src":"9352:63:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9387:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"9398:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9383:3:36"},"nodeType":"YulFunctionCall","src":"9383:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9407:7:36"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"9362:20:36"},"nodeType":"YulFunctionCall","src":"9362:53:36"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9352:6:36"}]}]},{"nodeType":"YulBlock","src":"9435:118:36","statements":[{"nodeType":"YulVariableDeclaration","src":"9450:16:36","value":{"kind":"number","nodeType":"YulLiteral","src":"9464:2:36","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9454:6:36","type":""}]},{"nodeType":"YulAssignment","src":"9480:63:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9515:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"9526:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9511:3:36"},"nodeType":"YulFunctionCall","src":"9511:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9535:7:36"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"9490:20:36"},"nodeType":"YulFunctionCall","src":"9490:53:36"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"9480:6:36"}]}]},{"nodeType":"YulBlock","src":"9563:118:36","statements":[{"nodeType":"YulVariableDeclaration","src":"9578:16:36","value":{"kind":"number","nodeType":"YulLiteral","src":"9592:2:36","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9582:6:36","type":""}]},{"nodeType":"YulAssignment","src":"9608:63:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9643:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"9654:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9639:3:36"},"nodeType":"YulFunctionCall","src":"9639:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9663:7:36"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"9618:20:36"},"nodeType":"YulFunctionCall","src":"9618:53:36"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"9608:6:36"}]}]},{"nodeType":"YulBlock","src":"9691:287:36","statements":[{"nodeType":"YulVariableDeclaration","src":"9706:46:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9737:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"9748:2:36","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9733:3:36"},"nodeType":"YulFunctionCall","src":"9733:18:36"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9720:12:36"},"nodeType":"YulFunctionCall","src":"9720:32:36"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9710:6:36","type":""}]},{"body":{"nodeType":"YulBlock","src":"9799:83:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"9801:77:36"},"nodeType":"YulFunctionCall","src":"9801:79:36"},"nodeType":"YulExpressionStatement","src":"9801:79:36"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9771:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"9779:18:36","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9768:2:36"},"nodeType":"YulFunctionCall","src":"9768:30:36"},"nodeType":"YulIf","src":"9765:117:36"},{"nodeType":"YulAssignment","src":"9896:72:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9940:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"9951:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9936:3:36"},"nodeType":"YulFunctionCall","src":"9936:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9960:7:36"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"9906:29:36"},"nodeType":"YulFunctionCall","src":"9906:62:36"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"9896:6:36"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9114:9:36","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9125:7:36","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9137:6:36","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9145:6:36","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9153:6:36","type":""},{"name":"value3","nodeType":"YulTypedName","src":"9161:6:36","type":""}],"src":"9042:943:36"},{"body":{"nodeType":"YulBlock","src":"10074:391:36","statements":[{"body":{"nodeType":"YulBlock","src":"10120:83:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"10122:77:36"},"nodeType":"YulFunctionCall","src":"10122:79:36"},"nodeType":"YulExpressionStatement","src":"10122:79:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10095:7:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"10104:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10091:3:36"},"nodeType":"YulFunctionCall","src":"10091:23:36"},{"kind":"number","nodeType":"YulLiteral","src":"10116:2:36","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10087:3:36"},"nodeType":"YulFunctionCall","src":"10087:32:36"},"nodeType":"YulIf","src":"10084:119:36"},{"nodeType":"YulBlock","src":"10213:117:36","statements":[{"nodeType":"YulVariableDeclaration","src":"10228:15:36","value":{"kind":"number","nodeType":"YulLiteral","src":"10242:1:36","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10232:6:36","type":""}]},{"nodeType":"YulAssignment","src":"10257:63:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10292:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"10303:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10288:3:36"},"nodeType":"YulFunctionCall","src":"10288:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10312:7:36"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"10267:20:36"},"nodeType":"YulFunctionCall","src":"10267:53:36"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10257:6:36"}]}]},{"nodeType":"YulBlock","src":"10340:118:36","statements":[{"nodeType":"YulVariableDeclaration","src":"10355:16:36","value":{"kind":"number","nodeType":"YulLiteral","src":"10369:2:36","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10359:6:36","type":""}]},{"nodeType":"YulAssignment","src":"10385:63:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10420:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"10431:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10416:3:36"},"nodeType":"YulFunctionCall","src":"10416:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10440:7:36"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"10395:20:36"},"nodeType":"YulFunctionCall","src":"10395:53:36"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"10385:6:36"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10036:9:36","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10047:7:36","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10059:6:36","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10067:6:36","type":""}],"src":"9991:474:36"},{"body":{"nodeType":"YulBlock","src":"10499:152:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10516:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10519:77:36","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10509:6:36"},"nodeType":"YulFunctionCall","src":"10509:88:36"},"nodeType":"YulExpressionStatement","src":"10509:88:36"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10613:1:36","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10616:4:36","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10606:6:36"},"nodeType":"YulFunctionCall","src":"10606:15:36"},"nodeType":"YulExpressionStatement","src":"10606:15:36"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10637:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10640:4:36","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10630:6:36"},"nodeType":"YulFunctionCall","src":"10630:15:36"},"nodeType":"YulExpressionStatement","src":"10630:15:36"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"10471:180:36"},{"body":{"nodeType":"YulBlock","src":"10708:269:36","statements":[{"nodeType":"YulAssignment","src":"10718:22:36","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"10732:4:36"},{"kind":"number","nodeType":"YulLiteral","src":"10738:1:36","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"10728:3:36"},"nodeType":"YulFunctionCall","src":"10728:12:36"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"10718:6:36"}]},{"nodeType":"YulVariableDeclaration","src":"10749:38:36","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"10779:4:36"},{"kind":"number","nodeType":"YulLiteral","src":"10785:1:36","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10775:3:36"},"nodeType":"YulFunctionCall","src":"10775:12:36"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"10753:18:36","type":""}]},{"body":{"nodeType":"YulBlock","src":"10826:51:36","statements":[{"nodeType":"YulAssignment","src":"10840:27:36","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10854:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"10862:4:36","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10850:3:36"},"nodeType":"YulFunctionCall","src":"10850:17:36"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"10840:6:36"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"10806:18:36"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10799:6:36"},"nodeType":"YulFunctionCall","src":"10799:26:36"},"nodeType":"YulIf","src":"10796:81:36"},{"body":{"nodeType":"YulBlock","src":"10929:42:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"10943:16:36"},"nodeType":"YulFunctionCall","src":"10943:18:36"},"nodeType":"YulExpressionStatement","src":"10943:18:36"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"10893:18:36"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10916:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"10924:2:36","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"10913:2:36"},"nodeType":"YulFunctionCall","src":"10913:14:36"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"10890:2:36"},"nodeType":"YulFunctionCall","src":"10890:38:36"},"nodeType":"YulIf","src":"10887:84:36"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"10692:4:36","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"10701:6:36","type":""}],"src":"10657:320:36"},{"body":{"nodeType":"YulBlock","src":"11089:114:36","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11111:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"11119:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11107:3:36"},"nodeType":"YulFunctionCall","src":"11107:14:36"},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e65","kind":"string","nodeType":"YulLiteral","src":"11123:34:36","type":"","value":"ERC721: approval to current owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11100:6:36"},"nodeType":"YulFunctionCall","src":"11100:58:36"},"nodeType":"YulExpressionStatement","src":"11100:58:36"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11179:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"11187:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11175:3:36"},"nodeType":"YulFunctionCall","src":"11175:15:36"},{"hexValue":"72","kind":"string","nodeType":"YulLiteral","src":"11192:3:36","type":"","value":"r"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11168:6:36"},"nodeType":"YulFunctionCall","src":"11168:28:36"},"nodeType":"YulExpressionStatement","src":"11168:28:36"}]},"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"11081:6:36","type":""}],"src":"10983:220:36"},{"body":{"nodeType":"YulBlock","src":"11355:220:36","statements":[{"nodeType":"YulAssignment","src":"11365:74:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11431:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"11436:2:36","type":"","value":"33"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11372:58:36"},"nodeType":"YulFunctionCall","src":"11372:67:36"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11365:3:36"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11537:3:36"}],"functionName":{"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nodeType":"YulIdentifier","src":"11448:88:36"},"nodeType":"YulFunctionCall","src":"11448:93:36"},"nodeType":"YulExpressionStatement","src":"11448:93:36"},{"nodeType":"YulAssignment","src":"11550:19:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11561:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"11566:2:36","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11557:3:36"},"nodeType":"YulFunctionCall","src":"11557:12:36"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11550:3:36"}]}]},"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11343:3:36","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11351:3:36","type":""}],"src":"11209:366:36"},{"body":{"nodeType":"YulBlock","src":"11752:248:36","statements":[{"nodeType":"YulAssignment","src":"11762:26:36","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11774:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"11785:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11770:3:36"},"nodeType":"YulFunctionCall","src":"11770:18:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11762:4:36"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11809:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"11820:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11805:3:36"},"nodeType":"YulFunctionCall","src":"11805:17:36"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11828:4:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"11834:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11824:3:36"},"nodeType":"YulFunctionCall","src":"11824:20:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11798:6:36"},"nodeType":"YulFunctionCall","src":"11798:47:36"},"nodeType":"YulExpressionStatement","src":"11798:47:36"},{"nodeType":"YulAssignment","src":"11854:139:36","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11988:4:36"}],"functionName":{"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11862:124:36"},"nodeType":"YulFunctionCall","src":"11862:131:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11854:4:36"}]}]},"name":"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11732:9:36","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11747:4:36","type":""}],"src":"11581:419:36"},{"body":{"nodeType":"YulBlock","src":"12112:142:36","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12134:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"12142:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12130:3:36"},"nodeType":"YulFunctionCall","src":"12130:14:36"},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f","kind":"string","nodeType":"YulLiteral","src":"12146:34:36","type":"","value":"ERC721: approve caller is not to"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12123:6:36"},"nodeType":"YulFunctionCall","src":"12123:58:36"},"nodeType":"YulExpressionStatement","src":"12123:58:36"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12202:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"12210:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12198:3:36"},"nodeType":"YulFunctionCall","src":"12198:15:36"},{"hexValue":"6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","kind":"string","nodeType":"YulLiteral","src":"12215:31:36","type":"","value":"ken owner or approved for all"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12191:6:36"},"nodeType":"YulFunctionCall","src":"12191:56:36"},"nodeType":"YulExpressionStatement","src":"12191:56:36"}]},"name":"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"12104:6:36","type":""}],"src":"12006:248:36"},{"body":{"nodeType":"YulBlock","src":"12406:220:36","statements":[{"nodeType":"YulAssignment","src":"12416:74:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12482:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"12487:2:36","type":"","value":"61"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12423:58:36"},"nodeType":"YulFunctionCall","src":"12423:67:36"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12416:3:36"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12588:3:36"}],"functionName":{"name":"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","nodeType":"YulIdentifier","src":"12499:88:36"},"nodeType":"YulFunctionCall","src":"12499:93:36"},"nodeType":"YulExpressionStatement","src":"12499:93:36"},{"nodeType":"YulAssignment","src":"12601:19:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12612:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"12617:2:36","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12608:3:36"},"nodeType":"YulFunctionCall","src":"12608:12:36"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12601:3:36"}]}]},"name":"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12394:3:36","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12402:3:36","type":""}],"src":"12260:366:36"},{"body":{"nodeType":"YulBlock","src":"12803:248:36","statements":[{"nodeType":"YulAssignment","src":"12813:26:36","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12825:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"12836:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12821:3:36"},"nodeType":"YulFunctionCall","src":"12821:18:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12813:4:36"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12860:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"12871:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12856:3:36"},"nodeType":"YulFunctionCall","src":"12856:17:36"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12879:4:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"12885:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12875:3:36"},"nodeType":"YulFunctionCall","src":"12875:20:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12849:6:36"},"nodeType":"YulFunctionCall","src":"12849:47:36"},"nodeType":"YulExpressionStatement","src":"12849:47:36"},{"nodeType":"YulAssignment","src":"12905:139:36","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13039:4:36"}],"functionName":{"name":"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12913:124:36"},"nodeType":"YulFunctionCall","src":"12913:131:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12905:4:36"}]}]},"name":"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12783:9:36","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12798:4:36","type":""}],"src":"12632:419:36"},{"body":{"nodeType":"YulBlock","src":"13163:126:36","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13185:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"13193:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13181:3:36"},"nodeType":"YulFunctionCall","src":"13181:14:36"},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e65","kind":"string","nodeType":"YulLiteral","src":"13197:34:36","type":"","value":"ERC721: caller is not token owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13174:6:36"},"nodeType":"YulFunctionCall","src":"13174:58:36"},"nodeType":"YulExpressionStatement","src":"13174:58:36"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13253:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"13261:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13249:3:36"},"nodeType":"YulFunctionCall","src":"13249:15:36"},{"hexValue":"72206f7220617070726f766564","kind":"string","nodeType":"YulLiteral","src":"13266:15:36","type":"","value":"r or approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13242:6:36"},"nodeType":"YulFunctionCall","src":"13242:40:36"},"nodeType":"YulExpressionStatement","src":"13242:40:36"}]},"name":"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"13155:6:36","type":""}],"src":"13057:232:36"},{"body":{"nodeType":"YulBlock","src":"13441:220:36","statements":[{"nodeType":"YulAssignment","src":"13451:74:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13517:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"13522:2:36","type":"","value":"45"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13458:58:36"},"nodeType":"YulFunctionCall","src":"13458:67:36"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13451:3:36"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13623:3:36"}],"functionName":{"name":"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","nodeType":"YulIdentifier","src":"13534:88:36"},"nodeType":"YulFunctionCall","src":"13534:93:36"},"nodeType":"YulExpressionStatement","src":"13534:93:36"},{"nodeType":"YulAssignment","src":"13636:19:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13647:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"13652:2:36","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13643:3:36"},"nodeType":"YulFunctionCall","src":"13643:12:36"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13636:3:36"}]}]},"name":"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13429:3:36","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13437:3:36","type":""}],"src":"13295:366:36"},{"body":{"nodeType":"YulBlock","src":"13838:248:36","statements":[{"nodeType":"YulAssignment","src":"13848:26:36","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13860:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"13871:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13856:3:36"},"nodeType":"YulFunctionCall","src":"13856:18:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13848:4:36"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13895:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"13906:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13891:3:36"},"nodeType":"YulFunctionCall","src":"13891:17:36"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13914:4:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"13920:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13910:3:36"},"nodeType":"YulFunctionCall","src":"13910:20:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13884:6:36"},"nodeType":"YulFunctionCall","src":"13884:47:36"},"nodeType":"YulExpressionStatement","src":"13884:47:36"},{"nodeType":"YulAssignment","src":"13940:139:36","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14074:4:36"}],"functionName":{"name":"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13948:124:36"},"nodeType":"YulFunctionCall","src":"13948:131:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13940:4:36"}]}]},"name":"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13818:9:36","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13833:4:36","type":""}],"src":"13667:419:36"},{"body":{"nodeType":"YulBlock","src":"14198:68:36","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"14220:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"14228:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14216:3:36"},"nodeType":"YulFunctionCall","src":"14216:14:36"},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","kind":"string","nodeType":"YulLiteral","src":"14232:26:36","type":"","value":"ERC721: invalid token ID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14209:6:36"},"nodeType":"YulFunctionCall","src":"14209:50:36"},"nodeType":"YulExpressionStatement","src":"14209:50:36"}]},"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"14190:6:36","type":""}],"src":"14092:174:36"},{"body":{"nodeType":"YulBlock","src":"14418:220:36","statements":[{"nodeType":"YulAssignment","src":"14428:74:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14494:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"14499:2:36","type":"","value":"24"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14435:58:36"},"nodeType":"YulFunctionCall","src":"14435:67:36"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14428:3:36"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14600:3:36"}],"functionName":{"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nodeType":"YulIdentifier","src":"14511:88:36"},"nodeType":"YulFunctionCall","src":"14511:93:36"},"nodeType":"YulExpressionStatement","src":"14511:93:36"},{"nodeType":"YulAssignment","src":"14613:19:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14624:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"14629:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14620:3:36"},"nodeType":"YulFunctionCall","src":"14620:12:36"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14613:3:36"}]}]},"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14406:3:36","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14414:3:36","type":""}],"src":"14272:366:36"},{"body":{"nodeType":"YulBlock","src":"14815:248:36","statements":[{"nodeType":"YulAssignment","src":"14825:26:36","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14837:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"14848:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14833:3:36"},"nodeType":"YulFunctionCall","src":"14833:18:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14825:4:36"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14872:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"14883:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14868:3:36"},"nodeType":"YulFunctionCall","src":"14868:17:36"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14891:4:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"14897:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14887:3:36"},"nodeType":"YulFunctionCall","src":"14887:20:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14861:6:36"},"nodeType":"YulFunctionCall","src":"14861:47:36"},"nodeType":"YulExpressionStatement","src":"14861:47:36"},{"nodeType":"YulAssignment","src":"14917:139:36","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15051:4:36"}],"functionName":{"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14925:124:36"},"nodeType":"YulFunctionCall","src":"14925:131:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14917:4:36"}]}]},"name":"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14795:9:36","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14810:4:36","type":""}],"src":"14644:419:36"},{"body":{"nodeType":"YulBlock","src":"15175:122:36","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15197:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"15205:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15193:3:36"},"nodeType":"YulFunctionCall","src":"15193:14:36"},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f742061207661","kind":"string","nodeType":"YulLiteral","src":"15209:34:36","type":"","value":"ERC721: address zero is not a va"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15186:6:36"},"nodeType":"YulFunctionCall","src":"15186:58:36"},"nodeType":"YulExpressionStatement","src":"15186:58:36"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15265:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"15273:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15261:3:36"},"nodeType":"YulFunctionCall","src":"15261:15:36"},{"hexValue":"6c6964206f776e6572","kind":"string","nodeType":"YulLiteral","src":"15278:11:36","type":"","value":"lid owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15254:6:36"},"nodeType":"YulFunctionCall","src":"15254:36:36"},"nodeType":"YulExpressionStatement","src":"15254:36:36"}]},"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"15167:6:36","type":""}],"src":"15069:228:36"},{"body":{"nodeType":"YulBlock","src":"15449:220:36","statements":[{"nodeType":"YulAssignment","src":"15459:74:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15525:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"15530:2:36","type":"","value":"41"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15466:58:36"},"nodeType":"YulFunctionCall","src":"15466:67:36"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15459:3:36"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15631:3:36"}],"functionName":{"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nodeType":"YulIdentifier","src":"15542:88:36"},"nodeType":"YulFunctionCall","src":"15542:93:36"},"nodeType":"YulExpressionStatement","src":"15542:93:36"},{"nodeType":"YulAssignment","src":"15644:19:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15655:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"15660:2:36","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15651:3:36"},"nodeType":"YulFunctionCall","src":"15651:12:36"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15644:3:36"}]}]},"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15437:3:36","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15445:3:36","type":""}],"src":"15303:366:36"},{"body":{"nodeType":"YulBlock","src":"15846:248:36","statements":[{"nodeType":"YulAssignment","src":"15856:26:36","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15868:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"15879:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15864:3:36"},"nodeType":"YulFunctionCall","src":"15864:18:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15856:4:36"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15903:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"15914:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15899:3:36"},"nodeType":"YulFunctionCall","src":"15899:17:36"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15922:4:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"15928:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15918:3:36"},"nodeType":"YulFunctionCall","src":"15918:20:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15892:6:36"},"nodeType":"YulFunctionCall","src":"15892:47:36"},"nodeType":"YulExpressionStatement","src":"15892:47:36"},{"nodeType":"YulAssignment","src":"15948:139:36","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16082:4:36"}],"functionName":{"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15956:124:36"},"nodeType":"YulFunctionCall","src":"15956:131:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15948:4:36"}]}]},"name":"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15826:9:36","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15841:4:36","type":""}],"src":"15675:419:36"},{"body":{"nodeType":"YulBlock","src":"16214:34:36","statements":[{"nodeType":"YulAssignment","src":"16224:18:36","value":{"name":"pos","nodeType":"YulIdentifier","src":"16239:3:36"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"16224:11:36"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16186:3:36","type":""},{"name":"length","nodeType":"YulTypedName","src":"16191:6:36","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"16202:11:36","type":""}],"src":"16100:148:36"},{"body":{"nodeType":"YulBlock","src":"16364:280:36","statements":[{"nodeType":"YulVariableDeclaration","src":"16374:53:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16421:5:36"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"16388:32:36"},"nodeType":"YulFunctionCall","src":"16388:39:36"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"16378:6:36","type":""}]},{"nodeType":"YulAssignment","src":"16436:96:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16520:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"16525:6:36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"16443:76:36"},"nodeType":"YulFunctionCall","src":"16443:89:36"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16436:3:36"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16580:5:36"},{"kind":"number","nodeType":"YulLiteral","src":"16587:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16576:3:36"},"nodeType":"YulFunctionCall","src":"16576:16:36"},{"name":"pos","nodeType":"YulIdentifier","src":"16594:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"16599:6:36"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"16541:34:36"},"nodeType":"YulFunctionCall","src":"16541:65:36"},"nodeType":"YulExpressionStatement","src":"16541:65:36"},{"nodeType":"YulAssignment","src":"16615:23:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16626:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"16631:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16622:3:36"},"nodeType":"YulFunctionCall","src":"16622:16:36"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16615:3:36"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"16345:5:36","type":""},{"name":"pos","nodeType":"YulTypedName","src":"16352:3:36","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16360:3:36","type":""}],"src":"16254:390:36"},{"body":{"nodeType":"YulBlock","src":"16834:251:36","statements":[{"nodeType":"YulAssignment","src":"16845:102:36","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16934:6:36"},{"name":"pos","nodeType":"YulIdentifier","src":"16943:3:36"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"16852:81:36"},"nodeType":"YulFunctionCall","src":"16852:95:36"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16845:3:36"}]},{"nodeType":"YulAssignment","src":"16957:102:36","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"17046:6:36"},{"name":"pos","nodeType":"YulIdentifier","src":"17055:3:36"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"16964:81:36"},"nodeType":"YulFunctionCall","src":"16964:95:36"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16957:3:36"}]},{"nodeType":"YulAssignment","src":"17069:10:36","value":{"name":"pos","nodeType":"YulIdentifier","src":"17076:3:36"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17069:3:36"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16805:3:36","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16811:6:36","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16819:6:36","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16830:3:36","type":""}],"src":"16650:435:36"},{"body":{"nodeType":"YulBlock","src":"17197:118:36","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17219:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"17227:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17215:3:36"},"nodeType":"YulFunctionCall","src":"17215:14:36"},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f727265637420","kind":"string","nodeType":"YulLiteral","src":"17231:34:36","type":"","value":"ERC721: transfer from incorrect "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17208:6:36"},"nodeType":"YulFunctionCall","src":"17208:58:36"},"nodeType":"YulExpressionStatement","src":"17208:58:36"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17287:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"17295:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17283:3:36"},"nodeType":"YulFunctionCall","src":"17283:15:36"},{"hexValue":"6f776e6572","kind":"string","nodeType":"YulLiteral","src":"17300:7:36","type":"","value":"owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17276:6:36"},"nodeType":"YulFunctionCall","src":"17276:32:36"},"nodeType":"YulExpressionStatement","src":"17276:32:36"}]},"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"17189:6:36","type":""}],"src":"17091:224:36"},{"body":{"nodeType":"YulBlock","src":"17467:220:36","statements":[{"nodeType":"YulAssignment","src":"17477:74:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17543:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"17548:2:36","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17484:58:36"},"nodeType":"YulFunctionCall","src":"17484:67:36"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17477:3:36"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17649:3:36"}],"functionName":{"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nodeType":"YulIdentifier","src":"17560:88:36"},"nodeType":"YulFunctionCall","src":"17560:93:36"},"nodeType":"YulExpressionStatement","src":"17560:93:36"},{"nodeType":"YulAssignment","src":"17662:19:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17673:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"17678:2:36","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17669:3:36"},"nodeType":"YulFunctionCall","src":"17669:12:36"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17662:3:36"}]}]},"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17455:3:36","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17463:3:36","type":""}],"src":"17321:366:36"},{"body":{"nodeType":"YulBlock","src":"17864:248:36","statements":[{"nodeType":"YulAssignment","src":"17874:26:36","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17886:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"17897:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17882:3:36"},"nodeType":"YulFunctionCall","src":"17882:18:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17874:4:36"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17921:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"17932:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17917:3:36"},"nodeType":"YulFunctionCall","src":"17917:17:36"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17940:4:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"17946:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17936:3:36"},"nodeType":"YulFunctionCall","src":"17936:20:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17910:6:36"},"nodeType":"YulFunctionCall","src":"17910:47:36"},"nodeType":"YulExpressionStatement","src":"17910:47:36"},{"nodeType":"YulAssignment","src":"17966:139:36","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18100:4:36"}],"functionName":{"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17974:124:36"},"nodeType":"YulFunctionCall","src":"17974:131:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17966:4:36"}]}]},"name":"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17844:9:36","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17859:4:36","type":""}],"src":"17693:419:36"},{"body":{"nodeType":"YulBlock","src":"18224:117:36","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18246:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"18254:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18242:3:36"},"nodeType":"YulFunctionCall","src":"18242:14:36"},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"18258:34:36","type":"","value":"ERC721: transfer to the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18235:6:36"},"nodeType":"YulFunctionCall","src":"18235:58:36"},"nodeType":"YulExpressionStatement","src":"18235:58:36"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18314:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"18322:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18310:3:36"},"nodeType":"YulFunctionCall","src":"18310:15:36"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"18327:6:36","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18303:6:36"},"nodeType":"YulFunctionCall","src":"18303:31:36"},"nodeType":"YulExpressionStatement","src":"18303:31:36"}]},"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"18216:6:36","type":""}],"src":"18118:223:36"},{"body":{"nodeType":"YulBlock","src":"18493:220:36","statements":[{"nodeType":"YulAssignment","src":"18503:74:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18569:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"18574:2:36","type":"","value":"36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18510:58:36"},"nodeType":"YulFunctionCall","src":"18510:67:36"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"18503:3:36"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18675:3:36"}],"functionName":{"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nodeType":"YulIdentifier","src":"18586:88:36"},"nodeType":"YulFunctionCall","src":"18586:93:36"},"nodeType":"YulExpressionStatement","src":"18586:93:36"},{"nodeType":"YulAssignment","src":"18688:19:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18699:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"18704:2:36","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18695:3:36"},"nodeType":"YulFunctionCall","src":"18695:12:36"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"18688:3:36"}]}]},"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18481:3:36","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18489:3:36","type":""}],"src":"18347:366:36"},{"body":{"nodeType":"YulBlock","src":"18890:248:36","statements":[{"nodeType":"YulAssignment","src":"18900:26:36","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18912:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"18923:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18908:3:36"},"nodeType":"YulFunctionCall","src":"18908:18:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18900:4:36"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18947:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"18958:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18943:3:36"},"nodeType":"YulFunctionCall","src":"18943:17:36"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18966:4:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"18972:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18962:3:36"},"nodeType":"YulFunctionCall","src":"18962:20:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18936:6:36"},"nodeType":"YulFunctionCall","src":"18936:47:36"},"nodeType":"YulExpressionStatement","src":"18936:47:36"},{"nodeType":"YulAssignment","src":"18992:139:36","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19126:4:36"}],"functionName":{"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19000:124:36"},"nodeType":"YulFunctionCall","src":"19000:131:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18992:4:36"}]}]},"name":"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18870:9:36","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18885:4:36","type":""}],"src":"18719:419:36"},{"body":{"nodeType":"YulBlock","src":"19250:69:36","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19272:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"19280:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19268:3:36"},"nodeType":"YulFunctionCall","src":"19268:14:36"},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","kind":"string","nodeType":"YulLiteral","src":"19284:27:36","type":"","value":"ERC721: approve to caller"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19261:6:36"},"nodeType":"YulFunctionCall","src":"19261:51:36"},"nodeType":"YulExpressionStatement","src":"19261:51:36"}]},"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"19242:6:36","type":""}],"src":"19144:175:36"},{"body":{"nodeType":"YulBlock","src":"19471:220:36","statements":[{"nodeType":"YulAssignment","src":"19481:74:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19547:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"19552:2:36","type":"","value":"25"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19488:58:36"},"nodeType":"YulFunctionCall","src":"19488:67:36"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"19481:3:36"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19653:3:36"}],"functionName":{"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nodeType":"YulIdentifier","src":"19564:88:36"},"nodeType":"YulFunctionCall","src":"19564:93:36"},"nodeType":"YulExpressionStatement","src":"19564:93:36"},{"nodeType":"YulAssignment","src":"19666:19:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19677:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"19682:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19673:3:36"},"nodeType":"YulFunctionCall","src":"19673:12:36"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"19666:3:36"}]}]},"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"19459:3:36","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"19467:3:36","type":""}],"src":"19325:366:36"},{"body":{"nodeType":"YulBlock","src":"19868:248:36","statements":[{"nodeType":"YulAssignment","src":"19878:26:36","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19890:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"19901:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19886:3:36"},"nodeType":"YulFunctionCall","src":"19886:18:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19878:4:36"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19925:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"19936:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19921:3:36"},"nodeType":"YulFunctionCall","src":"19921:17:36"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19944:4:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"19950:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19940:3:36"},"nodeType":"YulFunctionCall","src":"19940:20:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19914:6:36"},"nodeType":"YulFunctionCall","src":"19914:47:36"},"nodeType":"YulExpressionStatement","src":"19914:47:36"},{"nodeType":"YulAssignment","src":"19970:139:36","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20104:4:36"}],"functionName":{"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19978:124:36"},"nodeType":"YulFunctionCall","src":"19978:131:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19970:4:36"}]}]},"name":"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19848:9:36","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19863:4:36","type":""}],"src":"19697:419:36"},{"body":{"nodeType":"YulBlock","src":"20228:131:36","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20250:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"20258:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20246:3:36"},"nodeType":"YulFunctionCall","src":"20246:14:36"},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e204552433732315265","kind":"string","nodeType":"YulLiteral","src":"20262:34:36","type":"","value":"ERC721: transfer to non ERC721Re"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20239:6:36"},"nodeType":"YulFunctionCall","src":"20239:58:36"},"nodeType":"YulExpressionStatement","src":"20239:58:36"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20318:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"20326:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20314:3:36"},"nodeType":"YulFunctionCall","src":"20314:15:36"},{"hexValue":"63656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"20331:20:36","type":"","value":"ceiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20307:6:36"},"nodeType":"YulFunctionCall","src":"20307:45:36"},"nodeType":"YulExpressionStatement","src":"20307:45:36"}]},"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"20220:6:36","type":""}],"src":"20122:237:36"},{"body":{"nodeType":"YulBlock","src":"20511:220:36","statements":[{"nodeType":"YulAssignment","src":"20521:74:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20587:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"20592:2:36","type":"","value":"50"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20528:58:36"},"nodeType":"YulFunctionCall","src":"20528:67:36"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"20521:3:36"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20693:3:36"}],"functionName":{"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nodeType":"YulIdentifier","src":"20604:88:36"},"nodeType":"YulFunctionCall","src":"20604:93:36"},"nodeType":"YulExpressionStatement","src":"20604:93:36"},{"nodeType":"YulAssignment","src":"20706:19:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20717:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"20722:2:36","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20713:3:36"},"nodeType":"YulFunctionCall","src":"20713:12:36"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"20706:3:36"}]}]},"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"20499:3:36","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"20507:3:36","type":""}],"src":"20365:366:36"},{"body":{"nodeType":"YulBlock","src":"20908:248:36","statements":[{"nodeType":"YulAssignment","src":"20918:26:36","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20930:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"20941:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20926:3:36"},"nodeType":"YulFunctionCall","src":"20926:18:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20918:4:36"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20965:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"20976:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20961:3:36"},"nodeType":"YulFunctionCall","src":"20961:17:36"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20984:4:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"20990:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20980:3:36"},"nodeType":"YulFunctionCall","src":"20980:20:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20954:6:36"},"nodeType":"YulFunctionCall","src":"20954:47:36"},"nodeType":"YulExpressionStatement","src":"20954:47:36"},{"nodeType":"YulAssignment","src":"21010:139:36","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21144:4:36"}],"functionName":{"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21018:124:36"},"nodeType":"YulFunctionCall","src":"21018:131:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21010:4:36"}]}]},"name":"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20888:9:36","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20903:4:36","type":""}],"src":"20737:419:36"},{"body":{"nodeType":"YulBlock","src":"21190:152:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21207:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21210:77:36","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21200:6:36"},"nodeType":"YulFunctionCall","src":"21200:88:36"},"nodeType":"YulExpressionStatement","src":"21200:88:36"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21304:1:36","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"21307:4:36","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21297:6:36"},"nodeType":"YulFunctionCall","src":"21297:15:36"},"nodeType":"YulExpressionStatement","src":"21297:15:36"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"21328:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"21331:4:36","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"21321:6:36"},"nodeType":"YulFunctionCall","src":"21321:15:36"},"nodeType":"YulExpressionStatement","src":"21321:15:36"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"21162:180:36"},{"body":{"nodeType":"YulBlock","src":"21406:40:36","statements":[{"nodeType":"YulAssignment","src":"21417:22:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21433:5:36"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"21427:5:36"},"nodeType":"YulFunctionCall","src":"21427:12:36"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"21417:6:36"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"21389:5:36","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"21399:6:36","type":""}],"src":"21348:98:36"},{"body":{"nodeType":"YulBlock","src":"21547:73:36","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21564:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"21569:6:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21557:6:36"},"nodeType":"YulFunctionCall","src":"21557:19:36"},"nodeType":"YulExpressionStatement","src":"21557:19:36"},{"nodeType":"YulAssignment","src":"21585:29:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21604:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"21609:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21600:3:36"},"nodeType":"YulFunctionCall","src":"21600:14:36"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"21585:11:36"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"21519:3:36","type":""},{"name":"length","nodeType":"YulTypedName","src":"21524:6:36","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"21535:11:36","type":""}],"src":"21452:168:36"},{"body":{"nodeType":"YulBlock","src":"21716:283:36","statements":[{"nodeType":"YulVariableDeclaration","src":"21726:52:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21772:5:36"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"21740:31:36"},"nodeType":"YulFunctionCall","src":"21740:38:36"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"21730:6:36","type":""}]},{"nodeType":"YulAssignment","src":"21787:77:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21852:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"21857:6:36"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21794:57:36"},"nodeType":"YulFunctionCall","src":"21794:70:36"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"21787:3:36"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"21912:5:36"},{"kind":"number","nodeType":"YulLiteral","src":"21919:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21908:3:36"},"nodeType":"YulFunctionCall","src":"21908:16:36"},{"name":"pos","nodeType":"YulIdentifier","src":"21926:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"21931:6:36"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"21873:34:36"},"nodeType":"YulFunctionCall","src":"21873:65:36"},"nodeType":"YulExpressionStatement","src":"21873:65:36"},{"nodeType":"YulAssignment","src":"21947:46:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21958:3:36"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"21985:6:36"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"21963:21:36"},"nodeType":"YulFunctionCall","src":"21963:29:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21954:3:36"},"nodeType":"YulFunctionCall","src":"21954:39:36"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"21947:3:36"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"21697:5:36","type":""},{"name":"pos","nodeType":"YulTypedName","src":"21704:3:36","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"21712:3:36","type":""}],"src":"21626:373:36"},{"body":{"nodeType":"YulBlock","src":"22205:440:36","statements":[{"nodeType":"YulAssignment","src":"22215:27:36","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22227:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"22238:3:36","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22223:3:36"},"nodeType":"YulFunctionCall","src":"22223:19:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22215:4:36"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"22296:6:36"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22309:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"22320:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22305:3:36"},"nodeType":"YulFunctionCall","src":"22305:17:36"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"22252:43:36"},"nodeType":"YulFunctionCall","src":"22252:71:36"},"nodeType":"YulExpressionStatement","src":"22252:71:36"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"22377:6:36"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22390:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"22401:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22386:3:36"},"nodeType":"YulFunctionCall","src":"22386:18:36"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"22333:43:36"},"nodeType":"YulFunctionCall","src":"22333:72:36"},"nodeType":"YulExpressionStatement","src":"22333:72:36"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"22459:6:36"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22472:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"22483:2:36","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22468:3:36"},"nodeType":"YulFunctionCall","src":"22468:18:36"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"22415:43:36"},"nodeType":"YulFunctionCall","src":"22415:72:36"},"nodeType":"YulExpressionStatement","src":"22415:72:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22508:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"22519:2:36","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22504:3:36"},"nodeType":"YulFunctionCall","src":"22504:18:36"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22528:4:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"22534:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22524:3:36"},"nodeType":"YulFunctionCall","src":"22524:20:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22497:6:36"},"nodeType":"YulFunctionCall","src":"22497:48:36"},"nodeType":"YulExpressionStatement","src":"22497:48:36"},{"nodeType":"YulAssignment","src":"22554:84:36","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"22624:6:36"},{"name":"tail","nodeType":"YulIdentifier","src":"22633:4:36"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22562:61:36"},"nodeType":"YulFunctionCall","src":"22562:76:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22554:4:36"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22153:9:36","type":""},{"name":"value3","nodeType":"YulTypedName","src":"22165:6:36","type":""},{"name":"value2","nodeType":"YulTypedName","src":"22173:6:36","type":""},{"name":"value1","nodeType":"YulTypedName","src":"22181:6:36","type":""},{"name":"value0","nodeType":"YulTypedName","src":"22189:6:36","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22200:4:36","type":""}],"src":"22005:640:36"},{"body":{"nodeType":"YulBlock","src":"22713:79:36","statements":[{"nodeType":"YulAssignment","src":"22723:22:36","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"22738:6:36"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"22732:5:36"},"nodeType":"YulFunctionCall","src":"22732:13:36"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"22723:5:36"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"22780:5:36"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"22754:25:36"},"nodeType":"YulFunctionCall","src":"22754:32:36"},"nodeType":"YulExpressionStatement","src":"22754:32:36"}]},"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"22691:6:36","type":""},{"name":"end","nodeType":"YulTypedName","src":"22699:3:36","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"22707:5:36","type":""}],"src":"22651:141:36"},{"body":{"nodeType":"YulBlock","src":"22874:273:36","statements":[{"body":{"nodeType":"YulBlock","src":"22920:83:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"22922:77:36"},"nodeType":"YulFunctionCall","src":"22922:79:36"},"nodeType":"YulExpressionStatement","src":"22922:79:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"22895:7:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"22904:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22891:3:36"},"nodeType":"YulFunctionCall","src":"22891:23:36"},{"kind":"number","nodeType":"YulLiteral","src":"22916:2:36","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"22887:3:36"},"nodeType":"YulFunctionCall","src":"22887:32:36"},"nodeType":"YulIf","src":"22884:119:36"},{"nodeType":"YulBlock","src":"23013:127:36","statements":[{"nodeType":"YulVariableDeclaration","src":"23028:15:36","value":{"kind":"number","nodeType":"YulLiteral","src":"23042:1:36","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"23032:6:36","type":""}]},{"nodeType":"YulAssignment","src":"23057:73:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"23102:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"23113:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23098:3:36"},"nodeType":"YulFunctionCall","src":"23098:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"23122:7:36"}],"functionName":{"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulIdentifier","src":"23067:30:36"},"nodeType":"YulFunctionCall","src":"23067:63:36"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"23057:6:36"}]}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22844:9:36","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"22855:7:36","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"22867:6:36","type":""}],"src":"22798:349:36"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approval to current owne\")\n\n        mstore(add(memPtr, 32), \"r\")\n\n    }\n\n    function abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)\n        store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve caller is not to\")\n\n        mstore(add(memPtr, 32), \"ken owner or approved for all\")\n\n    }\n\n    function abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 61)\n        store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: caller is not token owne\")\n\n        mstore(add(memPtr, 32), \"r or approved\")\n\n    }\n\n    function abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 45)\n        store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: invalid token ID\")\n\n    }\n\n    function abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: address zero is not a va\")\n\n        mstore(add(memPtr, 32), \"lid owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 41)\n        store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer from incorrect \")\n\n        mstore(add(memPtr, 32), \"owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to the zero add\")\n\n        mstore(add(memPtr, 32), \"ress\")\n\n    }\n\n    function abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve to caller\")\n\n    }\n\n    function abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 25)\n        store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to non ERC721Re\")\n\n        mstore(add(memPtr, 32), \"ceiver implementer\")\n\n    }\n\n    function abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 50)\n        store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value3,  tail)\n\n    }\n\n    function abi_decode_t_bytes4_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n}\n","id":36,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100cf5760003560e01c80636352211e1161008c578063a22cb46511610066578063a22cb46514610224578063b88d4fde14610240578063c87b56dd1461025c578063e985e9c51461028c576100cf565b80636352211e146101a657806370a08231146101d657806395d89b4114610206576100cf565b806301ffc9a7146100d457806306fdde0314610104578063081812fc14610122578063095ea7b31461015257806323b872dd1461016e57806342842e0e1461018a575b600080fd5b6100ee60048036038101906100e991906114f4565b6102bc565b6040516100fb919061153c565b60405180910390f35b61010c61039e565b60405161011991906115e7565b60405180910390f35b61013c6004803603810190610137919061163f565b610430565b60405161014991906116ad565b60405180910390f35b61016c600480360381019061016791906116f4565b610476565b005b61018860048036038101906101839190611734565b61058d565b005b6101a4600480360381019061019f9190611734565b6105ed565b005b6101c060048036038101906101bb919061163f565b61060d565b6040516101cd91906116ad565b60405180910390f35b6101f060048036038101906101eb9190611787565b610693565b6040516101fd91906117c3565b60405180910390f35b61020e61074a565b60405161021b91906115e7565b60405180910390f35b61023e6004803603810190610239919061180a565b6107dc565b005b61025a6004803603810190610255919061197f565b6107f2565b005b6102766004803603810190610271919061163f565b610854565b60405161028391906115e7565b60405180910390f35b6102a660048036038101906102a19190611a02565b6108bc565b6040516102b3919061153c565b60405180910390f35b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061038757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610397575061039682610950565b5b9050919050565b6060600080546103ad90611a71565b80601f01602080910402602001604051908101604052809291908181526020018280546103d990611a71565b80156104265780601f106103fb57610100808354040283529160200191610426565b820191906000526020600020905b81548152906001019060200180831161040957829003601f168201915b5050505050905090565b600061043b826109ba565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006104818261060d565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036104f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e890611b14565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610510610a05565b73ffffffffffffffffffffffffffffffffffffffff16148061053f575061053e81610539610a05565b6108bc565b5b61057e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057590611ba6565b60405180910390fd5b6105888383610a0d565b505050565b61059e610598610a05565b82610ac6565b6105dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d490611c38565b60405180910390fd5b6105e8838383610b5b565b505050565b610608838383604051806020016040528060008152506107f2565b505050565b60008061061983610e54565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361068a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068190611ca4565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610703576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106fa90611d36565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606001805461075990611a71565b80601f016020809104026020016040519081016040528092919081815260200182805461078590611a71565b80156107d25780601f106107a7576101008083540402835291602001916107d2565b820191906000526020600020905b8154815290600101906020018083116107b557829003601f168201915b5050505050905090565b6107ee6107e7610a05565b8383610e91565b5050565b6108036107fd610a05565b83610ac6565b610842576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083990611c38565b60405180910390fd5b61084e84848484610ffd565b50505050565b606061085f826109ba565b6000610869611059565b9050600081511161088957604051806020016040528060008152506108b4565b8061089384611070565b6040516020016108a4929190611d92565b6040516020818303038152906040525b915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6109c38161113e565b610a02576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109f990611ca4565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610a808361060d565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610ad28361060d565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610b145750610b1381856108bc565b5b80610b5257508373ffffffffffffffffffffffffffffffffffffffff16610b3a84610430565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610b7b8261060d565b73ffffffffffffffffffffffffffffffffffffffff1614610bd1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc890611e28565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610c40576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c3790611eba565b60405180910390fd5b610c4d838383600161117f565b8273ffffffffffffffffffffffffffffffffffffffff16610c6d8261060d565b73ffffffffffffffffffffffffffffffffffffffff1614610cc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cba90611e28565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610e4f8383836001611185565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610eff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ef690611f26565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610ff0919061153c565b60405180910390a3505050565b611008848484610b5b565b6110148484848461118b565b611053576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104a90611fb8565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606000600161107f84611312565b01905060008167ffffffffffffffff81111561109e5761109d611854565b5b6040519080825280601f01601f1916602001820160405280156110d05781602001600182028036833780820191505090505b509050600082602001820190505b600115611133578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a858161112757611126611fd8565b5b049450600085036110de575b819350505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff1661116083610e54565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b50505050565b50505050565b60006111ac8473ffffffffffffffffffffffffffffffffffffffff16611465565b15611305578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026111d5610a05565b8786866040518563ffffffff1660e01b81526004016111f7949392919061205c565b6020604051808303816000875af192505050801561123357506040513d601f19601f8201168201806040525081019061123091906120bd565b60015b6112b5573d8060008114611263576040519150601f19603f3d011682016040523d82523d6000602084013e611268565b606091505b5060008151036112ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112a490611fb8565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061130a565b600190505b949350505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611370577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161136657611365611fd8565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106113ad576d04ee2d6d415b85acef810000000083816113a3576113a2611fd8565b5b0492506020810190505b662386f26fc1000083106113dc57662386f26fc1000083816113d2576113d1611fd8565b5b0492506010810190505b6305f5e1008310611405576305f5e10083816113fb576113fa611fd8565b5b0492506008810190505b612710831061142a5761271083816114205761141f611fd8565b5b0492506004810190505b6064831061144d576064838161144357611442611fd8565b5b0492506002810190505b600a831061145c576001810190505b80915050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6114d18161149c565b81146114dc57600080fd5b50565b6000813590506114ee816114c8565b92915050565b60006020828403121561150a57611509611492565b5b6000611518848285016114df565b91505092915050565b60008115159050919050565b61153681611521565b82525050565b6000602082019050611551600083018461152d565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611591578082015181840152602081019050611576565b60008484015250505050565b6000601f19601f8301169050919050565b60006115b982611557565b6115c38185611562565b93506115d3818560208601611573565b6115dc8161159d565b840191505092915050565b6000602082019050818103600083015261160181846115ae565b905092915050565b6000819050919050565b61161c81611609565b811461162757600080fd5b50565b60008135905061163981611613565b92915050565b60006020828403121561165557611654611492565b5b60006116638482850161162a565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006116978261166c565b9050919050565b6116a78161168c565b82525050565b60006020820190506116c2600083018461169e565b92915050565b6116d18161168c565b81146116dc57600080fd5b50565b6000813590506116ee816116c8565b92915050565b6000806040838503121561170b5761170a611492565b5b6000611719858286016116df565b925050602061172a8582860161162a565b9150509250929050565b60008060006060848603121561174d5761174c611492565b5b600061175b868287016116df565b935050602061176c868287016116df565b925050604061177d8682870161162a565b9150509250925092565b60006020828403121561179d5761179c611492565b5b60006117ab848285016116df565b91505092915050565b6117bd81611609565b82525050565b60006020820190506117d860008301846117b4565b92915050565b6117e781611521565b81146117f257600080fd5b50565b600081359050611804816117de565b92915050565b6000806040838503121561182157611820611492565b5b600061182f858286016116df565b9250506020611840858286016117f5565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61188c8261159d565b810181811067ffffffffffffffff821117156118ab576118aa611854565b5b80604052505050565b60006118be611488565b90506118ca8282611883565b919050565b600067ffffffffffffffff8211156118ea576118e9611854565b5b6118f38261159d565b9050602081019050919050565b82818337600083830152505050565b600061192261191d846118cf565b6118b4565b90508281526020810184848401111561193e5761193d61184f565b5b611949848285611900565b509392505050565b600082601f8301126119665761196561184a565b5b813561197684826020860161190f565b91505092915050565b6000806000806080858703121561199957611998611492565b5b60006119a7878288016116df565b94505060206119b8878288016116df565b93505060406119c98782880161162a565b925050606085013567ffffffffffffffff8111156119ea576119e9611497565b5b6119f687828801611951565b91505092959194509250565b60008060408385031215611a1957611a18611492565b5b6000611a27858286016116df565b9250506020611a38858286016116df565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611a8957607f821691505b602082108103611a9c57611a9b611a42565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000611afe602183611562565b9150611b0982611aa2565b604082019050919050565b60006020820190508181036000830152611b2d81611af1565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000611b90603d83611562565b9150611b9b82611b34565b604082019050919050565b60006020820190508181036000830152611bbf81611b83565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000611c22602d83611562565b9150611c2d82611bc6565b604082019050919050565b60006020820190508181036000830152611c5181611c15565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000611c8e601883611562565b9150611c9982611c58565b602082019050919050565b60006020820190508181036000830152611cbd81611c81565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000611d20602983611562565b9150611d2b82611cc4565b604082019050919050565b60006020820190508181036000830152611d4f81611d13565b9050919050565b600081905092915050565b6000611d6c82611557565b611d768185611d56565b9350611d86818560208601611573565b80840191505092915050565b6000611d9e8285611d61565b9150611daa8284611d61565b91508190509392505050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000611e12602583611562565b9150611e1d82611db6565b604082019050919050565b60006020820190508181036000830152611e4181611e05565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000611ea4602483611562565b9150611eaf82611e48565b604082019050919050565b60006020820190508181036000830152611ed381611e97565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000611f10601983611562565b9150611f1b82611eda565b602082019050919050565b60006020820190508181036000830152611f3f81611f03565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000611fa2603283611562565b9150611fad82611f46565b604082019050919050565b60006020820190508181036000830152611fd181611f95565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600081519050919050565b600082825260208201905092915050565b600061202e82612007565b6120388185612012565b9350612048818560208601611573565b6120518161159d565b840191505092915050565b6000608082019050612071600083018761169e565b61207e602083018661169e565b61208b60408301856117b4565b818103606083015261209d8184612023565b905095945050505050565b6000815190506120b7816114c8565b92915050565b6000602082840312156120d3576120d2611492565b5b60006120e1848285016120a8565b9150509291505056fea2646970667358221220284ee25fe50ff5ed6a8afdce160046c560382a7e6d15a931f6fb4ad3d1649e4464736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x6352211E GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x224 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x240 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x25C JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x28C JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x6352211E EQ PUSH2 0x1A6 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1D6 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x206 JUMPI PUSH2 0xCF JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x104 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x122 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x152 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x16E JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x18A JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEE PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0xE9 SWAP2 SWAP1 PUSH2 0x14F4 JUMP JUMPDEST PUSH2 0x2BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xFB SWAP2 SWAP1 PUSH2 0x153C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x10C PUSH2 0x39E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x119 SWAP2 SWAP1 PUSH2 0x15E7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x13C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x137 SWAP2 SWAP1 PUSH2 0x163F JUMP JUMPDEST PUSH2 0x430 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x149 SWAP2 SWAP1 PUSH2 0x16AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x16C PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x167 SWAP2 SWAP1 PUSH2 0x16F4 JUMP JUMPDEST PUSH2 0x476 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x188 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x183 SWAP2 SWAP1 PUSH2 0x1734 JUMP JUMPDEST PUSH2 0x58D JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1A4 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x19F SWAP2 SWAP1 PUSH2 0x1734 JUMP JUMPDEST PUSH2 0x5ED JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BB SWAP2 SWAP1 PUSH2 0x163F JUMP JUMPDEST PUSH2 0x60D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1CD SWAP2 SWAP1 PUSH2 0x16AD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1F0 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1EB SWAP2 SWAP1 PUSH2 0x1787 JUMP JUMPDEST PUSH2 0x693 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FD SWAP2 SWAP1 PUSH2 0x17C3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20E PUSH2 0x74A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x21B SWAP2 SWAP1 PUSH2 0x15E7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x23E PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x239 SWAP2 SWAP1 PUSH2 0x180A JUMP JUMPDEST PUSH2 0x7DC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25A PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x255 SWAP2 SWAP1 PUSH2 0x197F JUMP JUMPDEST PUSH2 0x7F2 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x276 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x271 SWAP2 SWAP1 PUSH2 0x163F JUMP JUMPDEST PUSH2 0x854 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x283 SWAP2 SWAP1 PUSH2 0x15E7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2A6 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2A1 SWAP2 SWAP1 PUSH2 0x1A02 JUMP JUMPDEST PUSH2 0x8BC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2B3 SWAP2 SWAP1 PUSH2 0x153C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x387 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x397 JUMPI POP PUSH2 0x396 DUP3 PUSH2 0x950 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x3AD SWAP1 PUSH2 0x1A71 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x3D9 SWAP1 PUSH2 0x1A71 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x426 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3FB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x426 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x409 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x43B DUP3 PUSH2 0x9BA JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x481 DUP3 PUSH2 0x60D JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x4F1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x4E8 SWAP1 PUSH2 0x1B14 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x510 PUSH2 0xA05 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x53F JUMPI POP PUSH2 0x53E DUP2 PUSH2 0x539 PUSH2 0xA05 JUMP JUMPDEST PUSH2 0x8BC JUMP JUMPDEST JUMPDEST PUSH2 0x57E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x575 SWAP1 PUSH2 0x1BA6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x588 DUP4 DUP4 PUSH2 0xA0D JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x59E PUSH2 0x598 PUSH2 0xA05 JUMP JUMPDEST DUP3 PUSH2 0xAC6 JUMP JUMPDEST PUSH2 0x5DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5D4 SWAP1 PUSH2 0x1C38 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x5E8 DUP4 DUP4 DUP4 PUSH2 0xB5B JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x608 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x7F2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x619 DUP4 PUSH2 0xE54 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x68A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x681 SWAP1 PUSH2 0x1CA4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x703 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x6FA SWAP1 PUSH2 0x1D36 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x759 SWAP1 PUSH2 0x1A71 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x785 SWAP1 PUSH2 0x1A71 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x7D2 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x7A7 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x7D2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x7B5 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x7EE PUSH2 0x7E7 PUSH2 0xA05 JUMP JUMPDEST DUP4 DUP4 PUSH2 0xE91 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x803 PUSH2 0x7FD PUSH2 0xA05 JUMP JUMPDEST DUP4 PUSH2 0xAC6 JUMP JUMPDEST PUSH2 0x842 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x839 SWAP1 PUSH2 0x1C38 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x84E DUP5 DUP5 DUP5 DUP5 PUSH2 0xFFD JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x85F DUP3 PUSH2 0x9BA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x869 PUSH2 0x1059 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x889 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x8B4 JUMP JUMPDEST DUP1 PUSH2 0x893 DUP5 PUSH2 0x1070 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x8A4 SWAP3 SWAP2 SWAP1 PUSH2 0x1D92 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x9C3 DUP2 PUSH2 0x113E JUMP JUMPDEST PUSH2 0xA02 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x9F9 SWAP1 PUSH2 0x1CA4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xA80 DUP4 PUSH2 0x60D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xAD2 DUP4 PUSH2 0x60D JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xB14 JUMPI POP PUSH2 0xB13 DUP2 DUP6 PUSH2 0x8BC JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xB52 JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB3A DUP5 PUSH2 0x430 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB7B DUP3 PUSH2 0x60D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBD1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBC8 SWAP1 PUSH2 0x1E28 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xC40 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC37 SWAP1 PUSH2 0x1EBA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xC4D DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x117F JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC6D DUP3 PUSH2 0x60D JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCC3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCBA SWAP1 PUSH2 0x1E28 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xE4F DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1185 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xEFF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xEF6 SWAP1 PUSH2 0x1F26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0xFF0 SWAP2 SWAP1 PUSH2 0x153C JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x1008 DUP5 DUP5 DUP5 PUSH2 0xB5B JUMP JUMPDEST PUSH2 0x1014 DUP5 DUP5 DUP5 DUP5 PUSH2 0x118B JUMP JUMPDEST PUSH2 0x1053 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x104A SWAP1 PUSH2 0x1FB8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x107F DUP5 PUSH2 0x1312 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x109E JUMPI PUSH2 0x109D PUSH2 0x1854 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x10D0 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x1133 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x1127 JUMPI PUSH2 0x1126 PUSH2 0x1FD8 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 SUB PUSH2 0x10DE JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1160 DUP4 PUSH2 0xE54 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11AC DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1465 JUMP JUMPDEST ISZERO PUSH2 0x1305 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x11D5 PUSH2 0xA05 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x11F7 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x205C JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1233 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1230 SWAP2 SWAP1 PUSH2 0x20BD JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x12B5 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1263 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1268 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x12AD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x12A4 SWAP1 PUSH2 0x1FB8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x130A JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x1370 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x1366 JUMPI PUSH2 0x1365 PUSH2 0x1FD8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x13AD JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x13A3 JUMPI PUSH2 0x13A2 PUSH2 0x1FD8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x13DC JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x13D2 JUMPI PUSH2 0x13D1 PUSH2 0x1FD8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1405 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x13FB JUMPI PUSH2 0x13FA PUSH2 0x1FD8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x142A JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x1420 JUMPI PUSH2 0x141F PUSH2 0x1FD8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x144D JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x1443 JUMPI PUSH2 0x1442 PUSH2 0x1FD8 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x145C JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x14D1 DUP2 PUSH2 0x149C JUMP JUMPDEST DUP2 EQ PUSH2 0x14DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x14EE DUP2 PUSH2 0x14C8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x150A JUMPI PUSH2 0x1509 PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1518 DUP5 DUP3 DUP6 ADD PUSH2 0x14DF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1536 DUP2 PUSH2 0x1521 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1551 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x152D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1591 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1576 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x15B9 DUP3 PUSH2 0x1557 JUMP JUMPDEST PUSH2 0x15C3 DUP2 DUP6 PUSH2 0x1562 JUMP JUMPDEST SWAP4 POP PUSH2 0x15D3 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1573 JUMP JUMPDEST PUSH2 0x15DC DUP2 PUSH2 0x159D JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1601 DUP2 DUP5 PUSH2 0x15AE JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x161C DUP2 PUSH2 0x1609 JUMP JUMPDEST DUP2 EQ PUSH2 0x1627 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1639 DUP2 PUSH2 0x1613 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1655 JUMPI PUSH2 0x1654 PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1663 DUP5 DUP3 DUP6 ADD PUSH2 0x162A JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1697 DUP3 PUSH2 0x166C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x16A7 DUP2 PUSH2 0x168C JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x16C2 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x169E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x16D1 DUP2 PUSH2 0x168C JUMP JUMPDEST DUP2 EQ PUSH2 0x16DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x16EE DUP2 PUSH2 0x16C8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x170B JUMPI PUSH2 0x170A PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1719 DUP6 DUP3 DUP7 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x172A DUP6 DUP3 DUP7 ADD PUSH2 0x162A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x174D JUMPI PUSH2 0x174C PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x175B DUP7 DUP3 DUP8 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x176C DUP7 DUP3 DUP8 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x177D DUP7 DUP3 DUP8 ADD PUSH2 0x162A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x179D JUMPI PUSH2 0x179C PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x17AB DUP5 DUP3 DUP6 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x17BD DUP2 PUSH2 0x1609 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x17D8 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x17B4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x17E7 DUP2 PUSH2 0x1521 JUMP JUMPDEST DUP2 EQ PUSH2 0x17F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1804 DUP2 PUSH2 0x17DE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1821 JUMPI PUSH2 0x1820 PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x182F DUP6 DUP3 DUP7 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1840 DUP6 DUP3 DUP7 ADD PUSH2 0x17F5 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x188C DUP3 PUSH2 0x159D JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x18AB JUMPI PUSH2 0x18AA PUSH2 0x1854 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x18BE PUSH2 0x1488 JUMP JUMPDEST SWAP1 POP PUSH2 0x18CA DUP3 DUP3 PUSH2 0x1883 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x18EA JUMPI PUSH2 0x18E9 PUSH2 0x1854 JUMP JUMPDEST JUMPDEST PUSH2 0x18F3 DUP3 PUSH2 0x159D JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1922 PUSH2 0x191D DUP5 PUSH2 0x18CF JUMP JUMPDEST PUSH2 0x18B4 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x193E JUMPI PUSH2 0x193D PUSH2 0x184F JUMP JUMPDEST JUMPDEST PUSH2 0x1949 DUP5 DUP3 DUP6 PUSH2 0x1900 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1966 JUMPI PUSH2 0x1965 PUSH2 0x184A JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1976 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x190F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1999 JUMPI PUSH2 0x1998 PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x19A7 DUP8 DUP3 DUP9 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x19B8 DUP8 DUP3 DUP9 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x19C9 DUP8 DUP3 DUP9 ADD PUSH2 0x162A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x19EA JUMPI PUSH2 0x19E9 PUSH2 0x1497 JUMP JUMPDEST JUMPDEST PUSH2 0x19F6 DUP8 DUP3 DUP9 ADD PUSH2 0x1951 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1A19 JUMPI PUSH2 0x1A18 PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1A27 DUP6 DUP3 DUP7 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1A38 DUP6 DUP3 DUP7 ADD PUSH2 0x16DF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1A89 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1A9C JUMPI PUSH2 0x1A9B PUSH2 0x1A42 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1AFE PUSH1 0x21 DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B09 DUP3 PUSH2 0x1AA2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1B2D DUP2 PUSH2 0x1AF1 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B90 PUSH1 0x3D DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1B9B DUP3 PUSH2 0x1B34 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1BBF DUP2 PUSH2 0x1B83 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C22 PUSH1 0x2D DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1C2D DUP3 PUSH2 0x1BC6 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1C51 DUP2 PUSH2 0x1C15 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1C8E PUSH1 0x18 DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1C99 DUP3 PUSH2 0x1C58 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1CBD DUP2 PUSH2 0x1C81 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D20 PUSH1 0x29 DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1D2B DUP3 PUSH2 0x1CC4 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1D4F DUP2 PUSH2 0x1D13 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D6C DUP3 PUSH2 0x1557 JUMP JUMPDEST PUSH2 0x1D76 DUP2 DUP6 PUSH2 0x1D56 JUMP JUMPDEST SWAP4 POP PUSH2 0x1D86 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1573 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D9E DUP3 DUP6 PUSH2 0x1D61 JUMP JUMPDEST SWAP2 POP PUSH2 0x1DAA DUP3 DUP5 PUSH2 0x1D61 JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E12 PUSH1 0x25 DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1E1D DUP3 PUSH2 0x1DB6 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1E41 DUP2 PUSH2 0x1E05 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EA4 PUSH1 0x24 DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1EAF DUP3 PUSH2 0x1E48 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1ED3 DUP2 PUSH2 0x1E97 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F10 PUSH1 0x19 DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1F1B DUP3 PUSH2 0x1EDA JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1F3F DUP2 PUSH2 0x1F03 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1FA2 PUSH1 0x32 DUP4 PUSH2 0x1562 JUMP JUMPDEST SWAP2 POP PUSH2 0x1FAD DUP3 PUSH2 0x1F46 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1FD1 DUP2 PUSH2 0x1F95 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x202E DUP3 PUSH2 0x2007 JUMP JUMPDEST PUSH2 0x2038 DUP2 DUP6 PUSH2 0x2012 JUMP JUMPDEST SWAP4 POP PUSH2 0x2048 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1573 JUMP JUMPDEST PUSH2 0x2051 DUP2 PUSH2 0x159D JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2071 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x169E JUMP JUMPDEST PUSH2 0x207E PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x169E JUMP JUMPDEST PUSH2 0x208B PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x17B4 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x209D DUP2 DUP5 PUSH2 0x2023 JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x20B7 DUP2 PUSH2 0x14C8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x20D3 JUMPI PUSH2 0x20D2 PUSH2 0x1492 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x20E1 DUP5 DUP3 DUP6 ADD PUSH2 0x20A8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x28 0x4E 0xE2 0x5F 0xE5 0xF CREATE2 0xED PUSH11 0x8AFDCE160046C560382A7E PUSH14 0x15A931F6FB4AD3D1649E4464736F PUSH13 0x63430008130033000000000000 ","sourceMap":"628:16377:19:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1570:300;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2471:98;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3935:167;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3468:406;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4612:296;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4974:149;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2190:219;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1929:204;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2633:102;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4169:153;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5189:276;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2801;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4388:162;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1570:300;1672:4;1722:25;1707:40;;;:11;:40;;;;:104;;;;1778:33;1763:48;;;:11;:48;;;;1707:104;:156;;;;1827:36;1851:11;1827:23;:36::i;:::-;1707:156;1688:175;;1570:300;;;:::o;2471:98::-;2525:13;2557:5;2550:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2471:98;:::o;3935:167::-;4011:7;4030:23;4045:7;4030:14;:23::i;:::-;4071:15;:24;4087:7;4071:24;;;;;;;;;;;;;;;;;;;;;4064:31;;3935:167;;;:::o;3468:406::-;3548:13;3564:23;3579:7;3564:14;:23::i;:::-;3548:39;;3611:5;3605:11;;:2;:11;;;3597:57;;;;;;;;;;;;:::i;:::-;;;;;;;;;3702:5;3686:21;;:12;:10;:12::i;:::-;:21;;;:62;;;;3711:37;3728:5;3735:12;:10;:12::i;:::-;3711:16;:37::i;:::-;3686:62;3665:170;;;;;;;;;;;;:::i;:::-;;;;;;;;;3846:21;3855:2;3859:7;3846:8;:21::i;:::-;3538:336;3468:406;;:::o;4612:296::-;4771:41;4790:12;:10;:12::i;:::-;4804:7;4771:18;:41::i;:::-;4763:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;4873:28;4883:4;4889:2;4893:7;4873:9;:28::i;:::-;4612:296;;;:::o;4974:149::-;5077:39;5094:4;5100:2;5104:7;5077:39;;;;;;;;;;;;:16;:39::i;:::-;4974:149;;;:::o;2190:219::-;2262:7;2281:13;2297:17;2306:7;2297:8;:17::i;:::-;2281:33;;2349:1;2332:19;;:5;:19;;;2324:56;;;;;;;;;;;;:::i;:::-;;;;;;;;;2397:5;2390:12;;;2190:219;;;:::o;1929:204::-;2001:7;2045:1;2028:19;;:5;:19;;;2020:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;2110:9;:16;2120:5;2110:16;;;;;;;;;;;;;;;;2103:23;;1929:204;;;:::o;2633:102::-;2689:13;2721:7;2714:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2633:102;:::o;4169:153::-;4263:52;4282:12;:10;:12::i;:::-;4296:8;4306;4263:18;:52::i;:::-;4169:153;;:::o;5189:276::-;5319:41;5338:12;:10;:12::i;:::-;5352:7;5319:18;:41::i;:::-;5311:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;5420:38;5434:4;5440:2;5444:7;5453:4;5420:13;:38::i;:::-;5189:276;;;;:::o;2801:::-;2874:13;2899:23;2914:7;2899:14;:23::i;:::-;2933:21;2957:10;:8;:10::i;:::-;2933:34;;3008:1;2990:7;2984:21;:25;:86;;;;;;;;;;;;;;;;;3036:7;3045:18;:7;:16;:18::i;:::-;3019:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2984:86;2977:93;;;2801:276;;;:::o;4388:162::-;4485:4;4508:18;:25;4527:5;4508:25;;;;;;;;;;;;;;;:35;4534:8;4508:35;;;;;;;;;;;;;;;;;;;;;;;;;4501:42;;4388:162;;;;:::o;829:155:29:-;914:4;952:25;937:40;;;:11;:40;;;;930:47;;829:155;;;:::o;13240:133:19:-;13321:16;13329:7;13321;:16::i;:::-;13313:53;;;;;;;;;;;;:::i;:::-;;;;;;;;;13240:133;:::o;640:96:25:-;693:7;719:10;712:17;;640:96;:::o;12572:171:19:-;12673:2;12646:15;:24;12662:7;12646:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;12728:7;12724:2;12690:46;;12699:23;12714:7;12699:14;:23::i;:::-;12690:46;;;;;;;;;;;;12572:171;;:::o;7404:261::-;7497:4;7513:13;7529:23;7544:7;7529:14;:23::i;:::-;7513:39;;7581:5;7570:16;;:7;:16;;;:52;;;;7590:32;7607:5;7614:7;7590:16;:32::i;:::-;7570:52;:87;;;;7650:7;7626:31;;:20;7638:7;7626:11;:20::i;:::-;:31;;;7570:87;7562:96;;;7404:261;;;;:::o;11257:1203::-;11381:4;11354:31;;:23;11369:7;11354:14;:23::i;:::-;:31;;;11346:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;11459:1;11445:16;;:2;:16;;;11437:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;11513:42;11534:4;11540:2;11544:7;11553:1;11513:20;:42::i;:::-;11682:4;11655:31;;:23;11670:7;11655:14;:23::i;:::-;:31;;;11647:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;11797:15;:24;11813:7;11797:24;;;;;;;;;;;;11790:31;;;;;;;;;;;12284:1;12265:9;:15;12275:4;12265:15;;;;;;;;;;;;;;;;:20;;;;;;;;;;;12316:1;12299:9;:13;12309:2;12299:13;;;;;;;;;;;;;;;;:18;;;;;;;;;;;12356:2;12337:7;:16;12345:7;12337:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;12393:7;12389:2;12374:27;;12383:4;12374:27;;;;;;;;;;;;12412:41;12432:4;12438:2;12442:7;12451:1;12412:19;:41::i;:::-;11257:1203;;;:::o;6702:115::-;6768:7;6794;:16;6802:7;6794:16;;;;;;;;;;;;;;;;;;;;;6787:23;;6702:115;;;:::o;12879:277::-;12999:8;12990:17;;:5;:17;;;12982:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;13085:8;13047:18;:25;13066:5;13047:25;;;;;;;;;;;;;;;:35;13073:8;13047:35;;;;;;;;;;;;;;;;:46;;;;;;;;;;;;;;;;;;13130:8;13108:41;;13123:5;13108:41;;;13140:8;13108:41;;;;;;:::i;:::-;;;;;;;;12879:277;;;:::o;6326:267::-;6438:28;6448:4;6454:2;6458:7;6438:9;:28::i;:::-;6484:47;6507:4;6513:2;6517:7;6526:4;6484:22;:47::i;:::-;6476:110;;;;;;;;;;;;:::i;:::-;;;;;;;;;6326:267;;;;:::o;3319:92::-;3370:13;3395:9;;;;;;;;;;;;;;3319:92;:::o;447:696:28:-;503:13;552:14;589:1;569:17;580:5;569:10;:17::i;:::-;:21;552:38;;604:20;638:6;627:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;604:41;;659:11;785:6;781:2;777:15;769:6;765:28;758:35;;820:280;827:4;820:280;;;851:5;;;;;;;;990:8;985:2;978:5;974:14;969:30;964:3;956:44;1044:2;1035:11;;;;;;:::i;:::-;;;;;1077:1;1068:5;:10;820:280;1064:21;820:280;1120:6;1113:13;;;;;447:696;;;:::o;7120:126:19:-;7185:4;7237:1;7208:31;;:17;7217:7;7208:8;:17::i;:::-;:31;;;;7201:38;;7120:126;;;:::o;15472:116::-;;;;;:::o;16294:115::-;;;;;:::o;13925:831::-;14074:4;14094:15;:2;:13;;;:15::i;:::-;14090:660;;;14145:2;14129:36;;;14166:12;:10;:12::i;:::-;14180:4;14186:7;14195:4;14129:71;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;14125:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14384:1;14367:6;:13;:18;14363:321;;14409:60;;;;;;;;;;:::i;:::-;;;;;;;;14363:321;14636:6;14630:13;14621:6;14617:2;14613:15;14606:38;14125:573;14260:41;;;14250:51;;;:6;:51;;;;14243:58;;;;;14090:660;14735:4;14728:11;;13925:831;;;;;;;:::o;10139:916:32:-;10192:7;10211:14;10228:1;10211:18;;10276:8;10267:5;:17;10263:103;;10313:8;10304:17;;;;;;:::i;:::-;;;;;10349:2;10339:12;;;;10263:103;10392:8;10383:5;:17;10379:103;;10429:8;10420:17;;;;;;:::i;:::-;;;;;10465:2;10455:12;;;;10379:103;10508:8;10499:5;:17;10495:103;;10545:8;10536:17;;;;;;:::i;:::-;;;;;10581:2;10571:12;;;;10495:103;10624:7;10615:5;:16;10611:100;;10660:7;10651:16;;;;;;:::i;:::-;;;;;10695:1;10685:11;;;;10611:100;10737:7;10728:5;:16;10724:100;;10773:7;10764:16;;;;;;:::i;:::-;;;;;10808:1;10798:11;;;;10724:100;10850:7;10841:5;:16;10837:100;;10886:7;10877:16;;;;;;:::i;:::-;;;;;10921:1;10911:11;;;;10837:100;10963:7;10954:5;:16;10950:66;;11000:1;10990:11;;;;10950:66;11042:6;11035:13;;;10139:916;;;:::o;1412:320:24:-;1472:4;1724:1;1702:7;:19;;;:23;1695:30;;1412:320;;;:::o;7:75:36:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:99::-;1570:6;1604:5;1598:12;1588:22;;1518:99;;;:::o;1623:169::-;1707:11;1741:6;1736:3;1729:19;1781:4;1776:3;1772:14;1757:29;;1623:169;;;;:::o;1798:246::-;1879:1;1889:113;1903:6;1900:1;1897:13;1889:113;;;1988:1;1983:3;1979:11;1973:18;1969:1;1964:3;1960:11;1953:39;1925:2;1922:1;1918:10;1913:15;;1889:113;;;2036:1;2027:6;2022:3;2018:16;2011:27;1860:184;1798:246;;;:::o;2050:102::-;2091:6;2142:2;2138:7;2133:2;2126:5;2122:14;2118:28;2108:38;;2050:102;;;:::o;2158:377::-;2246:3;2274:39;2307:5;2274:39;:::i;:::-;2329:71;2393:6;2388:3;2329:71;:::i;:::-;2322:78;;2409:65;2467:6;2462:3;2455:4;2448:5;2444:16;2409:65;:::i;:::-;2499:29;2521:6;2499:29;:::i;:::-;2494:3;2490:39;2483:46;;2250:285;2158:377;;;;:::o;2541:313::-;2654:4;2692:2;2681:9;2677:18;2669:26;;2741:9;2735:4;2731:20;2727:1;2716:9;2712:17;2705:47;2769:78;2842:4;2833:6;2769:78;:::i;:::-;2761:86;;2541:313;;;;:::o;2860:77::-;2897:7;2926:5;2915:16;;2860:77;;;:::o;2943:122::-;3016:24;3034:5;3016:24;:::i;:::-;3009:5;3006:35;2996:63;;3055:1;3052;3045:12;2996:63;2943:122;:::o;3071:139::-;3117:5;3155:6;3142:20;3133:29;;3171:33;3198:5;3171:33;:::i;:::-;3071:139;;;;:::o;3216:329::-;3275:6;3324:2;3312:9;3303:7;3299:23;3295:32;3292:119;;;3330:79;;:::i;:::-;3292:119;3450:1;3475:53;3520:7;3511:6;3500:9;3496:22;3475:53;:::i;:::-;3465:63;;3421:117;3216:329;;;;:::o;3551:126::-;3588:7;3628:42;3621:5;3617:54;3606:65;;3551:126;;;:::o;3683:96::-;3720:7;3749:24;3767:5;3749:24;:::i;:::-;3738:35;;3683:96;;;:::o;3785:118::-;3872:24;3890:5;3872:24;:::i;:::-;3867:3;3860:37;3785:118;;:::o;3909:222::-;4002:4;4040:2;4029:9;4025:18;4017:26;;4053:71;4121:1;4110:9;4106:17;4097:6;4053:71;:::i;:::-;3909:222;;;;:::o;4137:122::-;4210:24;4228:5;4210:24;:::i;:::-;4203:5;4200:35;4190:63;;4249:1;4246;4239:12;4190:63;4137:122;:::o;4265:139::-;4311:5;4349:6;4336:20;4327:29;;4365:33;4392:5;4365:33;:::i;:::-;4265:139;;;;:::o;4410:474::-;4478:6;4486;4535:2;4523:9;4514:7;4510:23;4506:32;4503:119;;;4541:79;;:::i;:::-;4503:119;4661:1;4686:53;4731:7;4722:6;4711:9;4707:22;4686:53;:::i;:::-;4676:63;;4632:117;4788:2;4814:53;4859:7;4850:6;4839:9;4835:22;4814:53;:::i;:::-;4804:63;;4759:118;4410:474;;;;;:::o;4890:619::-;4967:6;4975;4983;5032:2;5020:9;5011:7;5007:23;5003:32;5000:119;;;5038:79;;:::i;:::-;5000:119;5158:1;5183:53;5228:7;5219:6;5208:9;5204:22;5183:53;:::i;:::-;5173:63;;5129:117;5285:2;5311:53;5356:7;5347:6;5336:9;5332:22;5311:53;:::i;:::-;5301:63;;5256:118;5413:2;5439:53;5484:7;5475:6;5464:9;5460:22;5439:53;:::i;:::-;5429:63;;5384:118;4890:619;;;;;:::o;5515:329::-;5574:6;5623:2;5611:9;5602:7;5598:23;5594:32;5591:119;;;5629:79;;:::i;:::-;5591:119;5749:1;5774:53;5819:7;5810:6;5799:9;5795:22;5774:53;:::i;:::-;5764:63;;5720:117;5515:329;;;;:::o;5850:118::-;5937:24;5955:5;5937:24;:::i;:::-;5932:3;5925:37;5850:118;;:::o;5974:222::-;6067:4;6105:2;6094:9;6090:18;6082:26;;6118:71;6186:1;6175:9;6171:17;6162:6;6118:71;:::i;:::-;5974:222;;;;:::o;6202:116::-;6272:21;6287:5;6272:21;:::i;:::-;6265:5;6262:32;6252:60;;6308:1;6305;6298:12;6252:60;6202:116;:::o;6324:133::-;6367:5;6405:6;6392:20;6383:29;;6421:30;6445:5;6421:30;:::i;:::-;6324:133;;;;:::o;6463:468::-;6528:6;6536;6585:2;6573:9;6564:7;6560:23;6556:32;6553:119;;;6591:79;;:::i;:::-;6553:119;6711:1;6736:53;6781:7;6772:6;6761:9;6757:22;6736:53;:::i;:::-;6726:63;;6682:117;6838:2;6864:50;6906:7;6897:6;6886:9;6882:22;6864:50;:::i;:::-;6854:60;;6809:115;6463:468;;;;;:::o;6937:117::-;7046:1;7043;7036:12;7060:117;7169:1;7166;7159:12;7183:180;7231:77;7228:1;7221:88;7328:4;7325:1;7318:15;7352:4;7349:1;7342:15;7369:281;7452:27;7474:4;7452:27;:::i;:::-;7444:6;7440:40;7582:6;7570:10;7567:22;7546:18;7534:10;7531:34;7528:62;7525:88;;;7593:18;;:::i;:::-;7525:88;7633:10;7629:2;7622:22;7412:238;7369:281;;:::o;7656:129::-;7690:6;7717:20;;:::i;:::-;7707:30;;7746:33;7774:4;7766:6;7746:33;:::i;:::-;7656:129;;;:::o;7791:307::-;7852:4;7942:18;7934:6;7931:30;7928:56;;;7964:18;;:::i;:::-;7928:56;8002:29;8024:6;8002:29;:::i;:::-;7994:37;;8086:4;8080;8076:15;8068:23;;7791:307;;;:::o;8104:146::-;8201:6;8196:3;8191;8178:30;8242:1;8233:6;8228:3;8224:16;8217:27;8104:146;;;:::o;8256:423::-;8333:5;8358:65;8374:48;8415:6;8374:48;:::i;:::-;8358:65;:::i;:::-;8349:74;;8446:6;8439:5;8432:21;8484:4;8477:5;8473:16;8522:3;8513:6;8508:3;8504:16;8501:25;8498:112;;;8529:79;;:::i;:::-;8498:112;8619:54;8666:6;8661:3;8656;8619:54;:::i;:::-;8339:340;8256:423;;;;;:::o;8698:338::-;8753:5;8802:3;8795:4;8787:6;8783:17;8779:27;8769:122;;8810:79;;:::i;:::-;8769:122;8927:6;8914:20;8952:78;9026:3;9018:6;9011:4;9003:6;8999:17;8952:78;:::i;:::-;8943:87;;8759:277;8698:338;;;;:::o;9042:943::-;9137:6;9145;9153;9161;9210:3;9198:9;9189:7;9185:23;9181:33;9178:120;;;9217:79;;:::i;:::-;9178:120;9337:1;9362:53;9407:7;9398:6;9387:9;9383:22;9362:53;:::i;:::-;9352:63;;9308:117;9464:2;9490:53;9535:7;9526:6;9515:9;9511:22;9490:53;:::i;:::-;9480:63;;9435:118;9592:2;9618:53;9663:7;9654:6;9643:9;9639:22;9618:53;:::i;:::-;9608:63;;9563:118;9748:2;9737:9;9733:18;9720:32;9779:18;9771:6;9768:30;9765:117;;;9801:79;;:::i;:::-;9765:117;9906:62;9960:7;9951:6;9940:9;9936:22;9906:62;:::i;:::-;9896:72;;9691:287;9042:943;;;;;;;:::o;9991:474::-;10059:6;10067;10116:2;10104:9;10095:7;10091:23;10087:32;10084:119;;;10122:79;;:::i;:::-;10084:119;10242:1;10267:53;10312:7;10303:6;10292:9;10288:22;10267:53;:::i;:::-;10257:63;;10213:117;10369:2;10395:53;10440:7;10431:6;10420:9;10416:22;10395:53;:::i;:::-;10385:63;;10340:118;9991:474;;;;;:::o;10471:180::-;10519:77;10516:1;10509:88;10616:4;10613:1;10606:15;10640:4;10637:1;10630:15;10657:320;10701:6;10738:1;10732:4;10728:12;10718:22;;10785:1;10779:4;10775:12;10806:18;10796:81;;10862:4;10854:6;10850:17;10840:27;;10796:81;10924:2;10916:6;10913:14;10893:18;10890:38;10887:84;;10943:18;;:::i;:::-;10887:84;10708:269;10657:320;;;:::o;10983:220::-;11123:34;11119:1;11111:6;11107:14;11100:58;11192:3;11187:2;11179:6;11175:15;11168:28;10983:220;:::o;11209:366::-;11351:3;11372:67;11436:2;11431:3;11372:67;:::i;:::-;11365:74;;11448:93;11537:3;11448:93;:::i;:::-;11566:2;11561:3;11557:12;11550:19;;11209:366;;;:::o;11581:419::-;11747:4;11785:2;11774:9;11770:18;11762:26;;11834:9;11828:4;11824:20;11820:1;11809:9;11805:17;11798:47;11862:131;11988:4;11862:131;:::i;:::-;11854:139;;11581:419;;;:::o;12006:248::-;12146:34;12142:1;12134:6;12130:14;12123:58;12215:31;12210:2;12202:6;12198:15;12191:56;12006:248;:::o;12260:366::-;12402:3;12423:67;12487:2;12482:3;12423:67;:::i;:::-;12416:74;;12499:93;12588:3;12499:93;:::i;:::-;12617:2;12612:3;12608:12;12601:19;;12260:366;;;:::o;12632:419::-;12798:4;12836:2;12825:9;12821:18;12813:26;;12885:9;12879:4;12875:20;12871:1;12860:9;12856:17;12849:47;12913:131;13039:4;12913:131;:::i;:::-;12905:139;;12632:419;;;:::o;13057:232::-;13197:34;13193:1;13185:6;13181:14;13174:58;13266:15;13261:2;13253:6;13249:15;13242:40;13057:232;:::o;13295:366::-;13437:3;13458:67;13522:2;13517:3;13458:67;:::i;:::-;13451:74;;13534:93;13623:3;13534:93;:::i;:::-;13652:2;13647:3;13643:12;13636:19;;13295:366;;;:::o;13667:419::-;13833:4;13871:2;13860:9;13856:18;13848:26;;13920:9;13914:4;13910:20;13906:1;13895:9;13891:17;13884:47;13948:131;14074:4;13948:131;:::i;:::-;13940:139;;13667:419;;;:::o;14092:174::-;14232:26;14228:1;14220:6;14216:14;14209:50;14092:174;:::o;14272:366::-;14414:3;14435:67;14499:2;14494:3;14435:67;:::i;:::-;14428:74;;14511:93;14600:3;14511:93;:::i;:::-;14629:2;14624:3;14620:12;14613:19;;14272:366;;;:::o;14644:419::-;14810:4;14848:2;14837:9;14833:18;14825:26;;14897:9;14891:4;14887:20;14883:1;14872:9;14868:17;14861:47;14925:131;15051:4;14925:131;:::i;:::-;14917:139;;14644:419;;;:::o;15069:228::-;15209:34;15205:1;15197:6;15193:14;15186:58;15278:11;15273:2;15265:6;15261:15;15254:36;15069:228;:::o;15303:366::-;15445:3;15466:67;15530:2;15525:3;15466:67;:::i;:::-;15459:74;;15542:93;15631:3;15542:93;:::i;:::-;15660:2;15655:3;15651:12;15644:19;;15303:366;;;:::o;15675:419::-;15841:4;15879:2;15868:9;15864:18;15856:26;;15928:9;15922:4;15918:20;15914:1;15903:9;15899:17;15892:47;15956:131;16082:4;15956:131;:::i;:::-;15948:139;;15675:419;;;:::o;16100:148::-;16202:11;16239:3;16224:18;;16100:148;;;;:::o;16254:390::-;16360:3;16388:39;16421:5;16388:39;:::i;:::-;16443:89;16525:6;16520:3;16443:89;:::i;:::-;16436:96;;16541:65;16599:6;16594:3;16587:4;16580:5;16576:16;16541:65;:::i;:::-;16631:6;16626:3;16622:16;16615:23;;16364:280;16254:390;;;;:::o;16650:435::-;16830:3;16852:95;16943:3;16934:6;16852:95;:::i;:::-;16845:102;;16964:95;17055:3;17046:6;16964:95;:::i;:::-;16957:102;;17076:3;17069:10;;16650:435;;;;;:::o;17091:224::-;17231:34;17227:1;17219:6;17215:14;17208:58;17300:7;17295:2;17287:6;17283:15;17276:32;17091:224;:::o;17321:366::-;17463:3;17484:67;17548:2;17543:3;17484:67;:::i;:::-;17477:74;;17560:93;17649:3;17560:93;:::i;:::-;17678:2;17673:3;17669:12;17662:19;;17321:366;;;:::o;17693:419::-;17859:4;17897:2;17886:9;17882:18;17874:26;;17946:9;17940:4;17936:20;17932:1;17921:9;17917:17;17910:47;17974:131;18100:4;17974:131;:::i;:::-;17966:139;;17693:419;;;:::o;18118:223::-;18258:34;18254:1;18246:6;18242:14;18235:58;18327:6;18322:2;18314:6;18310:15;18303:31;18118:223;:::o;18347:366::-;18489:3;18510:67;18574:2;18569:3;18510:67;:::i;:::-;18503:74;;18586:93;18675:3;18586:93;:::i;:::-;18704:2;18699:3;18695:12;18688:19;;18347:366;;;:::o;18719:419::-;18885:4;18923:2;18912:9;18908:18;18900:26;;18972:9;18966:4;18962:20;18958:1;18947:9;18943:17;18936:47;19000:131;19126:4;19000:131;:::i;:::-;18992:139;;18719:419;;;:::o;19144:175::-;19284:27;19280:1;19272:6;19268:14;19261:51;19144:175;:::o;19325:366::-;19467:3;19488:67;19552:2;19547:3;19488:67;:::i;:::-;19481:74;;19564:93;19653:3;19564:93;:::i;:::-;19682:2;19677:3;19673:12;19666:19;;19325:366;;;:::o;19697:419::-;19863:4;19901:2;19890:9;19886:18;19878:26;;19950:9;19944:4;19940:20;19936:1;19925:9;19921:17;19914:47;19978:131;20104:4;19978:131;:::i;:::-;19970:139;;19697:419;;;:::o;20122:237::-;20262:34;20258:1;20250:6;20246:14;20239:58;20331:20;20326:2;20318:6;20314:15;20307:45;20122:237;:::o;20365:366::-;20507:3;20528:67;20592:2;20587:3;20528:67;:::i;:::-;20521:74;;20604:93;20693:3;20604:93;:::i;:::-;20722:2;20717:3;20713:12;20706:19;;20365:366;;;:::o;20737:419::-;20903:4;20941:2;20930:9;20926:18;20918:26;;20990:9;20984:4;20980:20;20976:1;20965:9;20961:17;20954:47;21018:131;21144:4;21018:131;:::i;:::-;21010:139;;20737:419;;;:::o;21162:180::-;21210:77;21207:1;21200:88;21307:4;21304:1;21297:15;21331:4;21328:1;21321:15;21348:98;21399:6;21433:5;21427:12;21417:22;;21348:98;;;:::o;21452:168::-;21535:11;21569:6;21564:3;21557:19;21609:4;21604:3;21600:14;21585:29;;21452:168;;;;:::o;21626:373::-;21712:3;21740:38;21772:5;21740:38;:::i;:::-;21794:70;21857:6;21852:3;21794:70;:::i;:::-;21787:77;;21873:65;21931:6;21926:3;21919:4;21912:5;21908:16;21873:65;:::i;:::-;21963:29;21985:6;21963:29;:::i;:::-;21958:3;21954:39;21947:46;;21716:283;21626:373;;;;:::o;22005:640::-;22200:4;22238:3;22227:9;22223:19;22215:27;;22252:71;22320:1;22309:9;22305:17;22296:6;22252:71;:::i;:::-;22333:72;22401:2;22390:9;22386:18;22377:6;22333:72;:::i;:::-;22415;22483:2;22472:9;22468:18;22459:6;22415:72;:::i;:::-;22534:9;22528:4;22524:20;22519:2;22508:9;22504:18;22497:48;22562:76;22633:4;22624:6;22562:76;:::i;:::-;22554:84;;22005:640;;;;;;;:::o;22651:141::-;22707:5;22738:6;22732:13;22723:22;;22754:32;22780:5;22754:32;:::i;:::-;22651:141;;;;:::o;22798:349::-;22867:6;22916:2;22904:9;22895:7;22891:23;22887:32;22884:119;;;22922:79;;:::i;:::-;22884:119;23042:1;23067:63;23122:7;23113:6;23102:9;23098:22;23067:63;:::i;:::-;23057:73;;23013:127;22798:349;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"1696000","executionCost":"infinite","totalCost":"infinite"},"external":{"approve(address,uint256)":"infinite","balanceOf(address)":"2921","getApproved(uint256)":"5277","isApprovedForAll(address,address)":"infinite","name()":"infinite","ownerOf(uint256)":"3022","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"infinite","supportsInterface(bytes4)":"774","symbol()":"infinite","tokenURI(uint256)":"3459","transferFrom(address,address,uint256)":"infinite"},"internal":{"__unsafe_increaseBalance(address,uint256)":"infinite","_afterTokenTransfer(address,address,uint256,uint256)":"17","_approve(address,uint256)":"infinite","_baseURI()":"infinite","_beforeTokenTransfer(address,address,uint256,uint256)":"17","_burn(uint256)":"infinite","_checkOnERC721Received(address,address,uint256,bytes memory)":"infinite","_exists(uint256)":"2312","_isApprovedOrOwner(address,uint256)":"infinite","_mint(address,uint256)":"infinite","_ownerOf(uint256)":"2248","_requireMinted(uint256)":"infinite","_safeMint(address,uint256)":"infinite","_safeMint(address,uint256,bytes memory)":"infinite","_safeTransfer(address,address,uint256,bytes memory)":"infinite","_setApprovalForAll(address,address,bool)":"infinite","_transfer(address,address,uint256)":"infinite"}},"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the contract by setting a `name` and a `symbol` to the token collection.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":\"ERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1116,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":1118,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":1122,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":1126,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":1130,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":1136,"contract":"@openzeppelin/contracts/token/ERC721/ERC721.sol:ERC721","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721.sol":{"IERC721":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Required interface of an ERC721 compliant contract.","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol":{"IERC721Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.","kind":"dev","methods":{"onERC721Received(address,address,uint256,bytes)":{"details":"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."}},"title":"ERC721 token receiver interface","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC721Received(address,address,uint256,bytes)":"150b7a02"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol":{"ERC721URIStorage":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_fromTokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_toTokenId","type":"uint256"}],"name":"BatchMetadataUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"MetadataUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"ERC721 token with storage based token URI management.","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"BatchMetadataUpdate(uint256,uint256)":{"details":"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs."},"MetadataUpdate(uint256)":{"details":"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}"},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"ERC721 token with storage based token URI management.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"BatchMetadataUpdate(uint256,uint256)\":{\"details\":\"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":\"ERC721URIStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0x2a9dadb806be80dd451821f1f1190eb9aa6f6edae85b185db29d60767cc0c5f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../interfaces/IERC4906.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == bytes4(0x49064906) || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n\\n        emit MetadataUpdate(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7942989e3525aec1672469e4c65fb33fbd19c785c9cadbcb70fcbe1fe8bfdd37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1116,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":1118,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":1122,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":1126,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":1130,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":1136,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":2167,"contract":"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol:ERC721URIStorage","label":"_tokenURIs","offset":0,"slot":"6","type":"t_mapping(t_uint256,t_string_storage)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_string_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol":{"IERC721Metadata":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"operator","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"owner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721","events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the number of tokens in ``owner``'s account."},"getApproved(uint256)":{"details":"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."},"isApprovedForAll(address,address)":{"details":"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"},"name()":{"details":"Returns the token collection name."},"ownerOf(uint256)":{"details":"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."},"safeTransferFrom(address,address,uint256)":{"details":"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event."},"setApprovalForAll(address,bool)":{"details":"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event."},"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."},"symbol()":{"details":"Returns the token collection symbol."},"tokenURI(uint256)":{"details":"Returns the Uniform Resource Identifier (URI) for `tokenId` token."},"transferFrom(address,address,uint256)":{"details":"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."}},"title":"ERC-721 Non-Fungible Token Standard, optional metadata extension","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the caller. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122056fd6118db9329d909b3aa1e6b5ca8e7e304676ea0f490b31d081f1b67ba092364736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMP REVERT PUSH2 0x18DB SWAP4 0x29 0xD9 MULMOD 0xB3 0xAA 0x1E PUSH12 0x5CA8E7E304676EA0F490B31D ADDMOD 0x1F SHL PUSH8 0xBA092364736F6C63 NUMBER STOP ADDMOD SGT STOP CALLER ","sourceMap":"194:9169:24:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122056fd6118db9329d909b3aa1e6b5ca8e7e304676ea0f490b31d081f1b67ba092364736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMP REVERT PUSH2 0x18DB SWAP4 0x29 0xD9 MULMOD 0xB3 0xAA 0x1E PUSH12 0x5CA8E7E304676EA0F490B31D ADDMOD 0x1F SHL PUSH8 0xBA092364736F6C63 NUMBER STOP ADDMOD SGT STOP CALLER ","sourceMap":"194:9169:24:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Counters.sol":{"Counters":{"abi":[],"devdoc":{"author":"Matt Condon (@shrugs)","details":"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`","kind":"dev","methods":{},"title":"Counters","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200f0a46b86c3d8318b07c787b7aa03f5f36ca84868349c9c954e57d0afcc7e3ef64736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF EXP CHAINID 0xB8 PUSH13 0x3D8318B07C787B7AA03F5F36CA DUP5 DUP7 DUP4 0x49 0xC9 0xC9 SLOAD 0xE5 PUSH30 0xAFCC7E3EF64736F6C634300081300330000000000000000000000000000 ","sourceMap":"424:971:26:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200f0a46b86c3d8318b07c787b7aa03f5f36ca84868349c9c954e57d0afcc7e3ef64736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF EXP CHAINID 0xB8 PUSH13 0x3D8318B07C787B7AA03F5F36CA DUP5 DUP7 DUP4 0x49 0xC9 0xC9 SLOAD 0xE5 PUSH30 0xAFCC7E3EF64736F6C634300081300330000000000000000000000000000 ","sourceMap":"424:971:26:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"current(struct Counters.Counter storage pointer)":"infinite","decrement(struct Counters.Counter storage pointer)":"infinite","increment(struct Counters.Counter storage pointer)":"infinite","reset(struct Counters.Counter storage pointer)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Matt Condon (@shrugs)\",\"details\":\"Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number of elements in a mapping, issuing ERC721 ids, or counting request ids. Include with `using Counters for Counters.Counter;`\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Counters\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Counters.sol\":\"Counters\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/StorageSlot.sol":{"StorageSlot":{"abi":[],"devdoc":{"details":"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122078b3a91d2193505164bf458f7247a2a2117a2a7dea8c1416fba923ee2ed823b764736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH25 0xB3A91D2193505164BF458F7247A2A2117A2A7DEA8C1416FBA9 0x23 0xEE 0x2E 0xD8 0x23 0xB7 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"1420:2685:27:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122078b3a91d2193505164bf458f7247a2a2117a2a7dea8c1416fba923ee2ed823b764736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH25 0xB3A91D2193505164BF458F7247A2A2117A2A7DEA8C1416FBA9 0x23 0xEE 0x2E 0xD8 0x23 0xB7 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"1420:2685:27:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"getAddressSlot(bytes32)":"infinite","getBooleanSlot(bytes32)":"infinite","getBytes32Slot(bytes32)":"infinite","getBytesSlot(bytes storage pointer)":"infinite","getBytesSlot(bytes32)":"infinite","getStringSlot(bytes32)":"infinite","getStringSlot(string storage pointer)":"infinite","getUint256Slot(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202027d6953eea3d2b5ddab5aa096da019e59fa1df9c39b38efa67bbb22208254864736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 KECCAK256 0x27 0xD6 SWAP6 RETURNDATACOPY 0xEA RETURNDATASIZE 0x2B 0x5D 0xDA 0xB5 0xAA MULMOD PUSH14 0xA019E59FA1DF9C39B38EFA67BBB2 0x22 ADDMOD 0x25 BASEFEE PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"220:2559:28:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202027d6953eea3d2b5ddab5aa096da019e59fa1df9c39b38efa67bbb22208254864736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 KECCAK256 0x27 0xD6 SWAP6 RETURNDATACOPY 0xEA RETURNDATASIZE 0x2B 0x5D 0xDA 0xB5 0xAA MULMOD PUSH14 0xA019E59FA1DF9C39B38EFA67BBB2 0x22 ADDMOD 0x25 BASEFEE PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"220:2559:28:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(int256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/ERC165.sol":{"ERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ``` Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol":{"ERC165Checker":{"abi":[],"devdoc":{"details":"Library used to query support of an interface declared via {IERC165}. Note that these functions return the actual result of the query: they do not `revert` if an interface is not supported. It is up to the caller to decide what to do in these cases.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203fd488093ddb50e530b46ac35235de5da141f9ca79d59de1ecff54c97f7ef70e64736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODEHASH 0xD4 DUP9 MULMOD RETURNDATASIZE 0xDB POP 0xE5 ADDRESS 0xB4 PUSH11 0xC35235DE5DA141F9CA79D5 SWAP14 0xE1 0xEC SELFDESTRUCT SLOAD 0xC9 PUSH32 0x7EF70E64736F6C63430008130033000000000000000000000000000000000000 ","sourceMap":"449:4621:30:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203fd488093ddb50e530b46ac35235de5da141f9ca79d59de1ecff54c97f7ef70e64736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXTCODEHASH 0xD4 DUP9 MULMOD RETURNDATASIZE 0xDB POP 0xE5 ADDRESS 0xB4 PUSH11 0xC35235DE5DA141F9CA79D5 SWAP14 0xE1 0xEC SELFDESTRUCT SLOAD 0xC9 PUSH32 0x7EF70E64736F6C63430008130033000000000000000000000000000000000000 ","sourceMap":"449:4621:30:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"getSupportedInterfaces(address,bytes4[] memory)":"infinite","supportsAllInterfaces(address,bytes4[] memory)":"infinite","supportsERC165(address)":"infinite","supportsERC165InterfaceUnchecked(address,bytes4)":"infinite","supportsInterface(address,bytes4)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library used to query support of an interface declared via {IERC165}. Note that these functions return the actual result of the query: they do not `revert` if an interface is not supported. It is up to the caller to decide what to do in these cases.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":\"ERC165Checker\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x5a08ad61f4e82b8a3323562661a86fb10b10190848073fdc13d4ac43710ffba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/introspection/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205adbd6dcf7c22f8a798ff30cefff39bd875eddb76458fae2eaac814e6b08345364736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GAS 0xDB 0xD6 0xDC 0xF7 0xC2 0x2F DUP11 PUSH26 0x8FF30CEFFF39BD875EDDB76458FAE2EAAC814E6B08345364736F PUSH13 0x63430008130033000000000000 ","sourceMap":"202:12582:32:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205adbd6dcf7c22f8a798ff30cefff39bd875eddb76458fae2eaac814e6b08345364736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 GAS 0xDB 0xD6 0xDC 0xF7 0xC2 0x2F DUP11 PUSH26 0x8FF30CEFFF39BD875EDDB76458FAE2EAAC814E6B08345364736F PUSH13 0x63430008130033000000000000 ","sourceMap":"202:12582:32:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"SignedMath":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a3b02db46d5c417aa38134d274af040c0f81d5a339dce336c3e41aade1e5c5a664736f6c63430008130033","opcodes":"PUSH1 0x56 PUSH1 0x50 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x43 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG3 0xB0 0x2D 0xB4 PUSH14 0x5C417AA38134D274AF040C0F81D5 LOG3 CODECOPY 0xDC 0xE3 CALLDATASIZE 0xC3 0xE4 BYTE 0xAD 0xE1 0xE5 0xC5 0xA6 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"215:1047:33:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a3b02db46d5c417aa38134d274af040c0f81d5a339dce336c3e41aade1e5c5a664736f6c63430008130033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG3 0xB0 0x2D 0xB4 PUSH14 0x5C417AA38134D274AF040C0F81D5 LOG3 CODECOPY 0xDC 0xE3 CALLDATASIZE 0xC3 0xE4 BYTE 0xAD 0xE1 0xE5 0xC5 0xA6 PUSH5 0x736F6C6343 STOP ADDMOD SGT STOP CALLER ","sourceMap":"215:1047:33:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"97","totalCost":"17297"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/LendNFTPlugin.sol":{"FactoryNFT":{"abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_fromTokenId","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"_toTokenId","type":"uint256"}],"name":"BatchMetadataUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"_tokenId","type":"uint256"}],"name":"MetadataUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"createToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"Approval(address,address,uint256)":{"details":"Emitted when `owner` enables `approved` to manage the `tokenId` token."},"ApprovalForAll(address,address,bool)":{"details":"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."},"BatchMetadataUpdate(uint256,uint256)":{"details":"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs."},"MetadataUpdate(uint256)":{"details":"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT."},"Transfer(address,address,uint256)":{"details":"Emitted when `tokenId` token is transferred from `from` to `to`."}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"See {IERC721-approve}."},"balanceOf(address)":{"details":"See {IERC721-balanceOf}."},"getApproved(uint256)":{"details":"See {IERC721-getApproved}."},"isApprovedForAll(address,address)":{"details":"See {IERC721-isApprovedForAll}."},"name()":{"details":"See {IERC721Metadata-name}."},"ownerOf(uint256)":{"details":"See {IERC721-ownerOf}."},"safeTransferFrom(address,address,uint256)":{"details":"See {IERC721-safeTransferFrom}."},"safeTransferFrom(address,address,uint256,bytes)":{"details":"See {IERC721-safeTransferFrom}."},"setApprovalForAll(address,bool)":{"details":"See {IERC721-setApprovalForAll}."},"supportsInterface(bytes4)":{"details":"See {IERC165-supportsInterface}"},"symbol()":{"details":"See {IERC721Metadata-symbol}."},"tokenURI(uint256)":{"details":"See {IERC721Metadata-tokenURI}."},"transferFrom(address,address,uint256)":{"details":"See {IERC721-transferFrom}."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_1153":{"entryPoint":null,"id":1153,"parameterSlots":2,"returnSlots":0},"@_4325":{"entryPoint":null,"id":4325,"parameterSlots":0,"returnSlots":0},"array_dataslot_t_string_storage":{"entryPoint":328,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":170,"id":null,"parameterSlots":1,"returnSlots":1},"clean_up_bytearray_end_slots_t_string_storage":{"entryPoint":649,"id":null,"parameterSlots":3,"returnSlots":0},"cleanup_t_uint256":{"entryPoint":464,"id":null,"parameterSlots":1,"returnSlots":1},"clear_storage_range_t_bytes1":{"entryPoint":610,"id":null,"parameterSlots":2,"returnSlots":0},"convert_t_uint256_to_t_uint256":{"entryPoint":484,"id":null,"parameterSlots":1,"returnSlots":1},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":804,"id":null,"parameterSlots":2,"returnSlots":0},"divide_by_32_ceil":{"entryPoint":349,"id":null,"parameterSlots":1,"returnSlots":1},"extract_byte_array_length":{"entryPoint":275,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":774,"id":null,"parameterSlots":2,"returnSlots":1},"identity":{"entryPoint":474,"id":null,"parameterSlots":1,"returnSlots":1},"mask_bytes_dynamic":{"entryPoint":742,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x22":{"entryPoint":228,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":181,"id":null,"parameterSlots":0,"returnSlots":0},"prepare_store_t_uint256":{"entryPoint":524,"id":null,"parameterSlots":1,"returnSlots":1},"shift_left_dynamic":{"entryPoint":365,"id":null,"parameterSlots":2,"returnSlots":1},"shift_right_unsigned_dynamic":{"entryPoint":729,"id":null,"parameterSlots":2,"returnSlots":1},"storage_set_to_zero_t_uint256":{"entryPoint":582,"id":null,"parameterSlots":2,"returnSlots":0},"update_byte_slice_dynamic32":{"entryPoint":378,"id":null,"parameterSlots":3,"returnSlots":1},"update_storage_value_t_uint256_to_t_uint256":{"entryPoint":534,"id":null,"parameterSlots":3,"returnSlots":0},"zero_value_for_split_t_uint256":{"entryPoint":577,"id":null,"parameterSlots":0,"returnSlots":1}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:5231:36","statements":[{"body":{"nodeType":"YulBlock","src":"66:40:36","statements":[{"nodeType":"YulAssignment","src":"77:22:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"93:5:36"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"87:5:36"},"nodeType":"YulFunctionCall","src":"87:12:36"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"77:6:36"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"49:5:36","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"59:6:36","type":""}],"src":"7:99:36"},{"body":{"nodeType":"YulBlock","src":"140:152:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"157:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"160:77:36","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"150:6:36"},"nodeType":"YulFunctionCall","src":"150:88:36"},"nodeType":"YulExpressionStatement","src":"150:88:36"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"254:1:36","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"257:4:36","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"247:6:36"},"nodeType":"YulFunctionCall","src":"247:15:36"},"nodeType":"YulExpressionStatement","src":"247:15:36"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"278:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"281:4:36","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"271:6:36"},"nodeType":"YulFunctionCall","src":"271:15:36"},"nodeType":"YulExpressionStatement","src":"271:15:36"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"112:180:36"},{"body":{"nodeType":"YulBlock","src":"326:152:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"343:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"346:77:36","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"336:6:36"},"nodeType":"YulFunctionCall","src":"336:88:36"},"nodeType":"YulExpressionStatement","src":"336:88:36"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"440:1:36","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"443:4:36","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"433:6:36"},"nodeType":"YulFunctionCall","src":"433:15:36"},"nodeType":"YulExpressionStatement","src":"433:15:36"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"464:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"467:4:36","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"457:6:36"},"nodeType":"YulFunctionCall","src":"457:15:36"},"nodeType":"YulExpressionStatement","src":"457:15:36"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"298:180:36"},{"body":{"nodeType":"YulBlock","src":"535:269:36","statements":[{"nodeType":"YulAssignment","src":"545:22:36","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"559:4:36"},{"kind":"number","nodeType":"YulLiteral","src":"565:1:36","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"555:3:36"},"nodeType":"YulFunctionCall","src":"555:12:36"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"545:6:36"}]},{"nodeType":"YulVariableDeclaration","src":"576:38:36","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"606:4:36"},{"kind":"number","nodeType":"YulLiteral","src":"612:1:36","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"602:3:36"},"nodeType":"YulFunctionCall","src":"602:12:36"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"580:18:36","type":""}]},{"body":{"nodeType":"YulBlock","src":"653:51:36","statements":[{"nodeType":"YulAssignment","src":"667:27:36","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"681:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"689:4:36","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"677:3:36"},"nodeType":"YulFunctionCall","src":"677:17:36"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"667:6:36"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"633:18:36"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"626:6:36"},"nodeType":"YulFunctionCall","src":"626:26:36"},"nodeType":"YulIf","src":"623:81:36"},{"body":{"nodeType":"YulBlock","src":"756:42:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"770:16:36"},"nodeType":"YulFunctionCall","src":"770:18:36"},"nodeType":"YulExpressionStatement","src":"770:18:36"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"720:18:36"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"743:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"751:2:36","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"740:2:36"},"nodeType":"YulFunctionCall","src":"740:14:36"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"717:2:36"},"nodeType":"YulFunctionCall","src":"717:38:36"},"nodeType":"YulIf","src":"714:84:36"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"519:4:36","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"528:6:36","type":""}],"src":"484:320:36"},{"body":{"nodeType":"YulBlock","src":"864:87:36","statements":[{"nodeType":"YulAssignment","src":"874:11:36","value":{"name":"ptr","nodeType":"YulIdentifier","src":"882:3:36"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"874:4:36"}]},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"902:1:36","type":"","value":"0"},{"name":"ptr","nodeType":"YulIdentifier","src":"905:3:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"895:6:36"},"nodeType":"YulFunctionCall","src":"895:14:36"},"nodeType":"YulExpressionStatement","src":"895:14:36"},{"nodeType":"YulAssignment","src":"918:26:36","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"936:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"939:4:36","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nodeType":"YulIdentifier","src":"926:9:36"},"nodeType":"YulFunctionCall","src":"926:18:36"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"918:4:36"}]}]},"name":"array_dataslot_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"851:3:36","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"859:4:36","type":""}],"src":"810:141:36"},{"body":{"nodeType":"YulBlock","src":"1001:49:36","statements":[{"nodeType":"YulAssignment","src":"1011:33:36","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1029:5:36"},{"kind":"number","nodeType":"YulLiteral","src":"1036:2:36","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1025:3:36"},"nodeType":"YulFunctionCall","src":"1025:14:36"},{"kind":"number","nodeType":"YulLiteral","src":"1041:2:36","type":"","value":"32"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"1021:3:36"},"nodeType":"YulFunctionCall","src":"1021:23:36"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"1011:6:36"}]}]},"name":"divide_by_32_ceil","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"984:5:36","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"994:6:36","type":""}],"src":"957:93:36"},{"body":{"nodeType":"YulBlock","src":"1109:54:36","statements":[{"nodeType":"YulAssignment","src":"1119:37:36","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"1144:4:36"},{"name":"value","nodeType":"YulIdentifier","src":"1150:5:36"}],"functionName":{"name":"shl","nodeType":"YulIdentifier","src":"1140:3:36"},"nodeType":"YulFunctionCall","src":"1140:16:36"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"1119:8:36"}]}]},"name":"shift_left_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"1084:4:36","type":""},{"name":"value","nodeType":"YulTypedName","src":"1090:5:36","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"1100:8:36","type":""}],"src":"1056:107:36"},{"body":{"nodeType":"YulBlock","src":"1245:317:36","statements":[{"nodeType":"YulVariableDeclaration","src":"1255:35:36","value":{"arguments":[{"name":"shiftBytes","nodeType":"YulIdentifier","src":"1276:10:36"},{"kind":"number","nodeType":"YulLiteral","src":"1288:1:36","type":"","value":"8"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"1272:3:36"},"nodeType":"YulFunctionCall","src":"1272:18:36"},"variables":[{"name":"shiftBits","nodeType":"YulTypedName","src":"1259:9:36","type":""}]},{"nodeType":"YulVariableDeclaration","src":"1299:109:36","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"1330:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"1341:66:36","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"1311:18:36"},"nodeType":"YulFunctionCall","src":"1311:97:36"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"1303:4:36","type":""}]},{"nodeType":"YulAssignment","src":"1417:51:36","value":{"arguments":[{"name":"shiftBits","nodeType":"YulIdentifier","src":"1448:9:36"},{"name":"toInsert","nodeType":"YulIdentifier","src":"1459:8:36"}],"functionName":{"name":"shift_left_dynamic","nodeType":"YulIdentifier","src":"1429:18:36"},"nodeType":"YulFunctionCall","src":"1429:39:36"},"variableNames":[{"name":"toInsert","nodeType":"YulIdentifier","src":"1417:8:36"}]},{"nodeType":"YulAssignment","src":"1477:30:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1490:5:36"},{"arguments":[{"name":"mask","nodeType":"YulIdentifier","src":"1501:4:36"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"1497:3:36"},"nodeType":"YulFunctionCall","src":"1497:9:36"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1486:3:36"},"nodeType":"YulFunctionCall","src":"1486:21:36"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"1477:5:36"}]},{"nodeType":"YulAssignment","src":"1516:40:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1529:5:36"},{"arguments":[{"name":"toInsert","nodeType":"YulIdentifier","src":"1540:8:36"},{"name":"mask","nodeType":"YulIdentifier","src":"1550:4:36"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1536:3:36"},"nodeType":"YulFunctionCall","src":"1536:19:36"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"1526:2:36"},"nodeType":"YulFunctionCall","src":"1526:30:36"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"1516:6:36"}]}]},"name":"update_byte_slice_dynamic32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1206:5:36","type":""},{"name":"shiftBytes","nodeType":"YulTypedName","src":"1213:10:36","type":""},{"name":"toInsert","nodeType":"YulTypedName","src":"1225:8:36","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"1238:6:36","type":""}],"src":"1169:393:36"},{"body":{"nodeType":"YulBlock","src":"1613:32:36","statements":[{"nodeType":"YulAssignment","src":"1623:16:36","value":{"name":"value","nodeType":"YulIdentifier","src":"1634:5:36"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1623:7:36"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1595:5:36","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1605:7:36","type":""}],"src":"1568:77:36"},{"body":{"nodeType":"YulBlock","src":"1683:28:36","statements":[{"nodeType":"YulAssignment","src":"1693:12:36","value":{"name":"value","nodeType":"YulIdentifier","src":"1700:5:36"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"1693:3:36"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1669:5:36","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"1679:3:36","type":""}],"src":"1651:60:36"},{"body":{"nodeType":"YulBlock","src":"1777:82:36","statements":[{"nodeType":"YulAssignment","src":"1787:66:36","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1845:5:36"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"1827:17:36"},"nodeType":"YulFunctionCall","src":"1827:24:36"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"1818:8:36"},"nodeType":"YulFunctionCall","src":"1818:34:36"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"1800:17:36"},"nodeType":"YulFunctionCall","src":"1800:53:36"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"1787:9:36"}]}]},"name":"convert_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1757:5:36","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"1767:9:36","type":""}],"src":"1717:142:36"},{"body":{"nodeType":"YulBlock","src":"1912:28:36","statements":[{"nodeType":"YulAssignment","src":"1922:12:36","value":{"name":"value","nodeType":"YulIdentifier","src":"1929:5:36"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"1922:3:36"}]}]},"name":"prepare_store_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1898:5:36","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"1908:3:36","type":""}],"src":"1865:75:36"},{"body":{"nodeType":"YulBlock","src":"2022:193:36","statements":[{"nodeType":"YulVariableDeclaration","src":"2032:63:36","value":{"arguments":[{"name":"value_0","nodeType":"YulIdentifier","src":"2087:7:36"}],"functionName":{"name":"convert_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"2056:30:36"},"nodeType":"YulFunctionCall","src":"2056:39:36"},"variables":[{"name":"convertedValue_0","nodeType":"YulTypedName","src":"2036:16:36","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2111:4:36"},{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2151:4:36"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"2145:5:36"},"nodeType":"YulFunctionCall","src":"2145:11:36"},{"name":"offset","nodeType":"YulIdentifier","src":"2158:6:36"},{"arguments":[{"name":"convertedValue_0","nodeType":"YulIdentifier","src":"2190:16:36"}],"functionName":{"name":"prepare_store_t_uint256","nodeType":"YulIdentifier","src":"2166:23:36"},"nodeType":"YulFunctionCall","src":"2166:41:36"}],"functionName":{"name":"update_byte_slice_dynamic32","nodeType":"YulIdentifier","src":"2117:27:36"},"nodeType":"YulFunctionCall","src":"2117:91:36"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"2104:6:36"},"nodeType":"YulFunctionCall","src":"2104:105:36"},"nodeType":"YulExpressionStatement","src":"2104:105:36"}]},"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"1999:4:36","type":""},{"name":"offset","nodeType":"YulTypedName","src":"2005:6:36","type":""},{"name":"value_0","nodeType":"YulTypedName","src":"2013:7:36","type":""}],"src":"1946:269:36"},{"body":{"nodeType":"YulBlock","src":"2270:24:36","statements":[{"nodeType":"YulAssignment","src":"2280:8:36","value":{"kind":"number","nodeType":"YulLiteral","src":"2287:1:36","type":"","value":"0"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"2280:3:36"}]}]},"name":"zero_value_for_split_t_uint256","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"2266:3:36","type":""}],"src":"2221:73:36"},{"body":{"nodeType":"YulBlock","src":"2353:136:36","statements":[{"nodeType":"YulVariableDeclaration","src":"2363:46:36","value":{"arguments":[],"functionName":{"name":"zero_value_for_split_t_uint256","nodeType":"YulIdentifier","src":"2377:30:36"},"nodeType":"YulFunctionCall","src":"2377:32:36"},"variables":[{"name":"zero_0","nodeType":"YulTypedName","src":"2367:6:36","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"2462:4:36"},{"name":"offset","nodeType":"YulIdentifier","src":"2468:6:36"},{"name":"zero_0","nodeType":"YulIdentifier","src":"2476:6:36"}],"functionName":{"name":"update_storage_value_t_uint256_to_t_uint256","nodeType":"YulIdentifier","src":"2418:43:36"},"nodeType":"YulFunctionCall","src":"2418:65:36"},"nodeType":"YulExpressionStatement","src":"2418:65:36"}]},"name":"storage_set_to_zero_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"2339:4:36","type":""},{"name":"offset","nodeType":"YulTypedName","src":"2345:6:36","type":""}],"src":"2300:189:36"},{"body":{"nodeType":"YulBlock","src":"2545:136:36","statements":[{"body":{"nodeType":"YulBlock","src":"2612:63:36","statements":[{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2656:5:36"},{"kind":"number","nodeType":"YulLiteral","src":"2663:1:36","type":"","value":"0"}],"functionName":{"name":"storage_set_to_zero_t_uint256","nodeType":"YulIdentifier","src":"2626:29:36"},"nodeType":"YulFunctionCall","src":"2626:39:36"},"nodeType":"YulExpressionStatement","src":"2626:39:36"}]},"condition":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2565:5:36"},{"name":"end","nodeType":"YulIdentifier","src":"2572:3:36"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"2562:2:36"},"nodeType":"YulFunctionCall","src":"2562:14:36"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"2577:26:36","statements":[{"nodeType":"YulAssignment","src":"2579:22:36","value":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"2592:5:36"},{"kind":"number","nodeType":"YulLiteral","src":"2599:1:36","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2588:3:36"},"nodeType":"YulFunctionCall","src":"2588:13:36"},"variableNames":[{"name":"start","nodeType":"YulIdentifier","src":"2579:5:36"}]}]},"pre":{"nodeType":"YulBlock","src":"2559:2:36","statements":[]},"src":"2555:120:36"}]},"name":"clear_storage_range_t_bytes1","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"2533:5:36","type":""},{"name":"end","nodeType":"YulTypedName","src":"2540:3:36","type":""}],"src":"2495:186:36"},{"body":{"nodeType":"YulBlock","src":"2766:464:36","statements":[{"body":{"nodeType":"YulBlock","src":"2792:431:36","statements":[{"nodeType":"YulVariableDeclaration","src":"2806:54:36","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"2854:5:36"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"2822:31:36"},"nodeType":"YulFunctionCall","src":"2822:38:36"},"variables":[{"name":"dataArea","nodeType":"YulTypedName","src":"2810:8:36","type":""}]},{"nodeType":"YulVariableDeclaration","src":"2873:63:36","value":{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"2896:8:36"},{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"2924:10:36"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"2906:17:36"},"nodeType":"YulFunctionCall","src":"2906:29:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2892:3:36"},"nodeType":"YulFunctionCall","src":"2892:44:36"},"variables":[{"name":"deleteStart","nodeType":"YulTypedName","src":"2877:11:36","type":""}]},{"body":{"nodeType":"YulBlock","src":"3093:27:36","statements":[{"nodeType":"YulAssignment","src":"3095:23:36","value":{"name":"dataArea","nodeType":"YulIdentifier","src":"3110:8:36"},"variableNames":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"3095:11:36"}]}]},"condition":{"arguments":[{"name":"startIndex","nodeType":"YulIdentifier","src":"3077:10:36"},{"kind":"number","nodeType":"YulLiteral","src":"3089:2:36","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3074:2:36"},"nodeType":"YulFunctionCall","src":"3074:18:36"},"nodeType":"YulIf","src":"3071:49:36"},{"expression":{"arguments":[{"name":"deleteStart","nodeType":"YulIdentifier","src":"3162:11:36"},{"arguments":[{"name":"dataArea","nodeType":"YulIdentifier","src":"3179:8:36"},{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"3207:3:36"}],"functionName":{"name":"divide_by_32_ceil","nodeType":"YulIdentifier","src":"3189:17:36"},"nodeType":"YulFunctionCall","src":"3189:22:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3175:3:36"},"nodeType":"YulFunctionCall","src":"3175:37:36"}],"functionName":{"name":"clear_storage_range_t_bytes1","nodeType":"YulIdentifier","src":"3133:28:36"},"nodeType":"YulFunctionCall","src":"3133:80:36"},"nodeType":"YulExpressionStatement","src":"3133:80:36"}]},"condition":{"arguments":[{"name":"len","nodeType":"YulIdentifier","src":"2783:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"2788:2:36","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"2780:2:36"},"nodeType":"YulFunctionCall","src":"2780:11:36"},"nodeType":"YulIf","src":"2777:446:36"}]},"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nodeType":"YulTypedName","src":"2742:5:36","type":""},{"name":"len","nodeType":"YulTypedName","src":"2749:3:36","type":""},{"name":"startIndex","nodeType":"YulTypedName","src":"2754:10:36","type":""}],"src":"2687:543:36"},{"body":{"nodeType":"YulBlock","src":"3299:54:36","statements":[{"nodeType":"YulAssignment","src":"3309:37:36","value":{"arguments":[{"name":"bits","nodeType":"YulIdentifier","src":"3334:4:36"},{"name":"value","nodeType":"YulIdentifier","src":"3340:5:36"}],"functionName":{"name":"shr","nodeType":"YulIdentifier","src":"3330:3:36"},"nodeType":"YulFunctionCall","src":"3330:16:36"},"variableNames":[{"name":"newValue","nodeType":"YulIdentifier","src":"3309:8:36"}]}]},"name":"shift_right_unsigned_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"bits","nodeType":"YulTypedName","src":"3274:4:36","type":""},{"name":"value","nodeType":"YulTypedName","src":"3280:5:36","type":""}],"returnVariables":[{"name":"newValue","nodeType":"YulTypedName","src":"3290:8:36","type":""}],"src":"3236:117:36"},{"body":{"nodeType":"YulBlock","src":"3410:118:36","statements":[{"nodeType":"YulVariableDeclaration","src":"3420:68:36","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3469:1:36","type":"","value":"8"},{"name":"bytes","nodeType":"YulIdentifier","src":"3472:5:36"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"3465:3:36"},"nodeType":"YulFunctionCall","src":"3465:13:36"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3484:1:36","type":"","value":"0"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3480:3:36"},"nodeType":"YulFunctionCall","src":"3480:6:36"}],"functionName":{"name":"shift_right_unsigned_dynamic","nodeType":"YulIdentifier","src":"3436:28:36"},"nodeType":"YulFunctionCall","src":"3436:51:36"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"3432:3:36"},"nodeType":"YulFunctionCall","src":"3432:56:36"},"variables":[{"name":"mask","nodeType":"YulTypedName","src":"3424:4:36","type":""}]},{"nodeType":"YulAssignment","src":"3497:25:36","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3511:4:36"},{"name":"mask","nodeType":"YulIdentifier","src":"3517:4:36"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3507:3:36"},"nodeType":"YulFunctionCall","src":"3507:15:36"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"3497:6:36"}]}]},"name":"mask_bytes_dynamic","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"3387:4:36","type":""},{"name":"bytes","nodeType":"YulTypedName","src":"3393:5:36","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"3403:6:36","type":""}],"src":"3359:169:36"},{"body":{"nodeType":"YulBlock","src":"3614:214:36","statements":[{"nodeType":"YulAssignment","src":"3747:37:36","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3774:4:36"},{"name":"len","nodeType":"YulIdentifier","src":"3780:3:36"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"3755:18:36"},"nodeType":"YulFunctionCall","src":"3755:29:36"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"3747:4:36"}]},{"nodeType":"YulAssignment","src":"3793:29:36","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"3804:4:36"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3814:1:36","type":"","value":"2"},{"name":"len","nodeType":"YulIdentifier","src":"3817:3:36"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"3810:3:36"},"nodeType":"YulFunctionCall","src":"3810:11:36"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"3801:2:36"},"nodeType":"YulFunctionCall","src":"3801:21:36"},"variableNames":[{"name":"used","nodeType":"YulIdentifier","src":"3793:4:36"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"3595:4:36","type":""},{"name":"len","nodeType":"YulTypedName","src":"3601:3:36","type":""}],"returnVariables":[{"name":"used","nodeType":"YulTypedName","src":"3609:4:36","type":""}],"src":"3533:295:36"},{"body":{"nodeType":"YulBlock","src":"3925:1303:36","statements":[{"nodeType":"YulVariableDeclaration","src":"3936:51:36","value":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"3983:3:36"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"3950:32:36"},"nodeType":"YulFunctionCall","src":"3950:37:36"},"variables":[{"name":"newLen","nodeType":"YulTypedName","src":"3940:6:36","type":""}]},{"body":{"nodeType":"YulBlock","src":"4072:22:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"4074:16:36"},"nodeType":"YulFunctionCall","src":"4074:18:36"},"nodeType":"YulExpressionStatement","src":"4074:18:36"}]},"condition":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"4044:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"4052:18:36","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4041:2:36"},"nodeType":"YulFunctionCall","src":"4041:30:36"},"nodeType":"YulIf","src":"4038:56:36"},{"nodeType":"YulVariableDeclaration","src":"4104:52:36","value":{"arguments":[{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4150:4:36"}],"functionName":{"name":"sload","nodeType":"YulIdentifier","src":"4144:5:36"},"nodeType":"YulFunctionCall","src":"4144:11:36"}],"functionName":{"name":"extract_byte_array_length","nodeType":"YulIdentifier","src":"4118:25:36"},"nodeType":"YulFunctionCall","src":"4118:38:36"},"variables":[{"name":"oldLen","nodeType":"YulTypedName","src":"4108:6:36","type":""}]},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4249:4:36"},{"name":"oldLen","nodeType":"YulIdentifier","src":"4255:6:36"},{"name":"newLen","nodeType":"YulIdentifier","src":"4263:6:36"}],"functionName":{"name":"clean_up_bytearray_end_slots_t_string_storage","nodeType":"YulIdentifier","src":"4203:45:36"},"nodeType":"YulFunctionCall","src":"4203:67:36"},"nodeType":"YulExpressionStatement","src":"4203:67:36"},{"nodeType":"YulVariableDeclaration","src":"4280:18:36","value":{"kind":"number","nodeType":"YulLiteral","src":"4297:1:36","type":"","value":"0"},"variables":[{"name":"srcOffset","nodeType":"YulTypedName","src":"4284:9:36","type":""}]},{"nodeType":"YulAssignment","src":"4308:17:36","value":{"kind":"number","nodeType":"YulLiteral","src":"4321:4:36","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"4308:9:36"}]},{"cases":[{"body":{"nodeType":"YulBlock","src":"4372:611:36","statements":[{"nodeType":"YulVariableDeclaration","src":"4386:37:36","value":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"4405:6:36"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4417:4:36","type":"","value":"0x1f"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4413:3:36"},"nodeType":"YulFunctionCall","src":"4413:9:36"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4401:3:36"},"nodeType":"YulFunctionCall","src":"4401:22:36"},"variables":[{"name":"loopEnd","nodeType":"YulTypedName","src":"4390:7:36","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4437:51:36","value":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4483:4:36"}],"functionName":{"name":"array_dataslot_t_string_storage","nodeType":"YulIdentifier","src":"4451:31:36"},"nodeType":"YulFunctionCall","src":"4451:37:36"},"variables":[{"name":"dstPtr","nodeType":"YulTypedName","src":"4441:6:36","type":""}]},{"nodeType":"YulVariableDeclaration","src":"4501:10:36","value":{"kind":"number","nodeType":"YulLiteral","src":"4510:1:36","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"4505:1:36","type":""}]},{"body":{"nodeType":"YulBlock","src":"4569:163:36","statements":[{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"4594:6:36"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4612:3:36"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"4617:9:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4608:3:36"},"nodeType":"YulFunctionCall","src":"4608:19:36"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4602:5:36"},"nodeType":"YulFunctionCall","src":"4602:26:36"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4587:6:36"},"nodeType":"YulFunctionCall","src":"4587:42:36"},"nodeType":"YulExpressionStatement","src":"4587:42:36"},{"nodeType":"YulAssignment","src":"4646:24:36","value":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"4660:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"4668:1:36","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4656:3:36"},"nodeType":"YulFunctionCall","src":"4656:14:36"},"variableNames":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"4646:6:36"}]},{"nodeType":"YulAssignment","src":"4687:31:36","value":{"arguments":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"4704:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"4715:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4700:3:36"},"nodeType":"YulFunctionCall","src":"4700:18:36"},"variableNames":[{"name":"srcOffset","nodeType":"YulIdentifier","src":"4687:9:36"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4535:1:36"},{"name":"loopEnd","nodeType":"YulIdentifier","src":"4538:7:36"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4532:2:36"},"nodeType":"YulFunctionCall","src":"4532:14:36"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"4547:21:36","statements":[{"nodeType":"YulAssignment","src":"4549:17:36","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"4558:1:36"},{"kind":"number","nodeType":"YulLiteral","src":"4561:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4554:3:36"},"nodeType":"YulFunctionCall","src":"4554:12:36"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"4549:1:36"}]}]},"pre":{"nodeType":"YulBlock","src":"4528:3:36","statements":[]},"src":"4524:208:36"},{"body":{"nodeType":"YulBlock","src":"4768:156:36","statements":[{"nodeType":"YulVariableDeclaration","src":"4786:43:36","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"4813:3:36"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"4818:9:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4809:3:36"},"nodeType":"YulFunctionCall","src":"4809:19:36"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"4803:5:36"},"nodeType":"YulFunctionCall","src":"4803:26:36"},"variables":[{"name":"lastValue","nodeType":"YulTypedName","src":"4790:9:36","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nodeType":"YulIdentifier","src":"4853:6:36"},{"arguments":[{"name":"lastValue","nodeType":"YulIdentifier","src":"4880:9:36"},{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"4895:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"4903:4:36","type":"","value":"0x1f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4891:3:36"},"nodeType":"YulFunctionCall","src":"4891:17:36"}],"functionName":{"name":"mask_bytes_dynamic","nodeType":"YulIdentifier","src":"4861:18:36"},"nodeType":"YulFunctionCall","src":"4861:48:36"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4846:6:36"},"nodeType":"YulFunctionCall","src":"4846:64:36"},"nodeType":"YulExpressionStatement","src":"4846:64:36"}]},"condition":{"arguments":[{"name":"loopEnd","nodeType":"YulIdentifier","src":"4751:7:36"},{"name":"newLen","nodeType":"YulIdentifier","src":"4760:6:36"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4748:2:36"},"nodeType":"YulFunctionCall","src":"4748:19:36"},"nodeType":"YulIf","src":"4745:179:36"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"4944:4:36"},{"arguments":[{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"4958:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"4966:1:36","type":"","value":"2"}],"functionName":{"name":"mul","nodeType":"YulIdentifier","src":"4954:3:36"},"nodeType":"YulFunctionCall","src":"4954:14:36"},{"kind":"number","nodeType":"YulLiteral","src":"4970:1:36","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4950:3:36"},"nodeType":"YulFunctionCall","src":"4950:22:36"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"4937:6:36"},"nodeType":"YulFunctionCall","src":"4937:36:36"},"nodeType":"YulExpressionStatement","src":"4937:36:36"}]},"nodeType":"YulCase","src":"4365:618:36","value":{"kind":"number","nodeType":"YulLiteral","src":"4370:1:36","type":"","value":"1"}},{"body":{"nodeType":"YulBlock","src":"5000:222:36","statements":[{"nodeType":"YulVariableDeclaration","src":"5014:14:36","value":{"kind":"number","nodeType":"YulLiteral","src":"5027:1:36","type":"","value":"0"},"variables":[{"name":"value","nodeType":"YulTypedName","src":"5018:5:36","type":""}]},{"body":{"nodeType":"YulBlock","src":"5051:67:36","statements":[{"nodeType":"YulAssignment","src":"5069:35:36","value":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"5088:3:36"},{"name":"srcOffset","nodeType":"YulIdentifier","src":"5093:9:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5084:3:36"},"nodeType":"YulFunctionCall","src":"5084:19:36"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5078:5:36"},"nodeType":"YulFunctionCall","src":"5078:26:36"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"5069:5:36"}]}]},"condition":{"name":"newLen","nodeType":"YulIdentifier","src":"5044:6:36"},"nodeType":"YulIf","src":"5041:77:36"},{"expression":{"arguments":[{"name":"slot","nodeType":"YulIdentifier","src":"5138:4:36"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5197:5:36"},{"name":"newLen","nodeType":"YulIdentifier","src":"5204:6:36"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nodeType":"YulIdentifier","src":"5144:52:36"},"nodeType":"YulFunctionCall","src":"5144:67:36"}],"functionName":{"name":"sstore","nodeType":"YulIdentifier","src":"5131:6:36"},"nodeType":"YulFunctionCall","src":"5131:81:36"},"nodeType":"YulExpressionStatement","src":"5131:81:36"}]},"nodeType":"YulCase","src":"4992:230:36","value":"default"}],"expression":{"arguments":[{"name":"newLen","nodeType":"YulIdentifier","src":"4345:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"4353:2:36","type":"","value":"31"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"4342:2:36"},"nodeType":"YulFunctionCall","src":"4342:14:36"},"nodeType":"YulSwitch","src":"4335:887:36"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nodeType":"YulTypedName","src":"3914:4:36","type":""},{"name":"src","nodeType":"YulTypedName","src":"3920:3:36","type":""}],"src":"3833:1395:36"}]},"contents":"{\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n}\n","id":36,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xF DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4661726D204C656E646572204E46540000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x464C4E0000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 PUSH1 0x0 SWAP1 DUP2 PUSH3 0x8F SWAP2 SWAP1 PUSH3 0x324 JUMP JUMPDEST POP DUP1 PUSH1 0x1 SWAP1 DUP2 PUSH3 0xA1 SWAP2 SWAP1 PUSH3 0x324 JUMP JUMPDEST POP POP POP PUSH3 0x40B JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x12C JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x142 JUMPI PUSH3 0x141 PUSH3 0xE4 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH3 0x1AC PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH3 0x16D JUMP JUMPDEST PUSH3 0x1B8 DUP7 DUP4 PUSH3 0x16D JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x205 PUSH3 0x1FF PUSH3 0x1F9 DUP5 PUSH3 0x1D0 JUMP JUMPDEST PUSH3 0x1DA JUMP JUMPDEST PUSH3 0x1D0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x221 DUP4 PUSH3 0x1E4 JUMP JUMPDEST PUSH3 0x239 PUSH3 0x230 DUP3 PUSH3 0x20C JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH3 0x17A JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH3 0x250 PUSH3 0x241 JUMP JUMPDEST PUSH3 0x25D DUP2 DUP5 DUP5 PUSH3 0x216 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x285 JUMPI PUSH3 0x279 PUSH1 0x0 DUP3 PUSH3 0x246 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x263 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x2D4 JUMPI PUSH3 0x29E DUP2 PUSH3 0x148 JUMP JUMPDEST PUSH3 0x2A9 DUP5 PUSH3 0x15D JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH3 0x2B9 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH3 0x2D1 PUSH3 0x2C8 DUP6 PUSH3 0x15D JUMP JUMPDEST DUP4 ADD DUP3 PUSH3 0x262 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x2F9 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH3 0x2D9 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x314 DUP4 DUP4 PUSH3 0x2E6 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x32F DUP3 PUSH3 0xAA JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x34B JUMPI PUSH3 0x34A PUSH3 0xB5 JUMP JUMPDEST JUMPDEST PUSH3 0x357 DUP3 SLOAD PUSH3 0x113 JUMP JUMPDEST PUSH3 0x364 DUP3 DUP3 DUP6 PUSH3 0x289 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x39C JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x387 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH3 0x393 DUP6 DUP3 PUSH3 0x306 JUMP JUMPDEST DUP7 SSTORE POP PUSH3 0x403 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH3 0x3AC DUP7 PUSH3 0x148 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x3D6 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x3AF JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH3 0x3F6 JUMPI DUP5 DUP10 ADD MLOAD PUSH3 0x3F2 PUSH1 0x1F DUP10 AND DUP3 PUSH3 0x2E6 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x25F6 DUP1 PUSH3 0x41B PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xEA JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x249 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x265 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x281 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x2B1 JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1F1 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x221 JUMPI DUP1 PUSH4 0x9CBF9E36 EQ PUSH2 0x23F JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x16D JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x189 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x1A5 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x1C1 JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x11F JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x13D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x109 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x104 SWAP2 SWAP1 PUSH2 0x18F2 JUMP JUMPDEST PUSH2 0x2E1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x116 SWAP2 SWAP1 PUSH2 0x193A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x127 PUSH2 0x342 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x134 SWAP2 SWAP1 PUSH2 0x19E5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x157 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x152 SWAP2 SWAP1 PUSH2 0x1A3D JUMP JUMPDEST PUSH2 0x3D4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x164 SWAP2 SWAP1 PUSH2 0x1AAB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x187 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x182 SWAP2 SWAP1 PUSH2 0x1AF2 JUMP JUMPDEST PUSH2 0x41A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1A3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x19E SWAP2 SWAP1 PUSH2 0x1B32 JUMP JUMPDEST PUSH2 0x531 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1BF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BA SWAP2 SWAP1 PUSH2 0x1B32 JUMP JUMPDEST PUSH2 0x591 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1DB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1D6 SWAP2 SWAP1 PUSH2 0x1A3D JUMP JUMPDEST PUSH2 0x5B1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E8 SWAP2 SWAP1 PUSH2 0x1AAB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x206 SWAP2 SWAP1 PUSH2 0x1B85 JUMP JUMPDEST PUSH2 0x637 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x218 SWAP2 SWAP1 PUSH2 0x1BC1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x229 PUSH2 0x6EE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x236 SWAP2 SWAP1 PUSH2 0x19E5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x247 PUSH2 0x780 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x263 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x25E SWAP2 SWAP1 PUSH2 0x1C08 JUMP JUMPDEST PUSH2 0x7A5 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x27F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x27A SWAP2 SWAP1 PUSH2 0x1D7D JUMP JUMPDEST PUSH2 0x7BB JUMP JUMPDEST STOP JUMPDEST PUSH2 0x29B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x296 SWAP2 SWAP1 PUSH2 0x1A3D JUMP JUMPDEST PUSH2 0x81D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2A8 SWAP2 SWAP1 PUSH2 0x19E5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2CB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2C6 SWAP2 SWAP1 PUSH2 0x1E00 JUMP JUMPDEST PUSH2 0x92F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2D8 SWAP2 SWAP1 PUSH2 0x193A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH4 0x49064906 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x33B JUMPI POP PUSH2 0x33A DUP3 PUSH2 0x9C3 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x351 SWAP1 PUSH2 0x1E6F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x37D SWAP1 PUSH2 0x1E6F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3CA JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x39F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3CA JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3AD JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3DF DUP3 PUSH2 0xAA5 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x425 DUP3 PUSH2 0x5B1 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x495 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x48C SWAP1 PUSH2 0x1F12 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x4B4 PUSH2 0xAF0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x4E3 JUMPI POP PUSH2 0x4E2 DUP2 PUSH2 0x4DD PUSH2 0xAF0 JUMP JUMPDEST PUSH2 0x92F JUMP JUMPDEST JUMPDEST PUSH2 0x522 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x519 SWAP1 PUSH2 0x1FA4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x52C DUP4 DUP4 PUSH2 0xAF8 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x542 PUSH2 0x53C PUSH2 0xAF0 JUMP JUMPDEST DUP3 PUSH2 0xBB1 JUMP JUMPDEST PUSH2 0x581 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x578 SWAP1 PUSH2 0x2036 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x58C DUP4 DUP4 DUP4 PUSH2 0xC46 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x5AC DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x7BB JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x5BD DUP4 PUSH2 0xF3F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x62E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x625 SWAP1 PUSH2 0x20A2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x6A7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x69E SWAP1 PUSH2 0x2134 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x6FD SWAP1 PUSH2 0x1E6F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x729 SWAP1 PUSH2 0x1E6F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x776 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x74B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x776 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x759 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x78A PUSH1 0x7 PUSH2 0xF7C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x796 PUSH1 0x7 PUSH2 0xF92 JUMP JUMPDEST SWAP1 POP PUSH2 0x7A2 CALLER DUP3 PUSH2 0xFA0 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x7B7 PUSH2 0x7B0 PUSH2 0xAF0 JUMP JUMPDEST DUP4 DUP4 PUSH2 0x11BD JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x7CC PUSH2 0x7C6 PUSH2 0xAF0 JUMP JUMPDEST DUP4 PUSH2 0xBB1 JUMP JUMPDEST PUSH2 0x80B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x802 SWAP1 PUSH2 0x2036 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x817 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1329 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x828 DUP3 PUSH2 0xAA5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH2 0x848 SWAP1 PUSH2 0x1E6F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x874 SWAP1 PUSH2 0x1E6F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x8C1 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x896 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x8C1 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x8A4 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH2 0x8D2 PUSH2 0x1385 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x8E7 JUMPI DUP2 SWAP3 POP POP POP PUSH2 0x92A JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x91C JUMPI DUP1 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x904 SWAP3 SWAP2 SWAP1 PUSH2 0x2190 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP3 POP POP POP PUSH2 0x92A JUMP JUMPDEST PUSH2 0x925 DUP5 PUSH2 0x139C JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0xA8E JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0xA9E JUMPI POP PUSH2 0xA9D DUP3 PUSH2 0x1404 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xAAE DUP2 PUSH2 0x146E JUMP JUMPDEST PUSH2 0xAED JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xAE4 SWAP1 PUSH2 0x20A2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB6B DUP4 PUSH2 0x5B1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xBBD DUP4 PUSH2 0x5B1 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xBFF JUMPI POP PUSH2 0xBFE DUP2 DUP6 PUSH2 0x92F JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xC3D JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC25 DUP5 PUSH2 0x3D4 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC66 DUP3 PUSH2 0x5B1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCBC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB3 SWAP1 PUSH2 0x2226 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xD2B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD22 SWAP1 PUSH2 0x22B8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xD38 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x14AF JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xD58 DUP3 PUSH2 0x5B1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xDAE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDA5 SWAP1 PUSH2 0x2226 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xF3A DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x14B5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x100F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1006 SWAP1 PUSH2 0x2324 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1018 DUP2 PUSH2 0x146E JUMP JUMPDEST ISZERO PUSH2 0x1058 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x104F SWAP1 PUSH2 0x2390 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1066 PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x14AF JUMP JUMPDEST PUSH2 0x106F DUP2 PUSH2 0x146E JUMP JUMPDEST ISZERO PUSH2 0x10AF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x10A6 SWAP1 PUSH2 0x2390 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x11B9 PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x14B5 JUMP JUMPDEST POP POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x122B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1222 SWAP1 PUSH2 0x23FC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0x131C SWAP2 SWAP1 PUSH2 0x193A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x1334 DUP5 DUP5 DUP5 PUSH2 0xC46 JUMP JUMPDEST PUSH2 0x1340 DUP5 DUP5 DUP5 DUP5 PUSH2 0x14BB JUMP JUMPDEST PUSH2 0x137F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1376 SWAP1 PUSH2 0x248E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x13A7 DUP3 PUSH2 0xAA5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13B1 PUSH2 0x1385 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x13D1 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x13FC JUMP JUMPDEST DUP1 PUSH2 0x13DB DUP5 PUSH2 0x1642 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x13EC SWAP3 SWAP2 SWAP1 PUSH2 0x2190 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1490 DUP4 PUSH2 0xF3F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14DC DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1710 JUMP JUMPDEST ISZERO PUSH2 0x1635 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x1505 PUSH2 0xAF0 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1527 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2503 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1563 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1560 SWAP2 SWAP1 PUSH2 0x2564 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x15E5 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1593 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1598 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x15DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15D4 SWAP1 PUSH2 0x248E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x163A JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x1651 DUP5 PUSH2 0x1733 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1670 JUMPI PUSH2 0x166F PUSH2 0x1C52 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x16A2 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x1705 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x16F9 JUMPI PUSH2 0x16F8 PUSH2 0x2591 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 SUB PUSH2 0x16B0 JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x1791 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x1787 JUMPI PUSH2 0x1786 PUSH2 0x2591 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x17CE JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x17C4 JUMPI PUSH2 0x17C3 PUSH2 0x2591 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x17FD JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x17F3 JUMPI PUSH2 0x17F2 PUSH2 0x2591 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1826 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x181C JUMPI PUSH2 0x181B PUSH2 0x2591 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x184B JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x1841 JUMPI PUSH2 0x1840 PUSH2 0x2591 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x186E JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x1864 JUMPI PUSH2 0x1863 PUSH2 0x2591 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x187D JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x18CF DUP2 PUSH2 0x189A JUMP JUMPDEST DUP2 EQ PUSH2 0x18DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x18EC DUP2 PUSH2 0x18C6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1908 JUMPI PUSH2 0x1907 PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1916 DUP5 DUP3 DUP6 ADD PUSH2 0x18DD JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1934 DUP2 PUSH2 0x191F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x194F PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x192B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x198F JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1974 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19B7 DUP3 PUSH2 0x1955 JUMP JUMPDEST PUSH2 0x19C1 DUP2 DUP6 PUSH2 0x1960 JUMP JUMPDEST SWAP4 POP PUSH2 0x19D1 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1971 JUMP JUMPDEST PUSH2 0x19DA DUP2 PUSH2 0x199B JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x19FF DUP2 DUP5 PUSH2 0x19AC JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1A1A DUP2 PUSH2 0x1A07 JUMP JUMPDEST DUP2 EQ PUSH2 0x1A25 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1A37 DUP2 PUSH2 0x1A11 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A53 JUMPI PUSH2 0x1A52 PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1A61 DUP5 DUP3 DUP6 ADD PUSH2 0x1A28 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A95 DUP3 PUSH2 0x1A6A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1AA5 DUP2 PUSH2 0x1A8A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1AC0 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1A9C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1ACF DUP2 PUSH2 0x1A8A JUMP JUMPDEST DUP2 EQ PUSH2 0x1ADA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1AEC DUP2 PUSH2 0x1AC6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B09 JUMPI PUSH2 0x1B08 PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1B17 DUP6 DUP3 DUP7 ADD PUSH2 0x1ADD JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1B28 DUP6 DUP3 DUP7 ADD PUSH2 0x1A28 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1B4B JUMPI PUSH2 0x1B4A PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1B59 DUP7 DUP3 DUP8 ADD PUSH2 0x1ADD JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1B6A DUP7 DUP3 DUP8 ADD PUSH2 0x1ADD JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1B7B DUP7 DUP3 DUP8 ADD PUSH2 0x1A28 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B9B JUMPI PUSH2 0x1B9A PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1BA9 DUP5 DUP3 DUP6 ADD PUSH2 0x1ADD JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1BBB DUP2 PUSH2 0x1A07 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1BD6 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1BB2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1BE5 DUP2 PUSH2 0x191F JUMP JUMPDEST DUP2 EQ PUSH2 0x1BF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1C02 DUP2 PUSH2 0x1BDC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C1F JUMPI PUSH2 0x1C1E PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1C2D DUP6 DUP3 DUP7 ADD PUSH2 0x1ADD JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1C3E DUP6 DUP3 DUP7 ADD PUSH2 0x1BF3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1C8A DUP3 PUSH2 0x199B JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1CA9 JUMPI PUSH2 0x1CA8 PUSH2 0x1C52 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CBC PUSH2 0x1886 JUMP JUMPDEST SWAP1 POP PUSH2 0x1CC8 DUP3 DUP3 PUSH2 0x1C81 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1CE8 JUMPI PUSH2 0x1CE7 PUSH2 0x1C52 JUMP JUMPDEST JUMPDEST PUSH2 0x1CF1 DUP3 PUSH2 0x199B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D20 PUSH2 0x1D1B DUP5 PUSH2 0x1CCD JUMP JUMPDEST PUSH2 0x1CB2 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x1D3C JUMPI PUSH2 0x1D3B PUSH2 0x1C4D JUMP JUMPDEST JUMPDEST PUSH2 0x1D47 DUP5 DUP3 DUP6 PUSH2 0x1CFE JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1D64 JUMPI PUSH2 0x1D63 PUSH2 0x1C48 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1D74 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x1D0D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1D97 JUMPI PUSH2 0x1D96 PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1DA5 DUP8 DUP3 DUP9 ADD PUSH2 0x1ADD JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x1DB6 DUP8 DUP3 DUP9 ADD PUSH2 0x1ADD JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x1DC7 DUP8 DUP3 DUP9 ADD PUSH2 0x1A28 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1DE8 JUMPI PUSH2 0x1DE7 PUSH2 0x1895 JUMP JUMPDEST JUMPDEST PUSH2 0x1DF4 DUP8 DUP3 DUP9 ADD PUSH2 0x1D4F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1E17 JUMPI PUSH2 0x1E16 PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1E25 DUP6 DUP3 DUP7 ADD PUSH2 0x1ADD JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1E36 DUP6 DUP3 DUP7 ADD PUSH2 0x1ADD JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1E87 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1E9A JUMPI PUSH2 0x1E99 PUSH2 0x1E40 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EFC PUSH1 0x21 DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x1F07 DUP3 PUSH2 0x1EA0 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1F2B DUP2 PUSH2 0x1EEF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F8E PUSH1 0x3D DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x1F99 DUP3 PUSH2 0x1F32 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1FBD DUP2 PUSH2 0x1F81 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2020 PUSH1 0x2D DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x202B DUP3 PUSH2 0x1FC4 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x204F DUP2 PUSH2 0x2013 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x208C PUSH1 0x18 DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x2097 DUP3 PUSH2 0x2056 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x20BB DUP2 PUSH2 0x207F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x211E PUSH1 0x29 DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x2129 DUP3 PUSH2 0x20C2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x214D DUP2 PUSH2 0x2111 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x216A DUP3 PUSH2 0x1955 JUMP JUMPDEST PUSH2 0x2174 DUP2 DUP6 PUSH2 0x2154 JUMP JUMPDEST SWAP4 POP PUSH2 0x2184 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1971 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x219C DUP3 DUP6 PUSH2 0x215F JUMP JUMPDEST SWAP2 POP PUSH2 0x21A8 DUP3 DUP5 PUSH2 0x215F JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2210 PUSH1 0x25 DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x221B DUP3 PUSH2 0x21B4 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x223F DUP2 PUSH2 0x2203 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x22A2 PUSH1 0x24 DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x22AD DUP3 PUSH2 0x2246 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x22D1 DUP2 PUSH2 0x2295 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x230E PUSH1 0x20 DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x2319 DUP3 PUSH2 0x22D8 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x233D DUP2 PUSH2 0x2301 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x237A PUSH1 0x1C DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x2385 DUP3 PUSH2 0x2344 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x23A9 DUP2 PUSH2 0x236D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23E6 PUSH1 0x19 DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x23F1 DUP3 PUSH2 0x23B0 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2415 DUP2 PUSH2 0x23D9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2478 PUSH1 0x32 DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x2483 DUP3 PUSH2 0x241C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x24A7 DUP2 PUSH2 0x246B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x24D5 DUP3 PUSH2 0x24AE JUMP JUMPDEST PUSH2 0x24DF DUP2 DUP6 PUSH2 0x24B9 JUMP JUMPDEST SWAP4 POP PUSH2 0x24EF DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1971 JUMP JUMPDEST PUSH2 0x24F8 DUP2 PUSH2 0x199B JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2518 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x1A9C JUMP JUMPDEST PUSH2 0x2525 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x1A9C JUMP JUMPDEST PUSH2 0x2532 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1BB2 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x2544 DUP2 DUP5 PUSH2 0x24CA JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x255E DUP2 PUSH2 0x18C6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x257A JUMPI PUSH2 0x2579 PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2588 DUP5 DUP3 DUP6 ADD PUSH2 0x254F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP10 SIGNEXTEND DUP4 EXTCODESIZE 0xF6 0xDE CALLCODE 0x22 0xDC 0xDF DUP11 PUSH31 0x75CBD7BC6AF5953D31717801D0762BFF0D318AF864736F6C63430008130033 ","sourceMap":"329:332:34:-:0;;;454:49;;;;;;;;;;1390:113:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1464:5;1456;:13;;;;;;:::i;:::-;;1489:7;1479;:17;;;;;;:::i;:::-;;1390:113;;329:332:34;;7:99:36;59:6;93:5;87:12;77:22;;7:99;;;:::o;112:180::-;160:77;157:1;150:88;257:4;254:1;247:15;281:4;278:1;271:15;298:180;346:77;343:1;336:88;443:4;440:1;433:15;467:4;464:1;457:15;484:320;528:6;565:1;559:4;555:12;545:22;;612:1;606:4;602:12;633:18;623:81;;689:4;681:6;677:17;667:27;;623:81;751:2;743:6;740:14;720:18;717:38;714:84;;770:18;;:::i;:::-;714:84;535:269;484:320;;;:::o;810:141::-;859:4;882:3;874:11;;905:3;902:1;895:14;939:4;936:1;926:18;918:26;;810:141;;;:::o;957:93::-;994:6;1041:2;1036;1029:5;1025:14;1021:23;1011:33;;957:93;;;:::o;1056:107::-;1100:8;1150:5;1144:4;1140:16;1119:37;;1056:107;;;;:::o;1169:393::-;1238:6;1288:1;1276:10;1272:18;1311:97;1341:66;1330:9;1311:97;:::i;:::-;1429:39;1459:8;1448:9;1429:39;:::i;:::-;1417:51;;1501:4;1497:9;1490:5;1486:21;1477:30;;1550:4;1540:8;1536:19;1529:5;1526:30;1516:40;;1245:317;;1169:393;;;;;:::o;1568:77::-;1605:7;1634:5;1623:16;;1568:77;;;:::o;1651:60::-;1679:3;1700:5;1693:12;;1651:60;;;:::o;1717:142::-;1767:9;1800:53;1818:34;1827:24;1845:5;1827:24;:::i;:::-;1818:34;:::i;:::-;1800:53;:::i;:::-;1787:66;;1717:142;;;:::o;1865:75::-;1908:3;1929:5;1922:12;;1865:75;;;:::o;1946:269::-;2056:39;2087:7;2056:39;:::i;:::-;2117:91;2166:41;2190:16;2166:41;:::i;:::-;2158:6;2151:4;2145:11;2117:91;:::i;:::-;2111:4;2104:105;2022:193;1946:269;;;:::o;2221:73::-;2266:3;2221:73;:::o;2300:189::-;2377:32;;:::i;:::-;2418:65;2476:6;2468;2462:4;2418:65;:::i;:::-;2353:136;2300:189;;:::o;2495:186::-;2555:120;2572:3;2565:5;2562:14;2555:120;;;2626:39;2663:1;2656:5;2626:39;:::i;:::-;2599:1;2592:5;2588:13;2579:22;;2555:120;;;2495:186;;:::o;2687:543::-;2788:2;2783:3;2780:11;2777:446;;;2822:38;2854:5;2822:38;:::i;:::-;2906:29;2924:10;2906:29;:::i;:::-;2896:8;2892:44;3089:2;3077:10;3074:18;3071:49;;;3110:8;3095:23;;3071:49;3133:80;3189:22;3207:3;3189:22;:::i;:::-;3179:8;3175:37;3162:11;3133:80;:::i;:::-;2792:431;;2777:446;2687:543;;;:::o;3236:117::-;3290:8;3340:5;3334:4;3330:16;3309:37;;3236:117;;;;:::o;3359:169::-;3403:6;3436:51;3484:1;3480:6;3472:5;3469:1;3465:13;3436:51;:::i;:::-;3432:56;3517:4;3511;3507:15;3497:25;;3410:118;3359:169;;;;:::o;3533:295::-;3609:4;3755:29;3780:3;3774:4;3755:29;:::i;:::-;3747:37;;3817:3;3814:1;3810:11;3804:4;3801:21;3793:29;;3533:295;;;;:::o;3833:1395::-;3950:37;3983:3;3950:37;:::i;:::-;4052:18;4044:6;4041:30;4038:56;;;4074:18;;:::i;:::-;4038:56;4118:38;4150:4;4144:11;4118:38;:::i;:::-;4203:67;4263:6;4255;4249:4;4203:67;:::i;:::-;4297:1;4321:4;4308:17;;4353:2;4345:6;4342:14;4370:1;4365:618;;;;5027:1;5044:6;5041:77;;;5093:9;5088:3;5084:19;5078:26;5069:35;;5041:77;5144:67;5204:6;5197:5;5144:67;:::i;:::-;5138:4;5131:81;5000:222;4335:887;;4365:618;4417:4;4413:9;4405:6;4401:22;4451:37;4483:4;4451:37;:::i;:::-;4510:1;4524:208;4538:7;4535:1;4532:14;4524:208;;;4617:9;4612:3;4608:19;4602:26;4594:6;4587:42;4668:1;4660:6;4656:14;4646:24;;4715:2;4704:9;4700:18;4687:31;;4561:4;4558:1;4554:12;4549:17;;4524:208;;;4760:6;4751:7;4748:19;4745:179;;;4818:9;4813:3;4809:19;4803:26;4861:48;4903:4;4895:6;4891:17;4880:9;4861:48;:::i;:::-;4853:6;4846:64;4768:156;4745:179;4970:1;4966;4958:6;4954:14;4950:22;4944:4;4937:36;4372:611;;;4335:887;;3925:1303;;;3833:1395;;:::o;329:332:34:-;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_afterTokenTransfer_2001":{"entryPoint":5301,"id":2001,"parameterSlots":4,"returnSlots":0},"@_approve_1867":{"entryPoint":2808,"id":1867,"parameterSlots":2,"returnSlots":0},"@_baseURI_1304":{"entryPoint":4997,"id":1304,"parameterSlots":0,"returnSlots":1},"@_beforeTokenTransfer_1988":{"entryPoint":5295,"id":1988,"parameterSlots":4,"returnSlots":0},"@_checkOnERC721Received_1975":{"entryPoint":5307,"id":1975,"parameterSlots":4,"returnSlots":1},"@_exists_1536":{"entryPoint":5230,"id":1536,"parameterSlots":1,"returnSlots":1},"@_isApprovedOrOwner_1570":{"entryPoint":2993,"id":1570,"parameterSlots":2,"returnSlots":1},"@_mint_1691":{"entryPoint":4000,"id":1691,"parameterSlots":2,"returnSlots":0},"@_msgSender_2676":{"entryPoint":2800,"id":2676,"parameterSlots":0,"returnSlots":1},"@_ownerOf_1518":{"entryPoint":3903,"id":1518,"parameterSlots":1,"returnSlots":1},"@_requireMinted_1913":{"entryPoint":2725,"id":1913,"parameterSlots":1,"returnSlots":0},"@_safeTransfer_1505":{"entryPoint":4905,"id":1505,"parameterSlots":4,"returnSlots":0},"@_setApprovalForAll_1899":{"entryPoint":4541,"id":1899,"parameterSlots":3,"returnSlots":0},"@_transfer_1843":{"entryPoint":3142,"id":1843,"parameterSlots":3,"returnSlots":0},"@approve_1347":{"entryPoint":1050,"id":1347,"parameterSlots":2,"returnSlots":0},"@balanceOf_1208":{"entryPoint":1591,"id":1208,"parameterSlots":1,"returnSlots":1},"@createToken_4346":{"entryPoint":1920,"id":4346,"parameterSlots":0,"returnSlots":0},"@current_2704":{"entryPoint":3986,"id":2704,"parameterSlots":1,"returnSlots":1},"@getApproved_1365":{"entryPoint":980,"id":1365,"parameterSlots":1,"returnSlots":1},"@increment_2718":{"entryPoint":3964,"id":2718,"parameterSlots":1,"returnSlots":0},"@isApprovedForAll_1400":{"entryPoint":2351,"id":1400,"parameterSlots":2,"returnSlots":1},"@isContract_2352":{"entryPoint":5904,"id":2352,"parameterSlots":1,"returnSlots":1},"@log10_4032":{"entryPoint":5939,"id":4032,"parameterSlots":1,"returnSlots":1},"@name_1246":{"entryPoint":834,"id":1246,"parameterSlots":0,"returnSlots":1},"@ownerOf_1236":{"entryPoint":1457,"id":1236,"parameterSlots":1,"returnSlots":1},"@safeTransferFrom_1446":{"entryPoint":1425,"id":1446,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_1476":{"entryPoint":1979,"id":1476,"parameterSlots":4,"returnSlots":0},"@setApprovalForAll_1382":{"entryPoint":1957,"id":1382,"parameterSlots":2,"returnSlots":0},"@supportsInterface_1184":{"entryPoint":2499,"id":1184,"parameterSlots":1,"returnSlots":1},"@supportsInterface_2191":{"entryPoint":737,"id":2191,"parameterSlots":1,"returnSlots":1},"@supportsInterface_3122":{"entryPoint":5124,"id":3122,"parameterSlots":1,"returnSlots":1},"@symbol_1256":{"entryPoint":1774,"id":1256,"parameterSlots":0,"returnSlots":1},"@toString_2929":{"entryPoint":5698,"id":2929,"parameterSlots":1,"returnSlots":1},"@tokenURI_1295":{"entryPoint":5020,"id":1295,"parameterSlots":1,"returnSlots":1},"@tokenURI_2250":{"entryPoint":2077,"id":2250,"parameterSlots":1,"returnSlots":1},"@transferFrom_1427":{"entryPoint":1329,"id":1427,"parameterSlots":3,"returnSlots":0},"abi_decode_available_length_t_bytes_memory_ptr":{"entryPoint":7437,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":6877,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bool":{"entryPoint":7155,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":6365,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4_fromMemory":{"entryPoint":9551,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_memory_ptr":{"entryPoint":7503,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint256":{"entryPoint":6696,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":7045,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":7680,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":6962,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr":{"entryPoint":7549,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_addresst_bool":{"entryPoint":7176,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":6898,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":6386,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":9572,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":6717,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":6812,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":6443,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":9418,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack":{"entryPoint":6572,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":8543,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack":{"entryPoint":8211,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack":{"entryPoint":9323,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack":{"entryPoint":8707,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack":{"entryPoint":9069,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack":{"entryPoint":8853,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack":{"entryPoint":9177,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack":{"entryPoint":8465,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack":{"entryPoint":8961,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack":{"entryPoint":8319,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack":{"entryPoint":7919,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack":{"entryPoint":8065,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_t_uint256_to_t_uint256_fromStack":{"entryPoint":7090,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":8592,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":6827,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":9475,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":6458,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":6629,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8246,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9358,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8742,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9104,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8888,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":9212,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8500,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8996,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8354,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7954,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8100,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":7105,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":7346,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":6278,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_bytes_memory_ptr":{"entryPoint":7373,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":9390,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_string_memory_ptr":{"entryPoint":6485,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":9401,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_fromStack":{"entryPoint":6496,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack":{"entryPoint":8532,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":6794,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":6431,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":6298,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":6762,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint256":{"entryPoint":6663,"id":null,"parameterSlots":1,"returnSlots":1},"copy_calldata_to_memory_with_cleanup":{"entryPoint":7422,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":6513,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":7791,"id":null,"parameterSlots":1,"returnSlots":1},"finalize_allocation":{"entryPoint":7297,"id":null,"parameterSlots":2,"returnSlots":0},"panic_error_0x12":{"entryPoint":9617,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x22":{"entryPoint":7744,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":7250,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":7240,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":7245,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":6293,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":6288,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":6555,"id":null,"parameterSlots":1,"returnSlots":1},"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af":{"entryPoint":8132,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e":{"entryPoint":9244,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48":{"entryPoint":8628,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57":{"entryPoint":9028,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4":{"entryPoint":8774,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05":{"entryPoint":9136,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159":{"entryPoint":8386,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6":{"entryPoint":8920,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f":{"entryPoint":8278,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942":{"entryPoint":7840,"id":null,"parameterSlots":1,"returnSlots":0},"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83":{"entryPoint":7986,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":6854,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":7132,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":6342,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint256":{"entryPoint":6673,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:25116:36","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:36","statements":[{"nodeType":"YulAssignment","src":"57:19:36","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:36","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:36"},"nodeType":"YulFunctionCall","src":"67:9:36"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:36"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:36","type":""}],"src":"7:75:36"},{"body":{"nodeType":"YulBlock","src":"177:28:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:36"},"nodeType":"YulFunctionCall","src":"187:12:36"},"nodeType":"YulExpressionStatement","src":"187:12:36"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:36"},{"body":{"nodeType":"YulBlock","src":"300:28:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:36"},"nodeType":"YulFunctionCall","src":"310:12:36"},"nodeType":"YulExpressionStatement","src":"310:12:36"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:36"},{"body":{"nodeType":"YulBlock","src":"378:105:36","statements":[{"nodeType":"YulAssignment","src":"388:89:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"403:5:36"},{"kind":"number","nodeType":"YulLiteral","src":"410:66:36","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"399:3:36"},"nodeType":"YulFunctionCall","src":"399:78:36"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"388:7:36"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"360:5:36","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"370:7:36","type":""}],"src":"334:149:36"},{"body":{"nodeType":"YulBlock","src":"531:78:36","statements":[{"body":{"nodeType":"YulBlock","src":"587:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"596:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"599:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"589:6:36"},"nodeType":"YulFunctionCall","src":"589:12:36"},"nodeType":"YulExpressionStatement","src":"589:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"554:5:36"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"578:5:36"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"561:16:36"},"nodeType":"YulFunctionCall","src":"561:23:36"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"551:2:36"},"nodeType":"YulFunctionCall","src":"551:34:36"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"544:6:36"},"nodeType":"YulFunctionCall","src":"544:42:36"},"nodeType":"YulIf","src":"541:62:36"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"524:5:36","type":""}],"src":"489:120:36"},{"body":{"nodeType":"YulBlock","src":"666:86:36","statements":[{"nodeType":"YulAssignment","src":"676:29:36","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"698:6:36"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"685:12:36"},"nodeType":"YulFunctionCall","src":"685:20:36"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"676:5:36"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"740:5:36"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"714:25:36"},"nodeType":"YulFunctionCall","src":"714:32:36"},"nodeType":"YulExpressionStatement","src":"714:32:36"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"644:6:36","type":""},{"name":"end","nodeType":"YulTypedName","src":"652:3:36","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"660:5:36","type":""}],"src":"615:137:36"},{"body":{"nodeType":"YulBlock","src":"823:262:36","statements":[{"body":{"nodeType":"YulBlock","src":"869:83:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"871:77:36"},"nodeType":"YulFunctionCall","src":"871:79:36"},"nodeType":"YulExpressionStatement","src":"871:79:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"844:7:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"853:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"840:3:36"},"nodeType":"YulFunctionCall","src":"840:23:36"},{"kind":"number","nodeType":"YulLiteral","src":"865:2:36","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"836:3:36"},"nodeType":"YulFunctionCall","src":"836:32:36"},"nodeType":"YulIf","src":"833:119:36"},{"nodeType":"YulBlock","src":"962:116:36","statements":[{"nodeType":"YulVariableDeclaration","src":"977:15:36","value":{"kind":"number","nodeType":"YulLiteral","src":"991:1:36","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"981:6:36","type":""}]},{"nodeType":"YulAssignment","src":"1006:62:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1040:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"1051:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1036:3:36"},"nodeType":"YulFunctionCall","src":"1036:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1060:7:36"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"1016:19:36"},"nodeType":"YulFunctionCall","src":"1016:52:36"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1006:6:36"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"793:9:36","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"804:7:36","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"816:6:36","type":""}],"src":"758:327:36"},{"body":{"nodeType":"YulBlock","src":"1133:48:36","statements":[{"nodeType":"YulAssignment","src":"1143:32:36","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1168:5:36"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1161:6:36"},"nodeType":"YulFunctionCall","src":"1161:13:36"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1154:6:36"},"nodeType":"YulFunctionCall","src":"1154:21:36"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1143:7:36"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1115:5:36","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1125:7:36","type":""}],"src":"1091:90:36"},{"body":{"nodeType":"YulBlock","src":"1246:50:36","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1263:3:36"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1283:5:36"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"1268:14:36"},"nodeType":"YulFunctionCall","src":"1268:21:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1256:6:36"},"nodeType":"YulFunctionCall","src":"1256:34:36"},"nodeType":"YulExpressionStatement","src":"1256:34:36"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1234:5:36","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1241:3:36","type":""}],"src":"1187:109:36"},{"body":{"nodeType":"YulBlock","src":"1394:118:36","statements":[{"nodeType":"YulAssignment","src":"1404:26:36","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1416:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"1427:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1412:3:36"},"nodeType":"YulFunctionCall","src":"1412:18:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1404:4:36"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1478:6:36"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1491:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"1502:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1487:3:36"},"nodeType":"YulFunctionCall","src":"1487:17:36"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"1440:37:36"},"nodeType":"YulFunctionCall","src":"1440:65:36"},"nodeType":"YulExpressionStatement","src":"1440:65:36"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1366:9:36","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1378:6:36","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1389:4:36","type":""}],"src":"1302:210:36"},{"body":{"nodeType":"YulBlock","src":"1577:40:36","statements":[{"nodeType":"YulAssignment","src":"1588:22:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1604:5:36"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1598:5:36"},"nodeType":"YulFunctionCall","src":"1598:12:36"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"1588:6:36"}]}]},"name":"array_length_t_string_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1560:5:36","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"1570:6:36","type":""}],"src":"1518:99:36"},{"body":{"nodeType":"YulBlock","src":"1719:73:36","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1736:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"1741:6:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1729:6:36"},"nodeType":"YulFunctionCall","src":"1729:19:36"},"nodeType":"YulExpressionStatement","src":"1729:19:36"},{"nodeType":"YulAssignment","src":"1757:29:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1776:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"1781:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1772:3:36"},"nodeType":"YulFunctionCall","src":"1772:14:36"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"1757:11:36"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"1691:3:36","type":""},{"name":"length","nodeType":"YulTypedName","src":"1696:6:36","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"1707:11:36","type":""}],"src":"1623:169:36"},{"body":{"nodeType":"YulBlock","src":"1860:184:36","statements":[{"nodeType":"YulVariableDeclaration","src":"1870:10:36","value":{"kind":"number","nodeType":"YulLiteral","src":"1879:1:36","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"1874:1:36","type":""}]},{"body":{"nodeType":"YulBlock","src":"1939:63:36","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"1964:3:36"},{"name":"i","nodeType":"YulIdentifier","src":"1969:1:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1960:3:36"},"nodeType":"YulFunctionCall","src":"1960:11:36"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"1983:3:36"},{"name":"i","nodeType":"YulIdentifier","src":"1988:1:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1979:3:36"},"nodeType":"YulFunctionCall","src":"1979:11:36"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"1973:5:36"},"nodeType":"YulFunctionCall","src":"1973:18:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1953:6:36"},"nodeType":"YulFunctionCall","src":"1953:39:36"},"nodeType":"YulExpressionStatement","src":"1953:39:36"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1900:1:36"},{"name":"length","nodeType":"YulIdentifier","src":"1903:6:36"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"1897:2:36"},"nodeType":"YulFunctionCall","src":"1897:13:36"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"1911:19:36","statements":[{"nodeType":"YulAssignment","src":"1913:15:36","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"1922:1:36"},{"kind":"number","nodeType":"YulLiteral","src":"1925:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1918:3:36"},"nodeType":"YulFunctionCall","src":"1918:10:36"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"1913:1:36"}]}]},"pre":{"nodeType":"YulBlock","src":"1893:3:36","statements":[]},"src":"1889:113:36"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"2022:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"2027:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2018:3:36"},"nodeType":"YulFunctionCall","src":"2018:16:36"},{"kind":"number","nodeType":"YulLiteral","src":"2036:1:36","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2011:6:36"},"nodeType":"YulFunctionCall","src":"2011:27:36"},"nodeType":"YulExpressionStatement","src":"2011:27:36"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"1842:3:36","type":""},{"name":"dst","nodeType":"YulTypedName","src":"1847:3:36","type":""},{"name":"length","nodeType":"YulTypedName","src":"1852:6:36","type":""}],"src":"1798:246:36"},{"body":{"nodeType":"YulBlock","src":"2098:54:36","statements":[{"nodeType":"YulAssignment","src":"2108:38:36","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2126:5:36"},{"kind":"number","nodeType":"YulLiteral","src":"2133:2:36","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2122:3:36"},"nodeType":"YulFunctionCall","src":"2122:14:36"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2142:2:36","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"2138:3:36"},"nodeType":"YulFunctionCall","src":"2138:7:36"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2118:3:36"},"nodeType":"YulFunctionCall","src":"2118:28:36"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"2108:6:36"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2081:5:36","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"2091:6:36","type":""}],"src":"2050:102:36"},{"body":{"nodeType":"YulBlock","src":"2250:285:36","statements":[{"nodeType":"YulVariableDeclaration","src":"2260:53:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2307:5:36"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"2274:32:36"},"nodeType":"YulFunctionCall","src":"2274:39:36"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"2264:6:36","type":""}]},{"nodeType":"YulAssignment","src":"2322:78:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2388:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"2393:6:36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2329:58:36"},"nodeType":"YulFunctionCall","src":"2329:71:36"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"2322:3:36"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2448:5:36"},{"kind":"number","nodeType":"YulLiteral","src":"2455:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2444:3:36"},"nodeType":"YulFunctionCall","src":"2444:16:36"},{"name":"pos","nodeType":"YulIdentifier","src":"2462:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"2467:6:36"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"2409:34:36"},"nodeType":"YulFunctionCall","src":"2409:65:36"},"nodeType":"YulExpressionStatement","src":"2409:65:36"},{"nodeType":"YulAssignment","src":"2483:46:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2494:3:36"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"2521:6:36"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"2499:21:36"},"nodeType":"YulFunctionCall","src":"2499:29:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2490:3:36"},"nodeType":"YulFunctionCall","src":"2490:39:36"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"2483:3:36"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2231:5:36","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2238:3:36","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"2246:3:36","type":""}],"src":"2158:377:36"},{"body":{"nodeType":"YulBlock","src":"2659:195:36","statements":[{"nodeType":"YulAssignment","src":"2669:26:36","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2681:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"2692:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2677:3:36"},"nodeType":"YulFunctionCall","src":"2677:18:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2669:4:36"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2716:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"2727:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2712:3:36"},"nodeType":"YulFunctionCall","src":"2712:17:36"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"2735:4:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"2741:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2731:3:36"},"nodeType":"YulFunctionCall","src":"2731:20:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2705:6:36"},"nodeType":"YulFunctionCall","src":"2705:47:36"},"nodeType":"YulExpressionStatement","src":"2705:47:36"},{"nodeType":"YulAssignment","src":"2761:86:36","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2833:6:36"},{"name":"tail","nodeType":"YulIdentifier","src":"2842:4:36"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"2769:63:36"},"nodeType":"YulFunctionCall","src":"2769:78:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2761:4:36"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2631:9:36","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2643:6:36","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2654:4:36","type":""}],"src":"2541:313:36"},{"body":{"nodeType":"YulBlock","src":"2905:32:36","statements":[{"nodeType":"YulAssignment","src":"2915:16:36","value":{"name":"value","nodeType":"YulIdentifier","src":"2926:5:36"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2915:7:36"}]}]},"name":"cleanup_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2887:5:36","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"2897:7:36","type":""}],"src":"2860:77:36"},{"body":{"nodeType":"YulBlock","src":"2986:79:36","statements":[{"body":{"nodeType":"YulBlock","src":"3043:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3052:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3055:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3045:6:36"},"nodeType":"YulFunctionCall","src":"3045:12:36"},"nodeType":"YulExpressionStatement","src":"3045:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3009:5:36"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3034:5:36"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"3016:17:36"},"nodeType":"YulFunctionCall","src":"3016:24:36"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"3006:2:36"},"nodeType":"YulFunctionCall","src":"3006:35:36"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2999:6:36"},"nodeType":"YulFunctionCall","src":"2999:43:36"},"nodeType":"YulIf","src":"2996:63:36"}]},"name":"validator_revert_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2979:5:36","type":""}],"src":"2943:122:36"},{"body":{"nodeType":"YulBlock","src":"3123:87:36","statements":[{"nodeType":"YulAssignment","src":"3133:29:36","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3155:6:36"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3142:12:36"},"nodeType":"YulFunctionCall","src":"3142:20:36"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"3133:5:36"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3198:5:36"}],"functionName":{"name":"validator_revert_t_uint256","nodeType":"YulIdentifier","src":"3171:26:36"},"nodeType":"YulFunctionCall","src":"3171:33:36"},"nodeType":"YulExpressionStatement","src":"3171:33:36"}]},"name":"abi_decode_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"3101:6:36","type":""},{"name":"end","nodeType":"YulTypedName","src":"3109:3:36","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"3117:5:36","type":""}],"src":"3071:139:36"},{"body":{"nodeType":"YulBlock","src":"3282:263:36","statements":[{"body":{"nodeType":"YulBlock","src":"3328:83:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"3330:77:36"},"nodeType":"YulFunctionCall","src":"3330:79:36"},"nodeType":"YulExpressionStatement","src":"3330:79:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"3303:7:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"3312:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"3299:3:36"},"nodeType":"YulFunctionCall","src":"3299:23:36"},{"kind":"number","nodeType":"YulLiteral","src":"3324:2:36","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"3295:3:36"},"nodeType":"YulFunctionCall","src":"3295:32:36"},"nodeType":"YulIf","src":"3292:119:36"},{"nodeType":"YulBlock","src":"3421:117:36","statements":[{"nodeType":"YulVariableDeclaration","src":"3436:15:36","value":{"kind":"number","nodeType":"YulLiteral","src":"3450:1:36","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3440:6:36","type":""}]},{"nodeType":"YulAssignment","src":"3465:63:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3500:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"3511:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3496:3:36"},"nodeType":"YulFunctionCall","src":"3496:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3520:7:36"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"3475:20:36"},"nodeType":"YulFunctionCall","src":"3475:53:36"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3465:6:36"}]}]}]},"name":"abi_decode_tuple_t_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3252:9:36","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"3263:7:36","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"3275:6:36","type":""}],"src":"3216:329:36"},{"body":{"nodeType":"YulBlock","src":"3596:81:36","statements":[{"nodeType":"YulAssignment","src":"3606:65:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3621:5:36"},{"kind":"number","nodeType":"YulLiteral","src":"3628:42:36","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"3617:3:36"},"nodeType":"YulFunctionCall","src":"3617:54:36"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3606:7:36"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3578:5:36","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3588:7:36","type":""}],"src":"3551:126:36"},{"body":{"nodeType":"YulBlock","src":"3728:51:36","statements":[{"nodeType":"YulAssignment","src":"3738:35:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3767:5:36"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"3749:17:36"},"nodeType":"YulFunctionCall","src":"3749:24:36"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3738:7:36"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3710:5:36","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3720:7:36","type":""}],"src":"3683:96:36"},{"body":{"nodeType":"YulBlock","src":"3850:53:36","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3867:3:36"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3890:5:36"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"3872:17:36"},"nodeType":"YulFunctionCall","src":"3872:24:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3860:6:36"},"nodeType":"YulFunctionCall","src":"3860:37:36"},"nodeType":"YulExpressionStatement","src":"3860:37:36"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3838:5:36","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3845:3:36","type":""}],"src":"3785:118:36"},{"body":{"nodeType":"YulBlock","src":"4007:124:36","statements":[{"nodeType":"YulAssignment","src":"4017:26:36","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4029:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"4040:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4025:3:36"},"nodeType":"YulFunctionCall","src":"4025:18:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"4017:4:36"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"4097:6:36"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4110:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"4121:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4106:3:36"},"nodeType":"YulFunctionCall","src":"4106:17:36"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"4053:43:36"},"nodeType":"YulFunctionCall","src":"4053:71:36"},"nodeType":"YulExpressionStatement","src":"4053:71:36"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3979:9:36","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3991:6:36","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"4002:4:36","type":""}],"src":"3909:222:36"},{"body":{"nodeType":"YulBlock","src":"4180:79:36","statements":[{"body":{"nodeType":"YulBlock","src":"4237:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4246:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4249:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4239:6:36"},"nodeType":"YulFunctionCall","src":"4239:12:36"},"nodeType":"YulExpressionStatement","src":"4239:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4203:5:36"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4228:5:36"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"4210:17:36"},"nodeType":"YulFunctionCall","src":"4210:24:36"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"4200:2:36"},"nodeType":"YulFunctionCall","src":"4200:35:36"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4193:6:36"},"nodeType":"YulFunctionCall","src":"4193:43:36"},"nodeType":"YulIf","src":"4190:63:36"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4173:5:36","type":""}],"src":"4137:122:36"},{"body":{"nodeType":"YulBlock","src":"4317:87:36","statements":[{"nodeType":"YulAssignment","src":"4327:29:36","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"4349:6:36"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"4336:12:36"},"nodeType":"YulFunctionCall","src":"4336:20:36"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"4327:5:36"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4392:5:36"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"4365:26:36"},"nodeType":"YulFunctionCall","src":"4365:33:36"},"nodeType":"YulExpressionStatement","src":"4365:33:36"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"4295:6:36","type":""},{"name":"end","nodeType":"YulTypedName","src":"4303:3:36","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"4311:5:36","type":""}],"src":"4265:139:36"},{"body":{"nodeType":"YulBlock","src":"4493:391:36","statements":[{"body":{"nodeType":"YulBlock","src":"4539:83:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"4541:77:36"},"nodeType":"YulFunctionCall","src":"4541:79:36"},"nodeType":"YulExpressionStatement","src":"4541:79:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"4514:7:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"4523:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"4510:3:36"},"nodeType":"YulFunctionCall","src":"4510:23:36"},{"kind":"number","nodeType":"YulLiteral","src":"4535:2:36","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"4506:3:36"},"nodeType":"YulFunctionCall","src":"4506:32:36"},"nodeType":"YulIf","src":"4503:119:36"},{"nodeType":"YulBlock","src":"4632:117:36","statements":[{"nodeType":"YulVariableDeclaration","src":"4647:15:36","value":{"kind":"number","nodeType":"YulLiteral","src":"4661:1:36","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4651:6:36","type":""}]},{"nodeType":"YulAssignment","src":"4676:63:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4711:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"4722:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4707:3:36"},"nodeType":"YulFunctionCall","src":"4707:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4731:7:36"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"4686:20:36"},"nodeType":"YulFunctionCall","src":"4686:53:36"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"4676:6:36"}]}]},{"nodeType":"YulBlock","src":"4759:118:36","statements":[{"nodeType":"YulVariableDeclaration","src":"4774:16:36","value":{"kind":"number","nodeType":"YulLiteral","src":"4788:2:36","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"4778:6:36","type":""}]},{"nodeType":"YulAssignment","src":"4804:63:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"4839:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"4850:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4835:3:36"},"nodeType":"YulFunctionCall","src":"4835:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"4859:7:36"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"4814:20:36"},"nodeType":"YulFunctionCall","src":"4814:53:36"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"4804:6:36"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4455:9:36","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4466:7:36","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4478:6:36","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4486:6:36","type":""}],"src":"4410:474:36"},{"body":{"nodeType":"YulBlock","src":"4990:519:36","statements":[{"body":{"nodeType":"YulBlock","src":"5036:83:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5038:77:36"},"nodeType":"YulFunctionCall","src":"5038:79:36"},"nodeType":"YulExpressionStatement","src":"5038:79:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5011:7:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"5020:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5007:3:36"},"nodeType":"YulFunctionCall","src":"5007:23:36"},{"kind":"number","nodeType":"YulLiteral","src":"5032:2:36","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5003:3:36"},"nodeType":"YulFunctionCall","src":"5003:32:36"},"nodeType":"YulIf","src":"5000:119:36"},{"nodeType":"YulBlock","src":"5129:117:36","statements":[{"nodeType":"YulVariableDeclaration","src":"5144:15:36","value":{"kind":"number","nodeType":"YulLiteral","src":"5158:1:36","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5148:6:36","type":""}]},{"nodeType":"YulAssignment","src":"5173:63:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5208:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"5219:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5204:3:36"},"nodeType":"YulFunctionCall","src":"5204:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5228:7:36"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5183:20:36"},"nodeType":"YulFunctionCall","src":"5183:53:36"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5173:6:36"}]}]},{"nodeType":"YulBlock","src":"5256:118:36","statements":[{"nodeType":"YulVariableDeclaration","src":"5271:16:36","value":{"kind":"number","nodeType":"YulLiteral","src":"5285:2:36","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5275:6:36","type":""}]},{"nodeType":"YulAssignment","src":"5301:63:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5336:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"5347:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5332:3:36"},"nodeType":"YulFunctionCall","src":"5332:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5356:7:36"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5311:20:36"},"nodeType":"YulFunctionCall","src":"5311:53:36"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"5301:6:36"}]}]},{"nodeType":"YulBlock","src":"5384:118:36","statements":[{"nodeType":"YulVariableDeclaration","src":"5399:16:36","value":{"kind":"number","nodeType":"YulLiteral","src":"5413:2:36","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5403:6:36","type":""}]},{"nodeType":"YulAssignment","src":"5429:63:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5464:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"5475:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5460:3:36"},"nodeType":"YulFunctionCall","src":"5460:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5484:7:36"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"5439:20:36"},"nodeType":"YulFunctionCall","src":"5439:53:36"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"5429:6:36"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"4944:9:36","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"4955:7:36","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"4967:6:36","type":""},{"name":"value1","nodeType":"YulTypedName","src":"4975:6:36","type":""},{"name":"value2","nodeType":"YulTypedName","src":"4983:6:36","type":""}],"src":"4890:619:36"},{"body":{"nodeType":"YulBlock","src":"5581:263:36","statements":[{"body":{"nodeType":"YulBlock","src":"5627:83:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"5629:77:36"},"nodeType":"YulFunctionCall","src":"5629:79:36"},"nodeType":"YulExpressionStatement","src":"5629:79:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"5602:7:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"5611:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5598:3:36"},"nodeType":"YulFunctionCall","src":"5598:23:36"},{"kind":"number","nodeType":"YulLiteral","src":"5623:2:36","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"5594:3:36"},"nodeType":"YulFunctionCall","src":"5594:32:36"},"nodeType":"YulIf","src":"5591:119:36"},{"nodeType":"YulBlock","src":"5720:117:36","statements":[{"nodeType":"YulVariableDeclaration","src":"5735:15:36","value":{"kind":"number","nodeType":"YulLiteral","src":"5749:1:36","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"5739:6:36","type":""}]},{"nodeType":"YulAssignment","src":"5764:63:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5799:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"5810:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5795:3:36"},"nodeType":"YulFunctionCall","src":"5795:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"5819:7:36"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"5774:20:36"},"nodeType":"YulFunctionCall","src":"5774:53:36"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"5764:6:36"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5551:9:36","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5562:7:36","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"5574:6:36","type":""}],"src":"5515:329:36"},{"body":{"nodeType":"YulBlock","src":"5915:53:36","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5932:3:36"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5955:5:36"}],"functionName":{"name":"cleanup_t_uint256","nodeType":"YulIdentifier","src":"5937:17:36"},"nodeType":"YulFunctionCall","src":"5937:24:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5925:6:36"},"nodeType":"YulFunctionCall","src":"5925:37:36"},"nodeType":"YulExpressionStatement","src":"5925:37:36"}]},"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5903:5:36","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5910:3:36","type":""}],"src":"5850:118:36"},{"body":{"nodeType":"YulBlock","src":"6072:124:36","statements":[{"nodeType":"YulAssignment","src":"6082:26:36","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6094:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"6105:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6090:3:36"},"nodeType":"YulFunctionCall","src":"6090:18:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6082:4:36"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6162:6:36"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6175:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"6186:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6171:3:36"},"nodeType":"YulFunctionCall","src":"6171:17:36"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"6118:43:36"},"nodeType":"YulFunctionCall","src":"6118:71:36"},"nodeType":"YulExpressionStatement","src":"6118:71:36"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6044:9:36","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6056:6:36","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6067:4:36","type":""}],"src":"5974:222:36"},{"body":{"nodeType":"YulBlock","src":"6242:76:36","statements":[{"body":{"nodeType":"YulBlock","src":"6296:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"6305:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"6308:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"6298:6:36"},"nodeType":"YulFunctionCall","src":"6298:12:36"},"nodeType":"YulExpressionStatement","src":"6298:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6265:5:36"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6287:5:36"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"6272:14:36"},"nodeType":"YulFunctionCall","src":"6272:21:36"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"6262:2:36"},"nodeType":"YulFunctionCall","src":"6262:32:36"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"6255:6:36"},"nodeType":"YulFunctionCall","src":"6255:40:36"},"nodeType":"YulIf","src":"6252:60:36"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"6235:5:36","type":""}],"src":"6202:116:36"},{"body":{"nodeType":"YulBlock","src":"6373:84:36","statements":[{"nodeType":"YulAssignment","src":"6383:29:36","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"6405:6:36"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"6392:12:36"},"nodeType":"YulFunctionCall","src":"6392:20:36"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"6383:5:36"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6445:5:36"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"6421:23:36"},"nodeType":"YulFunctionCall","src":"6421:30:36"},"nodeType":"YulExpressionStatement","src":"6421:30:36"}]},"name":"abi_decode_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"6351:6:36","type":""},{"name":"end","nodeType":"YulTypedName","src":"6359:3:36","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"6367:5:36","type":""}],"src":"6324:133:36"},{"body":{"nodeType":"YulBlock","src":"6543:388:36","statements":[{"body":{"nodeType":"YulBlock","src":"6589:83:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6591:77:36"},"nodeType":"YulFunctionCall","src":"6591:79:36"},"nodeType":"YulExpressionStatement","src":"6591:79:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6564:7:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"6573:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6560:3:36"},"nodeType":"YulFunctionCall","src":"6560:23:36"},{"kind":"number","nodeType":"YulLiteral","src":"6585:2:36","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6556:3:36"},"nodeType":"YulFunctionCall","src":"6556:32:36"},"nodeType":"YulIf","src":"6553:119:36"},{"nodeType":"YulBlock","src":"6682:117:36","statements":[{"nodeType":"YulVariableDeclaration","src":"6697:15:36","value":{"kind":"number","nodeType":"YulLiteral","src":"6711:1:36","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6701:6:36","type":""}]},{"nodeType":"YulAssignment","src":"6726:63:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6761:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"6772:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6757:3:36"},"nodeType":"YulFunctionCall","src":"6757:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6781:7:36"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"6736:20:36"},"nodeType":"YulFunctionCall","src":"6736:53:36"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6726:6:36"}]}]},{"nodeType":"YulBlock","src":"6809:115:36","statements":[{"nodeType":"YulVariableDeclaration","src":"6824:16:36","value":{"kind":"number","nodeType":"YulLiteral","src":"6838:2:36","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6828:6:36","type":""}]},{"nodeType":"YulAssignment","src":"6854:60:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6886:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"6897:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6882:3:36"},"nodeType":"YulFunctionCall","src":"6882:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6906:7:36"}],"functionName":{"name":"abi_decode_t_bool","nodeType":"YulIdentifier","src":"6864:17:36"},"nodeType":"YulFunctionCall","src":"6864:50:36"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"6854:6:36"}]}]}]},"name":"abi_decode_tuple_t_addresst_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6505:9:36","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"6516:7:36","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6528:6:36","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6536:6:36","type":""}],"src":"6463:468:36"},{"body":{"nodeType":"YulBlock","src":"7026:28:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7043:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7046:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7036:6:36"},"nodeType":"YulFunctionCall","src":"7036:12:36"},"nodeType":"YulExpressionStatement","src":"7036:12:36"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"6937:117:36"},{"body":{"nodeType":"YulBlock","src":"7149:28:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7166:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7169:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7159:6:36"},"nodeType":"YulFunctionCall","src":"7159:12:36"},"nodeType":"YulExpressionStatement","src":"7159:12:36"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"7060:117:36"},{"body":{"nodeType":"YulBlock","src":"7211:152:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7228:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7231:77:36","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7221:6:36"},"nodeType":"YulFunctionCall","src":"7221:88:36"},"nodeType":"YulExpressionStatement","src":"7221:88:36"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7325:1:36","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"7328:4:36","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7318:6:36"},"nodeType":"YulFunctionCall","src":"7318:15:36"},"nodeType":"YulExpressionStatement","src":"7318:15:36"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7349:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"7352:4:36","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"7342:6:36"},"nodeType":"YulFunctionCall","src":"7342:15:36"},"nodeType":"YulExpressionStatement","src":"7342:15:36"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"7183:180:36"},{"body":{"nodeType":"YulBlock","src":"7412:238:36","statements":[{"nodeType":"YulVariableDeclaration","src":"7422:58:36","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7444:6:36"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"7474:4:36"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"7452:21:36"},"nodeType":"YulFunctionCall","src":"7452:27:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7440:3:36"},"nodeType":"YulFunctionCall","src":"7440:40:36"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"7426:10:36","type":""}]},{"body":{"nodeType":"YulBlock","src":"7591:22:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"7593:16:36"},"nodeType":"YulFunctionCall","src":"7593:18:36"},"nodeType":"YulExpressionStatement","src":"7593:18:36"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"7534:10:36"},{"kind":"number","nodeType":"YulLiteral","src":"7546:18:36","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7531:2:36"},"nodeType":"YulFunctionCall","src":"7531:34:36"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"7570:10:36"},{"name":"memPtr","nodeType":"YulIdentifier","src":"7582:6:36"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7567:2:36"},"nodeType":"YulFunctionCall","src":"7567:22:36"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"7528:2:36"},"nodeType":"YulFunctionCall","src":"7528:62:36"},"nodeType":"YulIf","src":"7525:88:36"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"7629:2:36","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"7633:10:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"7622:6:36"},"nodeType":"YulFunctionCall","src":"7622:22:36"},"nodeType":"YulExpressionStatement","src":"7622:22:36"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"7398:6:36","type":""},{"name":"size","nodeType":"YulTypedName","src":"7406:4:36","type":""}],"src":"7369:281:36"},{"body":{"nodeType":"YulBlock","src":"7697:88:36","statements":[{"nodeType":"YulAssignment","src":"7707:30:36","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"7717:18:36"},"nodeType":"YulFunctionCall","src":"7717:20:36"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7707:6:36"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"7766:6:36"},{"name":"size","nodeType":"YulIdentifier","src":"7774:4:36"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"7746:19:36"},"nodeType":"YulFunctionCall","src":"7746:33:36"},"nodeType":"YulExpressionStatement","src":"7746:33:36"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"7681:4:36","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"7690:6:36","type":""}],"src":"7656:129:36"},{"body":{"nodeType":"YulBlock","src":"7857:241:36","statements":[{"body":{"nodeType":"YulBlock","src":"7962:22:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"7964:16:36"},"nodeType":"YulFunctionCall","src":"7964:18:36"},"nodeType":"YulExpressionStatement","src":"7964:18:36"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"7934:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"7942:18:36","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"7931:2:36"},"nodeType":"YulFunctionCall","src":"7931:30:36"},"nodeType":"YulIf","src":"7928:56:36"},{"nodeType":"YulAssignment","src":"7994:37:36","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8024:6:36"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"8002:21:36"},"nodeType":"YulFunctionCall","src":"8002:29:36"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"7994:4:36"}]},{"nodeType":"YulAssignment","src":"8068:23:36","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"8080:4:36"},{"kind":"number","nodeType":"YulLiteral","src":"8086:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8076:3:36"},"nodeType":"YulFunctionCall","src":"8076:15:36"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"8068:4:36"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"7841:6:36","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"7852:4:36","type":""}],"src":"7791:307:36"},{"body":{"nodeType":"YulBlock","src":"8168:82:36","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"8191:3:36"},{"name":"src","nodeType":"YulIdentifier","src":"8196:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"8201:6:36"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"8178:12:36"},"nodeType":"YulFunctionCall","src":"8178:30:36"},"nodeType":"YulExpressionStatement","src":"8178:30:36"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"8228:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"8233:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8224:3:36"},"nodeType":"YulFunctionCall","src":"8224:16:36"},{"kind":"number","nodeType":"YulLiteral","src":"8242:1:36","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8217:6:36"},"nodeType":"YulFunctionCall","src":"8217:27:36"},"nodeType":"YulExpressionStatement","src":"8217:27:36"}]},"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"8150:3:36","type":""},{"name":"dst","nodeType":"YulTypedName","src":"8155:3:36","type":""},{"name":"length","nodeType":"YulTypedName","src":"8160:6:36","type":""}],"src":"8104:146:36"},{"body":{"nodeType":"YulBlock","src":"8339:340:36","statements":[{"nodeType":"YulAssignment","src":"8349:74:36","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"8415:6:36"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"8374:40:36"},"nodeType":"YulFunctionCall","src":"8374:48:36"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"8358:15:36"},"nodeType":"YulFunctionCall","src":"8358:65:36"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"8349:5:36"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"8439:5:36"},{"name":"length","nodeType":"YulIdentifier","src":"8446:6:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8432:6:36"},"nodeType":"YulFunctionCall","src":"8432:21:36"},"nodeType":"YulExpressionStatement","src":"8432:21:36"},{"nodeType":"YulVariableDeclaration","src":"8462:27:36","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"8477:5:36"},{"kind":"number","nodeType":"YulLiteral","src":"8484:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8473:3:36"},"nodeType":"YulFunctionCall","src":"8473:16:36"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"8466:3:36","type":""}]},{"body":{"nodeType":"YulBlock","src":"8527:83:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"8529:77:36"},"nodeType":"YulFunctionCall","src":"8529:79:36"},"nodeType":"YulExpressionStatement","src":"8529:79:36"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8508:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"8513:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8504:3:36"},"nodeType":"YulFunctionCall","src":"8504:16:36"},{"name":"end","nodeType":"YulIdentifier","src":"8522:3:36"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"8501:2:36"},"nodeType":"YulFunctionCall","src":"8501:25:36"},"nodeType":"YulIf","src":"8498:112:36"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"8656:3:36"},{"name":"dst","nodeType":"YulIdentifier","src":"8661:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"8666:6:36"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"8619:36:36"},"nodeType":"YulFunctionCall","src":"8619:54:36"},"nodeType":"YulExpressionStatement","src":"8619:54:36"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"8312:3:36","type":""},{"name":"length","nodeType":"YulTypedName","src":"8317:6:36","type":""},{"name":"end","nodeType":"YulTypedName","src":"8325:3:36","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"8333:5:36","type":""}],"src":"8256:423:36"},{"body":{"nodeType":"YulBlock","src":"8759:277:36","statements":[{"body":{"nodeType":"YulBlock","src":"8808:83:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"8810:77:36"},"nodeType":"YulFunctionCall","src":"8810:79:36"},"nodeType":"YulExpressionStatement","src":"8810:79:36"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8787:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"8795:4:36","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8783:3:36"},"nodeType":"YulFunctionCall","src":"8783:17:36"},{"name":"end","nodeType":"YulIdentifier","src":"8802:3:36"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8779:3:36"},"nodeType":"YulFunctionCall","src":"8779:27:36"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8772:6:36"},"nodeType":"YulFunctionCall","src":"8772:35:36"},"nodeType":"YulIf","src":"8769:122:36"},{"nodeType":"YulVariableDeclaration","src":"8900:34:36","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8927:6:36"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8914:12:36"},"nodeType":"YulFunctionCall","src":"8914:20:36"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"8904:6:36","type":""}]},{"nodeType":"YulAssignment","src":"8943:87:36","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9003:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"9011:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8999:3:36"},"nodeType":"YulFunctionCall","src":"8999:17:36"},{"name":"length","nodeType":"YulIdentifier","src":"9018:6:36"},{"name":"end","nodeType":"YulIdentifier","src":"9026:3:36"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"8952:46:36"},"nodeType":"YulFunctionCall","src":"8952:78:36"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"8943:5:36"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"8737:6:36","type":""},{"name":"end","nodeType":"YulTypedName","src":"8745:3:36","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"8753:5:36","type":""}],"src":"8698:338:36"},{"body":{"nodeType":"YulBlock","src":"9168:817:36","statements":[{"body":{"nodeType":"YulBlock","src":"9215:83:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"9217:77:36"},"nodeType":"YulFunctionCall","src":"9217:79:36"},"nodeType":"YulExpressionStatement","src":"9217:79:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"9189:7:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"9198:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"9185:3:36"},"nodeType":"YulFunctionCall","src":"9185:23:36"},{"kind":"number","nodeType":"YulLiteral","src":"9210:3:36","type":"","value":"128"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"9181:3:36"},"nodeType":"YulFunctionCall","src":"9181:33:36"},"nodeType":"YulIf","src":"9178:120:36"},{"nodeType":"YulBlock","src":"9308:117:36","statements":[{"nodeType":"YulVariableDeclaration","src":"9323:15:36","value":{"kind":"number","nodeType":"YulLiteral","src":"9337:1:36","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9327:6:36","type":""}]},{"nodeType":"YulAssignment","src":"9352:63:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9387:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"9398:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9383:3:36"},"nodeType":"YulFunctionCall","src":"9383:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9407:7:36"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"9362:20:36"},"nodeType":"YulFunctionCall","src":"9362:53:36"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9352:6:36"}]}]},{"nodeType":"YulBlock","src":"9435:118:36","statements":[{"nodeType":"YulVariableDeclaration","src":"9450:16:36","value":{"kind":"number","nodeType":"YulLiteral","src":"9464:2:36","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9454:6:36","type":""}]},{"nodeType":"YulAssignment","src":"9480:63:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9515:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"9526:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9511:3:36"},"nodeType":"YulFunctionCall","src":"9511:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9535:7:36"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"9490:20:36"},"nodeType":"YulFunctionCall","src":"9490:53:36"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"9480:6:36"}]}]},{"nodeType":"YulBlock","src":"9563:118:36","statements":[{"nodeType":"YulVariableDeclaration","src":"9578:16:36","value":{"kind":"number","nodeType":"YulLiteral","src":"9592:2:36","type":"","value":"64"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9582:6:36","type":""}]},{"nodeType":"YulAssignment","src":"9608:63:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9643:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"9654:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9639:3:36"},"nodeType":"YulFunctionCall","src":"9639:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9663:7:36"}],"functionName":{"name":"abi_decode_t_uint256","nodeType":"YulIdentifier","src":"9618:20:36"},"nodeType":"YulFunctionCall","src":"9618:53:36"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"9608:6:36"}]}]},{"nodeType":"YulBlock","src":"9691:287:36","statements":[{"nodeType":"YulVariableDeclaration","src":"9706:46:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9737:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"9748:2:36","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9733:3:36"},"nodeType":"YulFunctionCall","src":"9733:18:36"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9720:12:36"},"nodeType":"YulFunctionCall","src":"9720:32:36"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9710:6:36","type":""}]},{"body":{"nodeType":"YulBlock","src":"9799:83:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"9801:77:36"},"nodeType":"YulFunctionCall","src":"9801:79:36"},"nodeType":"YulExpressionStatement","src":"9801:79:36"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9771:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"9779:18:36","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9768:2:36"},"nodeType":"YulFunctionCall","src":"9768:30:36"},"nodeType":"YulIf","src":"9765:117:36"},{"nodeType":"YulAssignment","src":"9896:72:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9940:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"9951:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9936:3:36"},"nodeType":"YulFunctionCall","src":"9936:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9960:7:36"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"9906:29:36"},"nodeType":"YulFunctionCall","src":"9906:62:36"},"variableNames":[{"name":"value3","nodeType":"YulIdentifier","src":"9896:6:36"}]}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"9114:9:36","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"9125:7:36","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"9137:6:36","type":""},{"name":"value1","nodeType":"YulTypedName","src":"9145:6:36","type":""},{"name":"value2","nodeType":"YulTypedName","src":"9153:6:36","type":""},{"name":"value3","nodeType":"YulTypedName","src":"9161:6:36","type":""}],"src":"9042:943:36"},{"body":{"nodeType":"YulBlock","src":"10074:391:36","statements":[{"body":{"nodeType":"YulBlock","src":"10120:83:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"10122:77:36"},"nodeType":"YulFunctionCall","src":"10122:79:36"},"nodeType":"YulExpressionStatement","src":"10122:79:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"10095:7:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"10104:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"10091:3:36"},"nodeType":"YulFunctionCall","src":"10091:23:36"},{"kind":"number","nodeType":"YulLiteral","src":"10116:2:36","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"10087:3:36"},"nodeType":"YulFunctionCall","src":"10087:32:36"},"nodeType":"YulIf","src":"10084:119:36"},{"nodeType":"YulBlock","src":"10213:117:36","statements":[{"nodeType":"YulVariableDeclaration","src":"10228:15:36","value":{"kind":"number","nodeType":"YulLiteral","src":"10242:1:36","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10232:6:36","type":""}]},{"nodeType":"YulAssignment","src":"10257:63:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10292:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"10303:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10288:3:36"},"nodeType":"YulFunctionCall","src":"10288:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10312:7:36"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"10267:20:36"},"nodeType":"YulFunctionCall","src":"10267:53:36"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"10257:6:36"}]}]},{"nodeType":"YulBlock","src":"10340:118:36","statements":[{"nodeType":"YulVariableDeclaration","src":"10355:16:36","value":{"kind":"number","nodeType":"YulLiteral","src":"10369:2:36","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"10359:6:36","type":""}]},{"nodeType":"YulAssignment","src":"10385:63:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"10420:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"10431:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10416:3:36"},"nodeType":"YulFunctionCall","src":"10416:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"10440:7:36"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"10395:20:36"},"nodeType":"YulFunctionCall","src":"10395:53:36"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"10385:6:36"}]}]}]},"name":"abi_decode_tuple_t_addresst_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"10036:9:36","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"10047:7:36","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"10059:6:36","type":""},{"name":"value1","nodeType":"YulTypedName","src":"10067:6:36","type":""}],"src":"9991:474:36"},{"body":{"nodeType":"YulBlock","src":"10499:152:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10516:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10519:77:36","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10509:6:36"},"nodeType":"YulFunctionCall","src":"10509:88:36"},"nodeType":"YulExpressionStatement","src":"10509:88:36"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10613:1:36","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"10616:4:36","type":"","value":"0x22"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10606:6:36"},"nodeType":"YulFunctionCall","src":"10606:15:36"},"nodeType":"YulExpressionStatement","src":"10606:15:36"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10637:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"10640:4:36","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"10630:6:36"},"nodeType":"YulFunctionCall","src":"10630:15:36"},"nodeType":"YulExpressionStatement","src":"10630:15:36"}]},"name":"panic_error_0x22","nodeType":"YulFunctionDefinition","src":"10471:180:36"},{"body":{"nodeType":"YulBlock","src":"10708:269:36","statements":[{"nodeType":"YulAssignment","src":"10718:22:36","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"10732:4:36"},{"kind":"number","nodeType":"YulLiteral","src":"10738:1:36","type":"","value":"2"}],"functionName":{"name":"div","nodeType":"YulIdentifier","src":"10728:3:36"},"nodeType":"YulFunctionCall","src":"10728:12:36"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"10718:6:36"}]},{"nodeType":"YulVariableDeclaration","src":"10749:38:36","value":{"arguments":[{"name":"data","nodeType":"YulIdentifier","src":"10779:4:36"},{"kind":"number","nodeType":"YulLiteral","src":"10785:1:36","type":"","value":"1"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10775:3:36"},"nodeType":"YulFunctionCall","src":"10775:12:36"},"variables":[{"name":"outOfPlaceEncoding","nodeType":"YulTypedName","src":"10753:18:36","type":""}]},{"body":{"nodeType":"YulBlock","src":"10826:51:36","statements":[{"nodeType":"YulAssignment","src":"10840:27:36","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10854:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"10862:4:36","type":"","value":"0x7f"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10850:3:36"},"nodeType":"YulFunctionCall","src":"10850:17:36"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"10840:6:36"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"10806:18:36"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"10799:6:36"},"nodeType":"YulFunctionCall","src":"10799:26:36"},"nodeType":"YulIf","src":"10796:81:36"},{"body":{"nodeType":"YulBlock","src":"10929:42:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x22","nodeType":"YulIdentifier","src":"10943:16:36"},"nodeType":"YulFunctionCall","src":"10943:18:36"},"nodeType":"YulExpressionStatement","src":"10943:18:36"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nodeType":"YulIdentifier","src":"10893:18:36"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10916:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"10924:2:36","type":"","value":"32"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"10913:2:36"},"nodeType":"YulFunctionCall","src":"10913:14:36"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"10890:2:36"},"nodeType":"YulFunctionCall","src":"10890:38:36"},"nodeType":"YulIf","src":"10887:84:36"}]},"name":"extract_byte_array_length","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nodeType":"YulTypedName","src":"10692:4:36","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"10701:6:36","type":""}],"src":"10657:320:36"},{"body":{"nodeType":"YulBlock","src":"11089:114:36","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11111:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"11119:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11107:3:36"},"nodeType":"YulFunctionCall","src":"11107:14:36"},{"hexValue":"4552433732313a20617070726f76616c20746f2063757272656e74206f776e65","kind":"string","nodeType":"YulLiteral","src":"11123:34:36","type":"","value":"ERC721: approval to current owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11100:6:36"},"nodeType":"YulFunctionCall","src":"11100:58:36"},"nodeType":"YulExpressionStatement","src":"11100:58:36"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"11179:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"11187:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11175:3:36"},"nodeType":"YulFunctionCall","src":"11175:15:36"},{"hexValue":"72","kind":"string","nodeType":"YulLiteral","src":"11192:3:36","type":"","value":"r"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11168:6:36"},"nodeType":"YulFunctionCall","src":"11168:28:36"},"nodeType":"YulExpressionStatement","src":"11168:28:36"}]},"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"11081:6:36","type":""}],"src":"10983:220:36"},{"body":{"nodeType":"YulBlock","src":"11355:220:36","statements":[{"nodeType":"YulAssignment","src":"11365:74:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11431:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"11436:2:36","type":"","value":"33"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11372:58:36"},"nodeType":"YulFunctionCall","src":"11372:67:36"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11365:3:36"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11537:3:36"}],"functionName":{"name":"store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942","nodeType":"YulIdentifier","src":"11448:88:36"},"nodeType":"YulFunctionCall","src":"11448:93:36"},"nodeType":"YulExpressionStatement","src":"11448:93:36"},{"nodeType":"YulAssignment","src":"11550:19:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11561:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"11566:2:36","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11557:3:36"},"nodeType":"YulFunctionCall","src":"11557:12:36"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"11550:3:36"}]}]},"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"11343:3:36","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11351:3:36","type":""}],"src":"11209:366:36"},{"body":{"nodeType":"YulBlock","src":"11752:248:36","statements":[{"nodeType":"YulAssignment","src":"11762:26:36","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11774:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"11785:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11770:3:36"},"nodeType":"YulFunctionCall","src":"11770:18:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11762:4:36"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"11809:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"11820:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11805:3:36"},"nodeType":"YulFunctionCall","src":"11805:17:36"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11828:4:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"11834:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"11824:3:36"},"nodeType":"YulFunctionCall","src":"11824:20:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"11798:6:36"},"nodeType":"YulFunctionCall","src":"11798:47:36"},"nodeType":"YulExpressionStatement","src":"11798:47:36"},{"nodeType":"YulAssignment","src":"11854:139:36","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"11988:4:36"}],"functionName":{"name":"abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"11862:124:36"},"nodeType":"YulFunctionCall","src":"11862:131:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"11854:4:36"}]}]},"name":"abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"11732:9:36","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"11747:4:36","type":""}],"src":"11581:419:36"},{"body":{"nodeType":"YulBlock","src":"12112:142:36","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12134:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"12142:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12130:3:36"},"nodeType":"YulFunctionCall","src":"12130:14:36"},{"hexValue":"4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f","kind":"string","nodeType":"YulLiteral","src":"12146:34:36","type":"","value":"ERC721: approve caller is not to"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12123:6:36"},"nodeType":"YulFunctionCall","src":"12123:58:36"},"nodeType":"YulExpressionStatement","src":"12123:58:36"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"12202:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"12210:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12198:3:36"},"nodeType":"YulFunctionCall","src":"12198:15:36"},{"hexValue":"6b656e206f776e6572206f7220617070726f76656420666f7220616c6c","kind":"string","nodeType":"YulLiteral","src":"12215:31:36","type":"","value":"ken owner or approved for all"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12191:6:36"},"nodeType":"YulFunctionCall","src":"12191:56:36"},"nodeType":"YulExpressionStatement","src":"12191:56:36"}]},"name":"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"12104:6:36","type":""}],"src":"12006:248:36"},{"body":{"nodeType":"YulBlock","src":"12406:220:36","statements":[{"nodeType":"YulAssignment","src":"12416:74:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12482:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"12487:2:36","type":"","value":"61"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12423:58:36"},"nodeType":"YulFunctionCall","src":"12423:67:36"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12416:3:36"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12588:3:36"}],"functionName":{"name":"store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83","nodeType":"YulIdentifier","src":"12499:88:36"},"nodeType":"YulFunctionCall","src":"12499:93:36"},"nodeType":"YulExpressionStatement","src":"12499:93:36"},{"nodeType":"YulAssignment","src":"12601:19:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12612:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"12617:2:36","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12608:3:36"},"nodeType":"YulFunctionCall","src":"12608:12:36"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12601:3:36"}]}]},"name":"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12394:3:36","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12402:3:36","type":""}],"src":"12260:366:36"},{"body":{"nodeType":"YulBlock","src":"12803:248:36","statements":[{"nodeType":"YulAssignment","src":"12813:26:36","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12825:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"12836:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12821:3:36"},"nodeType":"YulFunctionCall","src":"12821:18:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12813:4:36"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"12860:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"12871:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12856:3:36"},"nodeType":"YulFunctionCall","src":"12856:17:36"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"12879:4:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"12885:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"12875:3:36"},"nodeType":"YulFunctionCall","src":"12875:20:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12849:6:36"},"nodeType":"YulFunctionCall","src":"12849:47:36"},"nodeType":"YulExpressionStatement","src":"12849:47:36"},{"nodeType":"YulAssignment","src":"12905:139:36","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13039:4:36"}],"functionName":{"name":"abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"12913:124:36"},"nodeType":"YulFunctionCall","src":"12913:131:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"12905:4:36"}]}]},"name":"abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"12783:9:36","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"12798:4:36","type":""}],"src":"12632:419:36"},{"body":{"nodeType":"YulBlock","src":"13163:126:36","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13185:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"13193:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13181:3:36"},"nodeType":"YulFunctionCall","src":"13181:14:36"},{"hexValue":"4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e65","kind":"string","nodeType":"YulLiteral","src":"13197:34:36","type":"","value":"ERC721: caller is not token owne"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13174:6:36"},"nodeType":"YulFunctionCall","src":"13174:58:36"},"nodeType":"YulExpressionStatement","src":"13174:58:36"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"13253:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"13261:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13249:3:36"},"nodeType":"YulFunctionCall","src":"13249:15:36"},{"hexValue":"72206f7220617070726f766564","kind":"string","nodeType":"YulLiteral","src":"13266:15:36","type":"","value":"r or approved"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13242:6:36"},"nodeType":"YulFunctionCall","src":"13242:40:36"},"nodeType":"YulExpressionStatement","src":"13242:40:36"}]},"name":"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"13155:6:36","type":""}],"src":"13057:232:36"},{"body":{"nodeType":"YulBlock","src":"13441:220:36","statements":[{"nodeType":"YulAssignment","src":"13451:74:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13517:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"13522:2:36","type":"","value":"45"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13458:58:36"},"nodeType":"YulFunctionCall","src":"13458:67:36"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13451:3:36"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13623:3:36"}],"functionName":{"name":"store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af","nodeType":"YulIdentifier","src":"13534:88:36"},"nodeType":"YulFunctionCall","src":"13534:93:36"},"nodeType":"YulExpressionStatement","src":"13534:93:36"},{"nodeType":"YulAssignment","src":"13636:19:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13647:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"13652:2:36","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13643:3:36"},"nodeType":"YulFunctionCall","src":"13643:12:36"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13636:3:36"}]}]},"name":"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"13429:3:36","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13437:3:36","type":""}],"src":"13295:366:36"},{"body":{"nodeType":"YulBlock","src":"13838:248:36","statements":[{"nodeType":"YulAssignment","src":"13848:26:36","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13860:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"13871:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13856:3:36"},"nodeType":"YulFunctionCall","src":"13856:18:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13848:4:36"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"13895:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"13906:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13891:3:36"},"nodeType":"YulFunctionCall","src":"13891:17:36"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13914:4:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"13920:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13910:3:36"},"nodeType":"YulFunctionCall","src":"13910:20:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13884:6:36"},"nodeType":"YulFunctionCall","src":"13884:47:36"},"nodeType":"YulExpressionStatement","src":"13884:47:36"},{"nodeType":"YulAssignment","src":"13940:139:36","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14074:4:36"}],"functionName":{"name":"abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"13948:124:36"},"nodeType":"YulFunctionCall","src":"13948:131:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13940:4:36"}]}]},"name":"abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"13818:9:36","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"13833:4:36","type":""}],"src":"13667:419:36"},{"body":{"nodeType":"YulBlock","src":"14198:68:36","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"14220:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"14228:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14216:3:36"},"nodeType":"YulFunctionCall","src":"14216:14:36"},{"hexValue":"4552433732313a20696e76616c696420746f6b656e204944","kind":"string","nodeType":"YulLiteral","src":"14232:26:36","type":"","value":"ERC721: invalid token ID"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14209:6:36"},"nodeType":"YulFunctionCall","src":"14209:50:36"},"nodeType":"YulExpressionStatement","src":"14209:50:36"}]},"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"14190:6:36","type":""}],"src":"14092:174:36"},{"body":{"nodeType":"YulBlock","src":"14418:220:36","statements":[{"nodeType":"YulAssignment","src":"14428:74:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14494:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"14499:2:36","type":"","value":"24"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14435:58:36"},"nodeType":"YulFunctionCall","src":"14435:67:36"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"14428:3:36"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14600:3:36"}],"functionName":{"name":"store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f","nodeType":"YulIdentifier","src":"14511:88:36"},"nodeType":"YulFunctionCall","src":"14511:93:36"},"nodeType":"YulExpressionStatement","src":"14511:93:36"},{"nodeType":"YulAssignment","src":"14613:19:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14624:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"14629:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14620:3:36"},"nodeType":"YulFunctionCall","src":"14620:12:36"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14613:3:36"}]}]},"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"14406:3:36","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"14414:3:36","type":""}],"src":"14272:366:36"},{"body":{"nodeType":"YulBlock","src":"14815:248:36","statements":[{"nodeType":"YulAssignment","src":"14825:26:36","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14837:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"14848:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14833:3:36"},"nodeType":"YulFunctionCall","src":"14833:18:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14825:4:36"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14872:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"14883:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14868:3:36"},"nodeType":"YulFunctionCall","src":"14868:17:36"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14891:4:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"14897:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14887:3:36"},"nodeType":"YulFunctionCall","src":"14887:20:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14861:6:36"},"nodeType":"YulFunctionCall","src":"14861:47:36"},"nodeType":"YulExpressionStatement","src":"14861:47:36"},{"nodeType":"YulAssignment","src":"14917:139:36","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15051:4:36"}],"functionName":{"name":"abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14925:124:36"},"nodeType":"YulFunctionCall","src":"14925:131:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14917:4:36"}]}]},"name":"abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14795:9:36","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14810:4:36","type":""}],"src":"14644:419:36"},{"body":{"nodeType":"YulBlock","src":"15175:122:36","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15197:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"15205:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15193:3:36"},"nodeType":"YulFunctionCall","src":"15193:14:36"},{"hexValue":"4552433732313a2061646472657373207a65726f206973206e6f742061207661","kind":"string","nodeType":"YulLiteral","src":"15209:34:36","type":"","value":"ERC721: address zero is not a va"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15186:6:36"},"nodeType":"YulFunctionCall","src":"15186:58:36"},"nodeType":"YulExpressionStatement","src":"15186:58:36"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15265:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"15273:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15261:3:36"},"nodeType":"YulFunctionCall","src":"15261:15:36"},{"hexValue":"6c6964206f776e6572","kind":"string","nodeType":"YulLiteral","src":"15278:11:36","type":"","value":"lid owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15254:6:36"},"nodeType":"YulFunctionCall","src":"15254:36:36"},"nodeType":"YulExpressionStatement","src":"15254:36:36"}]},"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"15167:6:36","type":""}],"src":"15069:228:36"},{"body":{"nodeType":"YulBlock","src":"15449:220:36","statements":[{"nodeType":"YulAssignment","src":"15459:74:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15525:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"15530:2:36","type":"","value":"41"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15466:58:36"},"nodeType":"YulFunctionCall","src":"15466:67:36"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"15459:3:36"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15631:3:36"}],"functionName":{"name":"store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159","nodeType":"YulIdentifier","src":"15542:88:36"},"nodeType":"YulFunctionCall","src":"15542:93:36"},"nodeType":"YulExpressionStatement","src":"15542:93:36"},{"nodeType":"YulAssignment","src":"15644:19:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"15655:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"15660:2:36","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15651:3:36"},"nodeType":"YulFunctionCall","src":"15651:12:36"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"15644:3:36"}]}]},"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"15437:3:36","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"15445:3:36","type":""}],"src":"15303:366:36"},{"body":{"nodeType":"YulBlock","src":"15846:248:36","statements":[{"nodeType":"YulAssignment","src":"15856:26:36","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15868:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"15879:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15864:3:36"},"nodeType":"YulFunctionCall","src":"15864:18:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15856:4:36"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"15903:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"15914:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15899:3:36"},"nodeType":"YulFunctionCall","src":"15899:17:36"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"15922:4:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"15928:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"15918:3:36"},"nodeType":"YulFunctionCall","src":"15918:20:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15892:6:36"},"nodeType":"YulFunctionCall","src":"15892:47:36"},"nodeType":"YulExpressionStatement","src":"15892:47:36"},{"nodeType":"YulAssignment","src":"15948:139:36","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"16082:4:36"}],"functionName":{"name":"abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"15956:124:36"},"nodeType":"YulFunctionCall","src":"15956:131:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"15948:4:36"}]}]},"name":"abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"15826:9:36","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"15841:4:36","type":""}],"src":"15675:419:36"},{"body":{"nodeType":"YulBlock","src":"16214:34:36","statements":[{"nodeType":"YulAssignment","src":"16224:18:36","value":{"name":"pos","nodeType":"YulIdentifier","src":"16239:3:36"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"16224:11:36"}]}]},"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16186:3:36","type":""},{"name":"length","nodeType":"YulTypedName","src":"16191:6:36","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"16202:11:36","type":""}],"src":"16100:148:36"},{"body":{"nodeType":"YulBlock","src":"16364:280:36","statements":[{"nodeType":"YulVariableDeclaration","src":"16374:53:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16421:5:36"}],"functionName":{"name":"array_length_t_string_memory_ptr","nodeType":"YulIdentifier","src":"16388:32:36"},"nodeType":"YulFunctionCall","src":"16388:39:36"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"16378:6:36","type":""}]},{"nodeType":"YulAssignment","src":"16436:96:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16520:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"16525:6:36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"16443:76:36"},"nodeType":"YulFunctionCall","src":"16443:89:36"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16436:3:36"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"16580:5:36"},{"kind":"number","nodeType":"YulLiteral","src":"16587:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16576:3:36"},"nodeType":"YulFunctionCall","src":"16576:16:36"},{"name":"pos","nodeType":"YulIdentifier","src":"16594:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"16599:6:36"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"16541:34:36"},"nodeType":"YulFunctionCall","src":"16541:65:36"},"nodeType":"YulExpressionStatement","src":"16541:65:36"},{"nodeType":"YulAssignment","src":"16615:23:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"16626:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"16631:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16622:3:36"},"nodeType":"YulFunctionCall","src":"16622:16:36"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"16615:3:36"}]}]},"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"16345:5:36","type":""},{"name":"pos","nodeType":"YulTypedName","src":"16352:3:36","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16360:3:36","type":""}],"src":"16254:390:36"},{"body":{"nodeType":"YulBlock","src":"16834:251:36","statements":[{"nodeType":"YulAssignment","src":"16845:102:36","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"16934:6:36"},{"name":"pos","nodeType":"YulIdentifier","src":"16943:3:36"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"16852:81:36"},"nodeType":"YulFunctionCall","src":"16852:95:36"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16845:3:36"}]},{"nodeType":"YulAssignment","src":"16957:102:36","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"17046:6:36"},{"name":"pos","nodeType":"YulIdentifier","src":"17055:3:36"}],"functionName":{"name":"abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack","nodeType":"YulIdentifier","src":"16964:81:36"},"nodeType":"YulFunctionCall","src":"16964:95:36"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"16957:3:36"}]},{"nodeType":"YulAssignment","src":"17069:10:36","value":{"name":"pos","nodeType":"YulIdentifier","src":"17076:3:36"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17069:3:36"}]}]},"name":"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"16805:3:36","type":""},{"name":"value1","nodeType":"YulTypedName","src":"16811:6:36","type":""},{"name":"value0","nodeType":"YulTypedName","src":"16819:6:36","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"16830:3:36","type":""}],"src":"16650:435:36"},{"body":{"nodeType":"YulBlock","src":"17197:118:36","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17219:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"17227:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17215:3:36"},"nodeType":"YulFunctionCall","src":"17215:14:36"},{"hexValue":"4552433732313a207472616e736665722066726f6d20696e636f727265637420","kind":"string","nodeType":"YulLiteral","src":"17231:34:36","type":"","value":"ERC721: transfer from incorrect "}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17208:6:36"},"nodeType":"YulFunctionCall","src":"17208:58:36"},"nodeType":"YulExpressionStatement","src":"17208:58:36"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"17287:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"17295:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17283:3:36"},"nodeType":"YulFunctionCall","src":"17283:15:36"},{"hexValue":"6f776e6572","kind":"string","nodeType":"YulLiteral","src":"17300:7:36","type":"","value":"owner"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17276:6:36"},"nodeType":"YulFunctionCall","src":"17276:32:36"},"nodeType":"YulExpressionStatement","src":"17276:32:36"}]},"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"17189:6:36","type":""}],"src":"17091:224:36"},{"body":{"nodeType":"YulBlock","src":"17467:220:36","statements":[{"nodeType":"YulAssignment","src":"17477:74:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17543:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"17548:2:36","type":"","value":"37"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17484:58:36"},"nodeType":"YulFunctionCall","src":"17484:67:36"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"17477:3:36"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17649:3:36"}],"functionName":{"name":"store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48","nodeType":"YulIdentifier","src":"17560:88:36"},"nodeType":"YulFunctionCall","src":"17560:93:36"},"nodeType":"YulExpressionStatement","src":"17560:93:36"},{"nodeType":"YulAssignment","src":"17662:19:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"17673:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"17678:2:36","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17669:3:36"},"nodeType":"YulFunctionCall","src":"17669:12:36"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"17662:3:36"}]}]},"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"17455:3:36","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"17463:3:36","type":""}],"src":"17321:366:36"},{"body":{"nodeType":"YulBlock","src":"17864:248:36","statements":[{"nodeType":"YulAssignment","src":"17874:26:36","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17886:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"17897:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17882:3:36"},"nodeType":"YulFunctionCall","src":"17882:18:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17874:4:36"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17921:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"17932:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17917:3:36"},"nodeType":"YulFunctionCall","src":"17917:17:36"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"17940:4:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"17946:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17936:3:36"},"nodeType":"YulFunctionCall","src":"17936:20:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"17910:6:36"},"nodeType":"YulFunctionCall","src":"17910:47:36"},"nodeType":"YulExpressionStatement","src":"17910:47:36"},{"nodeType":"YulAssignment","src":"17966:139:36","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18100:4:36"}],"functionName":{"name":"abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"17974:124:36"},"nodeType":"YulFunctionCall","src":"17974:131:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"17966:4:36"}]}]},"name":"abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17844:9:36","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17859:4:36","type":""}],"src":"17693:419:36"},{"body":{"nodeType":"YulBlock","src":"18224:117:36","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18246:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"18254:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18242:3:36"},"nodeType":"YulFunctionCall","src":"18242:14:36"},{"hexValue":"4552433732313a207472616e7366657220746f20746865207a65726f20616464","kind":"string","nodeType":"YulLiteral","src":"18258:34:36","type":"","value":"ERC721: transfer to the zero add"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18235:6:36"},"nodeType":"YulFunctionCall","src":"18235:58:36"},"nodeType":"YulExpressionStatement","src":"18235:58:36"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"18314:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"18322:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18310:3:36"},"nodeType":"YulFunctionCall","src":"18310:15:36"},{"hexValue":"72657373","kind":"string","nodeType":"YulLiteral","src":"18327:6:36","type":"","value":"ress"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18303:6:36"},"nodeType":"YulFunctionCall","src":"18303:31:36"},"nodeType":"YulExpressionStatement","src":"18303:31:36"}]},"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"18216:6:36","type":""}],"src":"18118:223:36"},{"body":{"nodeType":"YulBlock","src":"18493:220:36","statements":[{"nodeType":"YulAssignment","src":"18503:74:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18569:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"18574:2:36","type":"","value":"36"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18510:58:36"},"nodeType":"YulFunctionCall","src":"18510:67:36"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"18503:3:36"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18675:3:36"}],"functionName":{"name":"store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4","nodeType":"YulIdentifier","src":"18586:88:36"},"nodeType":"YulFunctionCall","src":"18586:93:36"},"nodeType":"YulExpressionStatement","src":"18586:93:36"},{"nodeType":"YulAssignment","src":"18688:19:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"18699:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"18704:2:36","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18695:3:36"},"nodeType":"YulFunctionCall","src":"18695:12:36"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"18688:3:36"}]}]},"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"18481:3:36","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"18489:3:36","type":""}],"src":"18347:366:36"},{"body":{"nodeType":"YulBlock","src":"18890:248:36","statements":[{"nodeType":"YulAssignment","src":"18900:26:36","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18912:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"18923:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18908:3:36"},"nodeType":"YulFunctionCall","src":"18908:18:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18900:4:36"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18947:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"18958:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18943:3:36"},"nodeType":"YulFunctionCall","src":"18943:17:36"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18966:4:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"18972:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18962:3:36"},"nodeType":"YulFunctionCall","src":"18962:20:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18936:6:36"},"nodeType":"YulFunctionCall","src":"18936:47:36"},"nodeType":"YulExpressionStatement","src":"18936:47:36"},{"nodeType":"YulAssignment","src":"18992:139:36","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19126:4:36"}],"functionName":{"name":"abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19000:124:36"},"nodeType":"YulFunctionCall","src":"19000:131:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18992:4:36"}]}]},"name":"abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18870:9:36","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"18885:4:36","type":""}],"src":"18719:419:36"},{"body":{"nodeType":"YulBlock","src":"19250:76:36","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"19272:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"19280:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19268:3:36"},"nodeType":"YulFunctionCall","src":"19268:14:36"},{"hexValue":"4552433732313a206d696e7420746f20746865207a65726f2061646472657373","kind":"string","nodeType":"YulLiteral","src":"19284:34:36","type":"","value":"ERC721: mint to the zero address"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19261:6:36"},"nodeType":"YulFunctionCall","src":"19261:58:36"},"nodeType":"YulExpressionStatement","src":"19261:58:36"}]},"name":"store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"19242:6:36","type":""}],"src":"19144:182:36"},{"body":{"nodeType":"YulBlock","src":"19478:220:36","statements":[{"nodeType":"YulAssignment","src":"19488:74:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19554:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"19559:2:36","type":"","value":"32"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19495:58:36"},"nodeType":"YulFunctionCall","src":"19495:67:36"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"19488:3:36"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19660:3:36"}],"functionName":{"name":"store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6","nodeType":"YulIdentifier","src":"19571:88:36"},"nodeType":"YulFunctionCall","src":"19571:93:36"},"nodeType":"YulExpressionStatement","src":"19571:93:36"},{"nodeType":"YulAssignment","src":"19673:19:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19684:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"19689:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19680:3:36"},"nodeType":"YulFunctionCall","src":"19680:12:36"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"19673:3:36"}]}]},"name":"abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"19466:3:36","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"19474:3:36","type":""}],"src":"19332:366:36"},{"body":{"nodeType":"YulBlock","src":"19875:248:36","statements":[{"nodeType":"YulAssignment","src":"19885:26:36","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19897:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"19908:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19893:3:36"},"nodeType":"YulFunctionCall","src":"19893:18:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19885:4:36"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19932:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"19943:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19928:3:36"},"nodeType":"YulFunctionCall","src":"19928:17:36"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"19951:4:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"19957:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"19947:3:36"},"nodeType":"YulFunctionCall","src":"19947:20:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19921:6:36"},"nodeType":"YulFunctionCall","src":"19921:47:36"},"nodeType":"YulExpressionStatement","src":"19921:47:36"},{"nodeType":"YulAssignment","src":"19977:139:36","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20111:4:36"}],"functionName":{"name":"abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"19985:124:36"},"nodeType":"YulFunctionCall","src":"19985:131:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19977:4:36"}]}]},"name":"abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19855:9:36","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19870:4:36","type":""}],"src":"19704:419:36"},{"body":{"nodeType":"YulBlock","src":"20235:72:36","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"20257:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"20265:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20253:3:36"},"nodeType":"YulFunctionCall","src":"20253:14:36"},{"hexValue":"4552433732313a20746f6b656e20616c7265616479206d696e746564","kind":"string","nodeType":"YulLiteral","src":"20269:30:36","type":"","value":"ERC721: token already minted"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20246:6:36"},"nodeType":"YulFunctionCall","src":"20246:54:36"},"nodeType":"YulExpressionStatement","src":"20246:54:36"}]},"name":"store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"20227:6:36","type":""}],"src":"20129:178:36"},{"body":{"nodeType":"YulBlock","src":"20459:220:36","statements":[{"nodeType":"YulAssignment","src":"20469:74:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20535:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"20540:2:36","type":"","value":"28"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20476:58:36"},"nodeType":"YulFunctionCall","src":"20476:67:36"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"20469:3:36"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20641:3:36"}],"functionName":{"name":"store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57","nodeType":"YulIdentifier","src":"20552:88:36"},"nodeType":"YulFunctionCall","src":"20552:93:36"},"nodeType":"YulExpressionStatement","src":"20552:93:36"},{"nodeType":"YulAssignment","src":"20654:19:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"20665:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"20670:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20661:3:36"},"nodeType":"YulFunctionCall","src":"20661:12:36"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"20654:3:36"}]}]},"name":"abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"20447:3:36","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"20455:3:36","type":""}],"src":"20313:366:36"},{"body":{"nodeType":"YulBlock","src":"20856:248:36","statements":[{"nodeType":"YulAssignment","src":"20866:26:36","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20878:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"20889:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20874:3:36"},"nodeType":"YulFunctionCall","src":"20874:18:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20866:4:36"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"20913:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"20924:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"20909:3:36"},"nodeType":"YulFunctionCall","src":"20909:17:36"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"20932:4:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"20938:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"20928:3:36"},"nodeType":"YulFunctionCall","src":"20928:20:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"20902:6:36"},"nodeType":"YulFunctionCall","src":"20902:47:36"},"nodeType":"YulExpressionStatement","src":"20902:47:36"},{"nodeType":"YulAssignment","src":"20958:139:36","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21092:4:36"}],"functionName":{"name":"abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"20966:124:36"},"nodeType":"YulFunctionCall","src":"20966:131:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"20958:4:36"}]}]},"name":"abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"20836:9:36","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"20851:4:36","type":""}],"src":"20685:419:36"},{"body":{"nodeType":"YulBlock","src":"21216:69:36","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"21238:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"21246:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21234:3:36"},"nodeType":"YulFunctionCall","src":"21234:14:36"},{"hexValue":"4552433732313a20617070726f766520746f2063616c6c6572","kind":"string","nodeType":"YulLiteral","src":"21250:27:36","type":"","value":"ERC721: approve to caller"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21227:6:36"},"nodeType":"YulFunctionCall","src":"21227:51:36"},"nodeType":"YulExpressionStatement","src":"21227:51:36"}]},"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"21208:6:36","type":""}],"src":"21110:175:36"},{"body":{"nodeType":"YulBlock","src":"21437:220:36","statements":[{"nodeType":"YulAssignment","src":"21447:74:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21513:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"21518:2:36","type":"","value":"25"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21454:58:36"},"nodeType":"YulFunctionCall","src":"21454:67:36"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"21447:3:36"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21619:3:36"}],"functionName":{"name":"store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05","nodeType":"YulIdentifier","src":"21530:88:36"},"nodeType":"YulFunctionCall","src":"21530:93:36"},"nodeType":"YulExpressionStatement","src":"21530:93:36"},{"nodeType":"YulAssignment","src":"21632:19:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"21643:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"21648:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21639:3:36"},"nodeType":"YulFunctionCall","src":"21639:12:36"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"21632:3:36"}]}]},"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"21425:3:36","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"21433:3:36","type":""}],"src":"21291:366:36"},{"body":{"nodeType":"YulBlock","src":"21834:248:36","statements":[{"nodeType":"YulAssignment","src":"21844:26:36","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21856:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"21867:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21852:3:36"},"nodeType":"YulFunctionCall","src":"21852:18:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21844:4:36"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"21891:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"21902:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"21887:3:36"},"nodeType":"YulFunctionCall","src":"21887:17:36"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"21910:4:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"21916:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"21906:3:36"},"nodeType":"YulFunctionCall","src":"21906:20:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"21880:6:36"},"nodeType":"YulFunctionCall","src":"21880:47:36"},"nodeType":"YulExpressionStatement","src":"21880:47:36"},{"nodeType":"YulAssignment","src":"21936:139:36","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22070:4:36"}],"functionName":{"name":"abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"21944:124:36"},"nodeType":"YulFunctionCall","src":"21944:131:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"21936:4:36"}]}]},"name":"abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"21814:9:36","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"21829:4:36","type":""}],"src":"21663:419:36"},{"body":{"nodeType":"YulBlock","src":"22194:131:36","statements":[{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22216:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"22224:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22212:3:36"},"nodeType":"YulFunctionCall","src":"22212:14:36"},{"hexValue":"4552433732313a207472616e7366657220746f206e6f6e204552433732315265","kind":"string","nodeType":"YulLiteral","src":"22228:34:36","type":"","value":"ERC721: transfer to non ERC721Re"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22205:6:36"},"nodeType":"YulFunctionCall","src":"22205:58:36"},"nodeType":"YulExpressionStatement","src":"22205:58:36"},{"expression":{"arguments":[{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"22284:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"22292:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22280:3:36"},"nodeType":"YulFunctionCall","src":"22280:15:36"},{"hexValue":"63656976657220696d706c656d656e746572","kind":"string","nodeType":"YulLiteral","src":"22297:20:36","type":"","value":"ceiver implementer"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22273:6:36"},"nodeType":"YulFunctionCall","src":"22273:45:36"},"nodeType":"YulExpressionStatement","src":"22273:45:36"}]},"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"22186:6:36","type":""}],"src":"22088:237:36"},{"body":{"nodeType":"YulBlock","src":"22477:220:36","statements":[{"nodeType":"YulAssignment","src":"22487:74:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22553:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"22558:2:36","type":"","value":"50"}],"functionName":{"name":"array_storeLengthForEncoding_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22494:58:36"},"nodeType":"YulFunctionCall","src":"22494:67:36"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"22487:3:36"}]},{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22659:3:36"}],"functionName":{"name":"store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e","nodeType":"YulIdentifier","src":"22570:88:36"},"nodeType":"YulFunctionCall","src":"22570:93:36"},"nodeType":"YulExpressionStatement","src":"22570:93:36"},{"nodeType":"YulAssignment","src":"22672:19:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"22683:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"22688:2:36","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22679:3:36"},"nodeType":"YulFunctionCall","src":"22679:12:36"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"22672:3:36"}]}]},"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"22465:3:36","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"22473:3:36","type":""}],"src":"22331:366:36"},{"body":{"nodeType":"YulBlock","src":"22874:248:36","statements":[{"nodeType":"YulAssignment","src":"22884:26:36","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22896:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"22907:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22892:3:36"},"nodeType":"YulFunctionCall","src":"22892:18:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22884:4:36"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"22931:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"22942:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"22927:3:36"},"nodeType":"YulFunctionCall","src":"22927:17:36"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"22950:4:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"22956:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"22946:3:36"},"nodeType":"YulFunctionCall","src":"22946:20:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"22920:6:36"},"nodeType":"YulFunctionCall","src":"22920:47:36"},"nodeType":"YulExpressionStatement","src":"22920:47:36"},{"nodeType":"YulAssignment","src":"22976:139:36","value":{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"23110:4:36"}],"functionName":{"name":"abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"22984:124:36"},"nodeType":"YulFunctionCall","src":"22984:131:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"22976:4:36"}]}]},"name":"abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"22854:9:36","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"22869:4:36","type":""}],"src":"22703:419:36"},{"body":{"nodeType":"YulBlock","src":"23186:40:36","statements":[{"nodeType":"YulAssignment","src":"23197:22:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23213:5:36"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"23207:5:36"},"nodeType":"YulFunctionCall","src":"23207:12:36"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"23197:6:36"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"23169:5:36","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"23179:6:36","type":""}],"src":"23128:98:36"},{"body":{"nodeType":"YulBlock","src":"23327:73:36","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23344:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"23349:6:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"23337:6:36"},"nodeType":"YulFunctionCall","src":"23337:19:36"},"nodeType":"YulExpressionStatement","src":"23337:19:36"},{"nodeType":"YulAssignment","src":"23365:29:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23384:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"23389:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23380:3:36"},"nodeType":"YulFunctionCall","src":"23380:14:36"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"23365:11:36"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"23299:3:36","type":""},{"name":"length","nodeType":"YulTypedName","src":"23304:6:36","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"23315:11:36","type":""}],"src":"23232:168:36"},{"body":{"nodeType":"YulBlock","src":"23496:283:36","statements":[{"nodeType":"YulVariableDeclaration","src":"23506:52:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23552:5:36"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"23520:31:36"},"nodeType":"YulFunctionCall","src":"23520:38:36"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"23510:6:36","type":""}]},{"nodeType":"YulAssignment","src":"23567:77:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23632:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"23637:6:36"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"23574:57:36"},"nodeType":"YulFunctionCall","src":"23574:70:36"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"23567:3:36"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"23692:5:36"},{"kind":"number","nodeType":"YulLiteral","src":"23699:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23688:3:36"},"nodeType":"YulFunctionCall","src":"23688:16:36"},{"name":"pos","nodeType":"YulIdentifier","src":"23706:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"23711:6:36"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"23653:34:36"},"nodeType":"YulFunctionCall","src":"23653:65:36"},"nodeType":"YulExpressionStatement","src":"23653:65:36"},{"nodeType":"YulAssignment","src":"23727:46:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"23738:3:36"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"23765:6:36"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"23743:21:36"},"nodeType":"YulFunctionCall","src":"23743:29:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"23734:3:36"},"nodeType":"YulFunctionCall","src":"23734:39:36"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"23727:3:36"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"23477:5:36","type":""},{"name":"pos","nodeType":"YulTypedName","src":"23484:3:36","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"23492:3:36","type":""}],"src":"23406:373:36"},{"body":{"nodeType":"YulBlock","src":"23985:440:36","statements":[{"nodeType":"YulAssignment","src":"23995:27:36","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24007:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"24018:3:36","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24003:3:36"},"nodeType":"YulFunctionCall","src":"24003:19:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"23995:4:36"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"24076:6:36"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24089:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"24100:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24085:3:36"},"nodeType":"YulFunctionCall","src":"24085:17:36"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"24032:43:36"},"nodeType":"YulFunctionCall","src":"24032:71:36"},"nodeType":"YulExpressionStatement","src":"24032:71:36"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"24157:6:36"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24170:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"24181:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24166:3:36"},"nodeType":"YulFunctionCall","src":"24166:18:36"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"24113:43:36"},"nodeType":"YulFunctionCall","src":"24113:72:36"},"nodeType":"YulExpressionStatement","src":"24113:72:36"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"24239:6:36"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24252:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"24263:2:36","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24248:3:36"},"nodeType":"YulFunctionCall","src":"24248:18:36"}],"functionName":{"name":"abi_encode_t_uint256_to_t_uint256_fromStack","nodeType":"YulIdentifier","src":"24195:43:36"},"nodeType":"YulFunctionCall","src":"24195:72:36"},"nodeType":"YulExpressionStatement","src":"24195:72:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24288:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"24299:2:36","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24284:3:36"},"nodeType":"YulFunctionCall","src":"24284:18:36"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"24308:4:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"24314:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"24304:3:36"},"nodeType":"YulFunctionCall","src":"24304:20:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24277:6:36"},"nodeType":"YulFunctionCall","src":"24277:48:36"},"nodeType":"YulExpressionStatement","src":"24277:48:36"},{"nodeType":"YulAssignment","src":"24334:84:36","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"24404:6:36"},{"name":"tail","nodeType":"YulIdentifier","src":"24413:4:36"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"24342:61:36"},"nodeType":"YulFunctionCall","src":"24342:76:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"24334:4:36"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"23933:9:36","type":""},{"name":"value3","nodeType":"YulTypedName","src":"23945:6:36","type":""},{"name":"value2","nodeType":"YulTypedName","src":"23953:6:36","type":""},{"name":"value1","nodeType":"YulTypedName","src":"23961:6:36","type":""},{"name":"value0","nodeType":"YulTypedName","src":"23969:6:36","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"23980:4:36","type":""}],"src":"23785:640:36"},{"body":{"nodeType":"YulBlock","src":"24493:79:36","statements":[{"nodeType":"YulAssignment","src":"24503:22:36","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"24518:6:36"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"24512:5:36"},"nodeType":"YulFunctionCall","src":"24512:13:36"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"24503:5:36"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"24560:5:36"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"24534:25:36"},"nodeType":"YulFunctionCall","src":"24534:32:36"},"nodeType":"YulExpressionStatement","src":"24534:32:36"}]},"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"24471:6:36","type":""},{"name":"end","nodeType":"YulTypedName","src":"24479:3:36","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"24487:5:36","type":""}],"src":"24431:141:36"},{"body":{"nodeType":"YulBlock","src":"24654:273:36","statements":[{"body":{"nodeType":"YulBlock","src":"24700:83:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"24702:77:36"},"nodeType":"YulFunctionCall","src":"24702:79:36"},"nodeType":"YulExpressionStatement","src":"24702:79:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"24675:7:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"24684:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"24671:3:36"},"nodeType":"YulFunctionCall","src":"24671:23:36"},{"kind":"number","nodeType":"YulLiteral","src":"24696:2:36","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"24667:3:36"},"nodeType":"YulFunctionCall","src":"24667:32:36"},"nodeType":"YulIf","src":"24664:119:36"},{"nodeType":"YulBlock","src":"24793:127:36","statements":[{"nodeType":"YulVariableDeclaration","src":"24808:15:36","value":{"kind":"number","nodeType":"YulLiteral","src":"24822:1:36","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"24812:6:36","type":""}]},{"nodeType":"YulAssignment","src":"24837:73:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"24882:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"24893:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"24878:3:36"},"nodeType":"YulFunctionCall","src":"24878:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"24902:7:36"}],"functionName":{"name":"abi_decode_t_bytes4_fromMemory","nodeType":"YulIdentifier","src":"24847:30:36"},"nodeType":"YulFunctionCall","src":"24847:63:36"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"24837:6:36"}]}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"24624:9:36","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"24635:7:36","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"24647:6:36","type":""}],"src":"24578:349:36"},{"body":{"nodeType":"YulBlock","src":"24961:152:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"24978:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"24981:77:36","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"24971:6:36"},"nodeType":"YulFunctionCall","src":"24971:88:36"},"nodeType":"YulExpressionStatement","src":"24971:88:36"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25075:1:36","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"25078:4:36","type":"","value":"0x12"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"25068:6:36"},"nodeType":"YulFunctionCall","src":"25068:15:36"},"nodeType":"YulExpressionStatement","src":"25068:15:36"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"25099:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"25102:4:36","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"25092:6:36"},"nodeType":"YulFunctionCall","src":"25092:15:36"},"nodeType":"YulExpressionStatement","src":"25092:15:36"}]},"name":"panic_error_0x12","nodeType":"YulFunctionDefinition","src":"24933:180:36"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approval to current owne\")\n\n        mstore(add(memPtr, 32), \"r\")\n\n    }\n\n    function abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 33)\n        store_literal_in_memory_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b51b4875eede07862961e8f9365c6749f5fe55c6ee5d7a9e42b6912ad0b15942_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve caller is not to\")\n\n        mstore(add(memPtr, 32), \"ken owner or approved for all\")\n\n    }\n\n    function abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 61)\n        store_literal_in_memory_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_c6e14a63ffb144eeef7cce6988e5dce07c60a7e0a7b1ef25dbe18c61483e0a83_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: caller is not token owne\")\n\n        mstore(add(memPtr, 32), \"r or approved\")\n\n    }\n\n    function abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 45)\n        store_literal_in_memory_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_12a8e5623d251e191fe4a291d9a59bcc01a4db7a1f5c20fc8de44358c18308af_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: invalid token ID\")\n\n    }\n\n    function abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 24)\n        store_literal_in_memory_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_b08d2b0fec7cc108ab049809a8beb42779d969a49299d0c317c907d9db22974f_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: address zero is not a va\")\n\n        mstore(add(memPtr, 32), \"lid owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 41)\n        store_literal_in_memory_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_6d05c90094f31cfeb8f0eb86f0a513af3f7f8992991fbde41b08aa7960677159_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer from incorrect \")\n\n        mstore(add(memPtr, 32), \"owner\")\n\n    }\n\n    function abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 37)\n        store_literal_in_memory_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_277f8ee9d5b4fc3c4149386f24de0fc1bbc63a8210e2197bfd1c0376a2ac5f48_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to the zero add\")\n\n        mstore(add(memPtr, 32), \"ress\")\n\n    }\n\n    function abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 36)\n        store_literal_in_memory_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_455fea98ea03c32d7dd1a6f1426917d80529bf47b3ccbde74e7206e889e709f4_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: mint to the zero address\")\n\n    }\n\n    function abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 32)\n        store_literal_in_memory_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_8a66f4bb6512ffbfcc3db9b42318eb65f26ac15163eaa9a1e5cfa7bee9d1c7c6_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: token already minted\")\n\n    }\n\n    function abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 28)\n        store_literal_in_memory_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_2a63ce106ef95058ed21fd07c42a10f11dc5c32ac13a4e847923f7759f635d57_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: approve to caller\")\n\n    }\n\n    function abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 25)\n        store_literal_in_memory_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05(pos)\n        end := add(pos, 32)\n    }\n\n    function abi_encode_tuple_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_45fe4329685be5ecd250fd0e6a25aea0ea4d0e30fb6a73c118b95749e6d70d05_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(memPtr) {\n\n        mstore(add(memPtr, 0), \"ERC721: transfer to non ERC721Re\")\n\n        mstore(add(memPtr, 32), \"ceiver implementer\")\n\n    }\n\n    function abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack(pos) -> end {\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, 50)\n        store_literal_in_memory_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e(pos)\n        end := add(pos, 64)\n    }\n\n    function abi_encode_tuple_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e__to_t_string_memory_ptr__fromStack_reversed(headStart ) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_stringliteral_1e766a06da43a53d0f4c380e06e5a342e14d5af1bf8501996c844905530ca84e_to_t_string_memory_ptr_fromStack( tail)\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value3,  tail)\n\n    }\n\n    function abi_decode_t_bytes4_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n}\n","id":36,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100ea5760003560e01c806370a082311161008c578063a22cb46511610066578063a22cb46514610249578063b88d4fde14610265578063c87b56dd14610281578063e985e9c5146102b1576100ea565b806370a08231146101f157806395d89b41146102215780639cbf9e361461023f576100ea565b8063095ea7b3116100c8578063095ea7b31461016d57806323b872dd1461018957806342842e0e146101a55780636352211e146101c1576100ea565b806301ffc9a7146100ef57806306fdde031461011f578063081812fc1461013d575b600080fd5b610109600480360381019061010491906118f2565b6102e1565b604051610116919061193a565b60405180910390f35b610127610342565b60405161013491906119e5565b60405180910390f35b61015760048036038101906101529190611a3d565b6103d4565b6040516101649190611aab565b60405180910390f35b61018760048036038101906101829190611af2565b61041a565b005b6101a3600480360381019061019e9190611b32565b610531565b005b6101bf60048036038101906101ba9190611b32565b610591565b005b6101db60048036038101906101d69190611a3d565b6105b1565b6040516101e89190611aab565b60405180910390f35b61020b60048036038101906102069190611b85565b610637565b6040516102189190611bc1565b60405180910390f35b6102296106ee565b60405161023691906119e5565b60405180910390f35b610247610780565b005b610263600480360381019061025e9190611c08565b6107a5565b005b61027f600480360381019061027a9190611d7d565b6107bb565b005b61029b60048036038101906102969190611a3d565b61081d565b6040516102a891906119e5565b60405180910390f35b6102cb60048036038101906102c69190611e00565b61092f565b6040516102d8919061193a565b60405180910390f35b6000634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061033b575061033a826109c3565b5b9050919050565b60606000805461035190611e6f565b80601f016020809104026020016040519081016040528092919081815260200182805461037d90611e6f565b80156103ca5780601f1061039f576101008083540402835291602001916103ca565b820191906000526020600020905b8154815290600101906020018083116103ad57829003601f168201915b5050505050905090565b60006103df82610aa5565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610425826105b1565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610495576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048c90611f12565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166104b4610af0565b73ffffffffffffffffffffffffffffffffffffffff1614806104e357506104e2816104dd610af0565b61092f565b5b610522576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051990611fa4565b60405180910390fd5b61052c8383610af8565b505050565b61054261053c610af0565b82610bb1565b610581576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057890612036565b60405180910390fd5b61058c838383610c46565b505050565b6105ac838383604051806020016040528060008152506107bb565b505050565b6000806105bd83610f3f565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361062e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610625906120a2565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036106a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069e90612134565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600180546106fd90611e6f565b80601f016020809104026020016040519081016040528092919081815260200182805461072990611e6f565b80156107765780601f1061074b57610100808354040283529160200191610776565b820191906000526020600020905b81548152906001019060200180831161075957829003601f168201915b5050505050905090565b61078a6007610f7c565b60006107966007610f92565b90506107a23382610fa0565b50565b6107b76107b0610af0565b83836111bd565b5050565b6107cc6107c6610af0565b83610bb1565b61080b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080290612036565b60405180910390fd5b61081784848484611329565b50505050565b606061082882610aa5565b600060066000848152602001908152602001600020805461084890611e6f565b80601f016020809104026020016040519081016040528092919081815260200182805461087490611e6f565b80156108c15780601f10610896576101008083540402835291602001916108c1565b820191906000526020600020905b8154815290600101906020018083116108a457829003601f168201915b5050505050905060006108d2611385565b905060008151036108e757819250505061092a565b60008251111561091c578082604051602001610904929190612190565b6040516020818303038152906040529250505061092a565b6109258461139c565b925050505b919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610a8e57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610a9e5750610a9d82611404565b5b9050919050565b610aae8161146e565b610aed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae4906120a2565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610b6b836105b1565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610bbd836105b1565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610bff5750610bfe818561092f565b5b80610c3d57508373ffffffffffffffffffffffffffffffffffffffff16610c25846103d4565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610c66826105b1565b73ffffffffffffffffffffffffffffffffffffffff1614610cbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb390612226565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d22906122b8565b60405180910390fd5b610d3883838360016114af565b8273ffffffffffffffffffffffffffffffffffffffff16610d58826105b1565b73ffffffffffffffffffffffffffffffffffffffff1614610dae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da590612226565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610f3a83838360016114b5565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6001816000016000828254019250508190555050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361100f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100690612324565b60405180910390fd5b6110188161146e565b15611058576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104f90612390565b60405180910390fd5b6110666000838360016114af565b61106f8161146e565b156110af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a690612390565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46111b96000838360016114b5565b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361122b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611222906123fc565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161131c919061193a565b60405180910390a3505050565b611334848484610c46565b611340848484846114bb565b61137f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113769061248e565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606113a782610aa5565b60006113b1611385565b905060008151116113d157604051806020016040528060008152506113fc565b806113db84611642565b6040516020016113ec929190612190565b6040516020818303038152906040525b915050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff1661149083610f3f565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b50505050565b50505050565b60006114dc8473ffffffffffffffffffffffffffffffffffffffff16611710565b15611635578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611505610af0565b8786866040518563ffffffff1660e01b81526004016115279493929190612503565b6020604051808303816000875af192505050801561156357506040513d601f19601f820116820180604052508101906115609190612564565b60015b6115e5573d8060008114611593576040519150601f19603f3d011682016040523d82523d6000602084013e611598565b606091505b5060008151036115dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115d49061248e565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061163a565b600190505b949350505050565b60606000600161165184611733565b01905060008167ffffffffffffffff8111156116705761166f611c52565b5b6040519080825280601f01601f1916602001820160405280156116a25781602001600182028036833780820191505090505b509050600082602001820190505b600115611705578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816116f9576116f8612591565b5b049450600085036116b0575b819350505050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611791577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161178757611786612591565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106117ce576d04ee2d6d415b85acef810000000083816117c4576117c3612591565b5b0492506020810190505b662386f26fc1000083106117fd57662386f26fc1000083816117f3576117f2612591565b5b0492506010810190505b6305f5e1008310611826576305f5e100838161181c5761181b612591565b5b0492506008810190505b612710831061184b57612710838161184157611840612591565b5b0492506004810190505b6064831061186e576064838161186457611863612591565b5b0492506002810190505b600a831061187d576001810190505b80915050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6118cf8161189a565b81146118da57600080fd5b50565b6000813590506118ec816118c6565b92915050565b60006020828403121561190857611907611890565b5b6000611916848285016118dd565b91505092915050565b60008115159050919050565b6119348161191f565b82525050565b600060208201905061194f600083018461192b565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561198f578082015181840152602081019050611974565b60008484015250505050565b6000601f19601f8301169050919050565b60006119b782611955565b6119c18185611960565b93506119d1818560208601611971565b6119da8161199b565b840191505092915050565b600060208201905081810360008301526119ff81846119ac565b905092915050565b6000819050919050565b611a1a81611a07565b8114611a2557600080fd5b50565b600081359050611a3781611a11565b92915050565b600060208284031215611a5357611a52611890565b5b6000611a6184828501611a28565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a9582611a6a565b9050919050565b611aa581611a8a565b82525050565b6000602082019050611ac06000830184611a9c565b92915050565b611acf81611a8a565b8114611ada57600080fd5b50565b600081359050611aec81611ac6565b92915050565b60008060408385031215611b0957611b08611890565b5b6000611b1785828601611add565b9250506020611b2885828601611a28565b9150509250929050565b600080600060608486031215611b4b57611b4a611890565b5b6000611b5986828701611add565b9350506020611b6a86828701611add565b9250506040611b7b86828701611a28565b9150509250925092565b600060208284031215611b9b57611b9a611890565b5b6000611ba984828501611add565b91505092915050565b611bbb81611a07565b82525050565b6000602082019050611bd66000830184611bb2565b92915050565b611be58161191f565b8114611bf057600080fd5b50565b600081359050611c0281611bdc565b92915050565b60008060408385031215611c1f57611c1e611890565b5b6000611c2d85828601611add565b9250506020611c3e85828601611bf3565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611c8a8261199b565b810181811067ffffffffffffffff82111715611ca957611ca8611c52565b5b80604052505050565b6000611cbc611886565b9050611cc88282611c81565b919050565b600067ffffffffffffffff821115611ce857611ce7611c52565b5b611cf18261199b565b9050602081019050919050565b82818337600083830152505050565b6000611d20611d1b84611ccd565b611cb2565b905082815260208101848484011115611d3c57611d3b611c4d565b5b611d47848285611cfe565b509392505050565b600082601f830112611d6457611d63611c48565b5b8135611d74848260208601611d0d565b91505092915050565b60008060008060808587031215611d9757611d96611890565b5b6000611da587828801611add565b9450506020611db687828801611add565b9350506040611dc787828801611a28565b925050606085013567ffffffffffffffff811115611de857611de7611895565b5b611df487828801611d4f565b91505092959194509250565b60008060408385031215611e1757611e16611890565b5b6000611e2585828601611add565b9250506020611e3685828601611add565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611e8757607f821691505b602082108103611e9a57611e99611e40565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000611efc602183611960565b9150611f0782611ea0565b604082019050919050565b60006020820190508181036000830152611f2b81611eef565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000611f8e603d83611960565b9150611f9982611f32565b604082019050919050565b60006020820190508181036000830152611fbd81611f81565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000612020602d83611960565b915061202b82611fc4565b604082019050919050565b6000602082019050818103600083015261204f81612013565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b600061208c601883611960565b915061209782612056565b602082019050919050565b600060208201905081810360008301526120bb8161207f565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b600061211e602983611960565b9150612129826120c2565b604082019050919050565b6000602082019050818103600083015261214d81612111565b9050919050565b600081905092915050565b600061216a82611955565b6121748185612154565b9350612184818560208601611971565b80840191505092915050565b600061219c828561215f565b91506121a8828461215f565b91508190509392505050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000612210602583611960565b915061221b826121b4565b604082019050919050565b6000602082019050818103600083015261223f81612203565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006122a2602483611960565b91506122ad82612246565b604082019050919050565b600060208201905081810360008301526122d181612295565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b600061230e602083611960565b9150612319826122d8565b602082019050919050565b6000602082019050818103600083015261233d81612301565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b600061237a601c83611960565b915061238582612344565b602082019050919050565b600060208201905081810360008301526123a98161236d565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b60006123e6601983611960565b91506123f1826123b0565b602082019050919050565b60006020820190508181036000830152612415816123d9565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000612478603283611960565b91506124838261241c565b604082019050919050565b600060208201905081810360008301526124a78161246b565b9050919050565b600081519050919050565b600082825260208201905092915050565b60006124d5826124ae565b6124df81856124b9565b93506124ef818560208601611971565b6124f88161199b565b840191505092915050565b60006080820190506125186000830187611a9c565b6125256020830186611a9c565b6125326040830185611bb2565b818103606083015261254481846124ca565b905095945050505050565b60008151905061255e816118c6565b92915050565b60006020828403121561257a57612579611890565b5b60006125888482850161254f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea2646970667358221220890b833bf6def222dcdf8a7e75cbd7bc6af5953d31717801d0762bff0d318af864736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xEA JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x249 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x265 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x281 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x2B1 JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1F1 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x221 JUMPI DUP1 PUSH4 0x9CBF9E36 EQ PUSH2 0x23F JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x16D JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x189 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x1A5 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x1C1 JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x11F JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x13D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x109 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x104 SWAP2 SWAP1 PUSH2 0x18F2 JUMP JUMPDEST PUSH2 0x2E1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x116 SWAP2 SWAP1 PUSH2 0x193A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x127 PUSH2 0x342 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x134 SWAP2 SWAP1 PUSH2 0x19E5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x157 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x152 SWAP2 SWAP1 PUSH2 0x1A3D JUMP JUMPDEST PUSH2 0x3D4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x164 SWAP2 SWAP1 PUSH2 0x1AAB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x187 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x182 SWAP2 SWAP1 PUSH2 0x1AF2 JUMP JUMPDEST PUSH2 0x41A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1A3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x19E SWAP2 SWAP1 PUSH2 0x1B32 JUMP JUMPDEST PUSH2 0x531 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1BF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BA SWAP2 SWAP1 PUSH2 0x1B32 JUMP JUMPDEST PUSH2 0x591 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1DB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1D6 SWAP2 SWAP1 PUSH2 0x1A3D JUMP JUMPDEST PUSH2 0x5B1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E8 SWAP2 SWAP1 PUSH2 0x1AAB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x206 SWAP2 SWAP1 PUSH2 0x1B85 JUMP JUMPDEST PUSH2 0x637 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x218 SWAP2 SWAP1 PUSH2 0x1BC1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x229 PUSH2 0x6EE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x236 SWAP2 SWAP1 PUSH2 0x19E5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x247 PUSH2 0x780 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x263 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x25E SWAP2 SWAP1 PUSH2 0x1C08 JUMP JUMPDEST PUSH2 0x7A5 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x27F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x27A SWAP2 SWAP1 PUSH2 0x1D7D JUMP JUMPDEST PUSH2 0x7BB JUMP JUMPDEST STOP JUMPDEST PUSH2 0x29B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x296 SWAP2 SWAP1 PUSH2 0x1A3D JUMP JUMPDEST PUSH2 0x81D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2A8 SWAP2 SWAP1 PUSH2 0x19E5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2CB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2C6 SWAP2 SWAP1 PUSH2 0x1E00 JUMP JUMPDEST PUSH2 0x92F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2D8 SWAP2 SWAP1 PUSH2 0x193A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH4 0x49064906 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x33B JUMPI POP PUSH2 0x33A DUP3 PUSH2 0x9C3 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x351 SWAP1 PUSH2 0x1E6F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x37D SWAP1 PUSH2 0x1E6F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3CA JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x39F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3CA JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3AD JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3DF DUP3 PUSH2 0xAA5 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x425 DUP3 PUSH2 0x5B1 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x495 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x48C SWAP1 PUSH2 0x1F12 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x4B4 PUSH2 0xAF0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x4E3 JUMPI POP PUSH2 0x4E2 DUP2 PUSH2 0x4DD PUSH2 0xAF0 JUMP JUMPDEST PUSH2 0x92F JUMP JUMPDEST JUMPDEST PUSH2 0x522 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x519 SWAP1 PUSH2 0x1FA4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x52C DUP4 DUP4 PUSH2 0xAF8 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x542 PUSH2 0x53C PUSH2 0xAF0 JUMP JUMPDEST DUP3 PUSH2 0xBB1 JUMP JUMPDEST PUSH2 0x581 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x578 SWAP1 PUSH2 0x2036 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x58C DUP4 DUP4 DUP4 PUSH2 0xC46 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x5AC DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x7BB JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x5BD DUP4 PUSH2 0xF3F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x62E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x625 SWAP1 PUSH2 0x20A2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x6A7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x69E SWAP1 PUSH2 0x2134 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x6FD SWAP1 PUSH2 0x1E6F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x729 SWAP1 PUSH2 0x1E6F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x776 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x74B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x776 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x759 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x78A PUSH1 0x7 PUSH2 0xF7C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x796 PUSH1 0x7 PUSH2 0xF92 JUMP JUMPDEST SWAP1 POP PUSH2 0x7A2 CALLER DUP3 PUSH2 0xFA0 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x7B7 PUSH2 0x7B0 PUSH2 0xAF0 JUMP JUMPDEST DUP4 DUP4 PUSH2 0x11BD JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x7CC PUSH2 0x7C6 PUSH2 0xAF0 JUMP JUMPDEST DUP4 PUSH2 0xBB1 JUMP JUMPDEST PUSH2 0x80B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x802 SWAP1 PUSH2 0x2036 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x817 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1329 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x828 DUP3 PUSH2 0xAA5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH2 0x848 SWAP1 PUSH2 0x1E6F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x874 SWAP1 PUSH2 0x1E6F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x8C1 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x896 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x8C1 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x8A4 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH2 0x8D2 PUSH2 0x1385 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x8E7 JUMPI DUP2 SWAP3 POP POP POP PUSH2 0x92A JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x91C JUMPI DUP1 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x904 SWAP3 SWAP2 SWAP1 PUSH2 0x2190 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP3 POP POP POP PUSH2 0x92A JUMP JUMPDEST PUSH2 0x925 DUP5 PUSH2 0x139C JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0xA8E JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0xA9E JUMPI POP PUSH2 0xA9D DUP3 PUSH2 0x1404 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xAAE DUP2 PUSH2 0x146E JUMP JUMPDEST PUSH2 0xAED JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xAE4 SWAP1 PUSH2 0x20A2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB6B DUP4 PUSH2 0x5B1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xBBD DUP4 PUSH2 0x5B1 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xBFF JUMPI POP PUSH2 0xBFE DUP2 DUP6 PUSH2 0x92F JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xC3D JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC25 DUP5 PUSH2 0x3D4 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC66 DUP3 PUSH2 0x5B1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCBC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB3 SWAP1 PUSH2 0x2226 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xD2B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD22 SWAP1 PUSH2 0x22B8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xD38 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x14AF JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xD58 DUP3 PUSH2 0x5B1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xDAE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDA5 SWAP1 PUSH2 0x2226 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xF3A DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x14B5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x100F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1006 SWAP1 PUSH2 0x2324 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1018 DUP2 PUSH2 0x146E JUMP JUMPDEST ISZERO PUSH2 0x1058 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x104F SWAP1 PUSH2 0x2390 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1066 PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x14AF JUMP JUMPDEST PUSH2 0x106F DUP2 PUSH2 0x146E JUMP JUMPDEST ISZERO PUSH2 0x10AF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x10A6 SWAP1 PUSH2 0x2390 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x11B9 PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x14B5 JUMP JUMPDEST POP POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x122B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1222 SWAP1 PUSH2 0x23FC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0x131C SWAP2 SWAP1 PUSH2 0x193A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x1334 DUP5 DUP5 DUP5 PUSH2 0xC46 JUMP JUMPDEST PUSH2 0x1340 DUP5 DUP5 DUP5 DUP5 PUSH2 0x14BB JUMP JUMPDEST PUSH2 0x137F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1376 SWAP1 PUSH2 0x248E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x13A7 DUP3 PUSH2 0xAA5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13B1 PUSH2 0x1385 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x13D1 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x13FC JUMP JUMPDEST DUP1 PUSH2 0x13DB DUP5 PUSH2 0x1642 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x13EC SWAP3 SWAP2 SWAP1 PUSH2 0x2190 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1490 DUP4 PUSH2 0xF3F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14DC DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1710 JUMP JUMPDEST ISZERO PUSH2 0x1635 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x1505 PUSH2 0xAF0 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1527 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2503 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1563 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1560 SWAP2 SWAP1 PUSH2 0x2564 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x15E5 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1593 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1598 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x15DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15D4 SWAP1 PUSH2 0x248E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x163A JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x1651 DUP5 PUSH2 0x1733 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1670 JUMPI PUSH2 0x166F PUSH2 0x1C52 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x16A2 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x1705 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x16F9 JUMPI PUSH2 0x16F8 PUSH2 0x2591 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 SUB PUSH2 0x16B0 JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x1791 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x1787 JUMPI PUSH2 0x1786 PUSH2 0x2591 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x17CE JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x17C4 JUMPI PUSH2 0x17C3 PUSH2 0x2591 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x17FD JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x17F3 JUMPI PUSH2 0x17F2 PUSH2 0x2591 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1826 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x181C JUMPI PUSH2 0x181B PUSH2 0x2591 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x184B JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x1841 JUMPI PUSH2 0x1840 PUSH2 0x2591 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x186E JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x1864 JUMPI PUSH2 0x1863 PUSH2 0x2591 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x187D JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x18CF DUP2 PUSH2 0x189A JUMP JUMPDEST DUP2 EQ PUSH2 0x18DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x18EC DUP2 PUSH2 0x18C6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1908 JUMPI PUSH2 0x1907 PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1916 DUP5 DUP3 DUP6 ADD PUSH2 0x18DD JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1934 DUP2 PUSH2 0x191F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x194F PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x192B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x198F JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1974 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19B7 DUP3 PUSH2 0x1955 JUMP JUMPDEST PUSH2 0x19C1 DUP2 DUP6 PUSH2 0x1960 JUMP JUMPDEST SWAP4 POP PUSH2 0x19D1 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1971 JUMP JUMPDEST PUSH2 0x19DA DUP2 PUSH2 0x199B JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x19FF DUP2 DUP5 PUSH2 0x19AC JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1A1A DUP2 PUSH2 0x1A07 JUMP JUMPDEST DUP2 EQ PUSH2 0x1A25 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1A37 DUP2 PUSH2 0x1A11 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A53 JUMPI PUSH2 0x1A52 PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1A61 DUP5 DUP3 DUP6 ADD PUSH2 0x1A28 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A95 DUP3 PUSH2 0x1A6A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1AA5 DUP2 PUSH2 0x1A8A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1AC0 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1A9C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1ACF DUP2 PUSH2 0x1A8A JUMP JUMPDEST DUP2 EQ PUSH2 0x1ADA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1AEC DUP2 PUSH2 0x1AC6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B09 JUMPI PUSH2 0x1B08 PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1B17 DUP6 DUP3 DUP7 ADD PUSH2 0x1ADD JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1B28 DUP6 DUP3 DUP7 ADD PUSH2 0x1A28 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1B4B JUMPI PUSH2 0x1B4A PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1B59 DUP7 DUP3 DUP8 ADD PUSH2 0x1ADD JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1B6A DUP7 DUP3 DUP8 ADD PUSH2 0x1ADD JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1B7B DUP7 DUP3 DUP8 ADD PUSH2 0x1A28 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B9B JUMPI PUSH2 0x1B9A PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1BA9 DUP5 DUP3 DUP6 ADD PUSH2 0x1ADD JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1BBB DUP2 PUSH2 0x1A07 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1BD6 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1BB2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1BE5 DUP2 PUSH2 0x191F JUMP JUMPDEST DUP2 EQ PUSH2 0x1BF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1C02 DUP2 PUSH2 0x1BDC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C1F JUMPI PUSH2 0x1C1E PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1C2D DUP6 DUP3 DUP7 ADD PUSH2 0x1ADD JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1C3E DUP6 DUP3 DUP7 ADD PUSH2 0x1BF3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1C8A DUP3 PUSH2 0x199B JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1CA9 JUMPI PUSH2 0x1CA8 PUSH2 0x1C52 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CBC PUSH2 0x1886 JUMP JUMPDEST SWAP1 POP PUSH2 0x1CC8 DUP3 DUP3 PUSH2 0x1C81 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1CE8 JUMPI PUSH2 0x1CE7 PUSH2 0x1C52 JUMP JUMPDEST JUMPDEST PUSH2 0x1CF1 DUP3 PUSH2 0x199B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D20 PUSH2 0x1D1B DUP5 PUSH2 0x1CCD JUMP JUMPDEST PUSH2 0x1CB2 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x1D3C JUMPI PUSH2 0x1D3B PUSH2 0x1C4D JUMP JUMPDEST JUMPDEST PUSH2 0x1D47 DUP5 DUP3 DUP6 PUSH2 0x1CFE JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1D64 JUMPI PUSH2 0x1D63 PUSH2 0x1C48 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1D74 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x1D0D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1D97 JUMPI PUSH2 0x1D96 PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1DA5 DUP8 DUP3 DUP9 ADD PUSH2 0x1ADD JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x1DB6 DUP8 DUP3 DUP9 ADD PUSH2 0x1ADD JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x1DC7 DUP8 DUP3 DUP9 ADD PUSH2 0x1A28 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1DE8 JUMPI PUSH2 0x1DE7 PUSH2 0x1895 JUMP JUMPDEST JUMPDEST PUSH2 0x1DF4 DUP8 DUP3 DUP9 ADD PUSH2 0x1D4F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1E17 JUMPI PUSH2 0x1E16 PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1E25 DUP6 DUP3 DUP7 ADD PUSH2 0x1ADD JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1E36 DUP6 DUP3 DUP7 ADD PUSH2 0x1ADD JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1E87 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1E9A JUMPI PUSH2 0x1E99 PUSH2 0x1E40 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EFC PUSH1 0x21 DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x1F07 DUP3 PUSH2 0x1EA0 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1F2B DUP2 PUSH2 0x1EEF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F8E PUSH1 0x3D DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x1F99 DUP3 PUSH2 0x1F32 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1FBD DUP2 PUSH2 0x1F81 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2020 PUSH1 0x2D DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x202B DUP3 PUSH2 0x1FC4 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x204F DUP2 PUSH2 0x2013 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x208C PUSH1 0x18 DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x2097 DUP3 PUSH2 0x2056 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x20BB DUP2 PUSH2 0x207F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x211E PUSH1 0x29 DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x2129 DUP3 PUSH2 0x20C2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x214D DUP2 PUSH2 0x2111 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x216A DUP3 PUSH2 0x1955 JUMP JUMPDEST PUSH2 0x2174 DUP2 DUP6 PUSH2 0x2154 JUMP JUMPDEST SWAP4 POP PUSH2 0x2184 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1971 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x219C DUP3 DUP6 PUSH2 0x215F JUMP JUMPDEST SWAP2 POP PUSH2 0x21A8 DUP3 DUP5 PUSH2 0x215F JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2210 PUSH1 0x25 DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x221B DUP3 PUSH2 0x21B4 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x223F DUP2 PUSH2 0x2203 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x22A2 PUSH1 0x24 DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x22AD DUP3 PUSH2 0x2246 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x22D1 DUP2 PUSH2 0x2295 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x230E PUSH1 0x20 DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x2319 DUP3 PUSH2 0x22D8 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x233D DUP2 PUSH2 0x2301 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x237A PUSH1 0x1C DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x2385 DUP3 PUSH2 0x2344 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x23A9 DUP2 PUSH2 0x236D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23E6 PUSH1 0x19 DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x23F1 DUP3 PUSH2 0x23B0 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2415 DUP2 PUSH2 0x23D9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2478 PUSH1 0x32 DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x2483 DUP3 PUSH2 0x241C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x24A7 DUP2 PUSH2 0x246B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x24D5 DUP3 PUSH2 0x24AE JUMP JUMPDEST PUSH2 0x24DF DUP2 DUP6 PUSH2 0x24B9 JUMP JUMPDEST SWAP4 POP PUSH2 0x24EF DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1971 JUMP JUMPDEST PUSH2 0x24F8 DUP2 PUSH2 0x199B JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2518 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x1A9C JUMP JUMPDEST PUSH2 0x2525 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x1A9C JUMP JUMPDEST PUSH2 0x2532 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1BB2 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x2544 DUP2 DUP5 PUSH2 0x24CA JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x255E DUP2 PUSH2 0x18C6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x257A JUMPI PUSH2 0x2579 PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2588 DUP5 DUP3 DUP6 ADD PUSH2 0x254F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP10 SIGNEXTEND DUP4 EXTCODESIZE 0xF6 0xDE CALLCODE 0x22 0xDC 0xDF DUP11 PUSH31 0x75CBD7BC6AF5953D31717801D0762BFF0D318AF864736F6C63430008130033 ","sourceMap":"329:332:34:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;535:205:22;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2471:98:19;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3935:167;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3468:406;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4612:296;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4974:149;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2190:219;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1929:204;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2633:102;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;507:148:34;;;:::i;:::-;;4169:153:19;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;5189:276;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;806:608:22;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4388:162:19;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;535:205:22;637:4;682:10;675:18;;660:33;;;:11;:33;;;;:73;;;;697:36;721:11;697:23;:36::i;:::-;660:73;653:80;;535:205;;;:::o;2471:98:19:-;2525:13;2557:5;2550:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2471:98;:::o;3935:167::-;4011:7;4030:23;4045:7;4030:14;:23::i;:::-;4071:15;:24;4087:7;4071:24;;;;;;;;;;;;;;;;;;;;;4064:31;;3935:167;;;:::o;3468:406::-;3548:13;3564:23;3579:7;3564:14;:23::i;:::-;3548:39;;3611:5;3605:11;;:2;:11;;;3597:57;;;;;;;;;;;;:::i;:::-;;;;;;;;;3702:5;3686:21;;:12;:10;:12::i;:::-;:21;;;:62;;;;3711:37;3728:5;3735:12;:10;:12::i;:::-;3711:16;:37::i;:::-;3686:62;3665:170;;;;;;;;;;;;:::i;:::-;;;;;;;;;3846:21;3855:2;3859:7;3846:8;:21::i;:::-;3538:336;3468:406;;:::o;4612:296::-;4771:41;4790:12;:10;:12::i;:::-;4804:7;4771:18;:41::i;:::-;4763:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;4873:28;4883:4;4889:2;4893:7;4873:9;:28::i;:::-;4612:296;;;:::o;4974:149::-;5077:39;5094:4;5100:2;5104:7;5077:39;;;;;;;;;;;;:16;:39::i;:::-;4974:149;;;:::o;2190:219::-;2262:7;2281:13;2297:17;2306:7;2297:8;:17::i;:::-;2281:33;;2349:1;2332:19;;:5;:19;;;2324:56;;;;;;;;;;;;:::i;:::-;;;;;;;;;2397:5;2390:12;;;2190:219;;;:::o;1929:204::-;2001:7;2045:1;2028:19;;:5;:19;;;2020:73;;;;;;;;;;;;:::i;:::-;;;;;;;;;2110:9;:16;2120:5;2110:16;;;;;;;;;;;;;;;;2103:23;;1929:204;;;:::o;2633:102::-;2689:13;2721:7;2714:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2633:102;:::o;507:148:34:-;545:21;:9;:19;:21::i;:::-;574:17;594:19;:9;:17;:19::i;:::-;574:39;;622:28;628:10;640:9;622:5;:28::i;:::-;537:118;507:148::o;4169:153:19:-;4263:52;4282:12;:10;:12::i;:::-;4296:8;4306;4263:18;:52::i;:::-;4169:153;;:::o;5189:276::-;5319:41;5338:12;:10;:12::i;:::-;5352:7;5319:18;:41::i;:::-;5311:99;;;;;;;;;;;;:::i;:::-;;;;;;;;;5420:38;5434:4;5440:2;5444:7;5453:4;5420:13;:38::i;:::-;5189:276;;;;:::o;806:608:22:-;879:13;904:23;919:7;904:14;:23::i;:::-;938;964:10;:19;975:7;964:19;;;;;;;;;;;938:45;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;993:18;1014:10;:8;:10::i;:::-;993:31;;1119:1;1103:4;1097:18;:23;1093:70;;1143:9;1136:16;;;;;;1093:70;1291:1;1271:9;1265:23;:27;1261:106;;;1339:4;1345:9;1322:33;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1308:48;;;;;;1261:106;1384:23;1399:7;1384:14;:23::i;:::-;1377:30;;;;806:608;;;;:::o;4388:162:19:-;4485:4;4508:18;:25;4527:5;4508:25;;;;;;;;;;;;;;;:35;4534:8;4508:35;;;;;;;;;;;;;;;;;;;;;;;;;4501:42;;4388:162;;;;:::o;1570:300::-;1672:4;1722:25;1707:40;;;:11;:40;;;;:104;;;;1778:33;1763:48;;;:11;:48;;;;1707:104;:156;;;;1827:36;1851:11;1827:23;:36::i;:::-;1707:156;1688:175;;1570:300;;;:::o;13240:133::-;13321:16;13329:7;13321;:16::i;:::-;13313:53;;;;;;;;;;;;:::i;:::-;;;;;;;;;13240:133;:::o;640:96:25:-;693:7;719:10;712:17;;640:96;:::o;12572:171:19:-;12673:2;12646:15;:24;12662:7;12646:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;12728:7;12724:2;12690:46;;12699:23;12714:7;12699:14;:23::i;:::-;12690:46;;;;;;;;;;;;12572:171;;:::o;7404:261::-;7497:4;7513:13;7529:23;7544:7;7529:14;:23::i;:::-;7513:39;;7581:5;7570:16;;:7;:16;;;:52;;;;7590:32;7607:5;7614:7;7590:16;:32::i;:::-;7570:52;:87;;;;7650:7;7626:31;;:20;7638:7;7626:11;:20::i;:::-;:31;;;7570:87;7562:96;;;7404:261;;;;:::o;11257:1203::-;11381:4;11354:31;;:23;11369:7;11354:14;:23::i;:::-;:31;;;11346:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;11459:1;11445:16;;:2;:16;;;11437:65;;;;;;;;;;;;:::i;:::-;;;;;;;;;11513:42;11534:4;11540:2;11544:7;11553:1;11513:20;:42::i;:::-;11682:4;11655:31;;:23;11670:7;11655:14;:23::i;:::-;:31;;;11647:81;;;;;;;;;;;;:::i;:::-;;;;;;;;;11797:15;:24;11813:7;11797:24;;;;;;;;;;;;11790:31;;;;;;;;;;;12284:1;12265:9;:15;12275:4;12265:15;;;;;;;;;;;;;;;;:20;;;;;;;;;;;12316:1;12299:9;:13;12309:2;12299:13;;;;;;;;;;;;;;;;:18;;;;;;;;;;;12356:2;12337:7;:16;12345:7;12337:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;12393:7;12389:2;12374:27;;12383:4;12374:27;;;;;;;;;;;;12412:41;12432:4;12438:2;12442:7;12451:1;12412:19;:41::i;:::-;11257:1203;;;:::o;6702:115::-;6768:7;6794;:16;6802:7;6794:16;;;;;;;;;;;;;;;;;;;;;6787:23;;6702:115;;;:::o;945:123:26:-;1050:1;1032:7;:14;;;:19;;;;;;;;;;;945:123;:::o;827:112::-;892:7;918;:14;;;911:21;;827:112;;;:::o;8925:920:19:-;9018:1;9004:16;;:2;:16;;;8996:61;;;;;;;;;;;;:::i;:::-;;;;;;;;;9076:16;9084:7;9076;:16::i;:::-;9075:17;9067:58;;;;;;;;;;;;:::i;:::-;;;;;;;;;9136:48;9165:1;9169:2;9173:7;9182:1;9136:20;:48::i;:::-;9280:16;9288:7;9280;:16::i;:::-;9279:17;9271:58;;;;;;;;;;;;:::i;:::-;;;;;;;;;9688:1;9671:9;:13;9681:2;9671:13;;;;;;;;;;;;;;;;:18;;;;;;;;;;;9729:2;9710:7;:16;9718:7;9710:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;9772:7;9768:2;9747:33;;9764:1;9747:33;;;;;;;;;;;;9791:47;9819:1;9823:2;9827:7;9836:1;9791:19;:47::i;:::-;8925:920;;:::o;12879:277::-;12999:8;12990:17;;:5;:17;;;12982:55;;;;;;;;;;;;:::i;:::-;;;;;;;;;13085:8;13047:18;:25;13066:5;13047:25;;;;;;;;;;;;;;;:35;13073:8;13047:35;;;;;;;;;;;;;;;;:46;;;;;;;;;;;;;;;;;;13130:8;13108:41;;13123:5;13108:41;;;13140:8;13108:41;;;;;;:::i;:::-;;;;;;;;12879:277;;;:::o;6326:267::-;6438:28;6448:4;6454:2;6458:7;6438:9;:28::i;:::-;6484:47;6507:4;6513:2;6517:7;6526:4;6484:22;:47::i;:::-;6476:110;;;;;;;;;;;;:::i;:::-;;;;;;;;;6326:267;;;;:::o;3319:92::-;3370:13;3395:9;;;;;;;;;;;;;;3319:92;:::o;2801:276::-;2874:13;2899:23;2914:7;2899:14;:23::i;:::-;2933:21;2957:10;:8;:10::i;:::-;2933:34;;3008:1;2990:7;2984:21;:25;:86;;;;;;;;;;;;;;;;;3036:7;3045:18;:7;:16;:18::i;:::-;3019:45;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2984:86;2977:93;;;2801:276;;;:::o;829:155:29:-;914:4;952:25;937:40;;;:11;:40;;;;930:47;;829:155;;;:::o;7120:126:19:-;7185:4;7237:1;7208:31;;:17;7217:7;7208:8;:17::i;:::-;:31;;;;7201:38;;7120:126;;;:::o;15472:116::-;;;;;:::o;16294:115::-;;;;;:::o;13925:831::-;14074:4;14094:15;:2;:13;;;:15::i;:::-;14090:660;;;14145:2;14129:36;;;14166:12;:10;:12::i;:::-;14180:4;14186:7;14195:4;14129:71;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;14125:573;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;14384:1;14367:6;:13;:18;14363:321;;14409:60;;;;;;;;;;:::i;:::-;;;;;;;;14363:321;14636:6;14630:13;14621:6;14617:2;14613:15;14606:38;14125:573;14260:41;;;14250:51;;;:6;:51;;;;14243:58;;;;;14090:660;14735:4;14728:11;;13925:831;;;;;;;:::o;447:696:28:-;503:13;552:14;589:1;569:17;580:5;569:10;:17::i;:::-;:21;552:38;;604:20;638:6;627:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;604:41;;659:11;785:6;781:2;777:15;769:6;765:28;758:35;;820:280;827:4;820:280;;;851:5;;;;;;;;990:8;985:2;978:5;974:14;969:30;964:3;956:44;1044:2;1035:11;;;;;;:::i;:::-;;;;;1077:1;1068:5;:10;820:280;1064:21;820:280;1120:6;1113:13;;;;;447:696;;;:::o;1412:320:24:-;1472:4;1724:1;1702:7;:19;;;:23;1695:30;;1412:320;;;:::o;10139:916:32:-;10192:7;10211:14;10228:1;10211:18;;10276:8;10267:5;:17;10263:103;;10313:8;10304:17;;;;;;:::i;:::-;;;;;10349:2;10339:12;;;;10263:103;10392:8;10383:5;:17;10379:103;;10429:8;10420:17;;;;;;:::i;:::-;;;;;10465:2;10455:12;;;;10379:103;10508:8;10499:5;:17;10495:103;;10545:8;10536:17;;;;;;:::i;:::-;;;;;10581:2;10571:12;;;;10495:103;10624:7;10615:5;:16;10611:100;;10660:7;10651:16;;;;;;:::i;:::-;;;;;10695:1;10685:11;;;;10611:100;10737:7;10728:5;:16;10724:100;;10773:7;10764:16;;;;;;:::i;:::-;;;;;10808:1;10798:11;;;;10724:100;10850:7;10841:5;:16;10837:100;;10886:7;10877:16;;;;;;:::i;:::-;;;;;10921:1;10911:11;;;;10837:100;10963:7;10954:5;:16;10950:66;;11000:1;10990:11;;;;10950:66;11042:6;11035:13;;;10139:916;;;:::o;7:75:36:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:99::-;1570:6;1604:5;1598:12;1588:22;;1518:99;;;:::o;1623:169::-;1707:11;1741:6;1736:3;1729:19;1781:4;1776:3;1772:14;1757:29;;1623:169;;;;:::o;1798:246::-;1879:1;1889:113;1903:6;1900:1;1897:13;1889:113;;;1988:1;1983:3;1979:11;1973:18;1969:1;1964:3;1960:11;1953:39;1925:2;1922:1;1918:10;1913:15;;1889:113;;;2036:1;2027:6;2022:3;2018:16;2011:27;1860:184;1798:246;;;:::o;2050:102::-;2091:6;2142:2;2138:7;2133:2;2126:5;2122:14;2118:28;2108:38;;2050:102;;;:::o;2158:377::-;2246:3;2274:39;2307:5;2274:39;:::i;:::-;2329:71;2393:6;2388:3;2329:71;:::i;:::-;2322:78;;2409:65;2467:6;2462:3;2455:4;2448:5;2444:16;2409:65;:::i;:::-;2499:29;2521:6;2499:29;:::i;:::-;2494:3;2490:39;2483:46;;2250:285;2158:377;;;;:::o;2541:313::-;2654:4;2692:2;2681:9;2677:18;2669:26;;2741:9;2735:4;2731:20;2727:1;2716:9;2712:17;2705:47;2769:78;2842:4;2833:6;2769:78;:::i;:::-;2761:86;;2541:313;;;;:::o;2860:77::-;2897:7;2926:5;2915:16;;2860:77;;;:::o;2943:122::-;3016:24;3034:5;3016:24;:::i;:::-;3009:5;3006:35;2996:63;;3055:1;3052;3045:12;2996:63;2943:122;:::o;3071:139::-;3117:5;3155:6;3142:20;3133:29;;3171:33;3198:5;3171:33;:::i;:::-;3071:139;;;;:::o;3216:329::-;3275:6;3324:2;3312:9;3303:7;3299:23;3295:32;3292:119;;;3330:79;;:::i;:::-;3292:119;3450:1;3475:53;3520:7;3511:6;3500:9;3496:22;3475:53;:::i;:::-;3465:63;;3421:117;3216:329;;;;:::o;3551:126::-;3588:7;3628:42;3621:5;3617:54;3606:65;;3551:126;;;:::o;3683:96::-;3720:7;3749:24;3767:5;3749:24;:::i;:::-;3738:35;;3683:96;;;:::o;3785:118::-;3872:24;3890:5;3872:24;:::i;:::-;3867:3;3860:37;3785:118;;:::o;3909:222::-;4002:4;4040:2;4029:9;4025:18;4017:26;;4053:71;4121:1;4110:9;4106:17;4097:6;4053:71;:::i;:::-;3909:222;;;;:::o;4137:122::-;4210:24;4228:5;4210:24;:::i;:::-;4203:5;4200:35;4190:63;;4249:1;4246;4239:12;4190:63;4137:122;:::o;4265:139::-;4311:5;4349:6;4336:20;4327:29;;4365:33;4392:5;4365:33;:::i;:::-;4265:139;;;;:::o;4410:474::-;4478:6;4486;4535:2;4523:9;4514:7;4510:23;4506:32;4503:119;;;4541:79;;:::i;:::-;4503:119;4661:1;4686:53;4731:7;4722:6;4711:9;4707:22;4686:53;:::i;:::-;4676:63;;4632:117;4788:2;4814:53;4859:7;4850:6;4839:9;4835:22;4814:53;:::i;:::-;4804:63;;4759:118;4410:474;;;;;:::o;4890:619::-;4967:6;4975;4983;5032:2;5020:9;5011:7;5007:23;5003:32;5000:119;;;5038:79;;:::i;:::-;5000:119;5158:1;5183:53;5228:7;5219:6;5208:9;5204:22;5183:53;:::i;:::-;5173:63;;5129:117;5285:2;5311:53;5356:7;5347:6;5336:9;5332:22;5311:53;:::i;:::-;5301:63;;5256:118;5413:2;5439:53;5484:7;5475:6;5464:9;5460:22;5439:53;:::i;:::-;5429:63;;5384:118;4890:619;;;;;:::o;5515:329::-;5574:6;5623:2;5611:9;5602:7;5598:23;5594:32;5591:119;;;5629:79;;:::i;:::-;5591:119;5749:1;5774:53;5819:7;5810:6;5799:9;5795:22;5774:53;:::i;:::-;5764:63;;5720:117;5515:329;;;;:::o;5850:118::-;5937:24;5955:5;5937:24;:::i;:::-;5932:3;5925:37;5850:118;;:::o;5974:222::-;6067:4;6105:2;6094:9;6090:18;6082:26;;6118:71;6186:1;6175:9;6171:17;6162:6;6118:71;:::i;:::-;5974:222;;;;:::o;6202:116::-;6272:21;6287:5;6272:21;:::i;:::-;6265:5;6262:32;6252:60;;6308:1;6305;6298:12;6252:60;6202:116;:::o;6324:133::-;6367:5;6405:6;6392:20;6383:29;;6421:30;6445:5;6421:30;:::i;:::-;6324:133;;;;:::o;6463:468::-;6528:6;6536;6585:2;6573:9;6564:7;6560:23;6556:32;6553:119;;;6591:79;;:::i;:::-;6553:119;6711:1;6736:53;6781:7;6772:6;6761:9;6757:22;6736:53;:::i;:::-;6726:63;;6682:117;6838:2;6864:50;6906:7;6897:6;6886:9;6882:22;6864:50;:::i;:::-;6854:60;;6809:115;6463:468;;;;;:::o;6937:117::-;7046:1;7043;7036:12;7060:117;7169:1;7166;7159:12;7183:180;7231:77;7228:1;7221:88;7328:4;7325:1;7318:15;7352:4;7349:1;7342:15;7369:281;7452:27;7474:4;7452:27;:::i;:::-;7444:6;7440:40;7582:6;7570:10;7567:22;7546:18;7534:10;7531:34;7528:62;7525:88;;;7593:18;;:::i;:::-;7525:88;7633:10;7629:2;7622:22;7412:238;7369:281;;:::o;7656:129::-;7690:6;7717:20;;:::i;:::-;7707:30;;7746:33;7774:4;7766:6;7746:33;:::i;:::-;7656:129;;;:::o;7791:307::-;7852:4;7942:18;7934:6;7931:30;7928:56;;;7964:18;;:::i;:::-;7928:56;8002:29;8024:6;8002:29;:::i;:::-;7994:37;;8086:4;8080;8076:15;8068:23;;7791:307;;;:::o;8104:146::-;8201:6;8196:3;8191;8178:30;8242:1;8233:6;8228:3;8224:16;8217:27;8104:146;;;:::o;8256:423::-;8333:5;8358:65;8374:48;8415:6;8374:48;:::i;:::-;8358:65;:::i;:::-;8349:74;;8446:6;8439:5;8432:21;8484:4;8477:5;8473:16;8522:3;8513:6;8508:3;8504:16;8501:25;8498:112;;;8529:79;;:::i;:::-;8498:112;8619:54;8666:6;8661:3;8656;8619:54;:::i;:::-;8339:340;8256:423;;;;;:::o;8698:338::-;8753:5;8802:3;8795:4;8787:6;8783:17;8779:27;8769:122;;8810:79;;:::i;:::-;8769:122;8927:6;8914:20;8952:78;9026:3;9018:6;9011:4;9003:6;8999:17;8952:78;:::i;:::-;8943:87;;8759:277;8698:338;;;;:::o;9042:943::-;9137:6;9145;9153;9161;9210:3;9198:9;9189:7;9185:23;9181:33;9178:120;;;9217:79;;:::i;:::-;9178:120;9337:1;9362:53;9407:7;9398:6;9387:9;9383:22;9362:53;:::i;:::-;9352:63;;9308:117;9464:2;9490:53;9535:7;9526:6;9515:9;9511:22;9490:53;:::i;:::-;9480:63;;9435:118;9592:2;9618:53;9663:7;9654:6;9643:9;9639:22;9618:53;:::i;:::-;9608:63;;9563:118;9748:2;9737:9;9733:18;9720:32;9779:18;9771:6;9768:30;9765:117;;;9801:79;;:::i;:::-;9765:117;9906:62;9960:7;9951:6;9940:9;9936:22;9906:62;:::i;:::-;9896:72;;9691:287;9042:943;;;;;;;:::o;9991:474::-;10059:6;10067;10116:2;10104:9;10095:7;10091:23;10087:32;10084:119;;;10122:79;;:::i;:::-;10084:119;10242:1;10267:53;10312:7;10303:6;10292:9;10288:22;10267:53;:::i;:::-;10257:63;;10213:117;10369:2;10395:53;10440:7;10431:6;10420:9;10416:22;10395:53;:::i;:::-;10385:63;;10340:118;9991:474;;;;;:::o;10471:180::-;10519:77;10516:1;10509:88;10616:4;10613:1;10606:15;10640:4;10637:1;10630:15;10657:320;10701:6;10738:1;10732:4;10728:12;10718:22;;10785:1;10779:4;10775:12;10806:18;10796:81;;10862:4;10854:6;10850:17;10840:27;;10796:81;10924:2;10916:6;10913:14;10893:18;10890:38;10887:84;;10943:18;;:::i;:::-;10887:84;10708:269;10657:320;;;:::o;10983:220::-;11123:34;11119:1;11111:6;11107:14;11100:58;11192:3;11187:2;11179:6;11175:15;11168:28;10983:220;:::o;11209:366::-;11351:3;11372:67;11436:2;11431:3;11372:67;:::i;:::-;11365:74;;11448:93;11537:3;11448:93;:::i;:::-;11566:2;11561:3;11557:12;11550:19;;11209:366;;;:::o;11581:419::-;11747:4;11785:2;11774:9;11770:18;11762:26;;11834:9;11828:4;11824:20;11820:1;11809:9;11805:17;11798:47;11862:131;11988:4;11862:131;:::i;:::-;11854:139;;11581:419;;;:::o;12006:248::-;12146:34;12142:1;12134:6;12130:14;12123:58;12215:31;12210:2;12202:6;12198:15;12191:56;12006:248;:::o;12260:366::-;12402:3;12423:67;12487:2;12482:3;12423:67;:::i;:::-;12416:74;;12499:93;12588:3;12499:93;:::i;:::-;12617:2;12612:3;12608:12;12601:19;;12260:366;;;:::o;12632:419::-;12798:4;12836:2;12825:9;12821:18;12813:26;;12885:9;12879:4;12875:20;12871:1;12860:9;12856:17;12849:47;12913:131;13039:4;12913:131;:::i;:::-;12905:139;;12632:419;;;:::o;13057:232::-;13197:34;13193:1;13185:6;13181:14;13174:58;13266:15;13261:2;13253:6;13249:15;13242:40;13057:232;:::o;13295:366::-;13437:3;13458:67;13522:2;13517:3;13458:67;:::i;:::-;13451:74;;13534:93;13623:3;13534:93;:::i;:::-;13652:2;13647:3;13643:12;13636:19;;13295:366;;;:::o;13667:419::-;13833:4;13871:2;13860:9;13856:18;13848:26;;13920:9;13914:4;13910:20;13906:1;13895:9;13891:17;13884:47;13948:131;14074:4;13948:131;:::i;:::-;13940:139;;13667:419;;;:::o;14092:174::-;14232:26;14228:1;14220:6;14216:14;14209:50;14092:174;:::o;14272:366::-;14414:3;14435:67;14499:2;14494:3;14435:67;:::i;:::-;14428:74;;14511:93;14600:3;14511:93;:::i;:::-;14629:2;14624:3;14620:12;14613:19;;14272:366;;;:::o;14644:419::-;14810:4;14848:2;14837:9;14833:18;14825:26;;14897:9;14891:4;14887:20;14883:1;14872:9;14868:17;14861:47;14925:131;15051:4;14925:131;:::i;:::-;14917:139;;14644:419;;;:::o;15069:228::-;15209:34;15205:1;15197:6;15193:14;15186:58;15278:11;15273:2;15265:6;15261:15;15254:36;15069:228;:::o;15303:366::-;15445:3;15466:67;15530:2;15525:3;15466:67;:::i;:::-;15459:74;;15542:93;15631:3;15542:93;:::i;:::-;15660:2;15655:3;15651:12;15644:19;;15303:366;;;:::o;15675:419::-;15841:4;15879:2;15868:9;15864:18;15856:26;;15928:9;15922:4;15918:20;15914:1;15903:9;15899:17;15892:47;15956:131;16082:4;15956:131;:::i;:::-;15948:139;;15675:419;;;:::o;16100:148::-;16202:11;16239:3;16224:18;;16100:148;;;;:::o;16254:390::-;16360:3;16388:39;16421:5;16388:39;:::i;:::-;16443:89;16525:6;16520:3;16443:89;:::i;:::-;16436:96;;16541:65;16599:6;16594:3;16587:4;16580:5;16576:16;16541:65;:::i;:::-;16631:6;16626:3;16622:16;16615:23;;16364:280;16254:390;;;;:::o;16650:435::-;16830:3;16852:95;16943:3;16934:6;16852:95;:::i;:::-;16845:102;;16964:95;17055:3;17046:6;16964:95;:::i;:::-;16957:102;;17076:3;17069:10;;16650:435;;;;;:::o;17091:224::-;17231:34;17227:1;17219:6;17215:14;17208:58;17300:7;17295:2;17287:6;17283:15;17276:32;17091:224;:::o;17321:366::-;17463:3;17484:67;17548:2;17543:3;17484:67;:::i;:::-;17477:74;;17560:93;17649:3;17560:93;:::i;:::-;17678:2;17673:3;17669:12;17662:19;;17321:366;;;:::o;17693:419::-;17859:4;17897:2;17886:9;17882:18;17874:26;;17946:9;17940:4;17936:20;17932:1;17921:9;17917:17;17910:47;17974:131;18100:4;17974:131;:::i;:::-;17966:139;;17693:419;;;:::o;18118:223::-;18258:34;18254:1;18246:6;18242:14;18235:58;18327:6;18322:2;18314:6;18310:15;18303:31;18118:223;:::o;18347:366::-;18489:3;18510:67;18574:2;18569:3;18510:67;:::i;:::-;18503:74;;18586:93;18675:3;18586:93;:::i;:::-;18704:2;18699:3;18695:12;18688:19;;18347:366;;;:::o;18719:419::-;18885:4;18923:2;18912:9;18908:18;18900:26;;18972:9;18966:4;18962:20;18958:1;18947:9;18943:17;18936:47;19000:131;19126:4;19000:131;:::i;:::-;18992:139;;18719:419;;;:::o;19144:182::-;19284:34;19280:1;19272:6;19268:14;19261:58;19144:182;:::o;19332:366::-;19474:3;19495:67;19559:2;19554:3;19495:67;:::i;:::-;19488:74;;19571:93;19660:3;19571:93;:::i;:::-;19689:2;19684:3;19680:12;19673:19;;19332:366;;;:::o;19704:419::-;19870:4;19908:2;19897:9;19893:18;19885:26;;19957:9;19951:4;19947:20;19943:1;19932:9;19928:17;19921:47;19985:131;20111:4;19985:131;:::i;:::-;19977:139;;19704:419;;;:::o;20129:178::-;20269:30;20265:1;20257:6;20253:14;20246:54;20129:178;:::o;20313:366::-;20455:3;20476:67;20540:2;20535:3;20476:67;:::i;:::-;20469:74;;20552:93;20641:3;20552:93;:::i;:::-;20670:2;20665:3;20661:12;20654:19;;20313:366;;;:::o;20685:419::-;20851:4;20889:2;20878:9;20874:18;20866:26;;20938:9;20932:4;20928:20;20924:1;20913:9;20909:17;20902:47;20966:131;21092:4;20966:131;:::i;:::-;20958:139;;20685:419;;;:::o;21110:175::-;21250:27;21246:1;21238:6;21234:14;21227:51;21110:175;:::o;21291:366::-;21433:3;21454:67;21518:2;21513:3;21454:67;:::i;:::-;21447:74;;21530:93;21619:3;21530:93;:::i;:::-;21648:2;21643:3;21639:12;21632:19;;21291:366;;;:::o;21663:419::-;21829:4;21867:2;21856:9;21852:18;21844:26;;21916:9;21910:4;21906:20;21902:1;21891:9;21887:17;21880:47;21944:131;22070:4;21944:131;:::i;:::-;21936:139;;21663:419;;;:::o;22088:237::-;22228:34;22224:1;22216:6;22212:14;22205:58;22297:20;22292:2;22284:6;22280:15;22273:45;22088:237;:::o;22331:366::-;22473:3;22494:67;22558:2;22553:3;22494:67;:::i;:::-;22487:74;;22570:93;22659:3;22570:93;:::i;:::-;22688:2;22683:3;22679:12;22672:19;;22331:366;;;:::o;22703:419::-;22869:4;22907:2;22896:9;22892:18;22884:26;;22956:9;22950:4;22946:20;22942:1;22931:9;22927:17;22920:47;22984:131;23110:4;22984:131;:::i;:::-;22976:139;;22703:419;;;:::o;23128:98::-;23179:6;23213:5;23207:12;23197:22;;23128:98;;;:::o;23232:168::-;23315:11;23349:6;23344:3;23337:19;23389:4;23384:3;23380:14;23365:29;;23232:168;;;;:::o;23406:373::-;23492:3;23520:38;23552:5;23520:38;:::i;:::-;23574:70;23637:6;23632:3;23574:70;:::i;:::-;23567:77;;23653:65;23711:6;23706:3;23699:4;23692:5;23688:16;23653:65;:::i;:::-;23743:29;23765:6;23743:29;:::i;:::-;23738:3;23734:39;23727:46;;23496:283;23406:373;;;;:::o;23785:640::-;23980:4;24018:3;24007:9;24003:19;23995:27;;24032:71;24100:1;24089:9;24085:17;24076:6;24032:71;:::i;:::-;24113:72;24181:2;24170:9;24166:18;24157:6;24113:72;:::i;:::-;24195;24263:2;24252:9;24248:18;24239:6;24195:72;:::i;:::-;24314:9;24308:4;24304:20;24299:2;24288:9;24284:18;24277:48;24342:76;24413:4;24404:6;24342:76;:::i;:::-;24334:84;;23785:640;;;;;;;:::o;24431:141::-;24487:5;24518:6;24512:13;24503:22;;24534:32;24560:5;24534:32;:::i;:::-;24431:141;;;;:::o;24578:349::-;24647:6;24696:2;24684:9;24675:7;24671:23;24667:32;24664:119;;;24702:79;;:::i;:::-;24664:119;24822:1;24847:63;24902:7;24893:6;24882:9;24878:22;24847:63;:::i;:::-;24837:73;;24793:127;24578:349;;;;:::o;24933:180::-;24981:77;24978:1;24971:88;25078:4;25075:1;25068:15;25102:4;25099:1;25092:15"},"gasEstimates":{"creation":{"codeDepositCost":"1943600","executionCost":"infinite","totalCost":"infinite"},"external":{"approve(address,uint256)":"infinite","balanceOf(address)":"2899","createToken()":"infinite","getApproved(uint256)":"5300","isApprovedForAll(address,address)":"infinite","name()":"infinite","ownerOf(uint256)":"3088","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"infinite","supportsInterface(bytes4)":"892","symbol()":"infinite","tokenURI(uint256)":"infinite","transferFrom(address,address,uint256)":"infinite"}},"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","createToken()":"9cbf9e36","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","name()":"06fdde03","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"BatchMetadataUpdate(uint256,uint256)\":{\"details\":\"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LendNFTPlugin.sol\":\"FactoryNFT\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@aragon/osx/core/dao/IDAO.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\n/// @title IDAO\\n/// @author Aragon Association - 2022-2023\\n/// @notice The interface required for DAOs within the Aragon App DAO framework.\\ninterface IDAO {\\n    /// @notice The action struct to be consumed by the DAO's `execute` function resulting in an external call.\\n    /// @param to The address to call.\\n    /// @param value The native token value to be sent with the call.\\n    /// @param data The bytes-encoded function selector and calldata for the call.\\n    struct Action {\\n        address to;\\n        uint256 value;\\n        bytes data;\\n    }\\n\\n    /// @notice Checks if an address has permission on a contract via a permission identifier and considers if `ANY_ADDRESS` was used in the granting process.\\n    /// @param _where The address of the contract.\\n    /// @param _who The address of a EOA or contract to give the permissions.\\n    /// @param _permissionId The permission identifier.\\n    /// @param _data The optional data passed to the `PermissionCondition` registered.\\n    /// @return Returns true if the address has permission, false if not.\\n    function hasPermission(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId,\\n        bytes memory _data\\n    ) external view returns (bool);\\n\\n    /// @notice Updates the DAO metadata (e.g., an IPFS hash).\\n    /// @param _metadata The IPFS hash of the new metadata object.\\n    function setMetadata(bytes calldata _metadata) external;\\n\\n    /// @notice Emitted when the DAO metadata is updated.\\n    /// @param metadata The IPFS hash of the new metadata object.\\n    event MetadataSet(bytes metadata);\\n\\n    /// @notice Executes a list of actions. If a zero allow-failure map is provided, a failing action reverts the entire execution. If a non-zero allow-failure map is provided, allowed actions can fail without the entire call being reverted.\\n    /// @param _callId The ID of the call. The definition of the value of `callId` is up to the calling contract and can be used, e.g., as a nonce.\\n    /// @param _actions The array of actions.\\n    /// @param _allowFailureMap A bitmap allowing execution to succeed, even if individual actions might revert. If the bit at index `i` is 1, the execution succeeds even if the `i`th action reverts. A failure map value of 0 requires every action to not revert.\\n    /// @return The array of results obtained from the executed actions in `bytes`.\\n    /// @return The resulting failure map containing the actions have actually failed.\\n    function execute(\\n        bytes32 _callId,\\n        Action[] memory _actions,\\n        uint256 _allowFailureMap\\n    ) external returns (bytes[] memory, uint256);\\n\\n    /// @notice Emitted when a proposal is executed.\\n    /// @param actor The address of the caller.\\n    /// @param callId The ID of the call.\\n    /// @param actions The array of actions executed.\\n    /// @param allowFailureMap The allow failure map encoding which actions are allowed to fail.\\n    /// @param failureMap The failure map encoding which actions have failed.\\n    /// @param execResults The array with the results of the executed actions.\\n    /// @dev The value of `callId` is defined by the component/contract calling the execute function. A `Plugin` implementation can use it, for example, as a nonce.\\n    event Executed(\\n        address indexed actor,\\n        bytes32 callId,\\n        Action[] actions,\\n        uint256 allowFailureMap,\\n        uint256 failureMap,\\n        bytes[] execResults\\n    );\\n\\n    /// @notice Emitted when a standard callback is registered.\\n    /// @param interfaceId The ID of the interface.\\n    /// @param callbackSelector The selector of the callback function.\\n    /// @param magicNumber The magic number to be registered for the callback function selector.\\n    event StandardCallbackRegistered(\\n        bytes4 interfaceId,\\n        bytes4 callbackSelector,\\n        bytes4 magicNumber\\n    );\\n\\n    /// @notice Deposits (native) tokens to the DAO contract with a reference string.\\n    /// @param _token The address of the token or address(0) in case of the native token.\\n    /// @param _amount The amount of tokens to deposit.\\n    /// @param _reference The reference describing the deposit reason.\\n    function deposit(address _token, uint256 _amount, string calldata _reference) external payable;\\n\\n    /// @notice Emitted when a token deposit has been made to the DAO.\\n    /// @param sender The address of the sender.\\n    /// @param token The address of the deposited token.\\n    /// @param amount The amount of tokens deposited.\\n    /// @param _reference The reference describing the deposit reason.\\n    event Deposited(\\n        address indexed sender,\\n        address indexed token,\\n        uint256 amount,\\n        string _reference\\n    );\\n\\n    /// @notice Emitted when a native token deposit has been made to the DAO.\\n    /// @dev This event is intended to be emitted in the `receive` function and is therefore bound by the gas limitations for `send`/`transfer` calls introduced by [ERC-2929](https://eips.ethereum.org/EIPS/eip-2929).\\n    /// @param sender The address of the sender.\\n    /// @param amount The amount of native tokens deposited.\\n    event NativeTokenDeposited(address sender, uint256 amount);\\n\\n    /// @notice Setter for the trusted forwarder verifying the meta transaction.\\n    /// @param _trustedForwarder The trusted forwarder address.\\n    function setTrustedForwarder(address _trustedForwarder) external;\\n\\n    /// @notice Getter for the trusted forwarder verifying the meta transaction.\\n    /// @return The trusted forwarder address.\\n    function getTrustedForwarder() external view returns (address);\\n\\n    /// @notice Emitted when a new TrustedForwarder is set on the DAO.\\n    /// @param forwarder the new forwarder address.\\n    event TrustedForwarderSet(address forwarder);\\n\\n    /// @notice Setter for the [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract.\\n    /// @param _signatureValidator The address of the signature validator.\\n    function setSignatureValidator(address _signatureValidator) external;\\n\\n    /// @notice Emitted when the signature validator address is updated.\\n    /// @param signatureValidator The address of the signature validator.\\n    event SignatureValidatorSet(address signatureValidator);\\n\\n    /// @notice Checks whether a signature is valid for the provided hash by forwarding the call to the set [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract.\\n    /// @param _hash The hash of the data to be signed.\\n    /// @param _signature The signature byte array associated with `_hash`.\\n    /// @return Returns the `bytes4` magic value `0x1626ba7e` if the signature is valid.\\n    function isValidSignature(bytes32 _hash, bytes memory _signature) external returns (bytes4);\\n\\n    /// @notice Registers an ERC standard having a callback by registering its [ERC-165](https://eips.ethereum.org/EIPS/eip-165) interface ID and callback function signature.\\n    /// @param _interfaceId The ID of the interface.\\n    /// @param _callbackSelector The selector of the callback function.\\n    /// @param _magicNumber The magic number to be registered for the function signature.\\n    function registerStandardCallback(\\n        bytes4 _interfaceId,\\n        bytes4 _callbackSelector,\\n        bytes4 _magicNumber\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3876d62c73312234c1e2ab4e75cdac2783a6688c3445a67a15b767cd98e01f80\",\"license\":\"AGPL-3.0-or-later\"},\"@aragon/osx/core/plugin/IPlugin.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\n/// @title IPlugin\\n/// @author Aragon Association - 2022-2023\\n/// @notice An interface defining the traits of a plugin.\\ninterface IPlugin {\\n    enum PluginType {\\n        UUPS,\\n        Cloneable,\\n        Constructable\\n    }\\n\\n    /// @notice Returns the plugin's type\\n    function pluginType() external view returns (PluginType);\\n}\\n\",\"keccak256\":\"0xcdb72c04ca35478e4d786fbbe12cf0e6de7d76aa0510028432312697f42c7355\",\"license\":\"AGPL-3.0-or-later\"},\"@aragon/osx/core/plugin/Plugin.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nimport {IDAO} from \\\"../dao/IDAO.sol\\\";\\nimport {DaoAuthorizable} from \\\"./dao-authorizable/DaoAuthorizable.sol\\\";\\nimport {IPlugin} from \\\"./IPlugin.sol\\\";\\n\\n/// @title Plugin\\n/// @author Aragon Association - 2022-2023\\n/// @notice An abstract, non-upgradeable contract to inherit from when creating a plugin being deployed via the `new` keyword.\\nabstract contract Plugin is IPlugin, ERC165, DaoAuthorizable {\\n    /// @notice Constructs the plugin by storing the associated DAO.\\n    /// @param _dao The DAO contract.\\n    constructor(IDAO _dao) DaoAuthorizable(_dao) {}\\n\\n    /// @inheritdoc IPlugin\\n    function pluginType() public pure override returns (PluginType) {\\n        return PluginType.Constructable;\\n    }\\n\\n    /// @notice Checks if this or the parent contract supports an interface by its ID.\\n    /// @param _interfaceId The ID of the interface.\\n    /// @return Returns `true` if the interface is supported.\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\\n        return _interfaceId == type(IPlugin).interfaceId || super.supportsInterface(_interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xf4ba8a3d7e3e626ed07619acc9ab616e17615e7ce2983b634a0bba0662897452\",\"license\":\"AGPL-3.0-or-later\"},\"@aragon/osx/core/plugin/dao-authorizable/DaoAuthorizable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport {IDAO} from \\\"../../dao/IDAO.sol\\\";\\nimport {_auth} from \\\"../../utils/auth.sol\\\";\\n\\n/// @title DaoAuthorizable\\n/// @author Aragon Association - 2022-2023\\n/// @notice An abstract contract providing a meta-transaction compatible modifier for non-upgradeable contracts instantiated via the `new` keyword to authorize function calls through an associated DAO.\\nabstract contract DaoAuthorizable is Context {\\n    /// @notice The associated DAO managing the permissions of inheriting contracts.\\n    IDAO private immutable dao_;\\n\\n    /// @notice Constructs the contract by setting the associated DAO.\\n    /// @param _dao The associated DAO address.\\n    constructor(IDAO _dao) {\\n        dao_ = _dao;\\n    }\\n\\n    /// @notice Returns the DAO contract.\\n    /// @return The DAO contract.\\n    function dao() public view returns (IDAO) {\\n        return dao_;\\n    }\\n\\n    /// @notice A modifier to make functions on inheriting contracts authorized. Permissions to call the function are checked through the associated DAO's permission manager.\\n    /// @param _permissionId The permission identifier required to call the method this modifier is applied to.\\n    modifier auth(bytes32 _permissionId) {\\n        _auth(dao_, address(this), _msgSender(), _permissionId, _msgData());\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xfb9de789f0266a61a5cfbd17a247b4ba4212ff091ccd10739318763331bdd154\",\"license\":\"AGPL-3.0-or-later\"},\"@aragon/osx/core/utils/auth.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\nimport {IDAO} from \\\"../dao/IDAO.sol\\\";\\n\\n/// @notice Thrown if a call is unauthorized in the associated DAO.\\n/// @param dao The associated DAO.\\n/// @param where The context in which the authorization reverted.\\n/// @param who The address (EOA or contract) missing the permission.\\n/// @param permissionId The permission identifier.\\nerror DaoUnauthorized(address dao, address where, address who, bytes32 permissionId);\\n\\n/// @notice A free function checking if a caller is granted permissions on a target contract via a permission identifier that redirects the approval to a `PermissionCondition` if this was specified in the setup.\\n/// @param _where The address of the target contract for which `who` receives permission.\\n/// @param _who The address (EOA or contract) owning the permission.\\n/// @param _permissionId The permission identifier.\\n/// @param _data The optional data passed to the `PermissionCondition` registered.\\nfunction _auth(\\n    IDAO _dao,\\n    address _where,\\n    address _who,\\n    bytes32 _permissionId,\\n    bytes calldata _data\\n) view {\\n    if (!_dao.hasPermission(_where, _who, _permissionId, _data))\\n        revert DaoUnauthorized({\\n            dao: address(_dao),\\n            where: _where,\\n            who: _who,\\n            permissionId: _permissionId\\n        });\\n}\\n\",\"keccak256\":\"0x1c9cf22583c8b5a08c6d2c02a68d9f05e58900a9bb27efa3b30abca2ecfabfe4\",\"license\":\"AGPL-3.0-or-later\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0x2a9dadb806be80dd451821f1f1190eb9aa6f6edae85b185db29d60767cc0c5f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../interfaces/IERC4906.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == bytes4(0x49064906) || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n\\n        emit MetadataUpdate(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7942989e3525aec1672469e4c65fb33fbd19c785c9cadbcb70fcbe1fe8bfdd37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/LendNFTPlugin.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\n\\n\\nimport {Plugin, IDAO} from '@aragon/osx/core/plugin/Plugin.sol';\\n\\ncontract FactoryNFT is ERC721URIStorage { \\n\\n  using Counters for Counters.Counter; \\n  Counters.Counter private _tokenIds;\\n\\n  constructor() ERC721(\\\"Farm Lender NFT\\\", \\\"FLN\\\") {}\\n\\n  function createToken() public {\\n      _tokenIds.increment();\\n      uint256 newItemId = _tokenIds.current();\\n\\n      _mint(msg.sender, newItemId);\\n  }    \\n}\\n\\ncontract LendNFTPlugin is Plugin {\\n  // Permissions are what connects everything together. \\n  // Addresses who have been granted the GREET_PERMISSION will be \\n  // able to call on functions with the modifier `auth(GREET_PERMISSION_ID)`. \\n  // These will be granted in the PluginSetup.sol contract up next.\\n  bytes32 public constant GREET_PERMISSION_ID = keccak256('GREET_PERMISSION');\\n\\n  FactoryNFT private factory_NFT;\\n\\n  constructor(IDAO _dao) Plugin(_dao) {\\n    factory_NFT = new FactoryNFT();\\n  }\\n\\n  function lend_money() external auth(GREET_PERMISSION_ID) {\\n    factory_NFT.createToken();\\n  }\\n\\n}\\n\",\"keccak256\":\"0xfac6751644136bd6684464647bd73f0598b10723e8d810075e4d9aff347ac83f\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1116,"contract":"contracts/LendNFTPlugin.sol:FactoryNFT","label":"_name","offset":0,"slot":"0","type":"t_string_storage"},{"astId":1118,"contract":"contracts/LendNFTPlugin.sol:FactoryNFT","label":"_symbol","offset":0,"slot":"1","type":"t_string_storage"},{"astId":1122,"contract":"contracts/LendNFTPlugin.sol:FactoryNFT","label":"_owners","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"},{"astId":1126,"contract":"contracts/LendNFTPlugin.sol:FactoryNFT","label":"_balances","offset":0,"slot":"3","type":"t_mapping(t_address,t_uint256)"},{"astId":1130,"contract":"contracts/LendNFTPlugin.sol:FactoryNFT","label":"_tokenApprovals","offset":0,"slot":"4","type":"t_mapping(t_uint256,t_address)"},{"astId":1136,"contract":"contracts/LendNFTPlugin.sol:FactoryNFT","label":"_operatorApprovals","offset":0,"slot":"5","type":"t_mapping(t_address,t_mapping(t_address,t_bool))"},{"astId":2167,"contract":"contracts/LendNFTPlugin.sol:FactoryNFT","label":"_tokenURIs","offset":0,"slot":"6","type":"t_mapping(t_uint256,t_string_storage)"},{"astId":4317,"contract":"contracts/LendNFTPlugin.sol:FactoryNFT","label":"_tokenIds","offset":0,"slot":"7","type":"t_struct(Counter)2692_storage"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_bool)":{"encoding":"mapping","key":"t_address","label":"mapping(address => bool)","numberOfBytes":"32","value":"t_bool"},"t_mapping(t_address,t_mapping(t_address,t_bool))":{"encoding":"mapping","key":"t_address","label":"mapping(address => mapping(address => bool))","numberOfBytes":"32","value":"t_mapping(t_address,t_bool)"},"t_mapping(t_address,t_uint256)":{"encoding":"mapping","key":"t_address","label":"mapping(address => uint256)","numberOfBytes":"32","value":"t_uint256"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_string_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => string)","numberOfBytes":"32","value":"t_string_storage"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(Counter)2692_storage":{"encoding":"inplace","label":"struct Counters.Counter","members":[{"astId":2691,"contract":"contracts/LendNFTPlugin.sol:FactoryNFT","label":"_value","offset":0,"slot":"0","type":"t_uint256"}],"numberOfBytes":"32"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"kind":"user","methods":{},"version":1}},"LendNFTPlugin":{"abi":[{"inputs":[{"internalType":"contract IDAO","name":"_dao","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"dao","type":"address"},{"internalType":"address","name":"where","type":"address"},{"internalType":"address","name":"who","type":"address"},{"internalType":"bytes32","name":"permissionId","type":"bytes32"}],"name":"DaoUnauthorized","type":"error"},{"inputs":[],"name":"GREET_PERMISSION_ID","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"dao","outputs":[{"internalType":"contract IDAO","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"lend_money","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"pluginType","outputs":[{"internalType":"enum IPlugin.PluginType","name":"","type":"uint8"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes4","name":"_interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"errors":{"DaoUnauthorized(address,address,address,bytes32)":[{"params":{"dao":"The associated DAO.","permissionId":"The permission identifier.","where":"The context in which the authorization reverted.","who":"The address (EOA or contract) missing the permission."}}]},"kind":"dev","methods":{"dao()":{"returns":{"_0":"The DAO contract."}},"supportsInterface(bytes4)":{"params":{"_interfaceId":"The ID of the interface."},"returns":{"_0":"Returns `true` if the interface is supported."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_233":{"entryPoint":null,"id":233,"parameterSlots":1,"returnSlots":0},"@_295":{"entryPoint":null,"id":295,"parameterSlots":1,"returnSlots":0},"@_4374":{"entryPoint":null,"id":4374,"parameterSlots":1,"returnSlots":0},"abi_decode_t_contract$_IDAO_$155_fromMemory":{"entryPoint":325,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_IDAO_$155_fromMemory":{"entryPoint":346,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"cleanup_t_address":{"entryPoint":266,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_contract$_IDAO_$155":{"entryPoint":284,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":234,"id":null,"parameterSlots":1,"returnSlots":1},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":229,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_t_contract$_IDAO_$155":{"entryPoint":302,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:1385:36","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:36","statements":[{"nodeType":"YulAssignment","src":"57:19:36","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:36","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:36"},"nodeType":"YulFunctionCall","src":"67:9:36"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:36"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:36","type":""}],"src":"7:75:36"},{"body":{"nodeType":"YulBlock","src":"177:28:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:36"},"nodeType":"YulFunctionCall","src":"187:12:36"},"nodeType":"YulExpressionStatement","src":"187:12:36"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:36"},{"body":{"nodeType":"YulBlock","src":"300:28:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:36"},"nodeType":"YulFunctionCall","src":"310:12:36"},"nodeType":"YulExpressionStatement","src":"310:12:36"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:36"},{"body":{"nodeType":"YulBlock","src":"379:81:36","statements":[{"nodeType":"YulAssignment","src":"389:65:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"404:5:36"},{"kind":"number","nodeType":"YulLiteral","src":"411:42:36","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"400:3:36"},"nodeType":"YulFunctionCall","src":"400:54:36"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"389:7:36"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"361:5:36","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"371:7:36","type":""}],"src":"334:126:36"},{"body":{"nodeType":"YulBlock","src":"511:51:36","statements":[{"nodeType":"YulAssignment","src":"521:35:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"550:5:36"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"532:17:36"},"nodeType":"YulFunctionCall","src":"532:24:36"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"521:7:36"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"493:5:36","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"503:7:36","type":""}],"src":"466:96:36"},{"body":{"nodeType":"YulBlock","src":"625:51:36","statements":[{"nodeType":"YulAssignment","src":"635:35:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"664:5:36"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"646:17:36"},"nodeType":"YulFunctionCall","src":"646:24:36"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"635:7:36"}]}]},"name":"cleanup_t_contract$_IDAO_$155","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"607:5:36","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"617:7:36","type":""}],"src":"568:108:36"},{"body":{"nodeType":"YulBlock","src":"737:91:36","statements":[{"body":{"nodeType":"YulBlock","src":"806:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"815:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"818:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"808:6:36"},"nodeType":"YulFunctionCall","src":"808:12:36"},"nodeType":"YulExpressionStatement","src":"808:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"760:5:36"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"797:5:36"}],"functionName":{"name":"cleanup_t_contract$_IDAO_$155","nodeType":"YulIdentifier","src":"767:29:36"},"nodeType":"YulFunctionCall","src":"767:36:36"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"757:2:36"},"nodeType":"YulFunctionCall","src":"757:47:36"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"750:6:36"},"nodeType":"YulFunctionCall","src":"750:55:36"},"nodeType":"YulIf","src":"747:75:36"}]},"name":"validator_revert_t_contract$_IDAO_$155","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"730:5:36","type":""}],"src":"682:146:36"},{"body":{"nodeType":"YulBlock","src":"909:92:36","statements":[{"nodeType":"YulAssignment","src":"919:22:36","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"934:6:36"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"928:5:36"},"nodeType":"YulFunctionCall","src":"928:13:36"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"919:5:36"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"989:5:36"}],"functionName":{"name":"validator_revert_t_contract$_IDAO_$155","nodeType":"YulIdentifier","src":"950:38:36"},"nodeType":"YulFunctionCall","src":"950:45:36"},"nodeType":"YulExpressionStatement","src":"950:45:36"}]},"name":"abi_decode_t_contract$_IDAO_$155_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"887:6:36","type":""},{"name":"end","nodeType":"YulTypedName","src":"895:3:36","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"903:5:36","type":""}],"src":"834:167:36"},{"body":{"nodeType":"YulBlock","src":"1096:286:36","statements":[{"body":{"nodeType":"YulBlock","src":"1142:83:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"1144:77:36"},"nodeType":"YulFunctionCall","src":"1144:79:36"},"nodeType":"YulExpressionStatement","src":"1144:79:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"1117:7:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"1126:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"1113:3:36"},"nodeType":"YulFunctionCall","src":"1113:23:36"},{"kind":"number","nodeType":"YulLiteral","src":"1138:2:36","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"1109:3:36"},"nodeType":"YulFunctionCall","src":"1109:32:36"},"nodeType":"YulIf","src":"1106:119:36"},{"nodeType":"YulBlock","src":"1235:140:36","statements":[{"nodeType":"YulVariableDeclaration","src":"1250:15:36","value":{"kind":"number","nodeType":"YulLiteral","src":"1264:1:36","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"1254:6:36","type":""}]},{"nodeType":"YulAssignment","src":"1279:86:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1337:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"1348:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1333:3:36"},"nodeType":"YulFunctionCall","src":"1333:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1357:7:36"}],"functionName":{"name":"abi_decode_t_contract$_IDAO_$155_fromMemory","nodeType":"YulIdentifier","src":"1289:43:36"},"nodeType":"YulFunctionCall","src":"1289:76:36"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1279:6:36"}]}]}]},"name":"abi_decode_tuple_t_contract$_IDAO_$155_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1066:9:36","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"1077:7:36","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"1089:6:36","type":""}],"src":"1007:375:36"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_contract$_IDAO_$155(value) -> cleaned {\n        cleaned := cleanup_t_address(value)\n    }\n\n    function validator_revert_t_contract$_IDAO_$155(value) {\n        if iszero(eq(value, cleanup_t_contract$_IDAO_$155(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_contract$_IDAO_$155_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_contract$_IDAO_$155(value)\n    }\n\n    function abi_decode_tuple_t_contract$_IDAO_$155_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_contract$_IDAO_$155_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n}\n","id":36,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60a060405234801561001057600080fd5b506040516133693803806133698339818101604052810190610032919061015a565b80808073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505050604051610076906100d8565b604051809103906000f080158015610092573d6000803e3d6000fd5b506000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610187565b612a118061095883390190565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610115826100ea565b9050919050565b60006101278261010a565b9050919050565b6101378161011c565b811461014257600080fd5b50565b6000815190506101548161012e565b92915050565b6000602082840312156101705761016f6100e5565b5b600061017e84828501610145565b91505092915050565b6080516107af6101a960003960008181610190015261027101526107af6000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806301ffc9a71461005c5780631a0d86101461008c5780631c7b4de4146100965780634162169f146100b457806341de6830146100d2575b600080fd5b6100766004803603810190610071919061044b565b6100f0565b6040516100839190610493565b60405180910390f35b61009461016a565b005b61009e610249565b6040516100ab91906104c7565b60405180910390f35b6100bc61026d565b6040516100c99190610561565b60405180910390f35b6100da610295565b6040516100e791906105f3565b60405180910390f35b60007f41de6830000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061016357506101628261029e565b5b9050919050565b7f1bd70c5aa931fa900de716024b36e36cc236a1ce16d32948668c08aa04e680f26101c67f0000000000000000000000000000000000000000000000000000000000000000306101b8610308565b846101c1610310565b61031d565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639cbf9e366040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561022e57600080fd5b505af1158015610242573d6000803e3d6000fd5b5050505050565b7f1bd70c5aa931fa900de716024b36e36cc236a1ce16d32948668c08aa04e680f281565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60006002905090565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b3660008036915091509091565b8573ffffffffffffffffffffffffffffffffffffffff1663fdef910686868686866040518663ffffffff1660e01b815260040161035e95949392919061068d565b602060405180830381865afa15801561037b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039f9190610707565b6103e657858585856040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526004016103dd9493929190610734565b60405180910390fd5b505050505050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610428816103f3565b811461043357600080fd5b50565b6000813590506104458161041f565b92915050565b600060208284031215610461576104606103ee565b5b600061046f84828501610436565b91505092915050565b60008115159050919050565b61048d81610478565b82525050565b60006020820190506104a86000830184610484565b92915050565b6000819050919050565b6104c1816104ae565b82525050565b60006020820190506104dc60008301846104b8565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061052761052261051d846104e2565b610502565b6104e2565b9050919050565b60006105398261050c565b9050919050565b600061054b8261052e565b9050919050565b61055b81610540565b82525050565b60006020820190506105766000830184610552565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106105bc576105bb61057c565b5b50565b60008190506105cd826105ab565b919050565b60006105dd826105bf565b9050919050565b6105ed816105d2565b82525050565b600060208201905061060860008301846105e4565b92915050565b6000610619826104e2565b9050919050565b6106298161060e565b82525050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b600061066c838561062f565b9350610679838584610640565b6106828361064f565b840190509392505050565b60006080820190506106a26000830188610620565b6106af6020830187610620565b6106bc60408301866104b8565b81810360608301526106cf818486610660565b90509695505050505050565b6106e481610478565b81146106ef57600080fd5b50565b600081519050610701816106db565b92915050565b60006020828403121561071d5761071c6103ee565b5b600061072b848285016106f2565b91505092915050565b60006080820190506107496000830187610620565b6107566020830186610620565b6107636040830185610620565b61077060608301846104b8565b9594505050505056fea2646970667358221220b3f8dc1a6d3b7ade4ee08f458fdb6e383762323d52d01070caec8fe846c033e764736f6c6343000813003360806040523480156200001157600080fd5b506040518060400160405280600f81526020017f4661726d204c656e646572204e465400000000000000000000000000000000008152506040518060400160405280600381526020017f464c4e000000000000000000000000000000000000000000000000000000000081525081600090816200008f919062000324565b508060019081620000a1919062000324565b5050506200040b565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200012c57607f821691505b602082108103620001425762000141620000e4565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620001ac7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200016d565b620001b886836200016d565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000205620001ff620001f984620001d0565b620001da565b620001d0565b9050919050565b6000819050919050565b6200022183620001e4565b6200023962000230826200020c565b8484546200017a565b825550505050565b600090565b6200025062000241565b6200025d81848462000216565b505050565b5b8181101562000285576200027960008262000246565b60018101905062000263565b5050565b601f821115620002d4576200029e8162000148565b620002a9846200015d565b81016020851015620002b9578190505b620002d1620002c8856200015d565b83018262000262565b50505b505050565b600082821c905092915050565b6000620002f960001984600802620002d9565b1980831691505092915050565b6000620003148383620002e6565b9150826002028217905092915050565b6200032f82620000aa565b67ffffffffffffffff8111156200034b576200034a620000b5565b5b62000357825462000113565b6200036482828562000289565b600060209050601f8311600181146200039c576000841562000387578287015190505b62000393858262000306565b86555062000403565b601f198416620003ac8662000148565b60005b82811015620003d657848901518255600182019150602085019450602081019050620003af565b86831015620003f65784890151620003f2601f891682620002e6565b8355505b6001600288020188555050505b505050505050565b6125f6806200041b6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806370a082311161008c578063a22cb46511610066578063a22cb46514610249578063b88d4fde14610265578063c87b56dd14610281578063e985e9c5146102b1576100ea565b806370a08231146101f157806395d89b41146102215780639cbf9e361461023f576100ea565b8063095ea7b3116100c8578063095ea7b31461016d57806323b872dd1461018957806342842e0e146101a55780636352211e146101c1576100ea565b806301ffc9a7146100ef57806306fdde031461011f578063081812fc1461013d575b600080fd5b610109600480360381019061010491906118f2565b6102e1565b604051610116919061193a565b60405180910390f35b610127610342565b60405161013491906119e5565b60405180910390f35b61015760048036038101906101529190611a3d565b6103d4565b6040516101649190611aab565b60405180910390f35b61018760048036038101906101829190611af2565b61041a565b005b6101a3600480360381019061019e9190611b32565b610531565b005b6101bf60048036038101906101ba9190611b32565b610591565b005b6101db60048036038101906101d69190611a3d565b6105b1565b6040516101e89190611aab565b60405180910390f35b61020b60048036038101906102069190611b85565b610637565b6040516102189190611bc1565b60405180910390f35b6102296106ee565b60405161023691906119e5565b60405180910390f35b610247610780565b005b610263600480360381019061025e9190611c08565b6107a5565b005b61027f600480360381019061027a9190611d7d565b6107bb565b005b61029b60048036038101906102969190611a3d565b61081d565b6040516102a891906119e5565b60405180910390f35b6102cb60048036038101906102c69190611e00565b61092f565b6040516102d8919061193a565b60405180910390f35b6000634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061033b575061033a826109c3565b5b9050919050565b60606000805461035190611e6f565b80601f016020809104026020016040519081016040528092919081815260200182805461037d90611e6f565b80156103ca5780601f1061039f576101008083540402835291602001916103ca565b820191906000526020600020905b8154815290600101906020018083116103ad57829003601f168201915b5050505050905090565b60006103df82610aa5565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610425826105b1565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610495576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048c90611f12565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166104b4610af0565b73ffffffffffffffffffffffffffffffffffffffff1614806104e357506104e2816104dd610af0565b61092f565b5b610522576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051990611fa4565b60405180910390fd5b61052c8383610af8565b505050565b61054261053c610af0565b82610bb1565b610581576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057890612036565b60405180910390fd5b61058c838383610c46565b505050565b6105ac838383604051806020016040528060008152506107bb565b505050565b6000806105bd83610f3f565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361062e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610625906120a2565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036106a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069e90612134565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600180546106fd90611e6f565b80601f016020809104026020016040519081016040528092919081815260200182805461072990611e6f565b80156107765780601f1061074b57610100808354040283529160200191610776565b820191906000526020600020905b81548152906001019060200180831161075957829003601f168201915b5050505050905090565b61078a6007610f7c565b60006107966007610f92565b90506107a23382610fa0565b50565b6107b76107b0610af0565b83836111bd565b5050565b6107cc6107c6610af0565b83610bb1565b61080b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080290612036565b60405180910390fd5b61081784848484611329565b50505050565b606061082882610aa5565b600060066000848152602001908152602001600020805461084890611e6f565b80601f016020809104026020016040519081016040528092919081815260200182805461087490611e6f565b80156108c15780601f10610896576101008083540402835291602001916108c1565b820191906000526020600020905b8154815290600101906020018083116108a457829003601f168201915b5050505050905060006108d2611385565b905060008151036108e757819250505061092a565b60008251111561091c578082604051602001610904929190612190565b6040516020818303038152906040529250505061092a565b6109258461139c565b925050505b919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610a8e57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610a9e5750610a9d82611404565b5b9050919050565b610aae8161146e565b610aed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae4906120a2565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610b6b836105b1565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610bbd836105b1565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610bff5750610bfe818561092f565b5b80610c3d57508373ffffffffffffffffffffffffffffffffffffffff16610c25846103d4565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610c66826105b1565b73ffffffffffffffffffffffffffffffffffffffff1614610cbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb390612226565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d22906122b8565b60405180910390fd5b610d3883838360016114af565b8273ffffffffffffffffffffffffffffffffffffffff16610d58826105b1565b73ffffffffffffffffffffffffffffffffffffffff1614610dae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da590612226565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610f3a83838360016114b5565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6001816000016000828254019250508190555050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361100f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100690612324565b60405180910390fd5b6110188161146e565b15611058576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104f90612390565b60405180910390fd5b6110666000838360016114af565b61106f8161146e565b156110af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a690612390565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46111b96000838360016114b5565b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361122b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611222906123fc565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161131c919061193a565b60405180910390a3505050565b611334848484610c46565b611340848484846114bb565b61137f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113769061248e565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606113a782610aa5565b60006113b1611385565b905060008151116113d157604051806020016040528060008152506113fc565b806113db84611642565b6040516020016113ec929190612190565b6040516020818303038152906040525b915050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff1661149083610f3f565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b50505050565b50505050565b60006114dc8473ffffffffffffffffffffffffffffffffffffffff16611710565b15611635578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611505610af0565b8786866040518563ffffffff1660e01b81526004016115279493929190612503565b6020604051808303816000875af192505050801561156357506040513d601f19601f820116820180604052508101906115609190612564565b60015b6115e5573d8060008114611593576040519150601f19603f3d011682016040523d82523d6000602084013e611598565b606091505b5060008151036115dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115d49061248e565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061163a565b600190505b949350505050565b60606000600161165184611733565b01905060008167ffffffffffffffff8111156116705761166f611c52565b5b6040519080825280601f01601f1916602001820160405280156116a25781602001600182028036833780820191505090505b509050600082602001820190505b600115611705578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816116f9576116f8612591565b5b049450600085036116b0575b819350505050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611791577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161178757611786612591565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106117ce576d04ee2d6d415b85acef810000000083816117c4576117c3612591565b5b0492506020810190505b662386f26fc1000083106117fd57662386f26fc1000083816117f3576117f2612591565b5b0492506010810190505b6305f5e1008310611826576305f5e100838161181c5761181b612591565b5b0492506008810190505b612710831061184b57612710838161184157611840612591565b5b0492506004810190505b6064831061186e576064838161186457611863612591565b5b0492506002810190505b600a831061187d576001810190505b80915050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6118cf8161189a565b81146118da57600080fd5b50565b6000813590506118ec816118c6565b92915050565b60006020828403121561190857611907611890565b5b6000611916848285016118dd565b91505092915050565b60008115159050919050565b6119348161191f565b82525050565b600060208201905061194f600083018461192b565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561198f578082015181840152602081019050611974565b60008484015250505050565b6000601f19601f8301169050919050565b60006119b782611955565b6119c18185611960565b93506119d1818560208601611971565b6119da8161199b565b840191505092915050565b600060208201905081810360008301526119ff81846119ac565b905092915050565b6000819050919050565b611a1a81611a07565b8114611a2557600080fd5b50565b600081359050611a3781611a11565b92915050565b600060208284031215611a5357611a52611890565b5b6000611a6184828501611a28565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a9582611a6a565b9050919050565b611aa581611a8a565b82525050565b6000602082019050611ac06000830184611a9c565b92915050565b611acf81611a8a565b8114611ada57600080fd5b50565b600081359050611aec81611ac6565b92915050565b60008060408385031215611b0957611b08611890565b5b6000611b1785828601611add565b9250506020611b2885828601611a28565b9150509250929050565b600080600060608486031215611b4b57611b4a611890565b5b6000611b5986828701611add565b9350506020611b6a86828701611add565b9250506040611b7b86828701611a28565b9150509250925092565b600060208284031215611b9b57611b9a611890565b5b6000611ba984828501611add565b91505092915050565b611bbb81611a07565b82525050565b6000602082019050611bd66000830184611bb2565b92915050565b611be58161191f565b8114611bf057600080fd5b50565b600081359050611c0281611bdc565b92915050565b60008060408385031215611c1f57611c1e611890565b5b6000611c2d85828601611add565b9250506020611c3e85828601611bf3565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611c8a8261199b565b810181811067ffffffffffffffff82111715611ca957611ca8611c52565b5b80604052505050565b6000611cbc611886565b9050611cc88282611c81565b919050565b600067ffffffffffffffff821115611ce857611ce7611c52565b5b611cf18261199b565b9050602081019050919050565b82818337600083830152505050565b6000611d20611d1b84611ccd565b611cb2565b905082815260208101848484011115611d3c57611d3b611c4d565b5b611d47848285611cfe565b509392505050565b600082601f830112611d6457611d63611c48565b5b8135611d74848260208601611d0d565b91505092915050565b60008060008060808587031215611d9757611d96611890565b5b6000611da587828801611add565b9450506020611db687828801611add565b9350506040611dc787828801611a28565b925050606085013567ffffffffffffffff811115611de857611de7611895565b5b611df487828801611d4f565b91505092959194509250565b60008060408385031215611e1757611e16611890565b5b6000611e2585828601611add565b9250506020611e3685828601611add565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611e8757607f821691505b602082108103611e9a57611e99611e40565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000611efc602183611960565b9150611f0782611ea0565b604082019050919050565b60006020820190508181036000830152611f2b81611eef565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000611f8e603d83611960565b9150611f9982611f32565b604082019050919050565b60006020820190508181036000830152611fbd81611f81565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000612020602d83611960565b915061202b82611fc4565b604082019050919050565b6000602082019050818103600083015261204f81612013565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b600061208c601883611960565b915061209782612056565b602082019050919050565b600060208201905081810360008301526120bb8161207f565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b600061211e602983611960565b9150612129826120c2565b604082019050919050565b6000602082019050818103600083015261214d81612111565b9050919050565b600081905092915050565b600061216a82611955565b6121748185612154565b9350612184818560208601611971565b80840191505092915050565b600061219c828561215f565b91506121a8828461215f565b91508190509392505050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000612210602583611960565b915061221b826121b4565b604082019050919050565b6000602082019050818103600083015261223f81612203565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006122a2602483611960565b91506122ad82612246565b604082019050919050565b600060208201905081810360008301526122d181612295565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b600061230e602083611960565b9150612319826122d8565b602082019050919050565b6000602082019050818103600083015261233d81612301565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b600061237a601c83611960565b915061238582612344565b602082019050919050565b600060208201905081810360008301526123a98161236d565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b60006123e6601983611960565b91506123f1826123b0565b602082019050919050565b60006020820190508181036000830152612415816123d9565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000612478603283611960565b91506124838261241c565b604082019050919050565b600060208201905081810360008301526124a78161246b565b9050919050565b600081519050919050565b600082825260208201905092915050565b60006124d5826124ae565b6124df81856124b9565b93506124ef818560208601611971565b6124f88161199b565b840191505092915050565b60006080820190506125186000830187611a9c565b6125256020830186611a9c565b6125326040830185611bb2565b818103606083015261254481846124ca565b905095945050505050565b60008151905061255e816118c6565b92915050565b60006020828403121561257a57612579611890565b5b60006125888482850161254f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea2646970667358221220890b833bf6def222dcdf8a7e75cbd7bc6af5953d31717801d0762bff0d318af864736f6c63430008130033","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x3369 CODESIZE SUB DUP1 PUSH2 0x3369 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH2 0x32 SWAP2 SWAP1 PUSH2 0x15A JUMP JUMPDEST DUP1 DUP1 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP POP POP PUSH1 0x40 MLOAD PUSH2 0x76 SWAP1 PUSH2 0xD8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH2 0x92 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP PUSH2 0x187 JUMP JUMPDEST PUSH2 0x2A11 DUP1 PUSH2 0x958 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x115 DUP3 PUSH2 0xEA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x127 DUP3 PUSH2 0x10A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x137 DUP2 PUSH2 0x11C JUMP JUMPDEST DUP2 EQ PUSH2 0x142 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x154 DUP2 PUSH2 0x12E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x170 JUMPI PUSH2 0x16F PUSH2 0xE5 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x17E DUP5 DUP3 DUP6 ADD PUSH2 0x145 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x7AF PUSH2 0x1A9 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x190 ADD MSTORE PUSH2 0x271 ADD MSTORE PUSH2 0x7AF PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x57 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x5C JUMPI DUP1 PUSH4 0x1A0D8610 EQ PUSH2 0x8C JUMPI DUP1 PUSH4 0x1C7B4DE4 EQ PUSH2 0x96 JUMPI DUP1 PUSH4 0x4162169F EQ PUSH2 0xB4 JUMPI DUP1 PUSH4 0x41DE6830 EQ PUSH2 0xD2 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x76 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x71 SWAP2 SWAP1 PUSH2 0x44B JUMP JUMPDEST PUSH2 0xF0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x83 SWAP2 SWAP1 PUSH2 0x493 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x94 PUSH2 0x16A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x9E PUSH2 0x249 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAB SWAP2 SWAP1 PUSH2 0x4C7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xBC PUSH2 0x26D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC9 SWAP2 SWAP1 PUSH2 0x561 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDA PUSH2 0x295 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE7 SWAP2 SWAP1 PUSH2 0x5F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x41DE683000000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x163 JUMPI POP PUSH2 0x162 DUP3 PUSH2 0x29E JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x1BD70C5AA931FA900DE716024B36E36CC236A1CE16D32948668C08AA04E680F2 PUSH2 0x1C6 PUSH32 0x0 ADDRESS PUSH2 0x1B8 PUSH2 0x308 JUMP JUMPDEST DUP5 PUSH2 0x1C1 PUSH2 0x310 JUMP JUMPDEST PUSH2 0x31D JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x9CBF9E36 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x22E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x242 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH32 0x1BD70C5AA931FA900DE716024B36E36CC236A1CE16D32948668C08AA04E680F2 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 DUP1 CALLDATASIZE SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xFDEF9106 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x35E SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x68D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x37B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x39F SWAP2 SWAP1 PUSH2 0x707 JUMP JUMPDEST PUSH2 0x3E6 JUMPI DUP6 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH32 0x32DBE3B400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3DD SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x734 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x428 DUP2 PUSH2 0x3F3 JUMP JUMPDEST DUP2 EQ PUSH2 0x433 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x445 DUP2 PUSH2 0x41F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x461 JUMPI PUSH2 0x460 PUSH2 0x3EE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x46F DUP5 DUP3 DUP6 ADD PUSH2 0x436 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x48D DUP2 PUSH2 0x478 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x4A8 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x484 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4C1 DUP2 PUSH2 0x4AE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x4DC PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x4B8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x527 PUSH2 0x522 PUSH2 0x51D DUP5 PUSH2 0x4E2 JUMP JUMPDEST PUSH2 0x502 JUMP JUMPDEST PUSH2 0x4E2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x539 DUP3 PUSH2 0x50C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x54B DUP3 PUSH2 0x52E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x55B DUP2 PUSH2 0x540 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x576 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x552 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x3 DUP2 LT PUSH2 0x5BC JUMPI PUSH2 0x5BB PUSH2 0x57C JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH2 0x5CD DUP3 PUSH2 0x5AB JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5DD DUP3 PUSH2 0x5BF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5ED DUP2 PUSH2 0x5D2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x608 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x5E4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x619 DUP3 PUSH2 0x4E2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x629 DUP2 PUSH2 0x60E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x66C DUP4 DUP6 PUSH2 0x62F JUMP JUMPDEST SWAP4 POP PUSH2 0x679 DUP4 DUP6 DUP5 PUSH2 0x640 JUMP JUMPDEST PUSH2 0x682 DUP4 PUSH2 0x64F JUMP JUMPDEST DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x6A2 PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x620 JUMP JUMPDEST PUSH2 0x6AF PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x620 JUMP JUMPDEST PUSH2 0x6BC PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x4B8 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x6CF DUP2 DUP5 DUP7 PUSH2 0x660 JUMP JUMPDEST SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x6E4 DUP2 PUSH2 0x478 JUMP JUMPDEST DUP2 EQ PUSH2 0x6EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x701 DUP2 PUSH2 0x6DB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x71D JUMPI PUSH2 0x71C PUSH2 0x3EE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x72B DUP5 DUP3 DUP6 ADD PUSH2 0x6F2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x749 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x620 JUMP JUMPDEST PUSH2 0x756 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x620 JUMP JUMPDEST PUSH2 0x763 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x620 JUMP JUMPDEST PUSH2 0x770 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x4B8 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB3 0xF8 0xDC BYTE PUSH14 0x3B7ADE4EE08F458FDB6E38376232 RETURNDATASIZE MSTORE 0xD0 LT PUSH17 0xCAEC8FE846C033E764736F6C6343000813 STOP CALLER PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xF DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4661726D204C656E646572204E46540000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x464C4E0000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 PUSH1 0x0 SWAP1 DUP2 PUSH3 0x8F SWAP2 SWAP1 PUSH3 0x324 JUMP JUMPDEST POP DUP1 PUSH1 0x1 SWAP1 DUP2 PUSH3 0xA1 SWAP2 SWAP1 PUSH3 0x324 JUMP JUMPDEST POP POP POP PUSH3 0x40B JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x12C JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x142 JUMPI PUSH3 0x141 PUSH3 0xE4 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH3 0x1AC PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH3 0x16D JUMP JUMPDEST PUSH3 0x1B8 DUP7 DUP4 PUSH3 0x16D JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x205 PUSH3 0x1FF PUSH3 0x1F9 DUP5 PUSH3 0x1D0 JUMP JUMPDEST PUSH3 0x1DA JUMP JUMPDEST PUSH3 0x1D0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x221 DUP4 PUSH3 0x1E4 JUMP JUMPDEST PUSH3 0x239 PUSH3 0x230 DUP3 PUSH3 0x20C JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH3 0x17A JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH3 0x250 PUSH3 0x241 JUMP JUMPDEST PUSH3 0x25D DUP2 DUP5 DUP5 PUSH3 0x216 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x285 JUMPI PUSH3 0x279 PUSH1 0x0 DUP3 PUSH3 0x246 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x263 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x2D4 JUMPI PUSH3 0x29E DUP2 PUSH3 0x148 JUMP JUMPDEST PUSH3 0x2A9 DUP5 PUSH3 0x15D JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH3 0x2B9 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH3 0x2D1 PUSH3 0x2C8 DUP6 PUSH3 0x15D JUMP JUMPDEST DUP4 ADD DUP3 PUSH3 0x262 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x2F9 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH3 0x2D9 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x314 DUP4 DUP4 PUSH3 0x2E6 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x32F DUP3 PUSH3 0xAA JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x34B JUMPI PUSH3 0x34A PUSH3 0xB5 JUMP JUMPDEST JUMPDEST PUSH3 0x357 DUP3 SLOAD PUSH3 0x113 JUMP JUMPDEST PUSH3 0x364 DUP3 DUP3 DUP6 PUSH3 0x289 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x39C JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x387 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH3 0x393 DUP6 DUP3 PUSH3 0x306 JUMP JUMPDEST DUP7 SSTORE POP PUSH3 0x403 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH3 0x3AC DUP7 PUSH3 0x148 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x3D6 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x3AF JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH3 0x3F6 JUMPI DUP5 DUP10 ADD MLOAD PUSH3 0x3F2 PUSH1 0x1F DUP10 AND DUP3 PUSH3 0x2E6 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x25F6 DUP1 PUSH3 0x41B PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xEA JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x249 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x265 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x281 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x2B1 JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1F1 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x221 JUMPI DUP1 PUSH4 0x9CBF9E36 EQ PUSH2 0x23F JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x16D JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x189 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x1A5 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x1C1 JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x11F JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x13D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x109 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x104 SWAP2 SWAP1 PUSH2 0x18F2 JUMP JUMPDEST PUSH2 0x2E1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x116 SWAP2 SWAP1 PUSH2 0x193A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x127 PUSH2 0x342 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x134 SWAP2 SWAP1 PUSH2 0x19E5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x157 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x152 SWAP2 SWAP1 PUSH2 0x1A3D JUMP JUMPDEST PUSH2 0x3D4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x164 SWAP2 SWAP1 PUSH2 0x1AAB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x187 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x182 SWAP2 SWAP1 PUSH2 0x1AF2 JUMP JUMPDEST PUSH2 0x41A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1A3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x19E SWAP2 SWAP1 PUSH2 0x1B32 JUMP JUMPDEST PUSH2 0x531 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1BF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BA SWAP2 SWAP1 PUSH2 0x1B32 JUMP JUMPDEST PUSH2 0x591 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1DB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1D6 SWAP2 SWAP1 PUSH2 0x1A3D JUMP JUMPDEST PUSH2 0x5B1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E8 SWAP2 SWAP1 PUSH2 0x1AAB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x206 SWAP2 SWAP1 PUSH2 0x1B85 JUMP JUMPDEST PUSH2 0x637 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x218 SWAP2 SWAP1 PUSH2 0x1BC1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x229 PUSH2 0x6EE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x236 SWAP2 SWAP1 PUSH2 0x19E5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x247 PUSH2 0x780 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x263 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x25E SWAP2 SWAP1 PUSH2 0x1C08 JUMP JUMPDEST PUSH2 0x7A5 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x27F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x27A SWAP2 SWAP1 PUSH2 0x1D7D JUMP JUMPDEST PUSH2 0x7BB JUMP JUMPDEST STOP JUMPDEST PUSH2 0x29B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x296 SWAP2 SWAP1 PUSH2 0x1A3D JUMP JUMPDEST PUSH2 0x81D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2A8 SWAP2 SWAP1 PUSH2 0x19E5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2CB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2C6 SWAP2 SWAP1 PUSH2 0x1E00 JUMP JUMPDEST PUSH2 0x92F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2D8 SWAP2 SWAP1 PUSH2 0x193A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH4 0x49064906 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x33B JUMPI POP PUSH2 0x33A DUP3 PUSH2 0x9C3 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x351 SWAP1 PUSH2 0x1E6F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x37D SWAP1 PUSH2 0x1E6F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3CA JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x39F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3CA JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3AD JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3DF DUP3 PUSH2 0xAA5 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x425 DUP3 PUSH2 0x5B1 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x495 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x48C SWAP1 PUSH2 0x1F12 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x4B4 PUSH2 0xAF0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x4E3 JUMPI POP PUSH2 0x4E2 DUP2 PUSH2 0x4DD PUSH2 0xAF0 JUMP JUMPDEST PUSH2 0x92F JUMP JUMPDEST JUMPDEST PUSH2 0x522 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x519 SWAP1 PUSH2 0x1FA4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x52C DUP4 DUP4 PUSH2 0xAF8 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x542 PUSH2 0x53C PUSH2 0xAF0 JUMP JUMPDEST DUP3 PUSH2 0xBB1 JUMP JUMPDEST PUSH2 0x581 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x578 SWAP1 PUSH2 0x2036 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x58C DUP4 DUP4 DUP4 PUSH2 0xC46 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x5AC DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x7BB JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x5BD DUP4 PUSH2 0xF3F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x62E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x625 SWAP1 PUSH2 0x20A2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x6A7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x69E SWAP1 PUSH2 0x2134 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x6FD SWAP1 PUSH2 0x1E6F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x729 SWAP1 PUSH2 0x1E6F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x776 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x74B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x776 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x759 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x78A PUSH1 0x7 PUSH2 0xF7C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x796 PUSH1 0x7 PUSH2 0xF92 JUMP JUMPDEST SWAP1 POP PUSH2 0x7A2 CALLER DUP3 PUSH2 0xFA0 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x7B7 PUSH2 0x7B0 PUSH2 0xAF0 JUMP JUMPDEST DUP4 DUP4 PUSH2 0x11BD JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x7CC PUSH2 0x7C6 PUSH2 0xAF0 JUMP JUMPDEST DUP4 PUSH2 0xBB1 JUMP JUMPDEST PUSH2 0x80B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x802 SWAP1 PUSH2 0x2036 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x817 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1329 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x828 DUP3 PUSH2 0xAA5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH2 0x848 SWAP1 PUSH2 0x1E6F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x874 SWAP1 PUSH2 0x1E6F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x8C1 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x896 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x8C1 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x8A4 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH2 0x8D2 PUSH2 0x1385 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x8E7 JUMPI DUP2 SWAP3 POP POP POP PUSH2 0x92A JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x91C JUMPI DUP1 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x904 SWAP3 SWAP2 SWAP1 PUSH2 0x2190 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP3 POP POP POP PUSH2 0x92A JUMP JUMPDEST PUSH2 0x925 DUP5 PUSH2 0x139C JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0xA8E JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0xA9E JUMPI POP PUSH2 0xA9D DUP3 PUSH2 0x1404 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xAAE DUP2 PUSH2 0x146E JUMP JUMPDEST PUSH2 0xAED JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xAE4 SWAP1 PUSH2 0x20A2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB6B DUP4 PUSH2 0x5B1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xBBD DUP4 PUSH2 0x5B1 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xBFF JUMPI POP PUSH2 0xBFE DUP2 DUP6 PUSH2 0x92F JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xC3D JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC25 DUP5 PUSH2 0x3D4 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC66 DUP3 PUSH2 0x5B1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCBC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB3 SWAP1 PUSH2 0x2226 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xD2B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD22 SWAP1 PUSH2 0x22B8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xD38 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x14AF JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xD58 DUP3 PUSH2 0x5B1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xDAE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDA5 SWAP1 PUSH2 0x2226 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xF3A DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x14B5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x100F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1006 SWAP1 PUSH2 0x2324 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1018 DUP2 PUSH2 0x146E JUMP JUMPDEST ISZERO PUSH2 0x1058 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x104F SWAP1 PUSH2 0x2390 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1066 PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x14AF JUMP JUMPDEST PUSH2 0x106F DUP2 PUSH2 0x146E JUMP JUMPDEST ISZERO PUSH2 0x10AF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x10A6 SWAP1 PUSH2 0x2390 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x11B9 PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x14B5 JUMP JUMPDEST POP POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x122B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1222 SWAP1 PUSH2 0x23FC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0x131C SWAP2 SWAP1 PUSH2 0x193A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x1334 DUP5 DUP5 DUP5 PUSH2 0xC46 JUMP JUMPDEST PUSH2 0x1340 DUP5 DUP5 DUP5 DUP5 PUSH2 0x14BB JUMP JUMPDEST PUSH2 0x137F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1376 SWAP1 PUSH2 0x248E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x13A7 DUP3 PUSH2 0xAA5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13B1 PUSH2 0x1385 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x13D1 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x13FC JUMP JUMPDEST DUP1 PUSH2 0x13DB DUP5 PUSH2 0x1642 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x13EC SWAP3 SWAP2 SWAP1 PUSH2 0x2190 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1490 DUP4 PUSH2 0xF3F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14DC DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1710 JUMP JUMPDEST ISZERO PUSH2 0x1635 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x1505 PUSH2 0xAF0 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1527 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2503 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1563 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1560 SWAP2 SWAP1 PUSH2 0x2564 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x15E5 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1593 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1598 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x15DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15D4 SWAP1 PUSH2 0x248E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x163A JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x1651 DUP5 PUSH2 0x1733 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1670 JUMPI PUSH2 0x166F PUSH2 0x1C52 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x16A2 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x1705 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x16F9 JUMPI PUSH2 0x16F8 PUSH2 0x2591 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 SUB PUSH2 0x16B0 JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x1791 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x1787 JUMPI PUSH2 0x1786 PUSH2 0x2591 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x17CE JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x17C4 JUMPI PUSH2 0x17C3 PUSH2 0x2591 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x17FD JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x17F3 JUMPI PUSH2 0x17F2 PUSH2 0x2591 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1826 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x181C JUMPI PUSH2 0x181B PUSH2 0x2591 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x184B JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x1841 JUMPI PUSH2 0x1840 PUSH2 0x2591 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x186E JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x1864 JUMPI PUSH2 0x1863 PUSH2 0x2591 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x187D JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x18CF DUP2 PUSH2 0x189A JUMP JUMPDEST DUP2 EQ PUSH2 0x18DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x18EC DUP2 PUSH2 0x18C6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1908 JUMPI PUSH2 0x1907 PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1916 DUP5 DUP3 DUP6 ADD PUSH2 0x18DD JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1934 DUP2 PUSH2 0x191F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x194F PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x192B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x198F JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1974 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19B7 DUP3 PUSH2 0x1955 JUMP JUMPDEST PUSH2 0x19C1 DUP2 DUP6 PUSH2 0x1960 JUMP JUMPDEST SWAP4 POP PUSH2 0x19D1 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1971 JUMP JUMPDEST PUSH2 0x19DA DUP2 PUSH2 0x199B JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x19FF DUP2 DUP5 PUSH2 0x19AC JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1A1A DUP2 PUSH2 0x1A07 JUMP JUMPDEST DUP2 EQ PUSH2 0x1A25 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1A37 DUP2 PUSH2 0x1A11 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A53 JUMPI PUSH2 0x1A52 PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1A61 DUP5 DUP3 DUP6 ADD PUSH2 0x1A28 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A95 DUP3 PUSH2 0x1A6A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1AA5 DUP2 PUSH2 0x1A8A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1AC0 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1A9C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1ACF DUP2 PUSH2 0x1A8A JUMP JUMPDEST DUP2 EQ PUSH2 0x1ADA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1AEC DUP2 PUSH2 0x1AC6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B09 JUMPI PUSH2 0x1B08 PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1B17 DUP6 DUP3 DUP7 ADD PUSH2 0x1ADD JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1B28 DUP6 DUP3 DUP7 ADD PUSH2 0x1A28 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1B4B JUMPI PUSH2 0x1B4A PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1B59 DUP7 DUP3 DUP8 ADD PUSH2 0x1ADD JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1B6A DUP7 DUP3 DUP8 ADD PUSH2 0x1ADD JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1B7B DUP7 DUP3 DUP8 ADD PUSH2 0x1A28 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B9B JUMPI PUSH2 0x1B9A PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1BA9 DUP5 DUP3 DUP6 ADD PUSH2 0x1ADD JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1BBB DUP2 PUSH2 0x1A07 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1BD6 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1BB2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1BE5 DUP2 PUSH2 0x191F JUMP JUMPDEST DUP2 EQ PUSH2 0x1BF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1C02 DUP2 PUSH2 0x1BDC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C1F JUMPI PUSH2 0x1C1E PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1C2D DUP6 DUP3 DUP7 ADD PUSH2 0x1ADD JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1C3E DUP6 DUP3 DUP7 ADD PUSH2 0x1BF3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1C8A DUP3 PUSH2 0x199B JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1CA9 JUMPI PUSH2 0x1CA8 PUSH2 0x1C52 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CBC PUSH2 0x1886 JUMP JUMPDEST SWAP1 POP PUSH2 0x1CC8 DUP3 DUP3 PUSH2 0x1C81 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1CE8 JUMPI PUSH2 0x1CE7 PUSH2 0x1C52 JUMP JUMPDEST JUMPDEST PUSH2 0x1CF1 DUP3 PUSH2 0x199B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D20 PUSH2 0x1D1B DUP5 PUSH2 0x1CCD JUMP JUMPDEST PUSH2 0x1CB2 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x1D3C JUMPI PUSH2 0x1D3B PUSH2 0x1C4D JUMP JUMPDEST JUMPDEST PUSH2 0x1D47 DUP5 DUP3 DUP6 PUSH2 0x1CFE JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1D64 JUMPI PUSH2 0x1D63 PUSH2 0x1C48 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1D74 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x1D0D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1D97 JUMPI PUSH2 0x1D96 PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1DA5 DUP8 DUP3 DUP9 ADD PUSH2 0x1ADD JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x1DB6 DUP8 DUP3 DUP9 ADD PUSH2 0x1ADD JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x1DC7 DUP8 DUP3 DUP9 ADD PUSH2 0x1A28 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1DE8 JUMPI PUSH2 0x1DE7 PUSH2 0x1895 JUMP JUMPDEST JUMPDEST PUSH2 0x1DF4 DUP8 DUP3 DUP9 ADD PUSH2 0x1D4F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1E17 JUMPI PUSH2 0x1E16 PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1E25 DUP6 DUP3 DUP7 ADD PUSH2 0x1ADD JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1E36 DUP6 DUP3 DUP7 ADD PUSH2 0x1ADD JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1E87 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1E9A JUMPI PUSH2 0x1E99 PUSH2 0x1E40 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EFC PUSH1 0x21 DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x1F07 DUP3 PUSH2 0x1EA0 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1F2B DUP2 PUSH2 0x1EEF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F8E PUSH1 0x3D DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x1F99 DUP3 PUSH2 0x1F32 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1FBD DUP2 PUSH2 0x1F81 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2020 PUSH1 0x2D DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x202B DUP3 PUSH2 0x1FC4 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x204F DUP2 PUSH2 0x2013 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x208C PUSH1 0x18 DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x2097 DUP3 PUSH2 0x2056 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x20BB DUP2 PUSH2 0x207F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x211E PUSH1 0x29 DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x2129 DUP3 PUSH2 0x20C2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x214D DUP2 PUSH2 0x2111 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x216A DUP3 PUSH2 0x1955 JUMP JUMPDEST PUSH2 0x2174 DUP2 DUP6 PUSH2 0x2154 JUMP JUMPDEST SWAP4 POP PUSH2 0x2184 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1971 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x219C DUP3 DUP6 PUSH2 0x215F JUMP JUMPDEST SWAP2 POP PUSH2 0x21A8 DUP3 DUP5 PUSH2 0x215F JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2210 PUSH1 0x25 DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x221B DUP3 PUSH2 0x21B4 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x223F DUP2 PUSH2 0x2203 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x22A2 PUSH1 0x24 DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x22AD DUP3 PUSH2 0x2246 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x22D1 DUP2 PUSH2 0x2295 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x230E PUSH1 0x20 DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x2319 DUP3 PUSH2 0x22D8 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x233D DUP2 PUSH2 0x2301 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x237A PUSH1 0x1C DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x2385 DUP3 PUSH2 0x2344 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x23A9 DUP2 PUSH2 0x236D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23E6 PUSH1 0x19 DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x23F1 DUP3 PUSH2 0x23B0 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2415 DUP2 PUSH2 0x23D9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2478 PUSH1 0x32 DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x2483 DUP3 PUSH2 0x241C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x24A7 DUP2 PUSH2 0x246B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x24D5 DUP3 PUSH2 0x24AE JUMP JUMPDEST PUSH2 0x24DF DUP2 DUP6 PUSH2 0x24B9 JUMP JUMPDEST SWAP4 POP PUSH2 0x24EF DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1971 JUMP JUMPDEST PUSH2 0x24F8 DUP2 PUSH2 0x199B JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2518 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x1A9C JUMP JUMPDEST PUSH2 0x2525 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x1A9C JUMP JUMPDEST PUSH2 0x2532 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1BB2 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x2544 DUP2 DUP5 PUSH2 0x24CA JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x255E DUP2 PUSH2 0x18C6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x257A JUMPI PUSH2 0x2579 PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2588 DUP5 DUP3 DUP6 ADD PUSH2 0x254F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP10 SIGNEXTEND DUP4 EXTCODESIZE 0xF6 0xDE CALLCODE 0x22 0xDC 0xDF DUP11 PUSH31 0x75CBD7BC6AF5953D31717801D0762BFF0D318AF864736F6C63430008130033 ","sourceMap":"663:600:34:-:0;;;1086:77;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1116:4;703::3;827::4;820:11;;;;;;;;;;787:51;664:47:3;1142:16:34::1;;;;;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;1128:11;::::0;:30:::1;;;;;;;;;;;;;;;;;;1086:77:::0;663:600;;;;;;;;;;:::o;88:117:36:-;197:1;194;187:12;334:126;371:7;411:42;404:5;400:54;389:65;;334:126;;;:::o;466:96::-;503:7;532:24;550:5;532:24;:::i;:::-;521:35;;466:96;;;:::o;568:108::-;617:7;646:24;664:5;646:24;:::i;:::-;635:35;;568:108;;;:::o;682:146::-;767:36;797:5;767:36;:::i;:::-;760:5;757:47;747:75;;818:1;815;808:12;747:75;682:146;:::o;834:167::-;903:5;934:6;928:13;919:22;;950:45;989:5;950:45;:::i;:::-;834:167;;;;:::o;1007:375::-;1089:6;1138:2;1126:9;1117:7;1113:23;1109:32;1106:119;;;1144:79;;:::i;:::-;1106:119;1264:1;1289:76;1357:7;1348:6;1337:9;1333:22;1289:76;:::i;:::-;1279:86;;1235:140;1007:375;;;;:::o;663:600:34:-;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@GREET_PERMISSION_ID_4354":{"entryPoint":585,"id":4354,"parameterSlots":0,"returnSlots":0},"@_auth_376":{"entryPoint":797,"id":376,"parameterSlots":6,"returnSlots":0},"@_msgData_2685":{"entryPoint":784,"id":2685,"parameterSlots":0,"returnSlots":2},"@_msgSender_2676":{"entryPoint":776,"id":2676,"parameterSlots":0,"returnSlots":1},"@dao_305":{"entryPoint":621,"id":305,"parameterSlots":0,"returnSlots":1},"@lend_money_4386":{"entryPoint":362,"id":4386,"parameterSlots":0,"returnSlots":0},"@pluginType_245":{"entryPoint":661,"id":245,"parameterSlots":0,"returnSlots":1},"@supportsInterface_267":{"entryPoint":240,"id":267,"parameterSlots":1,"returnSlots":1},"@supportsInterface_3122":{"entryPoint":670,"id":3122,"parameterSlots":1,"returnSlots":1},"abi_decode_t_bool_fromMemory":{"entryPoint":1778,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":1078,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":1799,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4":{"entryPoint":1099,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":1568,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":1156,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32_fromStack":{"entryPoint":1208,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":1632,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_t_contract$_IDAO_$155_to_t_address_fromStack":{"entryPoint":1362,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_enum$_PluginType_$197_to_t_uint8_fromStack":{"entryPoint":1508,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_tuple_t_address_t_address_t_address_t_bytes32__to_t_address_t_address_t_address_t_bytes32__fromStack_reversed":{"entryPoint":1844,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_bytes32_t_bytes_calldata_ptr__to_t_address_t_address_t_bytes32_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":1677,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":1171,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":1223,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IDAO_$155__to_t_address__fromStack_reversed":{"entryPoint":1377,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_enum$_PluginType_$197__to_t_uint8__fromStack_reversed":{"entryPoint":1523,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_unbounded":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":1583,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":1550,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":1144,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":1198,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":1011,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_enum$_PluginType_$197":{"entryPoint":1471,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":1250,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_contract$_IDAO_$155_to_t_address":{"entryPoint":1344,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_enum$_PluginType_$197_to_t_uint8":{"entryPoint":1490,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint160_to_t_address":{"entryPoint":1326,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint160_to_t_uint160":{"entryPoint":1292,"id":null,"parameterSlots":1,"returnSlots":1},"copy_calldata_to_memory_with_cleanup":{"entryPoint":1600,"id":null,"parameterSlots":3,"returnSlots":0},"identity":{"entryPoint":1282,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x21":{"entryPoint":1404,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":null,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":1006,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":1615,"id":null,"parameterSlots":1,"returnSlots":1},"validator_assert_t_enum$_PluginType_$197":{"entryPoint":1451,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bool":{"entryPoint":1755,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":1055,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:6842:36","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:36","statements":[{"nodeType":"YulAssignment","src":"57:19:36","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:36","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:36"},"nodeType":"YulFunctionCall","src":"67:9:36"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:36"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:36","type":""}],"src":"7:75:36"},{"body":{"nodeType":"YulBlock","src":"177:28:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:36"},"nodeType":"YulFunctionCall","src":"187:12:36"},"nodeType":"YulExpressionStatement","src":"187:12:36"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:36"},{"body":{"nodeType":"YulBlock","src":"300:28:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:36"},"nodeType":"YulFunctionCall","src":"310:12:36"},"nodeType":"YulExpressionStatement","src":"310:12:36"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:36"},{"body":{"nodeType":"YulBlock","src":"378:105:36","statements":[{"nodeType":"YulAssignment","src":"388:89:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"403:5:36"},{"kind":"number","nodeType":"YulLiteral","src":"410:66:36","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"399:3:36"},"nodeType":"YulFunctionCall","src":"399:78:36"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"388:7:36"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"360:5:36","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"370:7:36","type":""}],"src":"334:149:36"},{"body":{"nodeType":"YulBlock","src":"531:78:36","statements":[{"body":{"nodeType":"YulBlock","src":"587:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"596:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"599:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"589:6:36"},"nodeType":"YulFunctionCall","src":"589:12:36"},"nodeType":"YulExpressionStatement","src":"589:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"554:5:36"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"578:5:36"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"561:16:36"},"nodeType":"YulFunctionCall","src":"561:23:36"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"551:2:36"},"nodeType":"YulFunctionCall","src":"551:34:36"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"544:6:36"},"nodeType":"YulFunctionCall","src":"544:42:36"},"nodeType":"YulIf","src":"541:62:36"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"524:5:36","type":""}],"src":"489:120:36"},{"body":{"nodeType":"YulBlock","src":"666:86:36","statements":[{"nodeType":"YulAssignment","src":"676:29:36","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"698:6:36"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"685:12:36"},"nodeType":"YulFunctionCall","src":"685:20:36"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"676:5:36"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"740:5:36"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"714:25:36"},"nodeType":"YulFunctionCall","src":"714:32:36"},"nodeType":"YulExpressionStatement","src":"714:32:36"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"644:6:36","type":""},{"name":"end","nodeType":"YulTypedName","src":"652:3:36","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"660:5:36","type":""}],"src":"615:137:36"},{"body":{"nodeType":"YulBlock","src":"823:262:36","statements":[{"body":{"nodeType":"YulBlock","src":"869:83:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"871:77:36"},"nodeType":"YulFunctionCall","src":"871:79:36"},"nodeType":"YulExpressionStatement","src":"871:79:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"844:7:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"853:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"840:3:36"},"nodeType":"YulFunctionCall","src":"840:23:36"},{"kind":"number","nodeType":"YulLiteral","src":"865:2:36","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"836:3:36"},"nodeType":"YulFunctionCall","src":"836:32:36"},"nodeType":"YulIf","src":"833:119:36"},{"nodeType":"YulBlock","src":"962:116:36","statements":[{"nodeType":"YulVariableDeclaration","src":"977:15:36","value":{"kind":"number","nodeType":"YulLiteral","src":"991:1:36","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"981:6:36","type":""}]},{"nodeType":"YulAssignment","src":"1006:62:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1040:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"1051:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1036:3:36"},"nodeType":"YulFunctionCall","src":"1036:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1060:7:36"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"1016:19:36"},"nodeType":"YulFunctionCall","src":"1016:52:36"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1006:6:36"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"793:9:36","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"804:7:36","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"816:6:36","type":""}],"src":"758:327:36"},{"body":{"nodeType":"YulBlock","src":"1133:48:36","statements":[{"nodeType":"YulAssignment","src":"1143:32:36","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1168:5:36"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1161:6:36"},"nodeType":"YulFunctionCall","src":"1161:13:36"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1154:6:36"},"nodeType":"YulFunctionCall","src":"1154:21:36"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1143:7:36"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1115:5:36","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1125:7:36","type":""}],"src":"1091:90:36"},{"body":{"nodeType":"YulBlock","src":"1246:50:36","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1263:3:36"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1283:5:36"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"1268:14:36"},"nodeType":"YulFunctionCall","src":"1268:21:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1256:6:36"},"nodeType":"YulFunctionCall","src":"1256:34:36"},"nodeType":"YulExpressionStatement","src":"1256:34:36"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1234:5:36","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1241:3:36","type":""}],"src":"1187:109:36"},{"body":{"nodeType":"YulBlock","src":"1394:118:36","statements":[{"nodeType":"YulAssignment","src":"1404:26:36","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1416:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"1427:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1412:3:36"},"nodeType":"YulFunctionCall","src":"1412:18:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1404:4:36"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1478:6:36"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1491:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"1502:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1487:3:36"},"nodeType":"YulFunctionCall","src":"1487:17:36"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"1440:37:36"},"nodeType":"YulFunctionCall","src":"1440:65:36"},"nodeType":"YulExpressionStatement","src":"1440:65:36"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1366:9:36","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1378:6:36","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1389:4:36","type":""}],"src":"1302:210:36"},{"body":{"nodeType":"YulBlock","src":"1563:32:36","statements":[{"nodeType":"YulAssignment","src":"1573:16:36","value":{"name":"value","nodeType":"YulIdentifier","src":"1584:5:36"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1573:7:36"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1545:5:36","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1555:7:36","type":""}],"src":"1518:77:36"},{"body":{"nodeType":"YulBlock","src":"1666:53:36","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1683:3:36"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1706:5:36"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"1688:17:36"},"nodeType":"YulFunctionCall","src":"1688:24:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1676:6:36"},"nodeType":"YulFunctionCall","src":"1676:37:36"},"nodeType":"YulExpressionStatement","src":"1676:37:36"}]},"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1654:5:36","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1661:3:36","type":""}],"src":"1601:118:36"},{"body":{"nodeType":"YulBlock","src":"1823:124:36","statements":[{"nodeType":"YulAssignment","src":"1833:26:36","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1845:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"1856:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1841:3:36"},"nodeType":"YulFunctionCall","src":"1841:18:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1833:4:36"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1913:6:36"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1926:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"1937:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1922:3:36"},"nodeType":"YulFunctionCall","src":"1922:17:36"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"1869:43:36"},"nodeType":"YulFunctionCall","src":"1869:71:36"},"nodeType":"YulExpressionStatement","src":"1869:71:36"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1795:9:36","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1807:6:36","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1818:4:36","type":""}],"src":"1725:222:36"},{"body":{"nodeType":"YulBlock","src":"1998:81:36","statements":[{"nodeType":"YulAssignment","src":"2008:65:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2023:5:36"},{"kind":"number","nodeType":"YulLiteral","src":"2030:42:36","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"2019:3:36"},"nodeType":"YulFunctionCall","src":"2019:54:36"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"2008:7:36"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1980:5:36","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1990:7:36","type":""}],"src":"1953:126:36"},{"body":{"nodeType":"YulBlock","src":"2117:28:36","statements":[{"nodeType":"YulAssignment","src":"2127:12:36","value":{"name":"value","nodeType":"YulIdentifier","src":"2134:5:36"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"2127:3:36"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2103:5:36","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"2113:3:36","type":""}],"src":"2085:60:36"},{"body":{"nodeType":"YulBlock","src":"2211:82:36","statements":[{"nodeType":"YulAssignment","src":"2221:66:36","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2279:5:36"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"2261:17:36"},"nodeType":"YulFunctionCall","src":"2261:24:36"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"2252:8:36"},"nodeType":"YulFunctionCall","src":"2252:34:36"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"2234:17:36"},"nodeType":"YulFunctionCall","src":"2234:53:36"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"2221:9:36"}]}]},"name":"convert_t_uint160_to_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2191:5:36","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"2201:9:36","type":""}],"src":"2151:142:36"},{"body":{"nodeType":"YulBlock","src":"2359:66:36","statements":[{"nodeType":"YulAssignment","src":"2369:50:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2413:5:36"}],"functionName":{"name":"convert_t_uint160_to_t_uint160","nodeType":"YulIdentifier","src":"2382:30:36"},"nodeType":"YulFunctionCall","src":"2382:37:36"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"2369:9:36"}]}]},"name":"convert_t_uint160_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2339:5:36","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"2349:9:36","type":""}],"src":"2299:126:36"},{"body":{"nodeType":"YulBlock","src":"2503:66:36","statements":[{"nodeType":"YulAssignment","src":"2513:50:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2557:5:36"}],"functionName":{"name":"convert_t_uint160_to_t_address","nodeType":"YulIdentifier","src":"2526:30:36"},"nodeType":"YulFunctionCall","src":"2526:37:36"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"2513:9:36"}]}]},"name":"convert_t_contract$_IDAO_$155_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2483:5:36","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"2493:9:36","type":""}],"src":"2431:138:36"},{"body":{"nodeType":"YulBlock","src":"2652:78:36","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"2669:3:36"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2717:5:36"}],"functionName":{"name":"convert_t_contract$_IDAO_$155_to_t_address","nodeType":"YulIdentifier","src":"2674:42:36"},"nodeType":"YulFunctionCall","src":"2674:49:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"2662:6:36"},"nodeType":"YulFunctionCall","src":"2662:62:36"},"nodeType":"YulExpressionStatement","src":"2662:62:36"}]},"name":"abi_encode_t_contract$_IDAO_$155_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2640:5:36","type":""},{"name":"pos","nodeType":"YulTypedName","src":"2647:3:36","type":""}],"src":"2575:155:36"},{"body":{"nodeType":"YulBlock","src":"2846:136:36","statements":[{"nodeType":"YulAssignment","src":"2856:26:36","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2868:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"2879:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2864:3:36"},"nodeType":"YulFunctionCall","src":"2864:18:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"2856:4:36"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2948:6:36"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2961:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"2972:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2957:3:36"},"nodeType":"YulFunctionCall","src":"2957:17:36"}],"functionName":{"name":"abi_encode_t_contract$_IDAO_$155_to_t_address_fromStack","nodeType":"YulIdentifier","src":"2892:55:36"},"nodeType":"YulFunctionCall","src":"2892:83:36"},"nodeType":"YulExpressionStatement","src":"2892:83:36"}]},"name":"abi_encode_tuple_t_contract$_IDAO_$155__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2818:9:36","type":""},{"name":"value0","nodeType":"YulTypedName","src":"2830:6:36","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"2841:4:36","type":""}],"src":"2736:246:36"},{"body":{"nodeType":"YulBlock","src":"3016:152:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3033:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3036:77:36","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3026:6:36"},"nodeType":"YulFunctionCall","src":"3026:88:36"},"nodeType":"YulExpressionStatement","src":"3026:88:36"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3130:1:36","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"3133:4:36","type":"","value":"0x21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3123:6:36"},"nodeType":"YulFunctionCall","src":"3123:15:36"},"nodeType":"YulExpressionStatement","src":"3123:15:36"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"3154:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"3157:4:36","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"3147:6:36"},"nodeType":"YulFunctionCall","src":"3147:15:36"},"nodeType":"YulExpressionStatement","src":"3147:15:36"}]},"name":"panic_error_0x21","nodeType":"YulFunctionDefinition","src":"2988:180:36"},{"body":{"nodeType":"YulBlock","src":"3231:62:36","statements":[{"body":{"nodeType":"YulBlock","src":"3265:22:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x21","nodeType":"YulIdentifier","src":"3267:16:36"},"nodeType":"YulFunctionCall","src":"3267:18:36"},"nodeType":"YulExpressionStatement","src":"3267:18:36"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3254:5:36"},{"kind":"number","nodeType":"YulLiteral","src":"3261:1:36","type":"","value":"3"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"3251:2:36"},"nodeType":"YulFunctionCall","src":"3251:12:36"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"3244:6:36"},"nodeType":"YulFunctionCall","src":"3244:20:36"},"nodeType":"YulIf","src":"3241:46:36"}]},"name":"validator_assert_t_enum$_PluginType_$197","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3224:5:36","type":""}],"src":"3174:119:36"},{"body":{"nodeType":"YulBlock","src":"3358:80:36","statements":[{"nodeType":"YulAssignment","src":"3368:16:36","value":{"name":"value","nodeType":"YulIdentifier","src":"3379:5:36"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"3368:7:36"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3426:5:36"}],"functionName":{"name":"validator_assert_t_enum$_PluginType_$197","nodeType":"YulIdentifier","src":"3385:40:36"},"nodeType":"YulFunctionCall","src":"3385:47:36"},"nodeType":"YulExpressionStatement","src":"3385:47:36"}]},"name":"cleanup_t_enum$_PluginType_$197","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3340:5:36","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"3350:7:36","type":""}],"src":"3299:139:36"},{"body":{"nodeType":"YulBlock","src":"3516:67:36","statements":[{"nodeType":"YulAssignment","src":"3526:51:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3571:5:36"}],"functionName":{"name":"cleanup_t_enum$_PluginType_$197","nodeType":"YulIdentifier","src":"3539:31:36"},"nodeType":"YulFunctionCall","src":"3539:38:36"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"3526:9:36"}]}]},"name":"convert_t_enum$_PluginType_$197_to_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3496:5:36","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"3506:9:36","type":""}],"src":"3444:139:36"},{"body":{"nodeType":"YulBlock","src":"3666:78:36","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3683:3:36"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3731:5:36"}],"functionName":{"name":"convert_t_enum$_PluginType_$197_to_t_uint8","nodeType":"YulIdentifier","src":"3688:42:36"},"nodeType":"YulFunctionCall","src":"3688:49:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3676:6:36"},"nodeType":"YulFunctionCall","src":"3676:62:36"},"nodeType":"YulExpressionStatement","src":"3676:62:36"}]},"name":"abi_encode_t_enum$_PluginType_$197_to_t_uint8_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3654:5:36","type":""},{"name":"pos","nodeType":"YulTypedName","src":"3661:3:36","type":""}],"src":"3589:155:36"},{"body":{"nodeType":"YulBlock","src":"3860:136:36","statements":[{"nodeType":"YulAssignment","src":"3870:26:36","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3882:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"3893:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3878:3:36"},"nodeType":"YulFunctionCall","src":"3878:18:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"3870:4:36"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"3962:6:36"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3975:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"3986:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3971:3:36"},"nodeType":"YulFunctionCall","src":"3971:17:36"}],"functionName":{"name":"abi_encode_t_enum$_PluginType_$197_to_t_uint8_fromStack","nodeType":"YulIdentifier","src":"3906:55:36"},"nodeType":"YulFunctionCall","src":"3906:83:36"},"nodeType":"YulExpressionStatement","src":"3906:83:36"}]},"name":"abi_encode_tuple_t_enum$_PluginType_$197__to_t_uint8__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"3832:9:36","type":""},{"name":"value0","nodeType":"YulTypedName","src":"3844:6:36","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"3855:4:36","type":""}],"src":"3750:246:36"},{"body":{"nodeType":"YulBlock","src":"4047:51:36","statements":[{"nodeType":"YulAssignment","src":"4057:35:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4086:5:36"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"4068:17:36"},"nodeType":"YulFunctionCall","src":"4068:24:36"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4057:7:36"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4029:5:36","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4039:7:36","type":""}],"src":"4002:96:36"},{"body":{"nodeType":"YulBlock","src":"4169:53:36","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4186:3:36"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4209:5:36"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"4191:17:36"},"nodeType":"YulFunctionCall","src":"4191:24:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4179:6:36"},"nodeType":"YulFunctionCall","src":"4179:37:36"},"nodeType":"YulExpressionStatement","src":"4179:37:36"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4157:5:36","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4164:3:36","type":""}],"src":"4104:118:36"},{"body":{"nodeType":"YulBlock","src":"4323:73:36","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4340:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"4345:6:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4333:6:36"},"nodeType":"YulFunctionCall","src":"4333:19:36"},"nodeType":"YulExpressionStatement","src":"4333:19:36"},{"nodeType":"YulAssignment","src":"4361:29:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4380:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"4385:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4376:3:36"},"nodeType":"YulFunctionCall","src":"4376:14:36"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"4361:11:36"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"4295:3:36","type":""},{"name":"length","nodeType":"YulTypedName","src":"4300:6:36","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"4311:11:36","type":""}],"src":"4228:168:36"},{"body":{"nodeType":"YulBlock","src":"4466:82:36","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4489:3:36"},{"name":"src","nodeType":"YulIdentifier","src":"4494:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"4499:6:36"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"4476:12:36"},"nodeType":"YulFunctionCall","src":"4476:30:36"},"nodeType":"YulExpressionStatement","src":"4476:30:36"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"4526:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"4531:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4522:3:36"},"nodeType":"YulFunctionCall","src":"4522:16:36"},{"kind":"number","nodeType":"YulLiteral","src":"4540:1:36","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4515:6:36"},"nodeType":"YulFunctionCall","src":"4515:27:36"},"nodeType":"YulExpressionStatement","src":"4515:27:36"}]},"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"4448:3:36","type":""},{"name":"dst","nodeType":"YulTypedName","src":"4453:3:36","type":""},{"name":"length","nodeType":"YulTypedName","src":"4458:6:36","type":""}],"src":"4402:146:36"},{"body":{"nodeType":"YulBlock","src":"4602:54:36","statements":[{"nodeType":"YulAssignment","src":"4612:38:36","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4630:5:36"},{"kind":"number","nodeType":"YulLiteral","src":"4637:2:36","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4626:3:36"},"nodeType":"YulFunctionCall","src":"4626:14:36"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4646:2:36","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"4642:3:36"},"nodeType":"YulFunctionCall","src":"4642:7:36"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"4622:3:36"},"nodeType":"YulFunctionCall","src":"4622:28:36"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"4612:6:36"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4585:5:36","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"4595:6:36","type":""}],"src":"4554:102:36"},{"body":{"nodeType":"YulBlock","src":"4784:214:36","statements":[{"nodeType":"YulAssignment","src":"4794:77:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4859:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"4864:6:36"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"4801:57:36"},"nodeType":"YulFunctionCall","src":"4801:70:36"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"4794:3:36"}]},{"expression":{"arguments":[{"name":"start","nodeType":"YulIdentifier","src":"4918:5:36"},{"name":"pos","nodeType":"YulIdentifier","src":"4925:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"4930:6:36"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"4881:36:36"},"nodeType":"YulFunctionCall","src":"4881:56:36"},"nodeType":"YulExpressionStatement","src":"4881:56:36"},{"nodeType":"YulAssignment","src":"4946:46:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4957:3:36"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"4984:6:36"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"4962:21:36"},"nodeType":"YulFunctionCall","src":"4962:29:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4953:3:36"},"nodeType":"YulFunctionCall","src":"4953:39:36"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"4946:3:36"}]}]},"name":"abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nodeType":"YulTypedName","src":"4757:5:36","type":""},{"name":"length","nodeType":"YulTypedName","src":"4764:6:36","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4772:3:36","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"4780:3:36","type":""}],"src":"4684:314:36"},{"body":{"nodeType":"YulBlock","src":"5214:450:36","statements":[{"nodeType":"YulAssignment","src":"5224:27:36","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5236:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"5247:3:36","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5232:3:36"},"nodeType":"YulFunctionCall","src":"5232:19:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5224:4:36"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"5305:6:36"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5318:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"5329:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5314:3:36"},"nodeType":"YulFunctionCall","src":"5314:17:36"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"5261:43:36"},"nodeType":"YulFunctionCall","src":"5261:71:36"},"nodeType":"YulExpressionStatement","src":"5261:71:36"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"5386:6:36"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5399:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"5410:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5395:3:36"},"nodeType":"YulFunctionCall","src":"5395:18:36"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"5342:43:36"},"nodeType":"YulFunctionCall","src":"5342:72:36"},"nodeType":"YulExpressionStatement","src":"5342:72:36"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"5468:6:36"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5481:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"5492:2:36","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5477:3:36"},"nodeType":"YulFunctionCall","src":"5477:18:36"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"5424:43:36"},"nodeType":"YulFunctionCall","src":"5424:72:36"},"nodeType":"YulExpressionStatement","src":"5424:72:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"5517:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"5528:2:36","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5513:3:36"},"nodeType":"YulFunctionCall","src":"5513:18:36"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"5537:4:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"5543:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"5533:3:36"},"nodeType":"YulFunctionCall","src":"5533:20:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5506:6:36"},"nodeType":"YulFunctionCall","src":"5506:48:36"},"nodeType":"YulExpressionStatement","src":"5506:48:36"},{"nodeType":"YulAssignment","src":"5563:94:36","value":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"5635:6:36"},{"name":"value4","nodeType":"YulIdentifier","src":"5643:6:36"},{"name":"tail","nodeType":"YulIdentifier","src":"5652:4:36"}],"functionName":{"name":"abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"5571:63:36"},"nodeType":"YulFunctionCall","src":"5571:86:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"5563:4:36"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_bytes32_t_bytes_calldata_ptr__to_t_address_t_address_t_bytes32_t_bytes_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5154:9:36","type":""},{"name":"value4","nodeType":"YulTypedName","src":"5166:6:36","type":""},{"name":"value3","nodeType":"YulTypedName","src":"5174:6:36","type":""},{"name":"value2","nodeType":"YulTypedName","src":"5182:6:36","type":""},{"name":"value1","nodeType":"YulTypedName","src":"5190:6:36","type":""},{"name":"value0","nodeType":"YulTypedName","src":"5198:6:36","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"5209:4:36","type":""}],"src":"5004:660:36"},{"body":{"nodeType":"YulBlock","src":"5710:76:36","statements":[{"body":{"nodeType":"YulBlock","src":"5764:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"5773:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"5776:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"5766:6:36"},"nodeType":"YulFunctionCall","src":"5766:12:36"},"nodeType":"YulExpressionStatement","src":"5766:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5733:5:36"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5755:5:36"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"5740:14:36"},"nodeType":"YulFunctionCall","src":"5740:21:36"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"5730:2:36"},"nodeType":"YulFunctionCall","src":"5730:32:36"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"5723:6:36"},"nodeType":"YulFunctionCall","src":"5723:40:36"},"nodeType":"YulIf","src":"5720:60:36"}]},"name":"validator_revert_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5703:5:36","type":""}],"src":"5670:116:36"},{"body":{"nodeType":"YulBlock","src":"5852:77:36","statements":[{"nodeType":"YulAssignment","src":"5862:22:36","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"5877:6:36"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5871:5:36"},"nodeType":"YulFunctionCall","src":"5871:13:36"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"5862:5:36"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5917:5:36"}],"functionName":{"name":"validator_revert_t_bool","nodeType":"YulIdentifier","src":"5893:23:36"},"nodeType":"YulFunctionCall","src":"5893:30:36"},"nodeType":"YulExpressionStatement","src":"5893:30:36"}]},"name":"abi_decode_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"5830:6:36","type":""},{"name":"end","nodeType":"YulTypedName","src":"5838:3:36","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"5846:5:36","type":""}],"src":"5792:137:36"},{"body":{"nodeType":"YulBlock","src":"6009:271:36","statements":[{"body":{"nodeType":"YulBlock","src":"6055:83:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"6057:77:36"},"nodeType":"YulFunctionCall","src":"6057:79:36"},"nodeType":"YulExpressionStatement","src":"6057:79:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"6030:7:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"6039:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"6026:3:36"},"nodeType":"YulFunctionCall","src":"6026:23:36"},{"kind":"number","nodeType":"YulLiteral","src":"6051:2:36","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"6022:3:36"},"nodeType":"YulFunctionCall","src":"6022:32:36"},"nodeType":"YulIf","src":"6019:119:36"},{"nodeType":"YulBlock","src":"6148:125:36","statements":[{"nodeType":"YulVariableDeclaration","src":"6163:15:36","value":{"kind":"number","nodeType":"YulLiteral","src":"6177:1:36","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"6167:6:36","type":""}]},{"nodeType":"YulAssignment","src":"6192:71:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6235:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"6246:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6231:3:36"},"nodeType":"YulFunctionCall","src":"6231:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"6255:7:36"}],"functionName":{"name":"abi_decode_t_bool_fromMemory","nodeType":"YulIdentifier","src":"6202:28:36"},"nodeType":"YulFunctionCall","src":"6202:61:36"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"6192:6:36"}]}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"5979:9:36","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"5990:7:36","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"6002:6:36","type":""}],"src":"5935:345:36"},{"body":{"nodeType":"YulBlock","src":"6468:371:36","statements":[{"nodeType":"YulAssignment","src":"6478:27:36","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6490:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"6501:3:36","type":"","value":"128"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6486:3:36"},"nodeType":"YulFunctionCall","src":"6486:19:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"6478:4:36"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6559:6:36"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6572:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"6583:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6568:3:36"},"nodeType":"YulFunctionCall","src":"6568:17:36"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"6515:43:36"},"nodeType":"YulFunctionCall","src":"6515:71:36"},"nodeType":"YulExpressionStatement","src":"6515:71:36"},{"expression":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"6640:6:36"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6653:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"6664:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6649:3:36"},"nodeType":"YulFunctionCall","src":"6649:18:36"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"6596:43:36"},"nodeType":"YulFunctionCall","src":"6596:72:36"},"nodeType":"YulExpressionStatement","src":"6596:72:36"},{"expression":{"arguments":[{"name":"value2","nodeType":"YulIdentifier","src":"6722:6:36"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6735:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"6746:2:36","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6731:3:36"},"nodeType":"YulFunctionCall","src":"6731:18:36"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"6678:43:36"},"nodeType":"YulFunctionCall","src":"6678:72:36"},"nodeType":"YulExpressionStatement","src":"6678:72:36"},{"expression":{"arguments":[{"name":"value3","nodeType":"YulIdentifier","src":"6804:6:36"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"6817:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"6828:2:36","type":"","value":"96"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6813:3:36"},"nodeType":"YulFunctionCall","src":"6813:18:36"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32_fromStack","nodeType":"YulIdentifier","src":"6760:43:36"},"nodeType":"YulFunctionCall","src":"6760:72:36"},"nodeType":"YulExpressionStatement","src":"6760:72:36"}]},"name":"abi_encode_tuple_t_address_t_address_t_address_t_bytes32__to_t_address_t_address_t_address_t_bytes32__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"6416:9:36","type":""},{"name":"value3","nodeType":"YulTypedName","src":"6428:6:36","type":""},{"name":"value2","nodeType":"YulTypedName","src":"6436:6:36","type":""},{"name":"value1","nodeType":"YulTypedName","src":"6444:6:36","type":""},{"name":"value0","nodeType":"YulTypedName","src":"6452:6:36","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"6463:4:36","type":""}],"src":"6286:553:36"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint160_to_t_uint160(value) -> converted {\n        converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))\n    }\n\n    function convert_t_uint160_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_uint160(value)\n    }\n\n    function convert_t_contract$_IDAO_$155_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_address(value)\n    }\n\n    function abi_encode_t_contract$_IDAO_$155_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_IDAO_$155_to_t_address(value))\n    }\n\n    function abi_encode_tuple_t_contract$_IDAO_$155__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_contract$_IDAO_$155_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function panic_error_0x21() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n\n    function validator_assert_t_enum$_PluginType_$197(value) {\n        if iszero(lt(value, 3)) { panic_error_0x21() }\n    }\n\n    function cleanup_t_enum$_PluginType_$197(value) -> cleaned {\n        cleaned := value validator_assert_t_enum$_PluginType_$197(value)\n    }\n\n    function convert_t_enum$_PluginType_$197_to_t_uint8(value) -> converted {\n        converted := cleanup_t_enum$_PluginType_$197(value)\n    }\n\n    function abi_encode_t_enum$_PluginType_$197_to_t_uint8_fromStack(value, pos) {\n        mstore(pos, convert_t_enum$_PluginType_$197_to_t_uint8(value))\n    }\n\n    function abi_encode_tuple_t_enum$_PluginType_$197__to_t_uint8__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_enum$_PluginType_$197_to_t_uint8_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    // bytes -> bytes\n    function abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack(start, length, pos) -> end {\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n\n        copy_calldata_to_memory_with_cleanup(start, pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_bytes32_t_bytes_calldata_ptr__to_t_address_t_address_t_bytes32_t_bytes_memory_ptr__fromStack_reversed(headStart , value4, value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_bytes_calldata_ptr_to_t_bytes_memory_ptr_fromStack(value3, value4,  tail)\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bool_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_address_t_bytes32__to_t_address_t_address_t_address_t_bytes32__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_address_to_t_address_fromStack(value2,  add(headStart, 64))\n\n        abi_encode_t_bytes32_to_t_bytes32_fromStack(value3,  add(headStart, 96))\n\n    }\n\n}\n","id":36,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"283":[{"length":32,"start":400},{"length":32,"start":625}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100575760003560e01c806301ffc9a71461005c5780631a0d86101461008c5780631c7b4de4146100965780634162169f146100b457806341de6830146100d2575b600080fd5b6100766004803603810190610071919061044b565b6100f0565b6040516100839190610493565b60405180910390f35b61009461016a565b005b61009e610249565b6040516100ab91906104c7565b60405180910390f35b6100bc61026d565b6040516100c99190610561565b60405180910390f35b6100da610295565b6040516100e791906105f3565b60405180910390f35b60007f41de6830000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061016357506101628261029e565b5b9050919050565b7f1bd70c5aa931fa900de716024b36e36cc236a1ce16d32948668c08aa04e680f26101c67f0000000000000000000000000000000000000000000000000000000000000000306101b8610308565b846101c1610310565b61031d565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639cbf9e366040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561022e57600080fd5b505af1158015610242573d6000803e3d6000fd5b5050505050565b7f1bd70c5aa931fa900de716024b36e36cc236a1ce16d32948668c08aa04e680f281565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60006002905090565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b3660008036915091509091565b8573ffffffffffffffffffffffffffffffffffffffff1663fdef910686868686866040518663ffffffff1660e01b815260040161035e95949392919061068d565b602060405180830381865afa15801561037b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039f9190610707565b6103e657858585856040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526004016103dd9493929190610734565b60405180910390fd5b505050505050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610428816103f3565b811461043357600080fd5b50565b6000813590506104458161041f565b92915050565b600060208284031215610461576104606103ee565b5b600061046f84828501610436565b91505092915050565b60008115159050919050565b61048d81610478565b82525050565b60006020820190506104a86000830184610484565b92915050565b6000819050919050565b6104c1816104ae565b82525050565b60006020820190506104dc60008301846104b8565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061052761052261051d846104e2565b610502565b6104e2565b9050919050565b60006105398261050c565b9050919050565b600061054b8261052e565b9050919050565b61055b81610540565b82525050565b60006020820190506105766000830184610552565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106105bc576105bb61057c565b5b50565b60008190506105cd826105ab565b919050565b60006105dd826105bf565b9050919050565b6105ed816105d2565b82525050565b600060208201905061060860008301846105e4565b92915050565b6000610619826104e2565b9050919050565b6106298161060e565b82525050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b600061066c838561062f565b9350610679838584610640565b6106828361064f565b840190509392505050565b60006080820190506106a26000830188610620565b6106af6020830187610620565b6106bc60408301866104b8565b81810360608301526106cf818486610660565b90509695505050505050565b6106e481610478565b81146106ef57600080fd5b50565b600081519050610701816106db565b92915050565b60006020828403121561071d5761071c6103ee565b5b600061072b848285016106f2565b91505092915050565b60006080820190506107496000830187610620565b6107566020830186610620565b6107636040830185610620565b61077060608301846104b8565b9594505050505056fea2646970667358221220b3f8dc1a6d3b7ade4ee08f458fdb6e383762323d52d01070caec8fe846c033e764736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x57 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x5C JUMPI DUP1 PUSH4 0x1A0D8610 EQ PUSH2 0x8C JUMPI DUP1 PUSH4 0x1C7B4DE4 EQ PUSH2 0x96 JUMPI DUP1 PUSH4 0x4162169F EQ PUSH2 0xB4 JUMPI DUP1 PUSH4 0x41DE6830 EQ PUSH2 0xD2 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x76 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x71 SWAP2 SWAP1 PUSH2 0x44B JUMP JUMPDEST PUSH2 0xF0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x83 SWAP2 SWAP1 PUSH2 0x493 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x94 PUSH2 0x16A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x9E PUSH2 0x249 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAB SWAP2 SWAP1 PUSH2 0x4C7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xBC PUSH2 0x26D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC9 SWAP2 SWAP1 PUSH2 0x561 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDA PUSH2 0x295 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE7 SWAP2 SWAP1 PUSH2 0x5F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x41DE683000000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x163 JUMPI POP PUSH2 0x162 DUP3 PUSH2 0x29E JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x1BD70C5AA931FA900DE716024B36E36CC236A1CE16D32948668C08AA04E680F2 PUSH2 0x1C6 PUSH32 0x0 ADDRESS PUSH2 0x1B8 PUSH2 0x308 JUMP JUMPDEST DUP5 PUSH2 0x1C1 PUSH2 0x310 JUMP JUMPDEST PUSH2 0x31D JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x9CBF9E36 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x22E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x242 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH32 0x1BD70C5AA931FA900DE716024B36E36CC236A1CE16D32948668C08AA04E680F2 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 DUP1 CALLDATASIZE SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xFDEF9106 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x35E SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x68D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x37B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x39F SWAP2 SWAP1 PUSH2 0x707 JUMP JUMPDEST PUSH2 0x3E6 JUMPI DUP6 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH32 0x32DBE3B400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3DD SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x734 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x428 DUP2 PUSH2 0x3F3 JUMP JUMPDEST DUP2 EQ PUSH2 0x433 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x445 DUP2 PUSH2 0x41F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x461 JUMPI PUSH2 0x460 PUSH2 0x3EE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x46F DUP5 DUP3 DUP6 ADD PUSH2 0x436 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x48D DUP2 PUSH2 0x478 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x4A8 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x484 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4C1 DUP2 PUSH2 0x4AE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x4DC PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x4B8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x527 PUSH2 0x522 PUSH2 0x51D DUP5 PUSH2 0x4E2 JUMP JUMPDEST PUSH2 0x502 JUMP JUMPDEST PUSH2 0x4E2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x539 DUP3 PUSH2 0x50C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x54B DUP3 PUSH2 0x52E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x55B DUP2 PUSH2 0x540 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x576 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x552 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x3 DUP2 LT PUSH2 0x5BC JUMPI PUSH2 0x5BB PUSH2 0x57C JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH2 0x5CD DUP3 PUSH2 0x5AB JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5DD DUP3 PUSH2 0x5BF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5ED DUP2 PUSH2 0x5D2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x608 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x5E4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x619 DUP3 PUSH2 0x4E2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x629 DUP2 PUSH2 0x60E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x66C DUP4 DUP6 PUSH2 0x62F JUMP JUMPDEST SWAP4 POP PUSH2 0x679 DUP4 DUP6 DUP5 PUSH2 0x640 JUMP JUMPDEST PUSH2 0x682 DUP4 PUSH2 0x64F JUMP JUMPDEST DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x6A2 PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x620 JUMP JUMPDEST PUSH2 0x6AF PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x620 JUMP JUMPDEST PUSH2 0x6BC PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x4B8 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x6CF DUP2 DUP5 DUP7 PUSH2 0x660 JUMP JUMPDEST SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x6E4 DUP2 PUSH2 0x478 JUMP JUMPDEST DUP2 EQ PUSH2 0x6EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x701 DUP2 PUSH2 0x6DB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x71D JUMPI PUSH2 0x71C PUSH2 0x3EE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x72B DUP5 DUP3 DUP6 ADD PUSH2 0x6F2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x749 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x620 JUMP JUMPDEST PUSH2 0x756 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x620 JUMP JUMPDEST PUSH2 0x763 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x620 JUMP JUMPDEST PUSH2 0x770 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x4B8 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB3 0xF8 0xDC BYTE PUSH14 0x3B7ADE4EE08F458FDB6E38376232 RETURNDATASIZE MSTORE 0xD0 LT PUSH17 0xCAEC8FE846C033E764736F6C6343000813 STOP CALLER ","sourceMap":"663:600:34:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1065:198:3;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1167:93:34;;;:::i;:::-;;971:75;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;920:70:4;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;745:112:3;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1065:198;1151:4;1190:25;1174:41;;;:12;:41;;;;:82;;;;1219:37;1243:12;1219:23;:37::i;:::-;1174:82;1167:89;;1065:198;;;:::o;1167:93:34:-;1017:29;1330:67:4;1336:4;1350;1357:12;:10;:12::i;:::-;1371:13;1386:10;:8;:10::i;:::-;1330:5;:67::i;:::-;1230:11:34::1;::::0;::::1;;;;;;;;:23;;;:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;1167:93:::0;:::o;971:75::-;1017:29;971:75;:::o;920:70:4:-;956:4;979;972:11;;920:70;:::o;745:112:3:-;797:10;826:24;819:31;;745:112;:::o;829:155:29:-;914:4;952:25;937:40;;;:11;:40;;;;930:47;;829:155;;;:::o;640:96:25:-;693:7;719:10;712:17;;640:96;:::o;742:99::-;793:14;;826:8;;819:15;;;;742:99;;:::o;993:363:5:-;1132:4;:18;;;1151:6;1159:4;1165:13;1180:5;;1132:54;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1127:226;;1246:4;1272:6;1297:4;1329:13;1203:150;;;;;;;;;;;;;;:::i;:::-;;;;;;;;1127:226;993:363;;;;;;:::o;88:117:36:-;197:1;194;187:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:77::-;1555:7;1584:5;1573:16;;1518:77;;;:::o;1601:118::-;1688:24;1706:5;1688:24;:::i;:::-;1683:3;1676:37;1601:118;;:::o;1725:222::-;1818:4;1856:2;1845:9;1841:18;1833:26;;1869:71;1937:1;1926:9;1922:17;1913:6;1869:71;:::i;:::-;1725:222;;;;:::o;1953:126::-;1990:7;2030:42;2023:5;2019:54;2008:65;;1953:126;;;:::o;2085:60::-;2113:3;2134:5;2127:12;;2085:60;;;:::o;2151:142::-;2201:9;2234:53;2252:34;2261:24;2279:5;2261:24;:::i;:::-;2252:34;:::i;:::-;2234:53;:::i;:::-;2221:66;;2151:142;;;:::o;2299:126::-;2349:9;2382:37;2413:5;2382:37;:::i;:::-;2369:50;;2299:126;;;:::o;2431:138::-;2493:9;2526:37;2557:5;2526:37;:::i;:::-;2513:50;;2431:138;;;:::o;2575:155::-;2674:49;2717:5;2674:49;:::i;:::-;2669:3;2662:62;2575:155;;:::o;2736:246::-;2841:4;2879:2;2868:9;2864:18;2856:26;;2892:83;2972:1;2961:9;2957:17;2948:6;2892:83;:::i;:::-;2736:246;;;;:::o;2988:180::-;3036:77;3033:1;3026:88;3133:4;3130:1;3123:15;3157:4;3154:1;3147:15;3174:119;3261:1;3254:5;3251:12;3241:46;;3267:18;;:::i;:::-;3241:46;3174:119;:::o;3299:139::-;3350:7;3379:5;3368:16;;3385:47;3426:5;3385:47;:::i;:::-;3299:139;;;:::o;3444:::-;3506:9;3539:38;3571:5;3539:38;:::i;:::-;3526:51;;3444:139;;;:::o;3589:155::-;3688:49;3731:5;3688:49;:::i;:::-;3683:3;3676:62;3589:155;;:::o;3750:246::-;3855:4;3893:2;3882:9;3878:18;3870:26;;3906:83;3986:1;3975:9;3971:17;3962:6;3906:83;:::i;:::-;3750:246;;;;:::o;4002:96::-;4039:7;4068:24;4086:5;4068:24;:::i;:::-;4057:35;;4002:96;;;:::o;4104:118::-;4191:24;4209:5;4191:24;:::i;:::-;4186:3;4179:37;4104:118;;:::o;4228:168::-;4311:11;4345:6;4340:3;4333:19;4385:4;4380:3;4376:14;4361:29;;4228:168;;;;:::o;4402:146::-;4499:6;4494:3;4489;4476:30;4540:1;4531:6;4526:3;4522:16;4515:27;4402:146;;;:::o;4554:102::-;4595:6;4646:2;4642:7;4637:2;4630:5;4626:14;4622:28;4612:38;;4554:102;;;:::o;4684:314::-;4780:3;4801:70;4864:6;4859:3;4801:70;:::i;:::-;4794:77;;4881:56;4930:6;4925:3;4918:5;4881:56;:::i;:::-;4962:29;4984:6;4962:29;:::i;:::-;4957:3;4953:39;4946:46;;4684:314;;;;;:::o;5004:660::-;5209:4;5247:3;5236:9;5232:19;5224:27;;5261:71;5329:1;5318:9;5314:17;5305:6;5261:71;:::i;:::-;5342:72;5410:2;5399:9;5395:18;5386:6;5342:72;:::i;:::-;5424;5492:2;5481:9;5477:18;5468:6;5424:72;:::i;:::-;5543:9;5537:4;5533:20;5528:2;5517:9;5513:18;5506:48;5571:86;5652:4;5643:6;5635;5571:86;:::i;:::-;5563:94;;5004:660;;;;;;;;:::o;5670:116::-;5740:21;5755:5;5740:21;:::i;:::-;5733:5;5730:32;5720:60;;5776:1;5773;5766:12;5720:60;5670:116;:::o;5792:137::-;5846:5;5877:6;5871:13;5862:22;;5893:30;5917:5;5893:30;:::i;:::-;5792:137;;;;:::o;5935:345::-;6002:6;6051:2;6039:9;6030:7;6026:23;6022:32;6019:119;;;6057:79;;:::i;:::-;6019:119;6177:1;6202:61;6255:7;6246:6;6235:9;6231:22;6202:61;:::i;:::-;6192:71;;6148:125;5935:345;;;;:::o;6286:553::-;6463:4;6501:3;6490:9;6486:19;6478:27;;6515:71;6583:1;6572:9;6568:17;6559:6;6515:71;:::i;:::-;6596:72;6664:2;6653:9;6649:18;6640:6;6596:72;:::i;:::-;6678;6746:2;6735:9;6731:18;6722:6;6678:72;:::i;:::-;6760;6828:2;6817:9;6813:18;6804:6;6760:72;:::i;:::-;6286:553;;;;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"393400","executionCost":"infinite","totalCost":"infinite"},"external":{"GREET_PERMISSION_ID()":"351","dao()":"infinite","lend_money()":"infinite","pluginType()":"498","supportsInterface(bytes4)":"705"}},"methodIdentifiers":{"GREET_PERMISSION_ID()":"1c7b4de4","dao()":"4162169f","lend_money()":"1a0d8610","pluginType()":"41de6830","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IDAO\",\"name\":\"_dao\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dao\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"where\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"permissionId\",\"type\":\"bytes32\"}],\"name\":\"DaoUnauthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GREET_PERMISSION_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"contract IDAO\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lend_money\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pluginType\",\"outputs\":[{\"internalType\":\"enum IPlugin.PluginType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"DaoUnauthorized(address,address,address,bytes32)\":[{\"params\":{\"dao\":\"The associated DAO.\",\"permissionId\":\"The permission identifier.\",\"where\":\"The context in which the authorization reverted.\",\"who\":\"The address (EOA or contract) missing the permission.\"}}]},\"kind\":\"dev\",\"methods\":{\"dao()\":{\"returns\":{\"_0\":\"The DAO contract.\"}},\"supportsInterface(bytes4)\":{\"params\":{\"_interfaceId\":\"The ID of the interface.\"},\"returns\":{\"_0\":\"Returns `true` if the interface is supported.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"DaoUnauthorized(address,address,address,bytes32)\":[{\"notice\":\"Thrown if a call is unauthorized in the associated DAO.\"}]},\"kind\":\"user\",\"methods\":{\"dao()\":{\"notice\":\"Returns the DAO contract.\"},\"pluginType()\":{\"notice\":\"Returns the plugin's type\"},\"supportsInterface(bytes4)\":{\"notice\":\"Checks if this or the parent contract supports an interface by its ID.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LendNFTPlugin.sol\":\"LendNFTPlugin\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@aragon/osx/core/dao/IDAO.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\n/// @title IDAO\\n/// @author Aragon Association - 2022-2023\\n/// @notice The interface required for DAOs within the Aragon App DAO framework.\\ninterface IDAO {\\n    /// @notice The action struct to be consumed by the DAO's `execute` function resulting in an external call.\\n    /// @param to The address to call.\\n    /// @param value The native token value to be sent with the call.\\n    /// @param data The bytes-encoded function selector and calldata for the call.\\n    struct Action {\\n        address to;\\n        uint256 value;\\n        bytes data;\\n    }\\n\\n    /// @notice Checks if an address has permission on a contract via a permission identifier and considers if `ANY_ADDRESS` was used in the granting process.\\n    /// @param _where The address of the contract.\\n    /// @param _who The address of a EOA or contract to give the permissions.\\n    /// @param _permissionId The permission identifier.\\n    /// @param _data The optional data passed to the `PermissionCondition` registered.\\n    /// @return Returns true if the address has permission, false if not.\\n    function hasPermission(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId,\\n        bytes memory _data\\n    ) external view returns (bool);\\n\\n    /// @notice Updates the DAO metadata (e.g., an IPFS hash).\\n    /// @param _metadata The IPFS hash of the new metadata object.\\n    function setMetadata(bytes calldata _metadata) external;\\n\\n    /// @notice Emitted when the DAO metadata is updated.\\n    /// @param metadata The IPFS hash of the new metadata object.\\n    event MetadataSet(bytes metadata);\\n\\n    /// @notice Executes a list of actions. If a zero allow-failure map is provided, a failing action reverts the entire execution. If a non-zero allow-failure map is provided, allowed actions can fail without the entire call being reverted.\\n    /// @param _callId The ID of the call. The definition of the value of `callId` is up to the calling contract and can be used, e.g., as a nonce.\\n    /// @param _actions The array of actions.\\n    /// @param _allowFailureMap A bitmap allowing execution to succeed, even if individual actions might revert. If the bit at index `i` is 1, the execution succeeds even if the `i`th action reverts. A failure map value of 0 requires every action to not revert.\\n    /// @return The array of results obtained from the executed actions in `bytes`.\\n    /// @return The resulting failure map containing the actions have actually failed.\\n    function execute(\\n        bytes32 _callId,\\n        Action[] memory _actions,\\n        uint256 _allowFailureMap\\n    ) external returns (bytes[] memory, uint256);\\n\\n    /// @notice Emitted when a proposal is executed.\\n    /// @param actor The address of the caller.\\n    /// @param callId The ID of the call.\\n    /// @param actions The array of actions executed.\\n    /// @param allowFailureMap The allow failure map encoding which actions are allowed to fail.\\n    /// @param failureMap The failure map encoding which actions have failed.\\n    /// @param execResults The array with the results of the executed actions.\\n    /// @dev The value of `callId` is defined by the component/contract calling the execute function. A `Plugin` implementation can use it, for example, as a nonce.\\n    event Executed(\\n        address indexed actor,\\n        bytes32 callId,\\n        Action[] actions,\\n        uint256 allowFailureMap,\\n        uint256 failureMap,\\n        bytes[] execResults\\n    );\\n\\n    /// @notice Emitted when a standard callback is registered.\\n    /// @param interfaceId The ID of the interface.\\n    /// @param callbackSelector The selector of the callback function.\\n    /// @param magicNumber The magic number to be registered for the callback function selector.\\n    event StandardCallbackRegistered(\\n        bytes4 interfaceId,\\n        bytes4 callbackSelector,\\n        bytes4 magicNumber\\n    );\\n\\n    /// @notice Deposits (native) tokens to the DAO contract with a reference string.\\n    /// @param _token The address of the token or address(0) in case of the native token.\\n    /// @param _amount The amount of tokens to deposit.\\n    /// @param _reference The reference describing the deposit reason.\\n    function deposit(address _token, uint256 _amount, string calldata _reference) external payable;\\n\\n    /// @notice Emitted when a token deposit has been made to the DAO.\\n    /// @param sender The address of the sender.\\n    /// @param token The address of the deposited token.\\n    /// @param amount The amount of tokens deposited.\\n    /// @param _reference The reference describing the deposit reason.\\n    event Deposited(\\n        address indexed sender,\\n        address indexed token,\\n        uint256 amount,\\n        string _reference\\n    );\\n\\n    /// @notice Emitted when a native token deposit has been made to the DAO.\\n    /// @dev This event is intended to be emitted in the `receive` function and is therefore bound by the gas limitations for `send`/`transfer` calls introduced by [ERC-2929](https://eips.ethereum.org/EIPS/eip-2929).\\n    /// @param sender The address of the sender.\\n    /// @param amount The amount of native tokens deposited.\\n    event NativeTokenDeposited(address sender, uint256 amount);\\n\\n    /// @notice Setter for the trusted forwarder verifying the meta transaction.\\n    /// @param _trustedForwarder The trusted forwarder address.\\n    function setTrustedForwarder(address _trustedForwarder) external;\\n\\n    /// @notice Getter for the trusted forwarder verifying the meta transaction.\\n    /// @return The trusted forwarder address.\\n    function getTrustedForwarder() external view returns (address);\\n\\n    /// @notice Emitted when a new TrustedForwarder is set on the DAO.\\n    /// @param forwarder the new forwarder address.\\n    event TrustedForwarderSet(address forwarder);\\n\\n    /// @notice Setter for the [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract.\\n    /// @param _signatureValidator The address of the signature validator.\\n    function setSignatureValidator(address _signatureValidator) external;\\n\\n    /// @notice Emitted when the signature validator address is updated.\\n    /// @param signatureValidator The address of the signature validator.\\n    event SignatureValidatorSet(address signatureValidator);\\n\\n    /// @notice Checks whether a signature is valid for the provided hash by forwarding the call to the set [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract.\\n    /// @param _hash The hash of the data to be signed.\\n    /// @param _signature The signature byte array associated with `_hash`.\\n    /// @return Returns the `bytes4` magic value `0x1626ba7e` if the signature is valid.\\n    function isValidSignature(bytes32 _hash, bytes memory _signature) external returns (bytes4);\\n\\n    /// @notice Registers an ERC standard having a callback by registering its [ERC-165](https://eips.ethereum.org/EIPS/eip-165) interface ID and callback function signature.\\n    /// @param _interfaceId The ID of the interface.\\n    /// @param _callbackSelector The selector of the callback function.\\n    /// @param _magicNumber The magic number to be registered for the function signature.\\n    function registerStandardCallback(\\n        bytes4 _interfaceId,\\n        bytes4 _callbackSelector,\\n        bytes4 _magicNumber\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3876d62c73312234c1e2ab4e75cdac2783a6688c3445a67a15b767cd98e01f80\",\"license\":\"AGPL-3.0-or-later\"},\"@aragon/osx/core/plugin/IPlugin.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\n/// @title IPlugin\\n/// @author Aragon Association - 2022-2023\\n/// @notice An interface defining the traits of a plugin.\\ninterface IPlugin {\\n    enum PluginType {\\n        UUPS,\\n        Cloneable,\\n        Constructable\\n    }\\n\\n    /// @notice Returns the plugin's type\\n    function pluginType() external view returns (PluginType);\\n}\\n\",\"keccak256\":\"0xcdb72c04ca35478e4d786fbbe12cf0e6de7d76aa0510028432312697f42c7355\",\"license\":\"AGPL-3.0-or-later\"},\"@aragon/osx/core/plugin/Plugin.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nimport {IDAO} from \\\"../dao/IDAO.sol\\\";\\nimport {DaoAuthorizable} from \\\"./dao-authorizable/DaoAuthorizable.sol\\\";\\nimport {IPlugin} from \\\"./IPlugin.sol\\\";\\n\\n/// @title Plugin\\n/// @author Aragon Association - 2022-2023\\n/// @notice An abstract, non-upgradeable contract to inherit from when creating a plugin being deployed via the `new` keyword.\\nabstract contract Plugin is IPlugin, ERC165, DaoAuthorizable {\\n    /// @notice Constructs the plugin by storing the associated DAO.\\n    /// @param _dao The DAO contract.\\n    constructor(IDAO _dao) DaoAuthorizable(_dao) {}\\n\\n    /// @inheritdoc IPlugin\\n    function pluginType() public pure override returns (PluginType) {\\n        return PluginType.Constructable;\\n    }\\n\\n    /// @notice Checks if this or the parent contract supports an interface by its ID.\\n    /// @param _interfaceId The ID of the interface.\\n    /// @return Returns `true` if the interface is supported.\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\\n        return _interfaceId == type(IPlugin).interfaceId || super.supportsInterface(_interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xf4ba8a3d7e3e626ed07619acc9ab616e17615e7ce2983b634a0bba0662897452\",\"license\":\"AGPL-3.0-or-later\"},\"@aragon/osx/core/plugin/dao-authorizable/DaoAuthorizable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport {IDAO} from \\\"../../dao/IDAO.sol\\\";\\nimport {_auth} from \\\"../../utils/auth.sol\\\";\\n\\n/// @title DaoAuthorizable\\n/// @author Aragon Association - 2022-2023\\n/// @notice An abstract contract providing a meta-transaction compatible modifier for non-upgradeable contracts instantiated via the `new` keyword to authorize function calls through an associated DAO.\\nabstract contract DaoAuthorizable is Context {\\n    /// @notice The associated DAO managing the permissions of inheriting contracts.\\n    IDAO private immutable dao_;\\n\\n    /// @notice Constructs the contract by setting the associated DAO.\\n    /// @param _dao The associated DAO address.\\n    constructor(IDAO _dao) {\\n        dao_ = _dao;\\n    }\\n\\n    /// @notice Returns the DAO contract.\\n    /// @return The DAO contract.\\n    function dao() public view returns (IDAO) {\\n        return dao_;\\n    }\\n\\n    /// @notice A modifier to make functions on inheriting contracts authorized. Permissions to call the function are checked through the associated DAO's permission manager.\\n    /// @param _permissionId The permission identifier required to call the method this modifier is applied to.\\n    modifier auth(bytes32 _permissionId) {\\n        _auth(dao_, address(this), _msgSender(), _permissionId, _msgData());\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xfb9de789f0266a61a5cfbd17a247b4ba4212ff091ccd10739318763331bdd154\",\"license\":\"AGPL-3.0-or-later\"},\"@aragon/osx/core/utils/auth.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\nimport {IDAO} from \\\"../dao/IDAO.sol\\\";\\n\\n/// @notice Thrown if a call is unauthorized in the associated DAO.\\n/// @param dao The associated DAO.\\n/// @param where The context in which the authorization reverted.\\n/// @param who The address (EOA or contract) missing the permission.\\n/// @param permissionId The permission identifier.\\nerror DaoUnauthorized(address dao, address where, address who, bytes32 permissionId);\\n\\n/// @notice A free function checking if a caller is granted permissions on a target contract via a permission identifier that redirects the approval to a `PermissionCondition` if this was specified in the setup.\\n/// @param _where The address of the target contract for which `who` receives permission.\\n/// @param _who The address (EOA or contract) owning the permission.\\n/// @param _permissionId The permission identifier.\\n/// @param _data The optional data passed to the `PermissionCondition` registered.\\nfunction _auth(\\n    IDAO _dao,\\n    address _where,\\n    address _who,\\n    bytes32 _permissionId,\\n    bytes calldata _data\\n) view {\\n    if (!_dao.hasPermission(_where, _who, _permissionId, _data))\\n        revert DaoUnauthorized({\\n            dao: address(_dao),\\n            where: _where,\\n            who: _who,\\n            permissionId: _permissionId\\n        });\\n}\\n\",\"keccak256\":\"0x1c9cf22583c8b5a08c6d2c02a68d9f05e58900a9bb27efa3b30abca2ecfabfe4\",\"license\":\"AGPL-3.0-or-later\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0x2a9dadb806be80dd451821f1f1190eb9aa6f6edae85b185db29d60767cc0c5f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../interfaces/IERC4906.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == bytes4(0x49064906) || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n\\n        emit MetadataUpdate(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7942989e3525aec1672469e4c65fb33fbd19c785c9cadbcb70fcbe1fe8bfdd37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/LendNFTPlugin.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\n\\n\\nimport {Plugin, IDAO} from '@aragon/osx/core/plugin/Plugin.sol';\\n\\ncontract FactoryNFT is ERC721URIStorage { \\n\\n  using Counters for Counters.Counter; \\n  Counters.Counter private _tokenIds;\\n\\n  constructor() ERC721(\\\"Farm Lender NFT\\\", \\\"FLN\\\") {}\\n\\n  function createToken() public {\\n      _tokenIds.increment();\\n      uint256 newItemId = _tokenIds.current();\\n\\n      _mint(msg.sender, newItemId);\\n  }    \\n}\\n\\ncontract LendNFTPlugin is Plugin {\\n  // Permissions are what connects everything together. \\n  // Addresses who have been granted the GREET_PERMISSION will be \\n  // able to call on functions with the modifier `auth(GREET_PERMISSION_ID)`. \\n  // These will be granted in the PluginSetup.sol contract up next.\\n  bytes32 public constant GREET_PERMISSION_ID = keccak256('GREET_PERMISSION');\\n\\n  FactoryNFT private factory_NFT;\\n\\n  constructor(IDAO _dao) Plugin(_dao) {\\n    factory_NFT = new FactoryNFT();\\n  }\\n\\n  function lend_money() external auth(GREET_PERMISSION_ID) {\\n    factory_NFT.createToken();\\n  }\\n\\n}\\n\",\"keccak256\":\"0xfac6751644136bd6684464647bd73f0598b10723e8d810075e4d9aff347ac83f\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[{"astId":4357,"contract":"contracts/LendNFTPlugin.sol:LendNFTPlugin","label":"factory_NFT","offset":0,"slot":"0","type":"t_contract(FactoryNFT)4347"}],"types":{"t_contract(FactoryNFT)4347":{"encoding":"inplace","label":"contract FactoryNFT","numberOfBytes":"20"}}},"userdoc":{"errors":{"DaoUnauthorized(address,address,address,bytes32)":[{"notice":"Thrown if a call is unauthorized in the associated DAO."}]},"kind":"user","methods":{"dao()":{"notice":"Returns the DAO contract."},"pluginType()":{"notice":"Returns the plugin's type"},"supportsInterface(bytes4)":{"notice":"Checks if this or the parent contract supports an interface by its ID."}},"version":1}}},"contracts/LendPluginSetup.sol":{"LendPluginSetup":{"abi":[{"inputs":[],"name":"implementation","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_dao","type":"address"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"prepareInstallation","outputs":[{"internalType":"address","name":"plugin","type":"address"},{"components":[{"internalType":"address[]","name":"helpers","type":"address[]"},{"components":[{"internalType":"enum PermissionLib.Operation","name":"operation","type":"uint8"},{"internalType":"address","name":"where","type":"address"},{"internalType":"address","name":"who","type":"address"},{"internalType":"address","name":"condition","type":"address"},{"internalType":"bytes32","name":"permissionId","type":"bytes32"}],"internalType":"struct PermissionLib.MultiTargetPermission[]","name":"permissions","type":"tuple[]"}],"internalType":"struct IPluginSetup.PreparedSetupData","name":"preparedSetupData","type":"tuple"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_dao","type":"address"},{"components":[{"internalType":"address","name":"plugin","type":"address"},{"internalType":"address[]","name":"currentHelpers","type":"address[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct IPluginSetup.SetupPayload","name":"_payload","type":"tuple"}],"name":"prepareUninstallation","outputs":[{"components":[{"internalType":"enum PermissionLib.Operation","name":"operation","type":"uint8"},{"internalType":"address","name":"where","type":"address"},{"internalType":"address","name":"who","type":"address"},{"internalType":"address","name":"condition","type":"address"},{"internalType":"bytes32","name":"permissionId","type":"bytes32"}],"internalType":"struct PermissionLib.MultiTargetPermission[]","name":"permissions","type":"tuple[]"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"_dao","type":"address"},{"internalType":"uint16","name":"_currentBuild","type":"uint16"},{"components":[{"internalType":"address","name":"plugin","type":"address"},{"internalType":"address[]","name":"currentHelpers","type":"address[]"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct IPluginSetup.SetupPayload","name":"_payload","type":"tuple"}],"name":"prepareUpdate","outputs":[{"internalType":"bytes","name":"initData","type":"bytes"},{"components":[{"internalType":"address[]","name":"helpers","type":"address[]"},{"components":[{"internalType":"enum PermissionLib.Operation","name":"operation","type":"uint8"},{"internalType":"address","name":"where","type":"address"},{"internalType":"address","name":"who","type":"address"},{"internalType":"address","name":"condition","type":"address"},{"internalType":"bytes32","name":"permissionId","type":"bytes32"}],"internalType":"struct PermissionLib.MultiTargetPermission[]","name":"permissions","type":"tuple[]"}],"internalType":"struct IPluginSetup.PreparedSetupData","name":"preparedSetupData","type":"tuple"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"_interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"implementation()":{"details":"The implementation can be instantiated via the `new` keyword, cloned via the minimal clones pattern (see [ERC-1167](https://eips.ethereum.org/EIPS/eip-1167)), or proxied via the UUPS pattern (see [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822)).","returns":{"_0":"The address of the plugin implementation contract."}},"prepareUninstallation(address,(address,address[],bytes))":{"params":{"_dao":"The address of the uninstalling DAO.","_payload":"The relevant data necessary for the `prepareUninstallation`. See above."},"returns":{"permissions":"The array of multi-targeted permission operations to be applied by the `PluginSetupProcessor` to the uninstalling DAO."}},"prepareUpdate(address,uint16,(address,address[],bytes))":{"params":{"_currentBuild":"The build number of the plugin to update from.","_dao":"The address of the updating DAO.","_payload":"The relevant data necessary for the `prepareUpdate`. See above."},"returns":{"initData":"The initialization data to be passed to upgradeable contracts when the update is applied in the `PluginSetupProcessor`.","preparedSetupData":"The deployed plugin's relevant data which consists of helpers and permissions."}},"supportsInterface(bytes4)":{"params":{"_interfaceId":"The ID of the interface."},"returns":{"_0":"Returns `true` if the interface is supported."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"608060405234801561001057600080fd5b50614344806100206000396000f3fe60806040523480156200001157600080fd5b50600436106200005e5760003560e01c806301ffc9a714620000635780635c60da1b14620000995780639cb0a12414620000bb578063a8a9c29e14620000f1578063f10832f11462000128575b600080fd5b6200008160048036038101906200007b919062000637565b6200015f565b60405162000090919062000686565b60405180910390f35b620000a3620001dc565b604051620000b29190620006e8565b60405180910390f35b620000d96004803603810190620000d391906200075d565b620001e1565b604051620000e891906200099e565b60405180910390f35b6200010f600480360381019062000109919062000a01565b6200031d565b6040516200011f92919062000c96565b60405180910390f35b62000146600480360381019062000140919062000e22565b62000331565b6040516200015692919062000e88565b60405180910390f35b60007f99718b50000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480620001d55750620001d482620004ab565b5b9050919050565b600090565b6060600167ffffffffffffffff81111562000201576200020062000cdb565b5b6040519080825280602002602001820160405280156200023e57816020015b6200022a62000515565b815260200190600190039081620002205790505b5090506040518060a0016040528060016002811115620002635762000262620007ef565b5b81526020018360000160208101906200027d919062000ebc565b73ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020017f1bd70c5aa931fa900de716024b36e36cc236a1ce16d32948668c08aa04e680f2815250816000815181106200030c576200030b62000eee565b5b602002602001018190525092915050565b6060620003296200059e565b935093915050565b60006200033d6200059e565b836040516200034c90620005b8565b62000358919062000f88565b604051809103906000f08015801562000375573d6000803e3d6000fd5b5091506000600167ffffffffffffffff81111562000398576200039762000cdb565b5b604051908082528060200260200182016040528015620003d557816020015b620003c162000515565b815260200190600190039081620003b75790505b5090506040518060a0016040528060006002811115620003fa57620003f9620007ef565b5b81526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020017f1bd70c5aa931fa900de716024b36e36cc236a1ce16d32948668c08aa04e680f2815250816000815181106200048f576200048e62000eee565b5b6020026020010181905250808260200181905250509250929050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6040518060a0016040528060006002811115620005375762000536620007ef565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600080191681525090565b604051806040016040528060608152602001606081525090565b6133698062000fa683390190565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6200061181620005da565b81146200061d57600080fd5b50565b600081359050620006318162000606565b92915050565b60006020828403121562000650576200064f620005d0565b5b6000620006608482850162000620565b91505092915050565b60008115159050919050565b620006808162000669565b82525050565b60006020820190506200069d600083018462000675565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620006d082620006a3565b9050919050565b620006e281620006c3565b82525050565b6000602082019050620006ff6000830184620006d7565b92915050565b6200071081620006c3565b81146200071c57600080fd5b50565b600081359050620007308162000705565b92915050565b600080fd5b60006060828403121562000754576200075362000736565b5b81905092915050565b60008060408385031215620007775762000776620005d0565b5b600062000787858286016200071f565b925050602083013567ffffffffffffffff811115620007ab57620007aa620005d5565b5b620007b9858286016200073b565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110620008325762000831620007ef565b5b50565b600081905062000845826200081e565b919050565b6000620008578262000835565b9050919050565b62000869816200084a565b82525050565b6200087a81620006c3565b82525050565b6000819050919050565b620008958162000880565b82525050565b60a082016000820151620008b360008501826200085e565b506020820151620008c860208501826200086f565b506040820151620008dd60408501826200086f565b506060820151620008f260608501826200086f565b5060808201516200090760808501826200088a565b50505050565b60006200091b83836200089b565b60a08301905092915050565b6000602082019050919050565b60006200094182620007c3565b6200094d8185620007ce565b93506200095a83620007df565b8060005b83811015620009915781516200097588826200090d565b9750620009828362000927565b9250506001810190506200095e565b5085935050505092915050565b60006020820190508181036000830152620009ba818462000934565b905092915050565b600061ffff82169050919050565b620009db81620009c2565b8114620009e757600080fd5b50565b600081359050620009fb81620009d0565b92915050565b60008060006060848603121562000a1d5762000a1c620005d0565b5b600062000a2d868287016200071f565b935050602062000a4086828701620009ea565b925050604084013567ffffffffffffffff81111562000a645762000a63620005d5565b5b62000a72868287016200073b565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b8381101562000ab857808201518184015260208101905062000a9b565b60008484015250505050565b6000601f19601f8301169050919050565b600062000ae28262000a7c565b62000aee818562000a87565b935062000b0081856020860162000a98565b62000b0b8162000ac4565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600062000b5083836200086f565b60208301905092915050565b6000602082019050919050565b600062000b768262000b16565b62000b82818562000b21565b935062000b8f8362000b32565b8060005b8381101562000bc657815162000baa888262000b42565b975062000bb78362000b5c565b92505060018101905062000b93565b5085935050505092915050565b600082825260208201905092915050565b600062000bf182620007c3565b62000bfd818562000bd3565b935062000c0a83620007df565b8060005b8381101562000c4157815162000c2588826200090d565b975062000c328362000927565b92505060018101905062000c0e565b5085935050505092915050565b6000604083016000830151848203600086015262000c6d828262000b69565b9150506020830151848203602086015262000c89828262000be4565b9150508091505092915050565b6000604082019050818103600083015262000cb2818562000ad5565b9050818103602083015262000cc8818462000c4e565b90509392505050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000d158262000ac4565b810181811067ffffffffffffffff8211171562000d375762000d3662000cdb565b5b80604052505050565b600062000d4c620005c6565b905062000d5a828262000d0a565b919050565b600067ffffffffffffffff82111562000d7d5762000d7c62000cdb565b5b62000d888262000ac4565b9050602081019050919050565b82818337600083830152505050565b600062000dbb62000db58462000d5f565b62000d40565b90508281526020810184848401111562000dda5762000dd962000cd6565b5b62000de784828562000d95565b509392505050565b600082601f83011262000e075762000e0662000cd1565b5b813562000e1984826020860162000da4565b91505092915050565b6000806040838503121562000e3c5762000e3b620005d0565b5b600062000e4c858286016200071f565b925050602083013567ffffffffffffffff81111562000e705762000e6f620005d5565b5b62000e7e8582860162000def565b9150509250929050565b600060408201905062000e9f6000830185620006d7565b818103602083015262000eb3818462000c4e565b90509392505050565b60006020828403121562000ed55762000ed4620005d0565b5b600062000ee5848285016200071f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000819050919050565b600062000f4862000f4262000f3c84620006a3565b62000f1d565b620006a3565b9050919050565b600062000f5c8262000f27565b9050919050565b600062000f708262000f4f565b9050919050565b62000f828162000f63565b82525050565b600060208201905062000f9f600083018462000f77565b9291505056fe60a060405234801561001057600080fd5b506040516133693803806133698339818101604052810190610032919061015a565b80808073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505050604051610076906100d8565b604051809103906000f080158015610092573d6000803e3d6000fd5b506000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610187565b612a118061095883390190565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610115826100ea565b9050919050565b60006101278261010a565b9050919050565b6101378161011c565b811461014257600080fd5b50565b6000815190506101548161012e565b92915050565b6000602082840312156101705761016f6100e5565b5b600061017e84828501610145565b91505092915050565b6080516107af6101a960003960008181610190015261027101526107af6000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806301ffc9a71461005c5780631a0d86101461008c5780631c7b4de4146100965780634162169f146100b457806341de6830146100d2575b600080fd5b6100766004803603810190610071919061044b565b6100f0565b6040516100839190610493565b60405180910390f35b61009461016a565b005b61009e610249565b6040516100ab91906104c7565b60405180910390f35b6100bc61026d565b6040516100c99190610561565b60405180910390f35b6100da610295565b6040516100e791906105f3565b60405180910390f35b60007f41de6830000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061016357506101628261029e565b5b9050919050565b7f1bd70c5aa931fa900de716024b36e36cc236a1ce16d32948668c08aa04e680f26101c67f0000000000000000000000000000000000000000000000000000000000000000306101b8610308565b846101c1610310565b61031d565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639cbf9e366040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561022e57600080fd5b505af1158015610242573d6000803e3d6000fd5b5050505050565b7f1bd70c5aa931fa900de716024b36e36cc236a1ce16d32948668c08aa04e680f281565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60006002905090565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b3660008036915091509091565b8573ffffffffffffffffffffffffffffffffffffffff1663fdef910686868686866040518663ffffffff1660e01b815260040161035e95949392919061068d565b602060405180830381865afa15801561037b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039f9190610707565b6103e657858585856040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526004016103dd9493929190610734565b60405180910390fd5b505050505050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610428816103f3565b811461043357600080fd5b50565b6000813590506104458161041f565b92915050565b600060208284031215610461576104606103ee565b5b600061046f84828501610436565b91505092915050565b60008115159050919050565b61048d81610478565b82525050565b60006020820190506104a86000830184610484565b92915050565b6000819050919050565b6104c1816104ae565b82525050565b60006020820190506104dc60008301846104b8565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061052761052261051d846104e2565b610502565b6104e2565b9050919050565b60006105398261050c565b9050919050565b600061054b8261052e565b9050919050565b61055b81610540565b82525050565b60006020820190506105766000830184610552565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106105bc576105bb61057c565b5b50565b60008190506105cd826105ab565b919050565b60006105dd826105bf565b9050919050565b6105ed816105d2565b82525050565b600060208201905061060860008301846105e4565b92915050565b6000610619826104e2565b9050919050565b6106298161060e565b82525050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b600061066c838561062f565b9350610679838584610640565b6106828361064f565b840190509392505050565b60006080820190506106a26000830188610620565b6106af6020830187610620565b6106bc60408301866104b8565b81810360608301526106cf818486610660565b90509695505050505050565b6106e481610478565b81146106ef57600080fd5b50565b600081519050610701816106db565b92915050565b60006020828403121561071d5761071c6103ee565b5b600061072b848285016106f2565b91505092915050565b60006080820190506107496000830187610620565b6107566020830186610620565b6107636040830185610620565b61077060608301846104b8565b9594505050505056fea2646970667358221220b3f8dc1a6d3b7ade4ee08f458fdb6e383762323d52d01070caec8fe846c033e764736f6c6343000813003360806040523480156200001157600080fd5b506040518060400160405280600f81526020017f4661726d204c656e646572204e465400000000000000000000000000000000008152506040518060400160405280600381526020017f464c4e000000000000000000000000000000000000000000000000000000000081525081600090816200008f919062000324565b508060019081620000a1919062000324565b5050506200040b565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200012c57607f821691505b602082108103620001425762000141620000e4565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620001ac7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200016d565b620001b886836200016d565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000205620001ff620001f984620001d0565b620001da565b620001d0565b9050919050565b6000819050919050565b6200022183620001e4565b6200023962000230826200020c565b8484546200017a565b825550505050565b600090565b6200025062000241565b6200025d81848462000216565b505050565b5b8181101562000285576200027960008262000246565b60018101905062000263565b5050565b601f821115620002d4576200029e8162000148565b620002a9846200015d565b81016020851015620002b9578190505b620002d1620002c8856200015d565b83018262000262565b50505b505050565b600082821c905092915050565b6000620002f960001984600802620002d9565b1980831691505092915050565b6000620003148383620002e6565b9150826002028217905092915050565b6200032f82620000aa565b67ffffffffffffffff8111156200034b576200034a620000b5565b5b62000357825462000113565b6200036482828562000289565b600060209050601f8311600181146200039c576000841562000387578287015190505b62000393858262000306565b86555062000403565b601f198416620003ac8662000148565b60005b82811015620003d657848901518255600182019150602085019450602081019050620003af565b86831015620003f65784890151620003f2601f891682620002e6565b8355505b6001600288020188555050505b505050505050565b6125f6806200041b6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806370a082311161008c578063a22cb46511610066578063a22cb46514610249578063b88d4fde14610265578063c87b56dd14610281578063e985e9c5146102b1576100ea565b806370a08231146101f157806395d89b41146102215780639cbf9e361461023f576100ea565b8063095ea7b3116100c8578063095ea7b31461016d57806323b872dd1461018957806342842e0e146101a55780636352211e146101c1576100ea565b806301ffc9a7146100ef57806306fdde031461011f578063081812fc1461013d575b600080fd5b610109600480360381019061010491906118f2565b6102e1565b604051610116919061193a565b60405180910390f35b610127610342565b60405161013491906119e5565b60405180910390f35b61015760048036038101906101529190611a3d565b6103d4565b6040516101649190611aab565b60405180910390f35b61018760048036038101906101829190611af2565b61041a565b005b6101a3600480360381019061019e9190611b32565b610531565b005b6101bf60048036038101906101ba9190611b32565b610591565b005b6101db60048036038101906101d69190611a3d565b6105b1565b6040516101e89190611aab565b60405180910390f35b61020b60048036038101906102069190611b85565b610637565b6040516102189190611bc1565b60405180910390f35b6102296106ee565b60405161023691906119e5565b60405180910390f35b610247610780565b005b610263600480360381019061025e9190611c08565b6107a5565b005b61027f600480360381019061027a9190611d7d565b6107bb565b005b61029b60048036038101906102969190611a3d565b61081d565b6040516102a891906119e5565b60405180910390f35b6102cb60048036038101906102c69190611e00565b61092f565b6040516102d8919061193a565b60405180910390f35b6000634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061033b575061033a826109c3565b5b9050919050565b60606000805461035190611e6f565b80601f016020809104026020016040519081016040528092919081815260200182805461037d90611e6f565b80156103ca5780601f1061039f576101008083540402835291602001916103ca565b820191906000526020600020905b8154815290600101906020018083116103ad57829003601f168201915b5050505050905090565b60006103df82610aa5565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610425826105b1565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610495576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048c90611f12565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166104b4610af0565b73ffffffffffffffffffffffffffffffffffffffff1614806104e357506104e2816104dd610af0565b61092f565b5b610522576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051990611fa4565b60405180910390fd5b61052c8383610af8565b505050565b61054261053c610af0565b82610bb1565b610581576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057890612036565b60405180910390fd5b61058c838383610c46565b505050565b6105ac838383604051806020016040528060008152506107bb565b505050565b6000806105bd83610f3f565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361062e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610625906120a2565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036106a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069e90612134565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600180546106fd90611e6f565b80601f016020809104026020016040519081016040528092919081815260200182805461072990611e6f565b80156107765780601f1061074b57610100808354040283529160200191610776565b820191906000526020600020905b81548152906001019060200180831161075957829003601f168201915b5050505050905090565b61078a6007610f7c565b60006107966007610f92565b90506107a23382610fa0565b50565b6107b76107b0610af0565b83836111bd565b5050565b6107cc6107c6610af0565b83610bb1565b61080b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080290612036565b60405180910390fd5b61081784848484611329565b50505050565b606061082882610aa5565b600060066000848152602001908152602001600020805461084890611e6f565b80601f016020809104026020016040519081016040528092919081815260200182805461087490611e6f565b80156108c15780601f10610896576101008083540402835291602001916108c1565b820191906000526020600020905b8154815290600101906020018083116108a457829003601f168201915b5050505050905060006108d2611385565b905060008151036108e757819250505061092a565b60008251111561091c578082604051602001610904929190612190565b6040516020818303038152906040529250505061092a565b6109258461139c565b925050505b919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610a8e57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610a9e5750610a9d82611404565b5b9050919050565b610aae8161146e565b610aed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae4906120a2565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610b6b836105b1565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610bbd836105b1565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610bff5750610bfe818561092f565b5b80610c3d57508373ffffffffffffffffffffffffffffffffffffffff16610c25846103d4565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610c66826105b1565b73ffffffffffffffffffffffffffffffffffffffff1614610cbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb390612226565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d22906122b8565b60405180910390fd5b610d3883838360016114af565b8273ffffffffffffffffffffffffffffffffffffffff16610d58826105b1565b73ffffffffffffffffffffffffffffffffffffffff1614610dae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da590612226565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610f3a83838360016114b5565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6001816000016000828254019250508190555050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361100f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100690612324565b60405180910390fd5b6110188161146e565b15611058576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104f90612390565b60405180910390fd5b6110666000838360016114af565b61106f8161146e565b156110af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a690612390565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46111b96000838360016114b5565b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361122b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611222906123fc565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161131c919061193a565b60405180910390a3505050565b611334848484610c46565b611340848484846114bb565b61137f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113769061248e565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606113a782610aa5565b60006113b1611385565b905060008151116113d157604051806020016040528060008152506113fc565b806113db84611642565b6040516020016113ec929190612190565b6040516020818303038152906040525b915050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff1661149083610f3f565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b50505050565b50505050565b60006114dc8473ffffffffffffffffffffffffffffffffffffffff16611710565b15611635578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611505610af0565b8786866040518563ffffffff1660e01b81526004016115279493929190612503565b6020604051808303816000875af192505050801561156357506040513d601f19601f820116820180604052508101906115609190612564565b60015b6115e5573d8060008114611593576040519150601f19603f3d011682016040523d82523d6000602084013e611598565b606091505b5060008151036115dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115d49061248e565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061163a565b600190505b949350505050565b60606000600161165184611733565b01905060008167ffffffffffffffff8111156116705761166f611c52565b5b6040519080825280601f01601f1916602001820160405280156116a25781602001600182028036833780820191505090505b509050600082602001820190505b600115611705578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816116f9576116f8612591565b5b049450600085036116b0575b819350505050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611791577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161178757611786612591565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106117ce576d04ee2d6d415b85acef810000000083816117c4576117c3612591565b5b0492506020810190505b662386f26fc1000083106117fd57662386f26fc1000083816117f3576117f2612591565b5b0492506010810190505b6305f5e1008310611826576305f5e100838161181c5761181b612591565b5b0492506008810190505b612710831061184b57612710838161184157611840612591565b5b0492506004810190505b6064831061186e576064838161186457611863612591565b5b0492506002810190505b600a831061187d576001810190505b80915050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6118cf8161189a565b81146118da57600080fd5b50565b6000813590506118ec816118c6565b92915050565b60006020828403121561190857611907611890565b5b6000611916848285016118dd565b91505092915050565b60008115159050919050565b6119348161191f565b82525050565b600060208201905061194f600083018461192b565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561198f578082015181840152602081019050611974565b60008484015250505050565b6000601f19601f8301169050919050565b60006119b782611955565b6119c18185611960565b93506119d1818560208601611971565b6119da8161199b565b840191505092915050565b600060208201905081810360008301526119ff81846119ac565b905092915050565b6000819050919050565b611a1a81611a07565b8114611a2557600080fd5b50565b600081359050611a3781611a11565b92915050565b600060208284031215611a5357611a52611890565b5b6000611a6184828501611a28565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a9582611a6a565b9050919050565b611aa581611a8a565b82525050565b6000602082019050611ac06000830184611a9c565b92915050565b611acf81611a8a565b8114611ada57600080fd5b50565b600081359050611aec81611ac6565b92915050565b60008060408385031215611b0957611b08611890565b5b6000611b1785828601611add565b9250506020611b2885828601611a28565b9150509250929050565b600080600060608486031215611b4b57611b4a611890565b5b6000611b5986828701611add565b9350506020611b6a86828701611add565b9250506040611b7b86828701611a28565b9150509250925092565b600060208284031215611b9b57611b9a611890565b5b6000611ba984828501611add565b91505092915050565b611bbb81611a07565b82525050565b6000602082019050611bd66000830184611bb2565b92915050565b611be58161191f565b8114611bf057600080fd5b50565b600081359050611c0281611bdc565b92915050565b60008060408385031215611c1f57611c1e611890565b5b6000611c2d85828601611add565b9250506020611c3e85828601611bf3565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611c8a8261199b565b810181811067ffffffffffffffff82111715611ca957611ca8611c52565b5b80604052505050565b6000611cbc611886565b9050611cc88282611c81565b919050565b600067ffffffffffffffff821115611ce857611ce7611c52565b5b611cf18261199b565b9050602081019050919050565b82818337600083830152505050565b6000611d20611d1b84611ccd565b611cb2565b905082815260208101848484011115611d3c57611d3b611c4d565b5b611d47848285611cfe565b509392505050565b600082601f830112611d6457611d63611c48565b5b8135611d74848260208601611d0d565b91505092915050565b60008060008060808587031215611d9757611d96611890565b5b6000611da587828801611add565b9450506020611db687828801611add565b9350506040611dc787828801611a28565b925050606085013567ffffffffffffffff811115611de857611de7611895565b5b611df487828801611d4f565b91505092959194509250565b60008060408385031215611e1757611e16611890565b5b6000611e2585828601611add565b9250506020611e3685828601611add565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611e8757607f821691505b602082108103611e9a57611e99611e40565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000611efc602183611960565b9150611f0782611ea0565b604082019050919050565b60006020820190508181036000830152611f2b81611eef565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000611f8e603d83611960565b9150611f9982611f32565b604082019050919050565b60006020820190508181036000830152611fbd81611f81565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000612020602d83611960565b915061202b82611fc4565b604082019050919050565b6000602082019050818103600083015261204f81612013565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b600061208c601883611960565b915061209782612056565b602082019050919050565b600060208201905081810360008301526120bb8161207f565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b600061211e602983611960565b9150612129826120c2565b604082019050919050565b6000602082019050818103600083015261214d81612111565b9050919050565b600081905092915050565b600061216a82611955565b6121748185612154565b9350612184818560208601611971565b80840191505092915050565b600061219c828561215f565b91506121a8828461215f565b91508190509392505050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000612210602583611960565b915061221b826121b4565b604082019050919050565b6000602082019050818103600083015261223f81612203565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006122a2602483611960565b91506122ad82612246565b604082019050919050565b600060208201905081810360008301526122d181612295565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b600061230e602083611960565b9150612319826122d8565b602082019050919050565b6000602082019050818103600083015261233d81612301565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b600061237a601c83611960565b915061238582612344565b602082019050919050565b600060208201905081810360008301526123a98161236d565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b60006123e6601983611960565b91506123f1826123b0565b602082019050919050565b60006020820190508181036000830152612415816123d9565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000612478603283611960565b91506124838261241c565b604082019050919050565b600060208201905081810360008301526124a78161246b565b9050919050565b600081519050919050565b600082825260208201905092915050565b60006124d5826124ae565b6124df81856124b9565b93506124ef818560208601611971565b6124f88161199b565b840191505092915050565b60006080820190506125186000830187611a9c565b6125256020830186611a9c565b6125326040830185611bb2565b818103606083015261254481846124ca565b905095945050505050565b60008151905061255e816118c6565b92915050565b60006020828403121561257a57612579611890565b5b60006125888482850161254f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea2646970667358221220890b833bf6def222dcdf8a7e75cbd7bc6af5953d31717801d0762bff0d318af864736f6c63430008130033a2646970667358221220986948635086e6648dffb15e1abb0c2c2aff0f70ad7b0fa2b0dee8cd6b55877064736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x4344 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH3 0x5E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FFC9A7 EQ PUSH3 0x63 JUMPI DUP1 PUSH4 0x5C60DA1B EQ PUSH3 0x99 JUMPI DUP1 PUSH4 0x9CB0A124 EQ PUSH3 0xBB JUMPI DUP1 PUSH4 0xA8A9C29E EQ PUSH3 0xF1 JUMPI DUP1 PUSH4 0xF10832F1 EQ PUSH3 0x128 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x81 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH3 0x7B SWAP2 SWAP1 PUSH3 0x637 JUMP JUMPDEST PUSH3 0x15F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x90 SWAP2 SWAP1 PUSH3 0x686 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH3 0xA3 PUSH3 0x1DC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0xB2 SWAP2 SWAP1 PUSH3 0x6E8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH3 0xD9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH3 0xD3 SWAP2 SWAP1 PUSH3 0x75D JUMP JUMPDEST PUSH3 0x1E1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0xE8 SWAP2 SWAP1 PUSH3 0x99E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH3 0x10F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH3 0x109 SWAP2 SWAP1 PUSH3 0xA01 JUMP JUMPDEST PUSH3 0x31D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x11F SWAP3 SWAP2 SWAP1 PUSH3 0xC96 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH3 0x146 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH3 0x140 SWAP2 SWAP1 PUSH3 0xE22 JUMP JUMPDEST PUSH3 0x331 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x156 SWAP3 SWAP2 SWAP1 PUSH3 0xE88 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x99718B5000000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH3 0x1D5 JUMPI POP PUSH3 0x1D4 DUP3 PUSH3 0x4AB JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x201 JUMPI PUSH3 0x200 PUSH3 0xCDB JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH3 0x23E JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH3 0x22A PUSH3 0x515 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH3 0x220 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 PUSH1 0x2 DUP2 GT ISZERO PUSH3 0x263 JUMPI PUSH3 0x262 PUSH3 0x7EF JUMP JUMPDEST JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x0 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH3 0x27D SWAP2 SWAP1 PUSH3 0xEBC JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x1BD70C5AA931FA900DE716024B36E36CC236A1CE16D32948668C08AA04E680F2 DUP2 MSTORE POP DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH3 0x30C JUMPI PUSH3 0x30B PUSH3 0xEEE JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH3 0x329 PUSH3 0x59E JUMP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x33D PUSH3 0x59E JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH3 0x34C SWAP1 PUSH3 0x5B8 JUMP JUMPDEST PUSH3 0x358 SWAP2 SWAP1 PUSH3 0xF88 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0x375 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH1 0x1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x398 JUMPI PUSH3 0x397 PUSH3 0xCDB JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH3 0x3D5 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH3 0x3C1 PUSH3 0x515 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH3 0x3B7 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH1 0x2 DUP2 GT ISZERO PUSH3 0x3FA JUMPI PUSH3 0x3F9 PUSH3 0x7EF JUMP JUMPDEST JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x1BD70C5AA931FA900DE716024B36E36CC236A1CE16D32948668C08AA04E680F2 DUP2 MSTORE POP DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH3 0x48F JUMPI PUSH3 0x48E PUSH3 0xEEE JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP3 PUSH1 0x20 ADD DUP2 SWAP1 MSTORE POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH1 0x2 DUP2 GT ISZERO PUSH3 0x537 JUMPI PUSH3 0x536 PUSH3 0x7EF JUMP JUMPDEST JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH2 0x3369 DUP1 PUSH3 0xFA6 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x611 DUP2 PUSH3 0x5DA JUMP JUMPDEST DUP2 EQ PUSH3 0x61D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH3 0x631 DUP2 PUSH3 0x606 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x650 JUMPI PUSH3 0x64F PUSH3 0x5D0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x660 DUP5 DUP3 DUP6 ADD PUSH3 0x620 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x680 DUP2 PUSH3 0x669 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH3 0x69D PUSH1 0x0 DUP4 ADD DUP5 PUSH3 0x675 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x6D0 DUP3 PUSH3 0x6A3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x6E2 DUP2 PUSH3 0x6C3 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH3 0x6FF PUSH1 0x0 DUP4 ADD DUP5 PUSH3 0x6D7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x710 DUP2 PUSH3 0x6C3 JUMP JUMPDEST DUP2 EQ PUSH3 0x71C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH3 0x730 DUP2 PUSH3 0x705 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x754 JUMPI PUSH3 0x753 PUSH3 0x736 JUMP JUMPDEST JUMPDEST DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x777 JUMPI PUSH3 0x776 PUSH3 0x5D0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x787 DUP6 DUP3 DUP7 ADD PUSH3 0x71F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x7AB JUMPI PUSH3 0x7AA PUSH3 0x5D5 JUMP JUMPDEST JUMPDEST PUSH3 0x7B9 DUP6 DUP3 DUP7 ADD PUSH3 0x73B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x3 DUP2 LT PUSH3 0x832 JUMPI PUSH3 0x831 PUSH3 0x7EF JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH3 0x845 DUP3 PUSH3 0x81E JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x857 DUP3 PUSH3 0x835 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x869 DUP2 PUSH3 0x84A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH3 0x87A DUP2 PUSH3 0x6C3 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x895 DUP2 PUSH3 0x880 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH3 0x8B3 PUSH1 0x0 DUP6 ADD DUP3 PUSH3 0x85E JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH3 0x8C8 PUSH1 0x20 DUP6 ADD DUP3 PUSH3 0x86F JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH3 0x8DD PUSH1 0x40 DUP6 ADD DUP3 PUSH3 0x86F JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH3 0x8F2 PUSH1 0x60 DUP6 ADD DUP3 PUSH3 0x86F JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH3 0x907 PUSH1 0x80 DUP6 ADD DUP3 PUSH3 0x88A JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x91B DUP4 DUP4 PUSH3 0x89B JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x941 DUP3 PUSH3 0x7C3 JUMP JUMPDEST PUSH3 0x94D DUP2 DUP6 PUSH3 0x7CE JUMP JUMPDEST SWAP4 POP PUSH3 0x95A DUP4 PUSH3 0x7DF JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x991 JUMPI DUP2 MLOAD PUSH3 0x975 DUP9 DUP3 PUSH3 0x90D JUMP JUMPDEST SWAP8 POP PUSH3 0x982 DUP4 PUSH3 0x927 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x95E JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x9BA DUP2 DUP5 PUSH3 0x934 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x9DB DUP2 PUSH3 0x9C2 JUMP JUMPDEST DUP2 EQ PUSH3 0x9E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH3 0x9FB DUP2 PUSH3 0x9D0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0xA1D JUMPI PUSH3 0xA1C PUSH3 0x5D0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0xA2D DUP7 DUP3 DUP8 ADD PUSH3 0x71F JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH3 0xA40 DUP7 DUP3 DUP8 ADD PUSH3 0x9EA JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0xA64 JUMPI PUSH3 0xA63 PUSH3 0x5D5 JUMP JUMPDEST JUMPDEST PUSH3 0xA72 DUP7 DUP3 DUP8 ADD PUSH3 0x73B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0xAB8 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0xA9B JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xAE2 DUP3 PUSH3 0xA7C JUMP JUMPDEST PUSH3 0xAEE DUP2 DUP6 PUSH3 0xA87 JUMP JUMPDEST SWAP4 POP PUSH3 0xB00 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH3 0xA98 JUMP JUMPDEST PUSH3 0xB0B DUP2 PUSH3 0xAC4 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xB50 DUP4 DUP4 PUSH3 0x86F JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xB76 DUP3 PUSH3 0xB16 JUMP JUMPDEST PUSH3 0xB82 DUP2 DUP6 PUSH3 0xB21 JUMP JUMPDEST SWAP4 POP PUSH3 0xB8F DUP4 PUSH3 0xB32 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0xBC6 JUMPI DUP2 MLOAD PUSH3 0xBAA DUP9 DUP3 PUSH3 0xB42 JUMP JUMPDEST SWAP8 POP PUSH3 0xBB7 DUP4 PUSH3 0xB5C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0xB93 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xBF1 DUP3 PUSH3 0x7C3 JUMP JUMPDEST PUSH3 0xBFD DUP2 DUP6 PUSH3 0xBD3 JUMP JUMPDEST SWAP4 POP PUSH3 0xC0A DUP4 PUSH3 0x7DF JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0xC41 JUMPI DUP2 MLOAD PUSH3 0xC25 DUP9 DUP3 PUSH3 0x90D JUMP JUMPDEST SWAP8 POP PUSH3 0xC32 DUP4 PUSH3 0x927 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0xC0E JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP4 ADD PUSH1 0x0 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x0 DUP7 ADD MSTORE PUSH3 0xC6D DUP3 DUP3 PUSH3 0xB69 JUMP JUMPDEST SWAP2 POP POP PUSH1 0x20 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x20 DUP7 ADD MSTORE PUSH3 0xC89 DUP3 DUP3 PUSH3 0xBE4 JUMP JUMPDEST SWAP2 POP POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0xCB2 DUP2 DUP6 PUSH3 0xAD5 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH3 0xCC8 DUP2 DUP5 PUSH3 0xC4E JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH3 0xD15 DUP3 PUSH3 0xAC4 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0xD37 JUMPI PUSH3 0xD36 PUSH3 0xCDB JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xD4C PUSH3 0x5C6 JUMP JUMPDEST SWAP1 POP PUSH3 0xD5A DUP3 DUP3 PUSH3 0xD0A JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0xD7D JUMPI PUSH3 0xD7C PUSH3 0xCDB JUMP JUMPDEST JUMPDEST PUSH3 0xD88 DUP3 PUSH3 0xAC4 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xDBB PUSH3 0xDB5 DUP5 PUSH3 0xD5F JUMP JUMPDEST PUSH3 0xD40 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH3 0xDDA JUMPI PUSH3 0xDD9 PUSH3 0xCD6 JUMP JUMPDEST JUMPDEST PUSH3 0xDE7 DUP5 DUP3 DUP6 PUSH3 0xD95 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0xE07 JUMPI PUSH3 0xE06 PUSH3 0xCD1 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH3 0xE19 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0xDA4 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0xE3C JUMPI PUSH3 0xE3B PUSH3 0x5D0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0xE4C DUP6 DUP3 DUP7 ADD PUSH3 0x71F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0xE70 JUMPI PUSH3 0xE6F PUSH3 0x5D5 JUMP JUMPDEST JUMPDEST PUSH3 0xE7E DUP6 DUP3 DUP7 ADD PUSH3 0xDEF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH3 0xE9F PUSH1 0x0 DUP4 ADD DUP6 PUSH3 0x6D7 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH3 0xEB3 DUP2 DUP5 PUSH3 0xC4E JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0xED5 JUMPI PUSH3 0xED4 PUSH3 0x5D0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0xEE5 DUP5 DUP3 DUP6 ADD PUSH3 0x71F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xF48 PUSH3 0xF42 PUSH3 0xF3C DUP5 PUSH3 0x6A3 JUMP JUMPDEST PUSH3 0xF1D JUMP JUMPDEST PUSH3 0x6A3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xF5C DUP3 PUSH3 0xF27 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xF70 DUP3 PUSH3 0xF4F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0xF82 DUP2 PUSH3 0xF63 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH3 0xF9F PUSH1 0x0 DUP4 ADD DUP5 PUSH3 0xF77 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x3369 CODESIZE SUB DUP1 PUSH2 0x3369 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH2 0x32 SWAP2 SWAP1 PUSH2 0x15A JUMP JUMPDEST DUP1 DUP1 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP POP POP PUSH1 0x40 MLOAD PUSH2 0x76 SWAP1 PUSH2 0xD8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH2 0x92 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP PUSH2 0x187 JUMP JUMPDEST PUSH2 0x2A11 DUP1 PUSH2 0x958 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x115 DUP3 PUSH2 0xEA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x127 DUP3 PUSH2 0x10A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x137 DUP2 PUSH2 0x11C JUMP JUMPDEST DUP2 EQ PUSH2 0x142 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x154 DUP2 PUSH2 0x12E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x170 JUMPI PUSH2 0x16F PUSH2 0xE5 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x17E DUP5 DUP3 DUP6 ADD PUSH2 0x145 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x7AF PUSH2 0x1A9 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x190 ADD MSTORE PUSH2 0x271 ADD MSTORE PUSH2 0x7AF PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x57 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x5C JUMPI DUP1 PUSH4 0x1A0D8610 EQ PUSH2 0x8C JUMPI DUP1 PUSH4 0x1C7B4DE4 EQ PUSH2 0x96 JUMPI DUP1 PUSH4 0x4162169F EQ PUSH2 0xB4 JUMPI DUP1 PUSH4 0x41DE6830 EQ PUSH2 0xD2 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x76 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x71 SWAP2 SWAP1 PUSH2 0x44B JUMP JUMPDEST PUSH2 0xF0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x83 SWAP2 SWAP1 PUSH2 0x493 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x94 PUSH2 0x16A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x9E PUSH2 0x249 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAB SWAP2 SWAP1 PUSH2 0x4C7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xBC PUSH2 0x26D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC9 SWAP2 SWAP1 PUSH2 0x561 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDA PUSH2 0x295 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE7 SWAP2 SWAP1 PUSH2 0x5F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x41DE683000000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x163 JUMPI POP PUSH2 0x162 DUP3 PUSH2 0x29E JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x1BD70C5AA931FA900DE716024B36E36CC236A1CE16D32948668C08AA04E680F2 PUSH2 0x1C6 PUSH32 0x0 ADDRESS PUSH2 0x1B8 PUSH2 0x308 JUMP JUMPDEST DUP5 PUSH2 0x1C1 PUSH2 0x310 JUMP JUMPDEST PUSH2 0x31D JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x9CBF9E36 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x22E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x242 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH32 0x1BD70C5AA931FA900DE716024B36E36CC236A1CE16D32948668C08AA04E680F2 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 DUP1 CALLDATASIZE SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xFDEF9106 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x35E SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x68D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x37B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x39F SWAP2 SWAP1 PUSH2 0x707 JUMP JUMPDEST PUSH2 0x3E6 JUMPI DUP6 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH32 0x32DBE3B400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3DD SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x734 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x428 DUP2 PUSH2 0x3F3 JUMP JUMPDEST DUP2 EQ PUSH2 0x433 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x445 DUP2 PUSH2 0x41F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x461 JUMPI PUSH2 0x460 PUSH2 0x3EE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x46F DUP5 DUP3 DUP6 ADD PUSH2 0x436 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x48D DUP2 PUSH2 0x478 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x4A8 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x484 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4C1 DUP2 PUSH2 0x4AE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x4DC PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x4B8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x527 PUSH2 0x522 PUSH2 0x51D DUP5 PUSH2 0x4E2 JUMP JUMPDEST PUSH2 0x502 JUMP JUMPDEST PUSH2 0x4E2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x539 DUP3 PUSH2 0x50C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x54B DUP3 PUSH2 0x52E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x55B DUP2 PUSH2 0x540 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x576 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x552 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x3 DUP2 LT PUSH2 0x5BC JUMPI PUSH2 0x5BB PUSH2 0x57C JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH2 0x5CD DUP3 PUSH2 0x5AB JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5DD DUP3 PUSH2 0x5BF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5ED DUP2 PUSH2 0x5D2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x608 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x5E4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x619 DUP3 PUSH2 0x4E2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x629 DUP2 PUSH2 0x60E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x66C DUP4 DUP6 PUSH2 0x62F JUMP JUMPDEST SWAP4 POP PUSH2 0x679 DUP4 DUP6 DUP5 PUSH2 0x640 JUMP JUMPDEST PUSH2 0x682 DUP4 PUSH2 0x64F JUMP JUMPDEST DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x6A2 PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x620 JUMP JUMPDEST PUSH2 0x6AF PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x620 JUMP JUMPDEST PUSH2 0x6BC PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x4B8 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x6CF DUP2 DUP5 DUP7 PUSH2 0x660 JUMP JUMPDEST SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x6E4 DUP2 PUSH2 0x478 JUMP JUMPDEST DUP2 EQ PUSH2 0x6EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x701 DUP2 PUSH2 0x6DB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x71D JUMPI PUSH2 0x71C PUSH2 0x3EE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x72B DUP5 DUP3 DUP6 ADD PUSH2 0x6F2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x749 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x620 JUMP JUMPDEST PUSH2 0x756 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x620 JUMP JUMPDEST PUSH2 0x763 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x620 JUMP JUMPDEST PUSH2 0x770 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x4B8 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB3 0xF8 0xDC BYTE PUSH14 0x3B7ADE4EE08F458FDB6E38376232 RETURNDATASIZE MSTORE 0xD0 LT PUSH17 0xCAEC8FE846C033E764736F6C6343000813 STOP CALLER PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xF DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4661726D204C656E646572204E46540000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x464C4E0000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 PUSH1 0x0 SWAP1 DUP2 PUSH3 0x8F SWAP2 SWAP1 PUSH3 0x324 JUMP JUMPDEST POP DUP1 PUSH1 0x1 SWAP1 DUP2 PUSH3 0xA1 SWAP2 SWAP1 PUSH3 0x324 JUMP JUMPDEST POP POP POP PUSH3 0x40B JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x12C JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x142 JUMPI PUSH3 0x141 PUSH3 0xE4 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH3 0x1AC PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH3 0x16D JUMP JUMPDEST PUSH3 0x1B8 DUP7 DUP4 PUSH3 0x16D JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x205 PUSH3 0x1FF PUSH3 0x1F9 DUP5 PUSH3 0x1D0 JUMP JUMPDEST PUSH3 0x1DA JUMP JUMPDEST PUSH3 0x1D0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x221 DUP4 PUSH3 0x1E4 JUMP JUMPDEST PUSH3 0x239 PUSH3 0x230 DUP3 PUSH3 0x20C JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH3 0x17A JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH3 0x250 PUSH3 0x241 JUMP JUMPDEST PUSH3 0x25D DUP2 DUP5 DUP5 PUSH3 0x216 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x285 JUMPI PUSH3 0x279 PUSH1 0x0 DUP3 PUSH3 0x246 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x263 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x2D4 JUMPI PUSH3 0x29E DUP2 PUSH3 0x148 JUMP JUMPDEST PUSH3 0x2A9 DUP5 PUSH3 0x15D JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH3 0x2B9 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH3 0x2D1 PUSH3 0x2C8 DUP6 PUSH3 0x15D JUMP JUMPDEST DUP4 ADD DUP3 PUSH3 0x262 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x2F9 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH3 0x2D9 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x314 DUP4 DUP4 PUSH3 0x2E6 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x32F DUP3 PUSH3 0xAA JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x34B JUMPI PUSH3 0x34A PUSH3 0xB5 JUMP JUMPDEST JUMPDEST PUSH3 0x357 DUP3 SLOAD PUSH3 0x113 JUMP JUMPDEST PUSH3 0x364 DUP3 DUP3 DUP6 PUSH3 0x289 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x39C JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x387 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH3 0x393 DUP6 DUP3 PUSH3 0x306 JUMP JUMPDEST DUP7 SSTORE POP PUSH3 0x403 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH3 0x3AC DUP7 PUSH3 0x148 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x3D6 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x3AF JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH3 0x3F6 JUMPI DUP5 DUP10 ADD MLOAD PUSH3 0x3F2 PUSH1 0x1F DUP10 AND DUP3 PUSH3 0x2E6 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x25F6 DUP1 PUSH3 0x41B PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xEA JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x249 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x265 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x281 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x2B1 JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1F1 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x221 JUMPI DUP1 PUSH4 0x9CBF9E36 EQ PUSH2 0x23F JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x16D JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x189 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x1A5 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x1C1 JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x11F JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x13D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x109 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x104 SWAP2 SWAP1 PUSH2 0x18F2 JUMP JUMPDEST PUSH2 0x2E1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x116 SWAP2 SWAP1 PUSH2 0x193A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x127 PUSH2 0x342 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x134 SWAP2 SWAP1 PUSH2 0x19E5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x157 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x152 SWAP2 SWAP1 PUSH2 0x1A3D JUMP JUMPDEST PUSH2 0x3D4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x164 SWAP2 SWAP1 PUSH2 0x1AAB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x187 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x182 SWAP2 SWAP1 PUSH2 0x1AF2 JUMP JUMPDEST PUSH2 0x41A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1A3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x19E SWAP2 SWAP1 PUSH2 0x1B32 JUMP JUMPDEST PUSH2 0x531 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1BF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BA SWAP2 SWAP1 PUSH2 0x1B32 JUMP JUMPDEST PUSH2 0x591 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1DB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1D6 SWAP2 SWAP1 PUSH2 0x1A3D JUMP JUMPDEST PUSH2 0x5B1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E8 SWAP2 SWAP1 PUSH2 0x1AAB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x206 SWAP2 SWAP1 PUSH2 0x1B85 JUMP JUMPDEST PUSH2 0x637 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x218 SWAP2 SWAP1 PUSH2 0x1BC1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x229 PUSH2 0x6EE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x236 SWAP2 SWAP1 PUSH2 0x19E5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x247 PUSH2 0x780 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x263 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x25E SWAP2 SWAP1 PUSH2 0x1C08 JUMP JUMPDEST PUSH2 0x7A5 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x27F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x27A SWAP2 SWAP1 PUSH2 0x1D7D JUMP JUMPDEST PUSH2 0x7BB JUMP JUMPDEST STOP JUMPDEST PUSH2 0x29B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x296 SWAP2 SWAP1 PUSH2 0x1A3D JUMP JUMPDEST PUSH2 0x81D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2A8 SWAP2 SWAP1 PUSH2 0x19E5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2CB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2C6 SWAP2 SWAP1 PUSH2 0x1E00 JUMP JUMPDEST PUSH2 0x92F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2D8 SWAP2 SWAP1 PUSH2 0x193A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH4 0x49064906 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x33B JUMPI POP PUSH2 0x33A DUP3 PUSH2 0x9C3 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x351 SWAP1 PUSH2 0x1E6F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x37D SWAP1 PUSH2 0x1E6F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3CA JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x39F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3CA JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3AD JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3DF DUP3 PUSH2 0xAA5 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x425 DUP3 PUSH2 0x5B1 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x495 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x48C SWAP1 PUSH2 0x1F12 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x4B4 PUSH2 0xAF0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x4E3 JUMPI POP PUSH2 0x4E2 DUP2 PUSH2 0x4DD PUSH2 0xAF0 JUMP JUMPDEST PUSH2 0x92F JUMP JUMPDEST JUMPDEST PUSH2 0x522 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x519 SWAP1 PUSH2 0x1FA4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x52C DUP4 DUP4 PUSH2 0xAF8 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x542 PUSH2 0x53C PUSH2 0xAF0 JUMP JUMPDEST DUP3 PUSH2 0xBB1 JUMP JUMPDEST PUSH2 0x581 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x578 SWAP1 PUSH2 0x2036 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x58C DUP4 DUP4 DUP4 PUSH2 0xC46 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x5AC DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x7BB JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x5BD DUP4 PUSH2 0xF3F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x62E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x625 SWAP1 PUSH2 0x20A2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x6A7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x69E SWAP1 PUSH2 0x2134 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x6FD SWAP1 PUSH2 0x1E6F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x729 SWAP1 PUSH2 0x1E6F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x776 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x74B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x776 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x759 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x78A PUSH1 0x7 PUSH2 0xF7C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x796 PUSH1 0x7 PUSH2 0xF92 JUMP JUMPDEST SWAP1 POP PUSH2 0x7A2 CALLER DUP3 PUSH2 0xFA0 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x7B7 PUSH2 0x7B0 PUSH2 0xAF0 JUMP JUMPDEST DUP4 DUP4 PUSH2 0x11BD JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x7CC PUSH2 0x7C6 PUSH2 0xAF0 JUMP JUMPDEST DUP4 PUSH2 0xBB1 JUMP JUMPDEST PUSH2 0x80B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x802 SWAP1 PUSH2 0x2036 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x817 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1329 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x828 DUP3 PUSH2 0xAA5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH2 0x848 SWAP1 PUSH2 0x1E6F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x874 SWAP1 PUSH2 0x1E6F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x8C1 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x896 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x8C1 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x8A4 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH2 0x8D2 PUSH2 0x1385 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x8E7 JUMPI DUP2 SWAP3 POP POP POP PUSH2 0x92A JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x91C JUMPI DUP1 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x904 SWAP3 SWAP2 SWAP1 PUSH2 0x2190 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP3 POP POP POP PUSH2 0x92A JUMP JUMPDEST PUSH2 0x925 DUP5 PUSH2 0x139C JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0xA8E JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0xA9E JUMPI POP PUSH2 0xA9D DUP3 PUSH2 0x1404 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xAAE DUP2 PUSH2 0x146E JUMP JUMPDEST PUSH2 0xAED JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xAE4 SWAP1 PUSH2 0x20A2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB6B DUP4 PUSH2 0x5B1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xBBD DUP4 PUSH2 0x5B1 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xBFF JUMPI POP PUSH2 0xBFE DUP2 DUP6 PUSH2 0x92F JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xC3D JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC25 DUP5 PUSH2 0x3D4 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC66 DUP3 PUSH2 0x5B1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCBC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB3 SWAP1 PUSH2 0x2226 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xD2B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD22 SWAP1 PUSH2 0x22B8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xD38 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x14AF JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xD58 DUP3 PUSH2 0x5B1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xDAE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDA5 SWAP1 PUSH2 0x2226 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xF3A DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x14B5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x100F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1006 SWAP1 PUSH2 0x2324 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1018 DUP2 PUSH2 0x146E JUMP JUMPDEST ISZERO PUSH2 0x1058 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x104F SWAP1 PUSH2 0x2390 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1066 PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x14AF JUMP JUMPDEST PUSH2 0x106F DUP2 PUSH2 0x146E JUMP JUMPDEST ISZERO PUSH2 0x10AF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x10A6 SWAP1 PUSH2 0x2390 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x11B9 PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x14B5 JUMP JUMPDEST POP POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x122B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1222 SWAP1 PUSH2 0x23FC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0x131C SWAP2 SWAP1 PUSH2 0x193A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x1334 DUP5 DUP5 DUP5 PUSH2 0xC46 JUMP JUMPDEST PUSH2 0x1340 DUP5 DUP5 DUP5 DUP5 PUSH2 0x14BB JUMP JUMPDEST PUSH2 0x137F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1376 SWAP1 PUSH2 0x248E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x13A7 DUP3 PUSH2 0xAA5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13B1 PUSH2 0x1385 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x13D1 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x13FC JUMP JUMPDEST DUP1 PUSH2 0x13DB DUP5 PUSH2 0x1642 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x13EC SWAP3 SWAP2 SWAP1 PUSH2 0x2190 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1490 DUP4 PUSH2 0xF3F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14DC DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1710 JUMP JUMPDEST ISZERO PUSH2 0x1635 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x1505 PUSH2 0xAF0 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1527 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2503 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1563 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1560 SWAP2 SWAP1 PUSH2 0x2564 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x15E5 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1593 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1598 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x15DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15D4 SWAP1 PUSH2 0x248E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x163A JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x1651 DUP5 PUSH2 0x1733 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1670 JUMPI PUSH2 0x166F PUSH2 0x1C52 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x16A2 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x1705 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x16F9 JUMPI PUSH2 0x16F8 PUSH2 0x2591 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 SUB PUSH2 0x16B0 JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x1791 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x1787 JUMPI PUSH2 0x1786 PUSH2 0x2591 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x17CE JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x17C4 JUMPI PUSH2 0x17C3 PUSH2 0x2591 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x17FD JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x17F3 JUMPI PUSH2 0x17F2 PUSH2 0x2591 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1826 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x181C JUMPI PUSH2 0x181B PUSH2 0x2591 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x184B JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x1841 JUMPI PUSH2 0x1840 PUSH2 0x2591 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x186E JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x1864 JUMPI PUSH2 0x1863 PUSH2 0x2591 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x187D JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x18CF DUP2 PUSH2 0x189A JUMP JUMPDEST DUP2 EQ PUSH2 0x18DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x18EC DUP2 PUSH2 0x18C6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1908 JUMPI PUSH2 0x1907 PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1916 DUP5 DUP3 DUP6 ADD PUSH2 0x18DD JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1934 DUP2 PUSH2 0x191F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x194F PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x192B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x198F JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1974 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19B7 DUP3 PUSH2 0x1955 JUMP JUMPDEST PUSH2 0x19C1 DUP2 DUP6 PUSH2 0x1960 JUMP JUMPDEST SWAP4 POP PUSH2 0x19D1 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1971 JUMP JUMPDEST PUSH2 0x19DA DUP2 PUSH2 0x199B JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x19FF DUP2 DUP5 PUSH2 0x19AC JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1A1A DUP2 PUSH2 0x1A07 JUMP JUMPDEST DUP2 EQ PUSH2 0x1A25 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1A37 DUP2 PUSH2 0x1A11 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A53 JUMPI PUSH2 0x1A52 PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1A61 DUP5 DUP3 DUP6 ADD PUSH2 0x1A28 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A95 DUP3 PUSH2 0x1A6A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1AA5 DUP2 PUSH2 0x1A8A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1AC0 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1A9C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1ACF DUP2 PUSH2 0x1A8A JUMP JUMPDEST DUP2 EQ PUSH2 0x1ADA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1AEC DUP2 PUSH2 0x1AC6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B09 JUMPI PUSH2 0x1B08 PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1B17 DUP6 DUP3 DUP7 ADD PUSH2 0x1ADD JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1B28 DUP6 DUP3 DUP7 ADD PUSH2 0x1A28 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1B4B JUMPI PUSH2 0x1B4A PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1B59 DUP7 DUP3 DUP8 ADD PUSH2 0x1ADD JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1B6A DUP7 DUP3 DUP8 ADD PUSH2 0x1ADD JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1B7B DUP7 DUP3 DUP8 ADD PUSH2 0x1A28 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B9B JUMPI PUSH2 0x1B9A PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1BA9 DUP5 DUP3 DUP6 ADD PUSH2 0x1ADD JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1BBB DUP2 PUSH2 0x1A07 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1BD6 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1BB2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1BE5 DUP2 PUSH2 0x191F JUMP JUMPDEST DUP2 EQ PUSH2 0x1BF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1C02 DUP2 PUSH2 0x1BDC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C1F JUMPI PUSH2 0x1C1E PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1C2D DUP6 DUP3 DUP7 ADD PUSH2 0x1ADD JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1C3E DUP6 DUP3 DUP7 ADD PUSH2 0x1BF3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1C8A DUP3 PUSH2 0x199B JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1CA9 JUMPI PUSH2 0x1CA8 PUSH2 0x1C52 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CBC PUSH2 0x1886 JUMP JUMPDEST SWAP1 POP PUSH2 0x1CC8 DUP3 DUP3 PUSH2 0x1C81 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1CE8 JUMPI PUSH2 0x1CE7 PUSH2 0x1C52 JUMP JUMPDEST JUMPDEST PUSH2 0x1CF1 DUP3 PUSH2 0x199B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D20 PUSH2 0x1D1B DUP5 PUSH2 0x1CCD JUMP JUMPDEST PUSH2 0x1CB2 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x1D3C JUMPI PUSH2 0x1D3B PUSH2 0x1C4D JUMP JUMPDEST JUMPDEST PUSH2 0x1D47 DUP5 DUP3 DUP6 PUSH2 0x1CFE JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1D64 JUMPI PUSH2 0x1D63 PUSH2 0x1C48 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1D74 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x1D0D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1D97 JUMPI PUSH2 0x1D96 PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1DA5 DUP8 DUP3 DUP9 ADD PUSH2 0x1ADD JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x1DB6 DUP8 DUP3 DUP9 ADD PUSH2 0x1ADD JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x1DC7 DUP8 DUP3 DUP9 ADD PUSH2 0x1A28 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1DE8 JUMPI PUSH2 0x1DE7 PUSH2 0x1895 JUMP JUMPDEST JUMPDEST PUSH2 0x1DF4 DUP8 DUP3 DUP9 ADD PUSH2 0x1D4F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1E17 JUMPI PUSH2 0x1E16 PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1E25 DUP6 DUP3 DUP7 ADD PUSH2 0x1ADD JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1E36 DUP6 DUP3 DUP7 ADD PUSH2 0x1ADD JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1E87 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1E9A JUMPI PUSH2 0x1E99 PUSH2 0x1E40 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EFC PUSH1 0x21 DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x1F07 DUP3 PUSH2 0x1EA0 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1F2B DUP2 PUSH2 0x1EEF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F8E PUSH1 0x3D DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x1F99 DUP3 PUSH2 0x1F32 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1FBD DUP2 PUSH2 0x1F81 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2020 PUSH1 0x2D DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x202B DUP3 PUSH2 0x1FC4 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x204F DUP2 PUSH2 0x2013 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x208C PUSH1 0x18 DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x2097 DUP3 PUSH2 0x2056 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x20BB DUP2 PUSH2 0x207F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x211E PUSH1 0x29 DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x2129 DUP3 PUSH2 0x20C2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x214D DUP2 PUSH2 0x2111 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x216A DUP3 PUSH2 0x1955 JUMP JUMPDEST PUSH2 0x2174 DUP2 DUP6 PUSH2 0x2154 JUMP JUMPDEST SWAP4 POP PUSH2 0x2184 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1971 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x219C DUP3 DUP6 PUSH2 0x215F JUMP JUMPDEST SWAP2 POP PUSH2 0x21A8 DUP3 DUP5 PUSH2 0x215F JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2210 PUSH1 0x25 DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x221B DUP3 PUSH2 0x21B4 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x223F DUP2 PUSH2 0x2203 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x22A2 PUSH1 0x24 DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x22AD DUP3 PUSH2 0x2246 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x22D1 DUP2 PUSH2 0x2295 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x230E PUSH1 0x20 DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x2319 DUP3 PUSH2 0x22D8 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x233D DUP2 PUSH2 0x2301 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x237A PUSH1 0x1C DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x2385 DUP3 PUSH2 0x2344 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x23A9 DUP2 PUSH2 0x236D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23E6 PUSH1 0x19 DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x23F1 DUP3 PUSH2 0x23B0 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2415 DUP2 PUSH2 0x23D9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2478 PUSH1 0x32 DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x2483 DUP3 PUSH2 0x241C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x24A7 DUP2 PUSH2 0x246B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x24D5 DUP3 PUSH2 0x24AE JUMP JUMPDEST PUSH2 0x24DF DUP2 DUP6 PUSH2 0x24B9 JUMP JUMPDEST SWAP4 POP PUSH2 0x24EF DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1971 JUMP JUMPDEST PUSH2 0x24F8 DUP2 PUSH2 0x199B JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2518 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x1A9C JUMP JUMPDEST PUSH2 0x2525 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x1A9C JUMP JUMPDEST PUSH2 0x2532 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1BB2 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x2544 DUP2 DUP5 PUSH2 0x24CA JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x255E DUP2 PUSH2 0x18C6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x257A JUMPI PUSH2 0x2579 PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2588 DUP5 DUP3 DUP6 ADD PUSH2 0x254F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP10 SIGNEXTEND DUP4 EXTCODESIZE 0xF6 0xDE CALLCODE 0x22 0xDC 0xDF DUP11 PUSH31 0x75CBD7BC6AF5953D31717801D0762BFF0D318AF864736F6C63430008130033 LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP9 PUSH10 0x48635086E6648DFFB15E BYTE 0xBB 0xC 0x2C 0x2A SELFDESTRUCT 0xF PUSH17 0xAD7B0FA2B0DEE8CD6B55877064736F6C63 NUMBER STOP ADDMOD SGT STOP CALLER ","sourceMap":"260:1232:35:-:0;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@implementation_4506":{"entryPoint":476,"id":4506,"parameterSlots":0,"returnSlots":1},"@prepareInstallation_4459":{"entryPoint":817,"id":4459,"parameterSlots":2,"returnSlots":2},"@prepareUninstallation_4500":{"entryPoint":481,"id":4500,"parameterSlots":2,"returnSlots":1},"@prepareUpdate_485":{"entryPoint":797,"id":485,"parameterSlots":3,"returnSlots":2},"@supportsInterface_3122":{"entryPoint":1195,"id":3122,"parameterSlots":1,"returnSlots":1},"@supportsInterface_523":{"entryPoint":351,"id":523,"parameterSlots":1,"returnSlots":1},"abi_decode_available_length_t_bytes_memory_ptr":{"entryPoint":3492,"id":null,"parameterSlots":3,"returnSlots":1},"abi_decode_t_address":{"entryPoint":1823,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes4":{"entryPoint":1568,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_bytes_memory_ptr":{"entryPoint":3567,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_struct$_SetupPayload_$399_calldata_ptr":{"entryPoint":1851,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_t_uint16":{"entryPoint":2538,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address":{"entryPoint":3772,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_bytes_memory_ptr":{"entryPoint":3618,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_struct$_SetupPayload_$399_calldata_ptr":{"entryPoint":1885,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint16t_struct$_SetupPayload_$399_calldata_ptr":{"entryPoint":2561,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bytes4":{"entryPoint":1591,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encodeUpdatedPos_t_address_to_t_address":{"entryPoint":2882,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encodeUpdatedPos_t_struct$_MultiTargetPermission_$189_memory_ptr_to_t_struct$_MultiTargetPermission_$189_memory_ptr":{"entryPoint":2317,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_address_to_t_address":{"entryPoint":2159,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_address_to_t_address_fromStack":{"entryPoint":1751,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr":{"entryPoint":2921,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr":{"entryPoint":3044,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr_fromStack":{"entryPoint":2356,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_bool_to_t_bool_fromStack":{"entryPoint":1653,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes32_to_t_bytes32":{"entryPoint":2186,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack":{"entryPoint":2773,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_t_contract$_IDAO_$155_to_t_address_fromStack":{"entryPoint":3959,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_enum$_Operation_$169_to_t_uint8":{"entryPoint":2142,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_struct$_MultiTargetPermission_$189_memory_ptr_to_t_struct$_MultiTargetPermission_$189_memory_ptr":{"entryPoint":2203,"id":null,"parameterSlots":2,"returnSlots":0},"abi_encode_t_struct$_PreparedSetupData_$391_memory_ptr_to_t_struct$_PreparedSetupData_$391_memory_ptr_fromStack":{"entryPoint":3150,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":1768,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_struct$_PreparedSetupData_$391_memory_ptr__to_t_address_t_struct$_PreparedSetupData_$391_memory_ptr__fromStack_reversed":{"entryPoint":3720,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":2462,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":1670,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes_memory_ptr_t_struct$_PreparedSetupData_$391_memory_ptr__to_t_bytes_memory_ptr_t_struct$_PreparedSetupData_$391_memory_ptr__fromStack_reversed":{"entryPoint":3222,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_contract$_IDAO_$155__to_t_address__fromStack_reversed":{"entryPoint":3976,"id":null,"parameterSlots":2,"returnSlots":1},"allocate_memory":{"entryPoint":3392,"id":null,"parameterSlots":1,"returnSlots":1},"allocate_unbounded":{"entryPoint":1478,"id":null,"parameterSlots":0,"returnSlots":1},"array_allocation_size_t_bytes_memory_ptr":{"entryPoint":3423,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_array$_t_address_$dyn_memory_ptr":{"entryPoint":2866,"id":null,"parameterSlots":1,"returnSlots":1},"array_dataslot_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr":{"entryPoint":2015,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_array$_t_address_$dyn_memory_ptr":{"entryPoint":2838,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr":{"entryPoint":1987,"id":null,"parameterSlots":1,"returnSlots":1},"array_length_t_bytes_memory_ptr":{"entryPoint":2684,"id":null,"parameterSlots":1,"returnSlots":1},"array_nextElement_t_array$_t_address_$dyn_memory_ptr":{"entryPoint":2908,"id":null,"parameterSlots":1,"returnSlots":1},"array_nextElement_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr":{"entryPoint":2343,"id":null,"parameterSlots":1,"returnSlots":1},"array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr":{"entryPoint":2849,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr":{"entryPoint":3027,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr_fromStack":{"entryPoint":1998,"id":null,"parameterSlots":2,"returnSlots":1},"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack":{"entryPoint":2695,"id":null,"parameterSlots":2,"returnSlots":1},"cleanup_t_address":{"entryPoint":1731,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bool":{"entryPoint":1641,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes32":{"entryPoint":2176,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_bytes4":{"entryPoint":1498,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_enum$_Operation_$169":{"entryPoint":2101,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint16":{"entryPoint":2498,"id":null,"parameterSlots":1,"returnSlots":1},"cleanup_t_uint160":{"entryPoint":1699,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_contract$_IDAO_$155_to_t_address":{"entryPoint":3939,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_enum$_Operation_$169_to_t_uint8":{"entryPoint":2122,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint160_to_t_address":{"entryPoint":3919,"id":null,"parameterSlots":1,"returnSlots":1},"convert_t_uint160_to_t_uint160":{"entryPoint":3879,"id":null,"parameterSlots":1,"returnSlots":1},"copy_calldata_to_memory_with_cleanup":{"entryPoint":3477,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":2712,"id":null,"parameterSlots":3,"returnSlots":0},"finalize_allocation":{"entryPoint":3338,"id":null,"parameterSlots":2,"returnSlots":0},"identity":{"entryPoint":3869,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x21":{"entryPoint":2031,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":3822,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x41":{"entryPoint":3291,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d":{"entryPoint":3281,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d":{"entryPoint":1846,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae":{"entryPoint":3286,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db":{"entryPoint":1493,"id":null,"parameterSlots":0,"returnSlots":0},"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b":{"entryPoint":1488,"id":null,"parameterSlots":0,"returnSlots":0},"round_up_to_mul_of_32":{"entryPoint":2756,"id":null,"parameterSlots":1,"returnSlots":1},"validator_assert_t_enum$_Operation_$169":{"entryPoint":2078,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_address":{"entryPoint":1797,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_bytes4":{"entryPoint":1542,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_t_uint16":{"entryPoint":2512,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nodeType":"YulBlock","src":"0:19754:36","statements":[{"body":{"nodeType":"YulBlock","src":"47:35:36","statements":[{"nodeType":"YulAssignment","src":"57:19:36","value":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"73:2:36","type":"","value":"64"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"67:5:36"},"nodeType":"YulFunctionCall","src":"67:9:36"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"57:6:36"}]}]},"name":"allocate_unbounded","nodeType":"YulFunctionDefinition","returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"40:6:36","type":""}],"src":"7:75:36"},{"body":{"nodeType":"YulBlock","src":"177:28:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"194:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"197:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"187:6:36"},"nodeType":"YulFunctionCall","src":"187:12:36"},"nodeType":"YulExpressionStatement","src":"187:12:36"}]},"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulFunctionDefinition","src":"88:117:36"},{"body":{"nodeType":"YulBlock","src":"300:28:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"317:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"320:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"310:6:36"},"nodeType":"YulFunctionCall","src":"310:12:36"},"nodeType":"YulExpressionStatement","src":"310:12:36"}]},"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulFunctionDefinition","src":"211:117:36"},{"body":{"nodeType":"YulBlock","src":"378:105:36","statements":[{"nodeType":"YulAssignment","src":"388:89:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"403:5:36"},{"kind":"number","nodeType":"YulLiteral","src":"410:66:36","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"399:3:36"},"nodeType":"YulFunctionCall","src":"399:78:36"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"388:7:36"}]}]},"name":"cleanup_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"360:5:36","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"370:7:36","type":""}],"src":"334:149:36"},{"body":{"nodeType":"YulBlock","src":"531:78:36","statements":[{"body":{"nodeType":"YulBlock","src":"587:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"596:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"599:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"589:6:36"},"nodeType":"YulFunctionCall","src":"589:12:36"},"nodeType":"YulExpressionStatement","src":"589:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"554:5:36"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"578:5:36"}],"functionName":{"name":"cleanup_t_bytes4","nodeType":"YulIdentifier","src":"561:16:36"},"nodeType":"YulFunctionCall","src":"561:23:36"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"551:2:36"},"nodeType":"YulFunctionCall","src":"551:34:36"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"544:6:36"},"nodeType":"YulFunctionCall","src":"544:42:36"},"nodeType":"YulIf","src":"541:62:36"}]},"name":"validator_revert_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"524:5:36","type":""}],"src":"489:120:36"},{"body":{"nodeType":"YulBlock","src":"666:86:36","statements":[{"nodeType":"YulAssignment","src":"676:29:36","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"698:6:36"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"685:12:36"},"nodeType":"YulFunctionCall","src":"685:20:36"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"676:5:36"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"740:5:36"}],"functionName":{"name":"validator_revert_t_bytes4","nodeType":"YulIdentifier","src":"714:25:36"},"nodeType":"YulFunctionCall","src":"714:32:36"},"nodeType":"YulExpressionStatement","src":"714:32:36"}]},"name":"abi_decode_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"644:6:36","type":""},{"name":"end","nodeType":"YulTypedName","src":"652:3:36","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"660:5:36","type":""}],"src":"615:137:36"},{"body":{"nodeType":"YulBlock","src":"823:262:36","statements":[{"body":{"nodeType":"YulBlock","src":"869:83:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"871:77:36"},"nodeType":"YulFunctionCall","src":"871:79:36"},"nodeType":"YulExpressionStatement","src":"871:79:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"844:7:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"853:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"840:3:36"},"nodeType":"YulFunctionCall","src":"840:23:36"},{"kind":"number","nodeType":"YulLiteral","src":"865:2:36","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"836:3:36"},"nodeType":"YulFunctionCall","src":"836:32:36"},"nodeType":"YulIf","src":"833:119:36"},{"nodeType":"YulBlock","src":"962:116:36","statements":[{"nodeType":"YulVariableDeclaration","src":"977:15:36","value":{"kind":"number","nodeType":"YulLiteral","src":"991:1:36","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"981:6:36","type":""}]},{"nodeType":"YulAssignment","src":"1006:62:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1040:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"1051:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1036:3:36"},"nodeType":"YulFunctionCall","src":"1036:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"1060:7:36"}],"functionName":{"name":"abi_decode_t_bytes4","nodeType":"YulIdentifier","src":"1016:19:36"},"nodeType":"YulFunctionCall","src":"1016:52:36"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"1006:6:36"}]}]}]},"name":"abi_decode_tuple_t_bytes4","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"793:9:36","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"804:7:36","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"816:6:36","type":""}],"src":"758:327:36"},{"body":{"nodeType":"YulBlock","src":"1133:48:36","statements":[{"nodeType":"YulAssignment","src":"1143:32:36","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1168:5:36"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1161:6:36"},"nodeType":"YulFunctionCall","src":"1161:13:36"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"1154:6:36"},"nodeType":"YulFunctionCall","src":"1154:21:36"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1143:7:36"}]}]},"name":"cleanup_t_bool","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1115:5:36","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1125:7:36","type":""}],"src":"1091:90:36"},{"body":{"nodeType":"YulBlock","src":"1246:50:36","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1263:3:36"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1283:5:36"}],"functionName":{"name":"cleanup_t_bool","nodeType":"YulIdentifier","src":"1268:14:36"},"nodeType":"YulFunctionCall","src":"1268:21:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1256:6:36"},"nodeType":"YulFunctionCall","src":"1256:34:36"},"nodeType":"YulExpressionStatement","src":"1256:34:36"}]},"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1234:5:36","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1241:3:36","type":""}],"src":"1187:109:36"},{"body":{"nodeType":"YulBlock","src":"1394:118:36","statements":[{"nodeType":"YulAssignment","src":"1404:26:36","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1416:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"1427:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1412:3:36"},"nodeType":"YulFunctionCall","src":"1412:18:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1404:4:36"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"1478:6:36"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1491:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"1502:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1487:3:36"},"nodeType":"YulFunctionCall","src":"1487:17:36"}],"functionName":{"name":"abi_encode_t_bool_to_t_bool_fromStack","nodeType":"YulIdentifier","src":"1440:37:36"},"nodeType":"YulFunctionCall","src":"1440:65:36"},"nodeType":"YulExpressionStatement","src":"1440:65:36"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1366:9:36","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1378:6:36","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1389:4:36","type":""}],"src":"1302:210:36"},{"body":{"nodeType":"YulBlock","src":"1563:81:36","statements":[{"nodeType":"YulAssignment","src":"1573:65:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1588:5:36"},{"kind":"number","nodeType":"YulLiteral","src":"1595:42:36","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"1584:3:36"},"nodeType":"YulFunctionCall","src":"1584:54:36"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1573:7:36"}]}]},"name":"cleanup_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1545:5:36","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1555:7:36","type":""}],"src":"1518:126:36"},{"body":{"nodeType":"YulBlock","src":"1695:51:36","statements":[{"nodeType":"YulAssignment","src":"1705:35:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1734:5:36"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"1716:17:36"},"nodeType":"YulFunctionCall","src":"1716:24:36"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"1705:7:36"}]}]},"name":"cleanup_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1677:5:36","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"1687:7:36","type":""}],"src":"1650:96:36"},{"body":{"nodeType":"YulBlock","src":"1817:53:36","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"1834:3:36"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"1857:5:36"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"1839:17:36"},"nodeType":"YulFunctionCall","src":"1839:24:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"1827:6:36"},"nodeType":"YulFunctionCall","src":"1827:37:36"},"nodeType":"YulExpressionStatement","src":"1827:37:36"}]},"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"1805:5:36","type":""},{"name":"pos","nodeType":"YulTypedName","src":"1812:3:36","type":""}],"src":"1752:118:36"},{"body":{"nodeType":"YulBlock","src":"1974:124:36","statements":[{"nodeType":"YulAssignment","src":"1984:26:36","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"1996:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"2007:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"1992:3:36"},"nodeType":"YulFunctionCall","src":"1992:18:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"1984:4:36"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"2064:6:36"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"2077:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"2088:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"2073:3:36"},"nodeType":"YulFunctionCall","src":"2073:17:36"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"2020:43:36"},"nodeType":"YulFunctionCall","src":"2020:71:36"},"nodeType":"YulExpressionStatement","src":"2020:71:36"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"1946:9:36","type":""},{"name":"value0","nodeType":"YulTypedName","src":"1958:6:36","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"1969:4:36","type":""}],"src":"1876:222:36"},{"body":{"nodeType":"YulBlock","src":"2147:79:36","statements":[{"body":{"nodeType":"YulBlock","src":"2204:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2213:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2216:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2206:6:36"},"nodeType":"YulFunctionCall","src":"2206:12:36"},"nodeType":"YulExpressionStatement","src":"2206:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2170:5:36"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2195:5:36"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"2177:17:36"},"nodeType":"YulFunctionCall","src":"2177:24:36"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"2167:2:36"},"nodeType":"YulFunctionCall","src":"2167:35:36"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"2160:6:36"},"nodeType":"YulFunctionCall","src":"2160:43:36"},"nodeType":"YulIf","src":"2157:63:36"}]},"name":"validator_revert_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"2140:5:36","type":""}],"src":"2104:122:36"},{"body":{"nodeType":"YulBlock","src":"2284:87:36","statements":[{"nodeType":"YulAssignment","src":"2294:29:36","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"2316:6:36"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"2303:12:36"},"nodeType":"YulFunctionCall","src":"2303:20:36"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2294:5:36"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"2359:5:36"}],"functionName":{"name":"validator_revert_t_address","nodeType":"YulIdentifier","src":"2332:26:36"},"nodeType":"YulFunctionCall","src":"2332:33:36"},"nodeType":"YulExpressionStatement","src":"2332:33:36"}]},"name":"abi_decode_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2262:6:36","type":""},{"name":"end","nodeType":"YulTypedName","src":"2270:3:36","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2278:5:36","type":""}],"src":"2232:139:36"},{"body":{"nodeType":"YulBlock","src":"2466:28:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"2483:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"2486:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"2476:6:36"},"nodeType":"YulFunctionCall","src":"2476:12:36"},"nodeType":"YulExpressionStatement","src":"2476:12:36"}]},"name":"revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d","nodeType":"YulFunctionDefinition","src":"2377:117:36"},{"body":{"nodeType":"YulBlock","src":"2623:152:36","statements":[{"body":{"nodeType":"YulBlock","src":"2662:83:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d","nodeType":"YulIdentifier","src":"2664:77:36"},"nodeType":"YulFunctionCall","src":"2664:79:36"},"nodeType":"YulExpressionStatement","src":"2664:79:36"}]},"condition":{"arguments":[{"arguments":[{"name":"end","nodeType":"YulIdentifier","src":"2644:3:36"},{"name":"offset","nodeType":"YulIdentifier","src":"2649:6:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2640:3:36"},"nodeType":"YulFunctionCall","src":"2640:16:36"},{"kind":"number","nodeType":"YulLiteral","src":"2658:2:36","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2636:3:36"},"nodeType":"YulFunctionCall","src":"2636:25:36"},"nodeType":"YulIf","src":"2633:112:36"},{"nodeType":"YulAssignment","src":"2754:15:36","value":{"name":"offset","nodeType":"YulIdentifier","src":"2763:6:36"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"2754:5:36"}]}]},"name":"abi_decode_t_struct$_SetupPayload_$399_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"2601:6:36","type":""},{"name":"end","nodeType":"YulTypedName","src":"2609:3:36","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"2617:5:36","type":""}],"src":"2540:235:36"},{"body":{"nodeType":"YulBlock","src":"2895:582:36","statements":[{"body":{"nodeType":"YulBlock","src":"2941:83:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"2943:77:36"},"nodeType":"YulFunctionCall","src":"2943:79:36"},"nodeType":"YulExpressionStatement","src":"2943:79:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"2916:7:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"2925:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"2912:3:36"},"nodeType":"YulFunctionCall","src":"2912:23:36"},{"kind":"number","nodeType":"YulLiteral","src":"2937:2:36","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"2908:3:36"},"nodeType":"YulFunctionCall","src":"2908:32:36"},"nodeType":"YulIf","src":"2905:119:36"},{"nodeType":"YulBlock","src":"3034:117:36","statements":[{"nodeType":"YulVariableDeclaration","src":"3049:15:36","value":{"kind":"number","nodeType":"YulLiteral","src":"3063:1:36","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3053:6:36","type":""}]},{"nodeType":"YulAssignment","src":"3078:63:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3113:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"3124:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3109:3:36"},"nodeType":"YulFunctionCall","src":"3109:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3133:7:36"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"3088:20:36"},"nodeType":"YulFunctionCall","src":"3088:53:36"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"3078:6:36"}]}]},{"nodeType":"YulBlock","src":"3161:309:36","statements":[{"nodeType":"YulVariableDeclaration","src":"3176:46:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3207:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"3218:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3203:3:36"},"nodeType":"YulFunctionCall","src":"3203:18:36"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"3190:12:36"},"nodeType":"YulFunctionCall","src":"3190:32:36"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"3180:6:36","type":""}]},{"body":{"nodeType":"YulBlock","src":"3269:83:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"3271:77:36"},"nodeType":"YulFunctionCall","src":"3271:79:36"},"nodeType":"YulExpressionStatement","src":"3271:79:36"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"3241:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"3249:18:36","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"3238:2:36"},"nodeType":"YulFunctionCall","src":"3238:30:36"},"nodeType":"YulIf","src":"3235:117:36"},{"nodeType":"YulAssignment","src":"3366:94:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"3432:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"3443:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3428:3:36"},"nodeType":"YulFunctionCall","src":"3428:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"3452:7:36"}],"functionName":{"name":"abi_decode_t_struct$_SetupPayload_$399_calldata_ptr","nodeType":"YulIdentifier","src":"3376:51:36"},"nodeType":"YulFunctionCall","src":"3376:84:36"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"3366:6:36"}]}]}]},"name":"abi_decode_tuple_t_addresst_struct$_SetupPayload_$399_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"2857:9:36","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"2868:7:36","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"2880:6:36","type":""},{"name":"value1","nodeType":"YulTypedName","src":"2888:6:36","type":""}],"src":"2781:696:36"},{"body":{"nodeType":"YulBlock","src":"3595:40:36","statements":[{"nodeType":"YulAssignment","src":"3606:22:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"3622:5:36"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"3616:5:36"},"nodeType":"YulFunctionCall","src":"3616:12:36"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"3606:6:36"}]}]},"name":"array_length_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"3578:5:36","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"3588:6:36","type":""}],"src":"3483:152:36"},{"body":{"nodeType":"YulBlock","src":"3790:73:36","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3807:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"3812:6:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"3800:6:36"},"nodeType":"YulFunctionCall","src":"3800:19:36"},"nodeType":"YulExpressionStatement","src":"3800:19:36"},{"nodeType":"YulAssignment","src":"3828:29:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"3847:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"3852:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"3843:3:36"},"nodeType":"YulFunctionCall","src":"3843:14:36"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"3828:11:36"}]}]},"name":"array_storeLengthForEncoding_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"3762:3:36","type":""},{"name":"length","nodeType":"YulTypedName","src":"3767:6:36","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"3778:11:36","type":""}],"src":"3641:222:36"},{"body":{"nodeType":"YulBlock","src":"3979:60:36","statements":[{"nodeType":"YulAssignment","src":"3989:11:36","value":{"name":"ptr","nodeType":"YulIdentifier","src":"3997:3:36"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"3989:4:36"}]},{"nodeType":"YulAssignment","src":"4010:22:36","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"4022:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"4027:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"4018:3:36"},"nodeType":"YulFunctionCall","src":"4018:14:36"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"4010:4:36"}]}]},"name":"array_dataslot_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"3966:3:36","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"3974:4:36","type":""}],"src":"3869:170:36"},{"body":{"nodeType":"YulBlock","src":"4073:152:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4090:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4093:77:36","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4083:6:36"},"nodeType":"YulFunctionCall","src":"4083:88:36"},"nodeType":"YulExpressionStatement","src":"4083:88:36"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4187:1:36","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"4190:4:36","type":"","value":"0x21"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4180:6:36"},"nodeType":"YulFunctionCall","src":"4180:15:36"},"nodeType":"YulExpressionStatement","src":"4180:15:36"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"4211:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"4214:4:36","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"4204:6:36"},"nodeType":"YulFunctionCall","src":"4204:15:36"},"nodeType":"YulExpressionStatement","src":"4204:15:36"}]},"name":"panic_error_0x21","nodeType":"YulFunctionDefinition","src":"4045:180:36"},{"body":{"nodeType":"YulBlock","src":"4287:62:36","statements":[{"body":{"nodeType":"YulBlock","src":"4321:22:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x21","nodeType":"YulIdentifier","src":"4323:16:36"},"nodeType":"YulFunctionCall","src":"4323:18:36"},"nodeType":"YulExpressionStatement","src":"4323:18:36"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4310:5:36"},{"kind":"number","nodeType":"YulLiteral","src":"4317:1:36","type":"","value":"3"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"4307:2:36"},"nodeType":"YulFunctionCall","src":"4307:12:36"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"4300:6:36"},"nodeType":"YulFunctionCall","src":"4300:20:36"},"nodeType":"YulIf","src":"4297:46:36"}]},"name":"validator_assert_t_enum$_Operation_$169","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4280:5:36","type":""}],"src":"4231:118:36"},{"body":{"nodeType":"YulBlock","src":"4413:79:36","statements":[{"nodeType":"YulAssignment","src":"4423:16:36","value":{"name":"value","nodeType":"YulIdentifier","src":"4434:5:36"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4423:7:36"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4480:5:36"}],"functionName":{"name":"validator_assert_t_enum$_Operation_$169","nodeType":"YulIdentifier","src":"4440:39:36"},"nodeType":"YulFunctionCall","src":"4440:46:36"},"nodeType":"YulExpressionStatement","src":"4440:46:36"}]},"name":"cleanup_t_enum$_Operation_$169","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4395:5:36","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4405:7:36","type":""}],"src":"4355:137:36"},{"body":{"nodeType":"YulBlock","src":"4569:66:36","statements":[{"nodeType":"YulAssignment","src":"4579:50:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4623:5:36"}],"functionName":{"name":"cleanup_t_enum$_Operation_$169","nodeType":"YulIdentifier","src":"4592:30:36"},"nodeType":"YulFunctionCall","src":"4592:37:36"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"4579:9:36"}]}]},"name":"convert_t_enum$_Operation_$169_to_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4549:5:36","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"4559:9:36","type":""}],"src":"4498:137:36"},{"body":{"nodeType":"YulBlock","src":"4707:77:36","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4724:3:36"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4771:5:36"}],"functionName":{"name":"convert_t_enum$_Operation_$169_to_t_uint8","nodeType":"YulIdentifier","src":"4729:41:36"},"nodeType":"YulFunctionCall","src":"4729:48:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4717:6:36"},"nodeType":"YulFunctionCall","src":"4717:61:36"},"nodeType":"YulExpressionStatement","src":"4717:61:36"}]},"name":"abi_encode_t_enum$_Operation_$169_to_t_uint8","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4695:5:36","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4702:3:36","type":""}],"src":"4641:143:36"},{"body":{"nodeType":"YulBlock","src":"4845:53:36","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"4862:3:36"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"4885:5:36"}],"functionName":{"name":"cleanup_t_address","nodeType":"YulIdentifier","src":"4867:17:36"},"nodeType":"YulFunctionCall","src":"4867:24:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"4855:6:36"},"nodeType":"YulFunctionCall","src":"4855:37:36"},"nodeType":"YulExpressionStatement","src":"4855:37:36"}]},"name":"abi_encode_t_address_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4833:5:36","type":""},{"name":"pos","nodeType":"YulTypedName","src":"4840:3:36","type":""}],"src":"4790:108:36"},{"body":{"nodeType":"YulBlock","src":"4949:32:36","statements":[{"nodeType":"YulAssignment","src":"4959:16:36","value":{"name":"value","nodeType":"YulIdentifier","src":"4970:5:36"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"4959:7:36"}]}]},"name":"cleanup_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"4931:5:36","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"4941:7:36","type":""}],"src":"4904:77:36"},{"body":{"nodeType":"YulBlock","src":"5042:53:36","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5059:3:36"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5082:5:36"}],"functionName":{"name":"cleanup_t_bytes32","nodeType":"YulIdentifier","src":"5064:17:36"},"nodeType":"YulFunctionCall","src":"5064:24:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"5052:6:36"},"nodeType":"YulFunctionCall","src":"5052:37:36"},"nodeType":"YulExpressionStatement","src":"5052:37:36"}]},"name":"abi_encode_t_bytes32_to_t_bytes32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5030:5:36","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5037:3:36","type":""}],"src":"4987:108:36"},{"body":{"nodeType":"YulBlock","src":"5329:942:36","statements":[{"nodeType":"YulVariableDeclaration","src":"5339:26:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5355:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"5360:4:36","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5351:3:36"},"nodeType":"YulFunctionCall","src":"5351:14:36"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"5343:4:36","type":""}]},{"nodeType":"YulBlock","src":"5375:180:36","statements":[{"nodeType":"YulVariableDeclaration","src":"5415:43:36","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5445:5:36"},{"kind":"number","nodeType":"YulLiteral","src":"5452:4:36","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5441:3:36"},"nodeType":"YulFunctionCall","src":"5441:16:36"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5435:5:36"},"nodeType":"YulFunctionCall","src":"5435:23:36"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"5419:12:36","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"5516:12:36"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5534:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"5539:4:36","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5530:3:36"},"nodeType":"YulFunctionCall","src":"5530:14:36"}],"functionName":{"name":"abi_encode_t_enum$_Operation_$169_to_t_uint8","nodeType":"YulIdentifier","src":"5471:44:36"},"nodeType":"YulFunctionCall","src":"5471:74:36"},"nodeType":"YulExpressionStatement","src":"5471:74:36"}]},{"nodeType":"YulBlock","src":"5565:165:36","statements":[{"nodeType":"YulVariableDeclaration","src":"5601:43:36","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5631:5:36"},{"kind":"number","nodeType":"YulLiteral","src":"5638:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5627:3:36"},"nodeType":"YulFunctionCall","src":"5627:16:36"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5621:5:36"},"nodeType":"YulFunctionCall","src":"5621:23:36"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"5605:12:36","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"5691:12:36"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5709:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"5714:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5705:3:36"},"nodeType":"YulFunctionCall","src":"5705:14:36"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"5657:33:36"},"nodeType":"YulFunctionCall","src":"5657:63:36"},"nodeType":"YulExpressionStatement","src":"5657:63:36"}]},{"nodeType":"YulBlock","src":"5740:163:36","statements":[{"nodeType":"YulVariableDeclaration","src":"5774:43:36","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5804:5:36"},{"kind":"number","nodeType":"YulLiteral","src":"5811:4:36","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5800:3:36"},"nodeType":"YulFunctionCall","src":"5800:16:36"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5794:5:36"},"nodeType":"YulFunctionCall","src":"5794:23:36"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"5778:12:36","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"5864:12:36"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"5882:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"5887:4:36","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5878:3:36"},"nodeType":"YulFunctionCall","src":"5878:14:36"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"5830:33:36"},"nodeType":"YulFunctionCall","src":"5830:63:36"},"nodeType":"YulExpressionStatement","src":"5830:63:36"}]},{"nodeType":"YulBlock","src":"5913:169:36","statements":[{"nodeType":"YulVariableDeclaration","src":"5953:43:36","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"5983:5:36"},{"kind":"number","nodeType":"YulLiteral","src":"5990:4:36","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"5979:3:36"},"nodeType":"YulFunctionCall","src":"5979:16:36"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"5973:5:36"},"nodeType":"YulFunctionCall","src":"5973:23:36"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"5957:12:36","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"6043:12:36"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6061:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"6066:4:36","type":"","value":"0x60"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6057:3:36"},"nodeType":"YulFunctionCall","src":"6057:14:36"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"6009:33:36"},"nodeType":"YulFunctionCall","src":"6009:63:36"},"nodeType":"YulExpressionStatement","src":"6009:63:36"}]},{"nodeType":"YulBlock","src":"6092:172:36","statements":[{"nodeType":"YulVariableDeclaration","src":"6135:43:36","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"6165:5:36"},{"kind":"number","nodeType":"YulLiteral","src":"6172:4:36","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6161:3:36"},"nodeType":"YulFunctionCall","src":"6161:16:36"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"6155:5:36"},"nodeType":"YulFunctionCall","src":"6155:23:36"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"6139:12:36","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"6225:12:36"},{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6243:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"6248:4:36","type":"","value":"0x80"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6239:3:36"},"nodeType":"YulFunctionCall","src":"6239:14:36"}],"functionName":{"name":"abi_encode_t_bytes32_to_t_bytes32","nodeType":"YulIdentifier","src":"6191:33:36"},"nodeType":"YulFunctionCall","src":"6191:63:36"},"nodeType":"YulExpressionStatement","src":"6191:63:36"}]}]},"name":"abi_encode_t_struct$_MultiTargetPermission_$189_memory_ptr_to_t_struct$_MultiTargetPermission_$189_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"5316:5:36","type":""},{"name":"pos","nodeType":"YulTypedName","src":"5323:3:36","type":""}],"src":"5197:1074:36"},{"body":{"nodeType":"YulBlock","src":"6433:175:36","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"6553:6:36"},{"name":"pos","nodeType":"YulIdentifier","src":"6561:3:36"}],"functionName":{"name":"abi_encode_t_struct$_MultiTargetPermission_$189_memory_ptr_to_t_struct$_MultiTargetPermission_$189_memory_ptr","nodeType":"YulIdentifier","src":"6443:109:36"},"nodeType":"YulFunctionCall","src":"6443:122:36"},"nodeType":"YulExpressionStatement","src":"6443:122:36"},{"nodeType":"YulAssignment","src":"6574:28:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"6592:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"6597:4:36","type":"","value":"0xa0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6588:3:36"},"nodeType":"YulFunctionCall","src":"6588:14:36"},"variableNames":[{"name":"updatedPos","nodeType":"YulIdentifier","src":"6574:10:36"}]}]},"name":"abi_encodeUpdatedPos_t_struct$_MultiTargetPermission_$189_memory_ptr_to_t_struct$_MultiTargetPermission_$189_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value0","nodeType":"YulTypedName","src":"6406:6:36","type":""},{"name":"pos","nodeType":"YulTypedName","src":"6414:3:36","type":""}],"returnVariables":[{"name":"updatedPos","nodeType":"YulTypedName","src":"6422:10:36","type":""}],"src":"6277:331:36"},{"body":{"nodeType":"YulBlock","src":"6727:38:36","statements":[{"nodeType":"YulAssignment","src":"6737:22:36","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"6749:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"6754:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"6745:3:36"},"nodeType":"YulFunctionCall","src":"6745:14:36"},"variableNames":[{"name":"next","nodeType":"YulIdentifier","src":"6737:4:36"}]}]},"name":"array_nextElement_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"6714:3:36","type":""}],"returnVariables":[{"name":"next","nodeType":"YulTypedName","src":"6722:4:36","type":""}],"src":"6614:151:36"},{"body":{"nodeType":"YulBlock","src":"7071:836:36","statements":[{"nodeType":"YulVariableDeclaration","src":"7081:106:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7181:5:36"}],"functionName":{"name":"array_length_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"7095:85:36"},"nodeType":"YulFunctionCall","src":"7095:92:36"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"7085:6:36","type":""}]},{"nodeType":"YulAssignment","src":"7196:131:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"7315:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"7320:6:36"}],"functionName":{"name":"array_storeLengthForEncoding_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"7203:111:36"},"nodeType":"YulFunctionCall","src":"7203:124:36"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7196:3:36"}]},{"nodeType":"YulVariableDeclaration","src":"7336:109:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"7439:5:36"}],"functionName":{"name":"array_dataslot_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"7351:87:36"},"nodeType":"YulFunctionCall","src":"7351:94:36"},"variables":[{"name":"baseRef","nodeType":"YulTypedName","src":"7340:7:36","type":""}]},{"nodeType":"YulVariableDeclaration","src":"7454:21:36","value":{"name":"baseRef","nodeType":"YulIdentifier","src":"7468:7:36"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"7458:6:36","type":""}]},{"body":{"nodeType":"YulBlock","src":"7544:338:36","statements":[{"nodeType":"YulVariableDeclaration","src":"7558:34:36","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"7585:6:36"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"7579:5:36"},"nodeType":"YulFunctionCall","src":"7579:13:36"},"variables":[{"name":"elementValue0","nodeType":"YulTypedName","src":"7562:13:36","type":""}]},{"nodeType":"YulAssignment","src":"7605:146:36","value":{"arguments":[{"name":"elementValue0","nodeType":"YulIdentifier","src":"7732:13:36"},{"name":"pos","nodeType":"YulIdentifier","src":"7747:3:36"}],"functionName":{"name":"abi_encodeUpdatedPos_t_struct$_MultiTargetPermission_$189_memory_ptr_to_t_struct$_MultiTargetPermission_$189_memory_ptr","nodeType":"YulIdentifier","src":"7612:119:36"},"nodeType":"YulFunctionCall","src":"7612:139:36"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"7605:3:36"}]},{"nodeType":"YulAssignment","src":"7764:108:36","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"7865:6:36"}],"functionName":{"name":"array_nextElement_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"7774:90:36"},"nodeType":"YulFunctionCall","src":"7774:98:36"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"7764:6:36"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7506:1:36"},{"name":"length","nodeType":"YulIdentifier","src":"7509:6:36"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"7503:2:36"},"nodeType":"YulFunctionCall","src":"7503:13:36"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"7517:18:36","statements":[{"nodeType":"YulAssignment","src":"7519:14:36","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"7528:1:36"},{"kind":"number","nodeType":"YulLiteral","src":"7531:1:36","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"7524:3:36"},"nodeType":"YulFunctionCall","src":"7524:9:36"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"7519:1:36"}]}]},"pre":{"nodeType":"YulBlock","src":"7488:14:36","statements":[{"nodeType":"YulVariableDeclaration","src":"7490:10:36","value":{"kind":"number","nodeType":"YulLiteral","src":"7499:1:36","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"7494:1:36","type":""}]}]},"src":"7484:398:36"},{"nodeType":"YulAssignment","src":"7891:10:36","value":{"name":"pos","nodeType":"YulIdentifier","src":"7898:3:36"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"7891:3:36"}]}]},"name":"abi_encode_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"7050:5:36","type":""},{"name":"pos","nodeType":"YulTypedName","src":"7057:3:36","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"7066:3:36","type":""}],"src":"6871:1036:36"},{"body":{"nodeType":"YulBlock","src":"8137:301:36","statements":[{"nodeType":"YulAssignment","src":"8147:26:36","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8159:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"8170:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8155:3:36"},"nodeType":"YulFunctionCall","src":"8155:18:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8147:4:36"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"8194:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"8205:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"8190:3:36"},"nodeType":"YulFunctionCall","src":"8190:17:36"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"8213:4:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"8219:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8209:3:36"},"nodeType":"YulFunctionCall","src":"8209:20:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"8183:6:36"},"nodeType":"YulFunctionCall","src":"8183:47:36"},"nodeType":"YulExpressionStatement","src":"8183:47:36"},{"nodeType":"YulAssignment","src":"8239:192:36","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"8417:6:36"},{"name":"tail","nodeType":"YulIdentifier","src":"8426:4:36"}],"functionName":{"name":"abi_encode_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"8247:169:36"},"nodeType":"YulFunctionCall","src":"8247:184:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"8239:4:36"}]}]},"name":"abi_encode_tuple_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8109:9:36","type":""},{"name":"value0","nodeType":"YulTypedName","src":"8121:6:36","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"8132:4:36","type":""}],"src":"7913:525:36"},{"body":{"nodeType":"YulBlock","src":"8488:45:36","statements":[{"nodeType":"YulAssignment","src":"8498:29:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8513:5:36"},{"kind":"number","nodeType":"YulLiteral","src":"8520:6:36","type":"","value":"0xffff"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"8509:3:36"},"nodeType":"YulFunctionCall","src":"8509:18:36"},"variableNames":[{"name":"cleaned","nodeType":"YulIdentifier","src":"8498:7:36"}]}]},"name":"cleanup_t_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8470:5:36","type":""}],"returnVariables":[{"name":"cleaned","nodeType":"YulTypedName","src":"8480:7:36","type":""}],"src":"8444:89:36"},{"body":{"nodeType":"YulBlock","src":"8581:78:36","statements":[{"body":{"nodeType":"YulBlock","src":"8637:16:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"8646:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"8649:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"8639:6:36"},"nodeType":"YulFunctionCall","src":"8639:12:36"},"nodeType":"YulExpressionStatement","src":"8639:12:36"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8604:5:36"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8628:5:36"}],"functionName":{"name":"cleanup_t_uint16","nodeType":"YulIdentifier","src":"8611:16:36"},"nodeType":"YulFunctionCall","src":"8611:23:36"}],"functionName":{"name":"eq","nodeType":"YulIdentifier","src":"8601:2:36"},"nodeType":"YulFunctionCall","src":"8601:34:36"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"8594:6:36"},"nodeType":"YulFunctionCall","src":"8594:42:36"},"nodeType":"YulIf","src":"8591:62:36"}]},"name":"validator_revert_t_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"8574:5:36","type":""}],"src":"8539:120:36"},{"body":{"nodeType":"YulBlock","src":"8716:86:36","statements":[{"nodeType":"YulAssignment","src":"8726:29:36","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"8748:6:36"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"8735:12:36"},"nodeType":"YulFunctionCall","src":"8735:20:36"},"variableNames":[{"name":"value","nodeType":"YulIdentifier","src":"8726:5:36"}]},{"expression":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"8790:5:36"}],"functionName":{"name":"validator_revert_t_uint16","nodeType":"YulIdentifier","src":"8764:25:36"},"nodeType":"YulFunctionCall","src":"8764:32:36"},"nodeType":"YulExpressionStatement","src":"8764:32:36"}]},"name":"abi_decode_t_uint16","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"8694:6:36","type":""},{"name":"end","nodeType":"YulTypedName","src":"8702:3:36","type":""}],"returnVariables":[{"name":"value","nodeType":"YulTypedName","src":"8710:5:36","type":""}],"src":"8665:137:36"},{"body":{"nodeType":"YulBlock","src":"8938:709:36","statements":[{"body":{"nodeType":"YulBlock","src":"8984:83:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"8986:77:36"},"nodeType":"YulFunctionCall","src":"8986:79:36"},"nodeType":"YulExpressionStatement","src":"8986:79:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"8959:7:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"8968:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"8955:3:36"},"nodeType":"YulFunctionCall","src":"8955:23:36"},{"kind":"number","nodeType":"YulLiteral","src":"8980:2:36","type":"","value":"96"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"8951:3:36"},"nodeType":"YulFunctionCall","src":"8951:32:36"},"nodeType":"YulIf","src":"8948:119:36"},{"nodeType":"YulBlock","src":"9077:117:36","statements":[{"nodeType":"YulVariableDeclaration","src":"9092:15:36","value":{"kind":"number","nodeType":"YulLiteral","src":"9106:1:36","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9096:6:36","type":""}]},{"nodeType":"YulAssignment","src":"9121:63:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9156:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"9167:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9152:3:36"},"nodeType":"YulFunctionCall","src":"9152:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9176:7:36"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"9131:20:36"},"nodeType":"YulFunctionCall","src":"9131:53:36"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"9121:6:36"}]}]},{"nodeType":"YulBlock","src":"9204:117:36","statements":[{"nodeType":"YulVariableDeclaration","src":"9219:16:36","value":{"kind":"number","nodeType":"YulLiteral","src":"9233:2:36","type":"","value":"32"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9223:6:36","type":""}]},{"nodeType":"YulAssignment","src":"9249:62:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9283:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"9294:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9279:3:36"},"nodeType":"YulFunctionCall","src":"9279:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9303:7:36"}],"functionName":{"name":"abi_decode_t_uint16","nodeType":"YulIdentifier","src":"9259:19:36"},"nodeType":"YulFunctionCall","src":"9259:52:36"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"9249:6:36"}]}]},{"nodeType":"YulBlock","src":"9331:309:36","statements":[{"nodeType":"YulVariableDeclaration","src":"9346:46:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9377:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"9388:2:36","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9373:3:36"},"nodeType":"YulFunctionCall","src":"9373:18:36"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"9360:12:36"},"nodeType":"YulFunctionCall","src":"9360:32:36"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"9350:6:36","type":""}]},{"body":{"nodeType":"YulBlock","src":"9439:83:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"9441:77:36"},"nodeType":"YulFunctionCall","src":"9441:79:36"},"nodeType":"YulExpressionStatement","src":"9441:79:36"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"9411:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"9419:18:36","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"9408:2:36"},"nodeType":"YulFunctionCall","src":"9408:30:36"},"nodeType":"YulIf","src":"9405:117:36"},{"nodeType":"YulAssignment","src":"9536:94:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"9602:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"9613:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9598:3:36"},"nodeType":"YulFunctionCall","src":"9598:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"9622:7:36"}],"functionName":{"name":"abi_decode_t_struct$_SetupPayload_$399_calldata_ptr","nodeType":"YulIdentifier","src":"9546:51:36"},"nodeType":"YulFunctionCall","src":"9546:84:36"},"variableNames":[{"name":"value2","nodeType":"YulIdentifier","src":"9536:6:36"}]}]}]},"name":"abi_decode_tuple_t_addresst_uint16t_struct$_SetupPayload_$399_calldata_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"8892:9:36","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"8903:7:36","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"8915:6:36","type":""},{"name":"value1","nodeType":"YulTypedName","src":"8923:6:36","type":""},{"name":"value2","nodeType":"YulTypedName","src":"8931:6:36","type":""}],"src":"8808:839:36"},{"body":{"nodeType":"YulBlock","src":"9711:40:36","statements":[{"nodeType":"YulAssignment","src":"9722:22:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"9738:5:36"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"9732:5:36"},"nodeType":"YulFunctionCall","src":"9732:12:36"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"9722:6:36"}]}]},"name":"array_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"9694:5:36","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"9704:6:36","type":""}],"src":"9653:98:36"},{"body":{"nodeType":"YulBlock","src":"9852:73:36","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9869:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"9874:6:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"9862:6:36"},"nodeType":"YulFunctionCall","src":"9862:19:36"},"nodeType":"YulExpressionStatement","src":"9862:19:36"},{"nodeType":"YulAssignment","src":"9890:29:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"9909:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"9914:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"9905:3:36"},"nodeType":"YulFunctionCall","src":"9905:14:36"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"9890:11:36"}]}]},"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"9824:3:36","type":""},{"name":"length","nodeType":"YulTypedName","src":"9829:6:36","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"9840:11:36","type":""}],"src":"9757:168:36"},{"body":{"nodeType":"YulBlock","src":"9993:184:36","statements":[{"nodeType":"YulVariableDeclaration","src":"10003:10:36","value":{"kind":"number","nodeType":"YulLiteral","src":"10012:1:36","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"10007:1:36","type":""}]},{"body":{"nodeType":"YulBlock","src":"10072:63:36","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"10097:3:36"},{"name":"i","nodeType":"YulIdentifier","src":"10102:1:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10093:3:36"},"nodeType":"YulFunctionCall","src":"10093:11:36"},{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"10116:3:36"},{"name":"i","nodeType":"YulIdentifier","src":"10121:1:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10112:3:36"},"nodeType":"YulFunctionCall","src":"10112:11:36"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10106:5:36"},"nodeType":"YulFunctionCall","src":"10106:18:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10086:6:36"},"nodeType":"YulFunctionCall","src":"10086:39:36"},"nodeType":"YulExpressionStatement","src":"10086:39:36"}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"10033:1:36"},{"name":"length","nodeType":"YulIdentifier","src":"10036:6:36"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"10030:2:36"},"nodeType":"YulFunctionCall","src":"10030:13:36"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"10044:19:36","statements":[{"nodeType":"YulAssignment","src":"10046:15:36","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"10055:1:36"},{"kind":"number","nodeType":"YulLiteral","src":"10058:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10051:3:36"},"nodeType":"YulFunctionCall","src":"10051:10:36"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"10046:1:36"}]}]},"pre":{"nodeType":"YulBlock","src":"10026:3:36","statements":[]},"src":"10022:113:36"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"10155:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"10160:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10151:3:36"},"nodeType":"YulFunctionCall","src":"10151:16:36"},{"kind":"number","nodeType":"YulLiteral","src":"10169:1:36","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10144:6:36"},"nodeType":"YulFunctionCall","src":"10144:27:36"},"nodeType":"YulExpressionStatement","src":"10144:27:36"}]},"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"9975:3:36","type":""},{"name":"dst","nodeType":"YulTypedName","src":"9980:3:36","type":""},{"name":"length","nodeType":"YulTypedName","src":"9985:6:36","type":""}],"src":"9931:246:36"},{"body":{"nodeType":"YulBlock","src":"10231:54:36","statements":[{"nodeType":"YulAssignment","src":"10241:38:36","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10259:5:36"},{"kind":"number","nodeType":"YulLiteral","src":"10266:2:36","type":"","value":"31"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10255:3:36"},"nodeType":"YulFunctionCall","src":"10255:14:36"},{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"10275:2:36","type":"","value":"31"}],"functionName":{"name":"not","nodeType":"YulIdentifier","src":"10271:3:36"},"nodeType":"YulFunctionCall","src":"10271:7:36"}],"functionName":{"name":"and","nodeType":"YulIdentifier","src":"10251:3:36"},"nodeType":"YulFunctionCall","src":"10251:28:36"},"variableNames":[{"name":"result","nodeType":"YulIdentifier","src":"10241:6:36"}]}]},"name":"round_up_to_mul_of_32","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10214:5:36","type":""}],"returnVariables":[{"name":"result","nodeType":"YulTypedName","src":"10224:6:36","type":""}],"src":"10183:102:36"},{"body":{"nodeType":"YulBlock","src":"10381:283:36","statements":[{"nodeType":"YulVariableDeclaration","src":"10391:52:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10437:5:36"}],"functionName":{"name":"array_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"10405:31:36"},"nodeType":"YulFunctionCall","src":"10405:38:36"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"10395:6:36","type":""}]},{"nodeType":"YulAssignment","src":"10452:77:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10517:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"10522:6:36"}],"functionName":{"name":"array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"10459:57:36"},"nodeType":"YulFunctionCall","src":"10459:70:36"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"10452:3:36"}]},{"expression":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10577:5:36"},{"kind":"number","nodeType":"YulLiteral","src":"10584:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10573:3:36"},"nodeType":"YulFunctionCall","src":"10573:16:36"},{"name":"pos","nodeType":"YulIdentifier","src":"10591:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"10596:6:36"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"10538:34:36"},"nodeType":"YulFunctionCall","src":"10538:65:36"},"nodeType":"YulExpressionStatement","src":"10538:65:36"},{"nodeType":"YulAssignment","src":"10612:46:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10623:3:36"},{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"10650:6:36"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"10628:21:36"},"nodeType":"YulFunctionCall","src":"10628:29:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10619:3:36"},"nodeType":"YulFunctionCall","src":"10619:39:36"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"10612:3:36"}]}]},"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10362:5:36","type":""},{"name":"pos","nodeType":"YulTypedName","src":"10369:3:36","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"10377:3:36","type":""}],"src":"10291:373:36"},{"body":{"nodeType":"YulBlock","src":"10744:40:36","statements":[{"nodeType":"YulAssignment","src":"10755:22:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"10771:5:36"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"10765:5:36"},"nodeType":"YulFunctionCall","src":"10765:12:36"},"variableNames":[{"name":"length","nodeType":"YulIdentifier","src":"10755:6:36"}]}]},"name":"array_length_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"10727:5:36","type":""}],"returnVariables":[{"name":"length","nodeType":"YulTypedName","src":"10737:6:36","type":""}],"src":"10670:114:36"},{"body":{"nodeType":"YulBlock","src":"10891:73:36","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10908:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"10913:6:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"10901:6:36"},"nodeType":"YulFunctionCall","src":"10901:19:36"},"nodeType":"YulExpressionStatement","src":"10901:19:36"},{"nodeType":"YulAssignment","src":"10929:29:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"10948:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"10953:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"10944:3:36"},"nodeType":"YulFunctionCall","src":"10944:14:36"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"10929:11:36"}]}]},"name":"array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"10863:3:36","type":""},{"name":"length","nodeType":"YulTypedName","src":"10868:6:36","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"10879:11:36","type":""}],"src":"10790:174:36"},{"body":{"nodeType":"YulBlock","src":"11042:60:36","statements":[{"nodeType":"YulAssignment","src":"11052:11:36","value":{"name":"ptr","nodeType":"YulIdentifier","src":"11060:3:36"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"11052:4:36"}]},{"nodeType":"YulAssignment","src":"11073:22:36","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"11085:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"11090:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11081:3:36"},"nodeType":"YulFunctionCall","src":"11081:14:36"},"variableNames":[{"name":"data","nodeType":"YulIdentifier","src":"11073:4:36"}]}]},"name":"array_dataslot_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"11029:3:36","type":""}],"returnVariables":[{"name":"data","nodeType":"YulTypedName","src":"11037:4:36","type":""}],"src":"10970:132:36"},{"body":{"nodeType":"YulBlock","src":"11188:99:36","statements":[{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"11232:6:36"},{"name":"pos","nodeType":"YulIdentifier","src":"11240:3:36"}],"functionName":{"name":"abi_encode_t_address_to_t_address","nodeType":"YulIdentifier","src":"11198:33:36"},"nodeType":"YulFunctionCall","src":"11198:46:36"},"nodeType":"YulExpressionStatement","src":"11198:46:36"},{"nodeType":"YulAssignment","src":"11253:28:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11271:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"11276:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11267:3:36"},"nodeType":"YulFunctionCall","src":"11267:14:36"},"variableNames":[{"name":"updatedPos","nodeType":"YulIdentifier","src":"11253:10:36"}]}]},"name":"abi_encodeUpdatedPos_t_address_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value0","nodeType":"YulTypedName","src":"11161:6:36","type":""},{"name":"pos","nodeType":"YulTypedName","src":"11169:3:36","type":""}],"returnVariables":[{"name":"updatedPos","nodeType":"YulTypedName","src":"11177:10:36","type":""}],"src":"11108:179:36"},{"body":{"nodeType":"YulBlock","src":"11368:38:36","statements":[{"nodeType":"YulAssignment","src":"11378:22:36","value":{"arguments":[{"name":"ptr","nodeType":"YulIdentifier","src":"11390:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"11395:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11386:3:36"},"nodeType":"YulFunctionCall","src":"11386:14:36"},"variableNames":[{"name":"next","nodeType":"YulIdentifier","src":"11378:4:36"}]}]},"name":"array_nextElement_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nodeType":"YulTypedName","src":"11355:3:36","type":""}],"returnVariables":[{"name":"next","nodeType":"YulTypedName","src":"11363:4:36","type":""}],"src":"11293:113:36"},{"body":{"nodeType":"YulBlock","src":"11556:598:36","statements":[{"nodeType":"YulVariableDeclaration","src":"11566:68:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11628:5:36"}],"functionName":{"name":"array_length_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"11580:47:36"},"nodeType":"YulFunctionCall","src":"11580:54:36"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"11570:6:36","type":""}]},{"nodeType":"YulAssignment","src":"11643:83:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"11714:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"11719:6:36"}],"functionName":{"name":"array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"11650:63:36"},"nodeType":"YulFunctionCall","src":"11650:76:36"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11643:3:36"}]},{"nodeType":"YulVariableDeclaration","src":"11735:71:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"11800:5:36"}],"functionName":{"name":"array_dataslot_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"11750:49:36"},"nodeType":"YulFunctionCall","src":"11750:56:36"},"variables":[{"name":"baseRef","nodeType":"YulTypedName","src":"11739:7:36","type":""}]},{"nodeType":"YulVariableDeclaration","src":"11815:21:36","value":{"name":"baseRef","nodeType":"YulIdentifier","src":"11829:7:36"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"11819:6:36","type":""}]},{"body":{"nodeType":"YulBlock","src":"11905:224:36","statements":[{"nodeType":"YulVariableDeclaration","src":"11919:34:36","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"11946:6:36"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"11940:5:36"},"nodeType":"YulFunctionCall","src":"11940:13:36"},"variables":[{"name":"elementValue0","nodeType":"YulTypedName","src":"11923:13:36","type":""}]},{"nodeType":"YulAssignment","src":"11966:70:36","value":{"arguments":[{"name":"elementValue0","nodeType":"YulIdentifier","src":"12017:13:36"},{"name":"pos","nodeType":"YulIdentifier","src":"12032:3:36"}],"functionName":{"name":"abi_encodeUpdatedPos_t_address_to_t_address","nodeType":"YulIdentifier","src":"11973:43:36"},"nodeType":"YulFunctionCall","src":"11973:63:36"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"11966:3:36"}]},{"nodeType":"YulAssignment","src":"12049:70:36","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"12112:6:36"}],"functionName":{"name":"array_nextElement_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"12059:52:36"},"nodeType":"YulFunctionCall","src":"12059:60:36"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"12049:6:36"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"11867:1:36"},{"name":"length","nodeType":"YulIdentifier","src":"11870:6:36"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"11864:2:36"},"nodeType":"YulFunctionCall","src":"11864:13:36"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"11878:18:36","statements":[{"nodeType":"YulAssignment","src":"11880:14:36","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"11889:1:36"},{"kind":"number","nodeType":"YulLiteral","src":"11892:1:36","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"11885:3:36"},"nodeType":"YulFunctionCall","src":"11885:9:36"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"11880:1:36"}]}]},"pre":{"nodeType":"YulBlock","src":"11849:14:36","statements":[{"nodeType":"YulVariableDeclaration","src":"11851:10:36","value":{"kind":"number","nodeType":"YulLiteral","src":"11860:1:36","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"11855:1:36","type":""}]}]},"src":"11845:284:36"},{"nodeType":"YulAssignment","src":"12138:10:36","value":{"name":"pos","nodeType":"YulIdentifier","src":"12145:3:36"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"12138:3:36"}]}]},"name":"abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"11535:5:36","type":""},{"name":"pos","nodeType":"YulTypedName","src":"11542:3:36","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"11551:3:36","type":""}],"src":"11442:712:36"},{"body":{"nodeType":"YulBlock","src":"12299:73:36","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12316:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"12321:6:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"12309:6:36"},"nodeType":"YulFunctionCall","src":"12309:19:36"},"nodeType":"YulExpressionStatement","src":"12309:19:36"},{"nodeType":"YulAssignment","src":"12337:29:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12356:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"12361:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"12352:3:36"},"nodeType":"YulFunctionCall","src":"12352:14:36"},"variableNames":[{"name":"updated_pos","nodeType":"YulIdentifier","src":"12337:11:36"}]}]},"name":"array_storeLengthForEncoding_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nodeType":"YulTypedName","src":"12271:3:36","type":""},{"name":"length","nodeType":"YulTypedName","src":"12276:6:36","type":""}],"returnVariables":[{"name":"updated_pos","nodeType":"YulTypedName","src":"12287:11:36","type":""}],"src":"12160:212:36"},{"body":{"nodeType":"YulBlock","src":"12668:826:36","statements":[{"nodeType":"YulVariableDeclaration","src":"12678:106:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"12778:5:36"}],"functionName":{"name":"array_length_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"12692:85:36"},"nodeType":"YulFunctionCall","src":"12692:92:36"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"12682:6:36","type":""}]},{"nodeType":"YulAssignment","src":"12793:121:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"12902:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"12907:6:36"}],"functionName":{"name":"array_storeLengthForEncoding_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"12800:101:36"},"nodeType":"YulFunctionCall","src":"12800:114:36"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"12793:3:36"}]},{"nodeType":"YulVariableDeclaration","src":"12923:109:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13026:5:36"}],"functionName":{"name":"array_dataslot_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"12938:87:36"},"nodeType":"YulFunctionCall","src":"12938:94:36"},"variables":[{"name":"baseRef","nodeType":"YulTypedName","src":"12927:7:36","type":""}]},{"nodeType":"YulVariableDeclaration","src":"13041:21:36","value":{"name":"baseRef","nodeType":"YulIdentifier","src":"13055:7:36"},"variables":[{"name":"srcPtr","nodeType":"YulTypedName","src":"13045:6:36","type":""}]},{"body":{"nodeType":"YulBlock","src":"13131:338:36","statements":[{"nodeType":"YulVariableDeclaration","src":"13145:34:36","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"13172:6:36"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13166:5:36"},"nodeType":"YulFunctionCall","src":"13166:13:36"},"variables":[{"name":"elementValue0","nodeType":"YulTypedName","src":"13149:13:36","type":""}]},{"nodeType":"YulAssignment","src":"13192:146:36","value":{"arguments":[{"name":"elementValue0","nodeType":"YulIdentifier","src":"13319:13:36"},{"name":"pos","nodeType":"YulIdentifier","src":"13334:3:36"}],"functionName":{"name":"abi_encodeUpdatedPos_t_struct$_MultiTargetPermission_$189_memory_ptr_to_t_struct$_MultiTargetPermission_$189_memory_ptr","nodeType":"YulIdentifier","src":"13199:119:36"},"nodeType":"YulFunctionCall","src":"13199:139:36"},"variableNames":[{"name":"pos","nodeType":"YulIdentifier","src":"13192:3:36"}]},{"nodeType":"YulAssignment","src":"13351:108:36","value":{"arguments":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"13452:6:36"}],"functionName":{"name":"array_nextElement_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"13361:90:36"},"nodeType":"YulFunctionCall","src":"13361:98:36"},"variableNames":[{"name":"srcPtr","nodeType":"YulIdentifier","src":"13351:6:36"}]}]},"condition":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"13093:1:36"},{"name":"length","nodeType":"YulIdentifier","src":"13096:6:36"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"13090:2:36"},"nodeType":"YulFunctionCall","src":"13090:13:36"},"nodeType":"YulForLoop","post":{"nodeType":"YulBlock","src":"13104:18:36","statements":[{"nodeType":"YulAssignment","src":"13106:14:36","value":{"arguments":[{"name":"i","nodeType":"YulIdentifier","src":"13115:1:36"},{"kind":"number","nodeType":"YulLiteral","src":"13118:1:36","type":"","value":"1"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13111:3:36"},"nodeType":"YulFunctionCall","src":"13111:9:36"},"variableNames":[{"name":"i","nodeType":"YulIdentifier","src":"13106:1:36"}]}]},"pre":{"nodeType":"YulBlock","src":"13075:14:36","statements":[{"nodeType":"YulVariableDeclaration","src":"13077:10:36","value":{"kind":"number","nodeType":"YulLiteral","src":"13086:1:36","type":"","value":"0"},"variables":[{"name":"i","nodeType":"YulTypedName","src":"13081:1:36","type":""}]}]},"src":"13071:398:36"},{"nodeType":"YulAssignment","src":"13478:10:36","value":{"name":"pos","nodeType":"YulIdentifier","src":"13485:3:36"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"13478:3:36"}]}]},"name":"abi_encode_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"12647:5:36","type":""},{"name":"pos","nodeType":"YulTypedName","src":"12654:3:36","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"12663:3:36","type":""}],"src":"12478:1016:36"},{"body":{"nodeType":"YulBlock","src":"13728:699:36","statements":[{"nodeType":"YulVariableDeclaration","src":"13738:26:36","value":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13754:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"13759:4:36","type":"","value":"0x40"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13750:3:36"},"nodeType":"YulFunctionCall","src":"13750:14:36"},"variables":[{"name":"tail","nodeType":"YulTypedName","src":"13742:4:36","type":""}]},{"nodeType":"YulBlock","src":"13774:268:36","statements":[{"nodeType":"YulVariableDeclaration","src":"13812:43:36","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"13842:5:36"},{"kind":"number","nodeType":"YulLiteral","src":"13849:4:36","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13838:3:36"},"nodeType":"YulFunctionCall","src":"13838:16:36"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"13832:5:36"},"nodeType":"YulFunctionCall","src":"13832:23:36"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"13816:12:36","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"13880:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"13885:4:36","type":"","value":"0x00"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"13876:3:36"},"nodeType":"YulFunctionCall","src":"13876:14:36"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"13896:4:36"},{"name":"pos","nodeType":"YulIdentifier","src":"13902:3:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"13892:3:36"},"nodeType":"YulFunctionCall","src":"13892:14:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"13869:6:36"},"nodeType":"YulFunctionCall","src":"13869:38:36"},"nodeType":"YulExpressionStatement","src":"13869:38:36"},{"nodeType":"YulAssignment","src":"13920:111:36","value":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"14012:12:36"},{"name":"tail","nodeType":"YulIdentifier","src":"14026:4:36"}],"functionName":{"name":"abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"13928:83:36"},"nodeType":"YulFunctionCall","src":"13928:103:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"13920:4:36"}]}]},{"nodeType":"YulBlock","src":"14052:348:36","statements":[{"nodeType":"YulVariableDeclaration","src":"14094:43:36","value":{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"14124:5:36"},{"kind":"number","nodeType":"YulLiteral","src":"14131:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14120:3:36"},"nodeType":"YulFunctionCall","src":"14120:16:36"}],"functionName":{"name":"mload","nodeType":"YulIdentifier","src":"14114:5:36"},"nodeType":"YulFunctionCall","src":"14114:23:36"},"variables":[{"name":"memberValue0","nodeType":"YulTypedName","src":"14098:12:36","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"14162:3:36"},{"kind":"number","nodeType":"YulLiteral","src":"14167:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14158:3:36"},"nodeType":"YulFunctionCall","src":"14158:14:36"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14178:4:36"},{"name":"pos","nodeType":"YulIdentifier","src":"14184:3:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14174:3:36"},"nodeType":"YulFunctionCall","src":"14174:14:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14151:6:36"},"nodeType":"YulFunctionCall","src":"14151:38:36"},"nodeType":"YulExpressionStatement","src":"14151:38:36"},{"nodeType":"YulAssignment","src":"14202:187:36","value":{"arguments":[{"name":"memberValue0","nodeType":"YulIdentifier","src":"14370:12:36"},{"name":"tail","nodeType":"YulIdentifier","src":"14384:4:36"}],"functionName":{"name":"abi_encode_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr","nodeType":"YulIdentifier","src":"14210:159:36"},"nodeType":"YulFunctionCall","src":"14210:179:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14202:4:36"}]}]},{"nodeType":"YulAssignment","src":"14410:11:36","value":{"name":"tail","nodeType":"YulIdentifier","src":"14417:4:36"},"variableNames":[{"name":"end","nodeType":"YulIdentifier","src":"14410:3:36"}]}]},"name":"abi_encode_t_struct$_PreparedSetupData_$391_memory_ptr_to_t_struct$_PreparedSetupData_$391_memory_ptr_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"13707:5:36","type":""},{"name":"pos","nodeType":"YulTypedName","src":"13714:3:36","type":""}],"returnVariables":[{"name":"end","nodeType":"YulTypedName","src":"13723:3:36","type":""}],"src":"13586:841:36"},{"body":{"nodeType":"YulBlock","src":"14645:394:36","statements":[{"nodeType":"YulAssignment","src":"14655:26:36","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14667:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"14678:2:36","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14663:3:36"},"nodeType":"YulFunctionCall","src":"14663:18:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14655:4:36"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14702:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"14713:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14698:3:36"},"nodeType":"YulFunctionCall","src":"14698:17:36"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14721:4:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"14727:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14717:3:36"},"nodeType":"YulFunctionCall","src":"14717:20:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14691:6:36"},"nodeType":"YulFunctionCall","src":"14691:47:36"},"nodeType":"YulExpressionStatement","src":"14691:47:36"},{"nodeType":"YulAssignment","src":"14747:84:36","value":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"14817:6:36"},{"name":"tail","nodeType":"YulIdentifier","src":"14826:4:36"}],"functionName":{"name":"abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14755:61:36"},"nodeType":"YulFunctionCall","src":"14755:76:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14747:4:36"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"14852:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"14863:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"14848:3:36"},"nodeType":"YulFunctionCall","src":"14848:18:36"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"14872:4:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"14878:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"14868:3:36"},"nodeType":"YulFunctionCall","src":"14868:20:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"14841:6:36"},"nodeType":"YulFunctionCall","src":"14841:48:36"},"nodeType":"YulExpressionStatement","src":"14841:48:36"},{"nodeType":"YulAssignment","src":"14898:134:36","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"15018:6:36"},{"name":"tail","nodeType":"YulIdentifier","src":"15027:4:36"}],"functionName":{"name":"abi_encode_t_struct$_PreparedSetupData_$391_memory_ptr_to_t_struct$_PreparedSetupData_$391_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"14906:111:36"},"nodeType":"YulFunctionCall","src":"14906:126:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"14898:4:36"}]}]},"name":"abi_encode_tuple_t_bytes_memory_ptr_t_struct$_PreparedSetupData_$391_memory_ptr__to_t_bytes_memory_ptr_t_struct$_PreparedSetupData_$391_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"14609:9:36","type":""},{"name":"value1","nodeType":"YulTypedName","src":"14621:6:36","type":""},{"name":"value0","nodeType":"YulTypedName","src":"14629:6:36","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"14640:4:36","type":""}],"src":"14433:606:36"},{"body":{"nodeType":"YulBlock","src":"15134:28:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15151:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15154:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15144:6:36"},"nodeType":"YulFunctionCall","src":"15144:12:36"},"nodeType":"YulExpressionStatement","src":"15144:12:36"}]},"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulFunctionDefinition","src":"15045:117:36"},{"body":{"nodeType":"YulBlock","src":"15257:28:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15274:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15277:1:36","type":"","value":"0"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15267:6:36"},"nodeType":"YulFunctionCall","src":"15267:12:36"},"nodeType":"YulExpressionStatement","src":"15267:12:36"}]},"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulFunctionDefinition","src":"15168:117:36"},{"body":{"nodeType":"YulBlock","src":"15319:152:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15336:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15339:77:36","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15329:6:36"},"nodeType":"YulFunctionCall","src":"15329:88:36"},"nodeType":"YulExpressionStatement","src":"15329:88:36"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15433:1:36","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"15436:4:36","type":"","value":"0x41"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15426:6:36"},"nodeType":"YulFunctionCall","src":"15426:15:36"},"nodeType":"YulExpressionStatement","src":"15426:15:36"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15457:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"15460:4:36","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"15450:6:36"},"nodeType":"YulFunctionCall","src":"15450:15:36"},"nodeType":"YulExpressionStatement","src":"15450:15:36"}]},"name":"panic_error_0x41","nodeType":"YulFunctionDefinition","src":"15291:180:36"},{"body":{"nodeType":"YulBlock","src":"15520:238:36","statements":[{"nodeType":"YulVariableDeclaration","src":"15530:58:36","value":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15552:6:36"},{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"15582:4:36"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"15560:21:36"},"nodeType":"YulFunctionCall","src":"15560:27:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"15548:3:36"},"nodeType":"YulFunctionCall","src":"15548:40:36"},"variables":[{"name":"newFreePtr","nodeType":"YulTypedName","src":"15534:10:36","type":""}]},{"body":{"nodeType":"YulBlock","src":"15699:22:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"15701:16:36"},"nodeType":"YulFunctionCall","src":"15701:18:36"},"nodeType":"YulExpressionStatement","src":"15701:18:36"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"15642:10:36"},{"kind":"number","nodeType":"YulLiteral","src":"15654:18:36","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"15639:2:36"},"nodeType":"YulFunctionCall","src":"15639:34:36"},{"arguments":[{"name":"newFreePtr","nodeType":"YulIdentifier","src":"15678:10:36"},{"name":"memPtr","nodeType":"YulIdentifier","src":"15690:6:36"}],"functionName":{"name":"lt","nodeType":"YulIdentifier","src":"15675:2:36"},"nodeType":"YulFunctionCall","src":"15675:22:36"}],"functionName":{"name":"or","nodeType":"YulIdentifier","src":"15636:2:36"},"nodeType":"YulFunctionCall","src":"15636:62:36"},"nodeType":"YulIf","src":"15633:88:36"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"15737:2:36","type":"","value":"64"},{"name":"newFreePtr","nodeType":"YulIdentifier","src":"15741:10:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"15730:6:36"},"nodeType":"YulFunctionCall","src":"15730:22:36"},"nodeType":"YulExpressionStatement","src":"15730:22:36"}]},"name":"finalize_allocation","nodeType":"YulFunctionDefinition","parameters":[{"name":"memPtr","nodeType":"YulTypedName","src":"15506:6:36","type":""},{"name":"size","nodeType":"YulTypedName","src":"15514:4:36","type":""}],"src":"15477:281:36"},{"body":{"nodeType":"YulBlock","src":"15805:88:36","statements":[{"nodeType":"YulAssignment","src":"15815:30:36","value":{"arguments":[],"functionName":{"name":"allocate_unbounded","nodeType":"YulIdentifier","src":"15825:18:36"},"nodeType":"YulFunctionCall","src":"15825:20:36"},"variableNames":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15815:6:36"}]},{"expression":{"arguments":[{"name":"memPtr","nodeType":"YulIdentifier","src":"15874:6:36"},{"name":"size","nodeType":"YulIdentifier","src":"15882:4:36"}],"functionName":{"name":"finalize_allocation","nodeType":"YulIdentifier","src":"15854:19:36"},"nodeType":"YulFunctionCall","src":"15854:33:36"},"nodeType":"YulExpressionStatement","src":"15854:33:36"}]},"name":"allocate_memory","nodeType":"YulFunctionDefinition","parameters":[{"name":"size","nodeType":"YulTypedName","src":"15789:4:36","type":""}],"returnVariables":[{"name":"memPtr","nodeType":"YulTypedName","src":"15798:6:36","type":""}],"src":"15764:129:36"},{"body":{"nodeType":"YulBlock","src":"15965:241:36","statements":[{"body":{"nodeType":"YulBlock","src":"16070:22:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nodeType":"YulIdentifier","src":"16072:16:36"},"nodeType":"YulFunctionCall","src":"16072:18:36"},"nodeType":"YulExpressionStatement","src":"16072:18:36"}]},"condition":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"16042:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"16050:18:36","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"16039:2:36"},"nodeType":"YulFunctionCall","src":"16039:30:36"},"nodeType":"YulIf","src":"16036:56:36"},{"nodeType":"YulAssignment","src":"16102:37:36","value":{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"16132:6:36"}],"functionName":{"name":"round_up_to_mul_of_32","nodeType":"YulIdentifier","src":"16110:21:36"},"nodeType":"YulFunctionCall","src":"16110:29:36"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"16102:4:36"}]},{"nodeType":"YulAssignment","src":"16176:23:36","value":{"arguments":[{"name":"size","nodeType":"YulIdentifier","src":"16188:4:36"},{"kind":"number","nodeType":"YulLiteral","src":"16194:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16184:3:36"},"nodeType":"YulFunctionCall","src":"16184:15:36"},"variableNames":[{"name":"size","nodeType":"YulIdentifier","src":"16176:4:36"}]}]},"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"length","nodeType":"YulTypedName","src":"15949:6:36","type":""}],"returnVariables":[{"name":"size","nodeType":"YulTypedName","src":"15960:4:36","type":""}],"src":"15899:307:36"},{"body":{"nodeType":"YulBlock","src":"16276:82:36","statements":[{"expression":{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"16299:3:36"},{"name":"src","nodeType":"YulIdentifier","src":"16304:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"16309:6:36"}],"functionName":{"name":"calldatacopy","nodeType":"YulIdentifier","src":"16286:12:36"},"nodeType":"YulFunctionCall","src":"16286:30:36"},"nodeType":"YulExpressionStatement","src":"16286:30:36"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nodeType":"YulIdentifier","src":"16336:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"16341:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16332:3:36"},"nodeType":"YulFunctionCall","src":"16332:16:36"},{"kind":"number","nodeType":"YulLiteral","src":"16350:1:36","type":"","value":"0"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16325:6:36"},"nodeType":"YulFunctionCall","src":"16325:27:36"},"nodeType":"YulExpressionStatement","src":"16325:27:36"}]},"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"16258:3:36","type":""},{"name":"dst","nodeType":"YulTypedName","src":"16263:3:36","type":""},{"name":"length","nodeType":"YulTypedName","src":"16268:6:36","type":""}],"src":"16212:146:36"},{"body":{"nodeType":"YulBlock","src":"16447:340:36","statements":[{"nodeType":"YulAssignment","src":"16457:74:36","value":{"arguments":[{"arguments":[{"name":"length","nodeType":"YulIdentifier","src":"16523:6:36"}],"functionName":{"name":"array_allocation_size_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"16482:40:36"},"nodeType":"YulFunctionCall","src":"16482:48:36"}],"functionName":{"name":"allocate_memory","nodeType":"YulIdentifier","src":"16466:15:36"},"nodeType":"YulFunctionCall","src":"16466:65:36"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"16457:5:36"}]},{"expression":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"16547:5:36"},{"name":"length","nodeType":"YulIdentifier","src":"16554:6:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"16540:6:36"},"nodeType":"YulFunctionCall","src":"16540:21:36"},"nodeType":"YulExpressionStatement","src":"16540:21:36"},{"nodeType":"YulVariableDeclaration","src":"16570:27:36","value":{"arguments":[{"name":"array","nodeType":"YulIdentifier","src":"16585:5:36"},{"kind":"number","nodeType":"YulLiteral","src":"16592:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16581:3:36"},"nodeType":"YulFunctionCall","src":"16581:16:36"},"variables":[{"name":"dst","nodeType":"YulTypedName","src":"16574:3:36","type":""}]},{"body":{"nodeType":"YulBlock","src":"16635:83:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae","nodeType":"YulIdentifier","src":"16637:77:36"},"nodeType":"YulFunctionCall","src":"16637:79:36"},"nodeType":"YulExpressionStatement","src":"16637:79:36"}]},"condition":{"arguments":[{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"16616:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"16621:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16612:3:36"},"nodeType":"YulFunctionCall","src":"16612:16:36"},{"name":"end","nodeType":"YulIdentifier","src":"16630:3:36"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"16609:2:36"},"nodeType":"YulFunctionCall","src":"16609:25:36"},"nodeType":"YulIf","src":"16606:112:36"},{"expression":{"arguments":[{"name":"src","nodeType":"YulIdentifier","src":"16764:3:36"},{"name":"dst","nodeType":"YulIdentifier","src":"16769:3:36"},{"name":"length","nodeType":"YulIdentifier","src":"16774:6:36"}],"functionName":{"name":"copy_calldata_to_memory_with_cleanup","nodeType":"YulIdentifier","src":"16727:36:36"},"nodeType":"YulFunctionCall","src":"16727:54:36"},"nodeType":"YulExpressionStatement","src":"16727:54:36"}]},"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nodeType":"YulTypedName","src":"16420:3:36","type":""},{"name":"length","nodeType":"YulTypedName","src":"16425:6:36","type":""},{"name":"end","nodeType":"YulTypedName","src":"16433:3:36","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"16441:5:36","type":""}],"src":"16364:423:36"},{"body":{"nodeType":"YulBlock","src":"16867:277:36","statements":[{"body":{"nodeType":"YulBlock","src":"16916:83:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d","nodeType":"YulIdentifier","src":"16918:77:36"},"nodeType":"YulFunctionCall","src":"16918:79:36"},"nodeType":"YulExpressionStatement","src":"16918:79:36"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"16895:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"16903:4:36","type":"","value":"0x1f"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"16891:3:36"},"nodeType":"YulFunctionCall","src":"16891:17:36"},{"name":"end","nodeType":"YulIdentifier","src":"16910:3:36"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"16887:3:36"},"nodeType":"YulFunctionCall","src":"16887:27:36"}],"functionName":{"name":"iszero","nodeType":"YulIdentifier","src":"16880:6:36"},"nodeType":"YulFunctionCall","src":"16880:35:36"},"nodeType":"YulIf","src":"16877:122:36"},{"nodeType":"YulVariableDeclaration","src":"17008:34:36","value":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"17035:6:36"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"17022:12:36"},"nodeType":"YulFunctionCall","src":"17022:20:36"},"variables":[{"name":"length","nodeType":"YulTypedName","src":"17012:6:36","type":""}]},{"nodeType":"YulAssignment","src":"17051:87:36","value":{"arguments":[{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"17111:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"17119:4:36","type":"","value":"0x20"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17107:3:36"},"nodeType":"YulFunctionCall","src":"17107:17:36"},{"name":"length","nodeType":"YulIdentifier","src":"17126:6:36"},{"name":"end","nodeType":"YulIdentifier","src":"17134:3:36"}],"functionName":{"name":"abi_decode_available_length_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"17060:46:36"},"nodeType":"YulFunctionCall","src":"17060:78:36"},"variableNames":[{"name":"array","nodeType":"YulIdentifier","src":"17051:5:36"}]}]},"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nodeType":"YulTypedName","src":"16845:6:36","type":""},{"name":"end","nodeType":"YulTypedName","src":"16853:3:36","type":""}],"returnVariables":[{"name":"array","nodeType":"YulTypedName","src":"16861:5:36","type":""}],"src":"16806:338:36"},{"body":{"nodeType":"YulBlock","src":"17242:560:36","statements":[{"body":{"nodeType":"YulBlock","src":"17288:83:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"17290:77:36"},"nodeType":"YulFunctionCall","src":"17290:79:36"},"nodeType":"YulExpressionStatement","src":"17290:79:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"17263:7:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"17272:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"17259:3:36"},"nodeType":"YulFunctionCall","src":"17259:23:36"},{"kind":"number","nodeType":"YulLiteral","src":"17284:2:36","type":"","value":"64"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"17255:3:36"},"nodeType":"YulFunctionCall","src":"17255:32:36"},"nodeType":"YulIf","src":"17252:119:36"},{"nodeType":"YulBlock","src":"17381:117:36","statements":[{"nodeType":"YulVariableDeclaration","src":"17396:15:36","value":{"kind":"number","nodeType":"YulLiteral","src":"17410:1:36","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"17400:6:36","type":""}]},{"nodeType":"YulAssignment","src":"17425:63:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17460:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"17471:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17456:3:36"},"nodeType":"YulFunctionCall","src":"17456:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"17480:7:36"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"17435:20:36"},"nodeType":"YulFunctionCall","src":"17435:53:36"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"17425:6:36"}]}]},{"nodeType":"YulBlock","src":"17508:287:36","statements":[{"nodeType":"YulVariableDeclaration","src":"17523:46:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17554:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"17565:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17550:3:36"},"nodeType":"YulFunctionCall","src":"17550:18:36"}],"functionName":{"name":"calldataload","nodeType":"YulIdentifier","src":"17537:12:36"},"nodeType":"YulFunctionCall","src":"17537:32:36"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"17527:6:36","type":""}]},{"body":{"nodeType":"YulBlock","src":"17616:83:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db","nodeType":"YulIdentifier","src":"17618:77:36"},"nodeType":"YulFunctionCall","src":"17618:79:36"},"nodeType":"YulExpressionStatement","src":"17618:79:36"}]},"condition":{"arguments":[{"name":"offset","nodeType":"YulIdentifier","src":"17588:6:36"},{"kind":"number","nodeType":"YulLiteral","src":"17596:18:36","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nodeType":"YulIdentifier","src":"17585:2:36"},"nodeType":"YulFunctionCall","src":"17585:30:36"},"nodeType":"YulIf","src":"17582:117:36"},{"nodeType":"YulAssignment","src":"17713:72:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"17757:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"17768:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"17753:3:36"},"nodeType":"YulFunctionCall","src":"17753:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"17777:7:36"}],"functionName":{"name":"abi_decode_t_bytes_memory_ptr","nodeType":"YulIdentifier","src":"17723:29:36"},"nodeType":"YulFunctionCall","src":"17723:62:36"},"variableNames":[{"name":"value1","nodeType":"YulIdentifier","src":"17713:6:36"}]}]}]},"name":"abi_decode_tuple_t_addresst_bytes_memory_ptr","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17204:9:36","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"17215:7:36","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"17227:6:36","type":""},{"name":"value1","nodeType":"YulTypedName","src":"17235:6:36","type":""}],"src":"17150:652:36"},{"body":{"nodeType":"YulBlock","src":"18002:325:36","statements":[{"nodeType":"YulAssignment","src":"18012:26:36","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18024:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"18035:2:36","type":"","value":"64"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18020:3:36"},"nodeType":"YulFunctionCall","src":"18020:18:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18012:4:36"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"18092:6:36"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18105:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"18116:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18101:3:36"},"nodeType":"YulFunctionCall","src":"18101:17:36"}],"functionName":{"name":"abi_encode_t_address_to_t_address_fromStack","nodeType":"YulIdentifier","src":"18048:43:36"},"nodeType":"YulFunctionCall","src":"18048:71:36"},"nodeType":"YulExpressionStatement","src":"18048:71:36"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18140:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"18151:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18136:3:36"},"nodeType":"YulFunctionCall","src":"18136:18:36"},{"arguments":[{"name":"tail","nodeType":"YulIdentifier","src":"18160:4:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"18166:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18156:3:36"},"nodeType":"YulFunctionCall","src":"18156:20:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18129:6:36"},"nodeType":"YulFunctionCall","src":"18129:48:36"},"nodeType":"YulExpressionStatement","src":"18129:48:36"},{"nodeType":"YulAssignment","src":"18186:134:36","value":{"arguments":[{"name":"value1","nodeType":"YulIdentifier","src":"18306:6:36"},{"name":"tail","nodeType":"YulIdentifier","src":"18315:4:36"}],"functionName":{"name":"abi_encode_t_struct$_PreparedSetupData_$391_memory_ptr_to_t_struct$_PreparedSetupData_$391_memory_ptr_fromStack","nodeType":"YulIdentifier","src":"18194:111:36"},"nodeType":"YulFunctionCall","src":"18194:126:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"18186:4:36"}]}]},"name":"abi_encode_tuple_t_address_t_struct$_PreparedSetupData_$391_memory_ptr__to_t_address_t_struct$_PreparedSetupData_$391_memory_ptr__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"17966:9:36","type":""},{"name":"value1","nodeType":"YulTypedName","src":"17978:6:36","type":""},{"name":"value0","nodeType":"YulTypedName","src":"17986:6:36","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"17997:4:36","type":""}],"src":"17808:519:36"},{"body":{"nodeType":"YulBlock","src":"18399:263:36","statements":[{"body":{"nodeType":"YulBlock","src":"18445:83:36","statements":[{"expression":{"arguments":[],"functionName":{"name":"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b","nodeType":"YulIdentifier","src":"18447:77:36"},"nodeType":"YulFunctionCall","src":"18447:79:36"},"nodeType":"YulExpressionStatement","src":"18447:79:36"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nodeType":"YulIdentifier","src":"18420:7:36"},{"name":"headStart","nodeType":"YulIdentifier","src":"18429:9:36"}],"functionName":{"name":"sub","nodeType":"YulIdentifier","src":"18416:3:36"},"nodeType":"YulFunctionCall","src":"18416:23:36"},{"kind":"number","nodeType":"YulLiteral","src":"18441:2:36","type":"","value":"32"}],"functionName":{"name":"slt","nodeType":"YulIdentifier","src":"18412:3:36"},"nodeType":"YulFunctionCall","src":"18412:32:36"},"nodeType":"YulIf","src":"18409:119:36"},{"nodeType":"YulBlock","src":"18538:117:36","statements":[{"nodeType":"YulVariableDeclaration","src":"18553:15:36","value":{"kind":"number","nodeType":"YulLiteral","src":"18567:1:36","type":"","value":"0"},"variables":[{"name":"offset","nodeType":"YulTypedName","src":"18557:6:36","type":""}]},{"nodeType":"YulAssignment","src":"18582:63:36","value":{"arguments":[{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"18617:9:36"},{"name":"offset","nodeType":"YulIdentifier","src":"18628:6:36"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"18613:3:36"},"nodeType":"YulFunctionCall","src":"18613:22:36"},{"name":"dataEnd","nodeType":"YulIdentifier","src":"18637:7:36"}],"functionName":{"name":"abi_decode_t_address","nodeType":"YulIdentifier","src":"18592:20:36"},"nodeType":"YulFunctionCall","src":"18592:53:36"},"variableNames":[{"name":"value0","nodeType":"YulIdentifier","src":"18582:6:36"}]}]}]},"name":"abi_decode_tuple_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"18369:9:36","type":""},{"name":"dataEnd","nodeType":"YulTypedName","src":"18380:7:36","type":""}],"returnVariables":[{"name":"value0","nodeType":"YulTypedName","src":"18392:6:36","type":""}],"src":"18333:329:36"},{"body":{"nodeType":"YulBlock","src":"18696:152:36","statements":[{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18713:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"18716:77:36","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18706:6:36"},"nodeType":"YulFunctionCall","src":"18706:88:36"},"nodeType":"YulExpressionStatement","src":"18706:88:36"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18810:1:36","type":"","value":"4"},{"kind":"number","nodeType":"YulLiteral","src":"18813:4:36","type":"","value":"0x32"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"18803:6:36"},"nodeType":"YulFunctionCall","src":"18803:15:36"},"nodeType":"YulExpressionStatement","src":"18803:15:36"},{"expression":{"arguments":[{"kind":"number","nodeType":"YulLiteral","src":"18834:1:36","type":"","value":"0"},{"kind":"number","nodeType":"YulLiteral","src":"18837:4:36","type":"","value":"0x24"}],"functionName":{"name":"revert","nodeType":"YulIdentifier","src":"18827:6:36"},"nodeType":"YulFunctionCall","src":"18827:15:36"},"nodeType":"YulExpressionStatement","src":"18827:15:36"}]},"name":"panic_error_0x32","nodeType":"YulFunctionDefinition","src":"18668:180:36"},{"body":{"nodeType":"YulBlock","src":"18886:28:36","statements":[{"nodeType":"YulAssignment","src":"18896:12:36","value":{"name":"value","nodeType":"YulIdentifier","src":"18903:5:36"},"variableNames":[{"name":"ret","nodeType":"YulIdentifier","src":"18896:3:36"}]}]},"name":"identity","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18872:5:36","type":""}],"returnVariables":[{"name":"ret","nodeType":"YulTypedName","src":"18882:3:36","type":""}],"src":"18854:60:36"},{"body":{"nodeType":"YulBlock","src":"18980:82:36","statements":[{"nodeType":"YulAssignment","src":"18990:66:36","value":{"arguments":[{"arguments":[{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19048:5:36"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"19030:17:36"},"nodeType":"YulFunctionCall","src":"19030:24:36"}],"functionName":{"name":"identity","nodeType":"YulIdentifier","src":"19021:8:36"},"nodeType":"YulFunctionCall","src":"19021:34:36"}],"functionName":{"name":"cleanup_t_uint160","nodeType":"YulIdentifier","src":"19003:17:36"},"nodeType":"YulFunctionCall","src":"19003:53:36"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"18990:9:36"}]}]},"name":"convert_t_uint160_to_t_uint160","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"18960:5:36","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"18970:9:36","type":""}],"src":"18920:142:36"},{"body":{"nodeType":"YulBlock","src":"19128:66:36","statements":[{"nodeType":"YulAssignment","src":"19138:50:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19182:5:36"}],"functionName":{"name":"convert_t_uint160_to_t_uint160","nodeType":"YulIdentifier","src":"19151:30:36"},"nodeType":"YulFunctionCall","src":"19151:37:36"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"19138:9:36"}]}]},"name":"convert_t_uint160_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"19108:5:36","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"19118:9:36","type":""}],"src":"19068:126:36"},{"body":{"nodeType":"YulBlock","src":"19272:66:36","statements":[{"nodeType":"YulAssignment","src":"19282:50:36","value":{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19326:5:36"}],"functionName":{"name":"convert_t_uint160_to_t_address","nodeType":"YulIdentifier","src":"19295:30:36"},"nodeType":"YulFunctionCall","src":"19295:37:36"},"variableNames":[{"name":"converted","nodeType":"YulIdentifier","src":"19282:9:36"}]}]},"name":"convert_t_contract$_IDAO_$155_to_t_address","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"19252:5:36","type":""}],"returnVariables":[{"name":"converted","nodeType":"YulTypedName","src":"19262:9:36","type":""}],"src":"19200:138:36"},{"body":{"nodeType":"YulBlock","src":"19421:78:36","statements":[{"expression":{"arguments":[{"name":"pos","nodeType":"YulIdentifier","src":"19438:3:36"},{"arguments":[{"name":"value","nodeType":"YulIdentifier","src":"19486:5:36"}],"functionName":{"name":"convert_t_contract$_IDAO_$155_to_t_address","nodeType":"YulIdentifier","src":"19443:42:36"},"nodeType":"YulFunctionCall","src":"19443:49:36"}],"functionName":{"name":"mstore","nodeType":"YulIdentifier","src":"19431:6:36"},"nodeType":"YulFunctionCall","src":"19431:62:36"},"nodeType":"YulExpressionStatement","src":"19431:62:36"}]},"name":"abi_encode_t_contract$_IDAO_$155_to_t_address_fromStack","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nodeType":"YulTypedName","src":"19409:5:36","type":""},{"name":"pos","nodeType":"YulTypedName","src":"19416:3:36","type":""}],"src":"19344:155:36"},{"body":{"nodeType":"YulBlock","src":"19615:136:36","statements":[{"nodeType":"YulAssignment","src":"19625:26:36","value":{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19637:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"19648:2:36","type":"","value":"32"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19633:3:36"},"nodeType":"YulFunctionCall","src":"19633:18:36"},"variableNames":[{"name":"tail","nodeType":"YulIdentifier","src":"19625:4:36"}]},{"expression":{"arguments":[{"name":"value0","nodeType":"YulIdentifier","src":"19717:6:36"},{"arguments":[{"name":"headStart","nodeType":"YulIdentifier","src":"19730:9:36"},{"kind":"number","nodeType":"YulLiteral","src":"19741:1:36","type":"","value":"0"}],"functionName":{"name":"add","nodeType":"YulIdentifier","src":"19726:3:36"},"nodeType":"YulFunctionCall","src":"19726:17:36"}],"functionName":{"name":"abi_encode_t_contract$_IDAO_$155_to_t_address_fromStack","nodeType":"YulIdentifier","src":"19661:55:36"},"nodeType":"YulFunctionCall","src":"19661:83:36"},"nodeType":"YulExpressionStatement","src":"19661:83:36"}]},"name":"abi_encode_tuple_t_contract$_IDAO_$155__to_t_address__fromStack_reversed","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nodeType":"YulTypedName","src":"19587:9:36","type":""},{"name":"value0","nodeType":"YulTypedName","src":"19599:6:36","type":""}],"returnVariables":[{"name":"tail","nodeType":"YulTypedName","src":"19610:4:36","type":""}],"src":"19505:246:36"}]},"contents":"{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d() {\n        revert(0, 0)\n    }\n\n    // struct IPluginSetup.SetupPayload\n    function abi_decode_t_struct$_SetupPayload_$399_calldata_ptr(offset, end) -> value {\n        if slt(sub(end, offset), 96) { revert_error_21fe6b43b4db61d76a176e95bf1a6b9ede4c301f93a4246f41fecb96e160861d() }\n        value := offset\n    }\n\n    function abi_decode_tuple_t_addresst_struct$_SetupPayload_$399_calldata_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_struct$_SetupPayload_$399_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_dataslot_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function panic_error_0x21() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n\n    function validator_assert_t_enum$_Operation_$169(value) {\n        if iszero(lt(value, 3)) { panic_error_0x21() }\n    }\n\n    function cleanup_t_enum$_Operation_$169(value) -> cleaned {\n        cleaned := value validator_assert_t_enum$_Operation_$169(value)\n    }\n\n    function convert_t_enum$_Operation_$169_to_t_uint8(value) -> converted {\n        converted := cleanup_t_enum$_Operation_$169(value)\n    }\n\n    function abi_encode_t_enum$_Operation_$169_to_t_uint8(value, pos) {\n        mstore(pos, convert_t_enum$_Operation_$169_to_t_uint8(value))\n    }\n\n    function abi_encode_t_address_to_t_address(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function cleanup_t_bytes32(value) -> cleaned {\n        cleaned := value\n    }\n\n    function abi_encode_t_bytes32_to_t_bytes32(value, pos) {\n        mstore(pos, cleanup_t_bytes32(value))\n    }\n\n    // struct PermissionLib.MultiTargetPermission -> struct PermissionLib.MultiTargetPermission\n    function abi_encode_t_struct$_MultiTargetPermission_$189_memory_ptr_to_t_struct$_MultiTargetPermission_$189_memory_ptr(value, pos)  {\n        let tail := add(pos, 0xa0)\n\n        {\n            // operation\n\n            let memberValue0 := mload(add(value, 0x00))\n            abi_encode_t_enum$_Operation_$169_to_t_uint8(memberValue0, add(pos, 0x00))\n        }\n\n        {\n            // where\n\n            let memberValue0 := mload(add(value, 0x20))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x20))\n        }\n\n        {\n            // who\n\n            let memberValue0 := mload(add(value, 0x40))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x40))\n        }\n\n        {\n            // condition\n\n            let memberValue0 := mload(add(value, 0x60))\n            abi_encode_t_address_to_t_address(memberValue0, add(pos, 0x60))\n        }\n\n        {\n            // permissionId\n\n            let memberValue0 := mload(add(value, 0x80))\n            abi_encode_t_bytes32_to_t_bytes32(memberValue0, add(pos, 0x80))\n        }\n\n    }\n\n    function abi_encodeUpdatedPos_t_struct$_MultiTargetPermission_$189_memory_ptr_to_t_struct$_MultiTargetPermission_$189_memory_ptr(value0, pos) -> updatedPos {\n        abi_encode_t_struct$_MultiTargetPermission_$189_memory_ptr_to_t_struct$_MultiTargetPermission_$189_memory_ptr(value0, pos)\n        updatedPos := add(pos, 0xa0)\n    }\n\n    function array_nextElement_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    // struct PermissionLib.MultiTargetPermission[] -> struct PermissionLib.MultiTargetPermission[]\n    function abi_encode_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr_fromStack(value, pos)  -> end  {\n        let length := array_length_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr_fromStack(pos, length)\n        let baseRef := array_dataslot_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_struct$_MultiTargetPermission_$189_memory_ptr_to_t_struct$_MultiTargetPermission_$189_memory_ptr(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    function abi_encode_tuple_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr__to_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function cleanup_t_uint16(value) -> cleaned {\n        cleaned := and(value, 0xffff)\n    }\n\n    function validator_revert_t_uint16(value) {\n        if iszero(eq(value, cleanup_t_uint16(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint16(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint16(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint16t_struct$_SetupPayload_$399_calldata_ptr(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint16(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 64))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value2 := abi_decode_t_struct$_SetupPayload_$399_calldata_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function array_length_t_array$_t_address_$dyn_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function array_dataslot_t_array$_t_address_$dyn_memory_ptr(ptr) -> data {\n        data := ptr\n\n        data := add(ptr, 0x20)\n\n    }\n\n    function abi_encodeUpdatedPos_t_address_to_t_address(value0, pos) -> updatedPos {\n        abi_encode_t_address_to_t_address(value0, pos)\n        updatedPos := add(pos, 0x20)\n    }\n\n    function array_nextElement_t_array$_t_address_$dyn_memory_ptr(ptr) -> next {\n        next := add(ptr, 0x20)\n    }\n\n    // address[] -> address[]\n    function abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr(value, pos)  -> end  {\n        let length := array_length_t_array$_t_address_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_address_$dyn_memory_ptr(pos, length)\n        let baseRef := array_dataslot_t_array$_t_address_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_address_to_t_address(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_address_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    function array_storeLengthForEncoding_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    // struct PermissionLib.MultiTargetPermission[] -> struct PermissionLib.MultiTargetPermission[]\n    function abi_encode_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr(value, pos)  -> end  {\n        let length := array_length_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr(pos, length)\n        let baseRef := array_dataslot_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr(value)\n        let srcPtr := baseRef\n        for { let i := 0 } lt(i, length) { i := add(i, 1) }\n        {\n            let elementValue0 := mload(srcPtr)\n            pos := abi_encodeUpdatedPos_t_struct$_MultiTargetPermission_$189_memory_ptr_to_t_struct$_MultiTargetPermission_$189_memory_ptr(elementValue0, pos)\n            srcPtr := array_nextElement_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr(srcPtr)\n        }\n        end := pos\n    }\n\n    // struct IPluginSetup.PreparedSetupData -> struct IPluginSetup.PreparedSetupData\n    function abi_encode_t_struct$_PreparedSetupData_$391_memory_ptr_to_t_struct$_PreparedSetupData_$391_memory_ptr_fromStack(value, pos)  -> end  {\n        let tail := add(pos, 0x40)\n\n        {\n            // helpers\n\n            let memberValue0 := mload(add(value, 0x00))\n\n            mstore(add(pos, 0x00), sub(tail, pos))\n            tail := abi_encode_t_array$_t_address_$dyn_memory_ptr_to_t_array$_t_address_$dyn_memory_ptr(memberValue0, tail)\n\n        }\n\n        {\n            // permissions\n\n            let memberValue0 := mload(add(value, 0x20))\n\n            mstore(add(pos, 0x20), sub(tail, pos))\n            tail := abi_encode_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr_to_t_array$_t_struct$_MultiTargetPermission_$189_memory_ptr_$dyn_memory_ptr(memberValue0, tail)\n\n        }\n\n        end := tail\n    }\n\n    function abi_encode_tuple_t_bytes_memory_ptr_t_struct$_PreparedSetupData_$391_memory_ptr__to_t_bytes_memory_ptr_t_struct$_PreparedSetupData_$391_memory_ptr__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value0,  tail)\n\n        mstore(add(headStart, 32), sub(tail, headStart))\n        tail := abi_encode_t_struct$_PreparedSetupData_$391_memory_ptr_to_t_struct$_PreparedSetupData_$391_memory_ptr_fromStack(value1,  tail)\n\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_addresst_bytes_memory_ptr(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_tuple_t_address_t_struct$_PreparedSetupData_$391_memory_ptr__to_t_address_t_struct$_PreparedSetupData_$391_memory_ptr__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        mstore(add(headStart, 32), sub(tail, headStart))\n        tail := abi_encode_t_struct$_PreparedSetupData_$391_memory_ptr_to_t_struct$_PreparedSetupData_$391_memory_ptr_fromStack(value1,  tail)\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint160_to_t_uint160(value) -> converted {\n        converted := cleanup_t_uint160(identity(cleanup_t_uint160(value)))\n    }\n\n    function convert_t_uint160_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_uint160(value)\n    }\n\n    function convert_t_contract$_IDAO_$155_to_t_address(value) -> converted {\n        converted := convert_t_uint160_to_t_address(value)\n    }\n\n    function abi_encode_t_contract$_IDAO_$155_to_t_address_fromStack(value, pos) {\n        mstore(pos, convert_t_contract$_IDAO_$155_to_t_address(value))\n    }\n\n    function abi_encode_tuple_t_contract$_IDAO_$155__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_contract$_IDAO_$155_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n}\n","id":36,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{},"linkReferences":{},"object":"60806040523480156200001157600080fd5b50600436106200005e5760003560e01c806301ffc9a714620000635780635c60da1b14620000995780639cb0a12414620000bb578063a8a9c29e14620000f1578063f10832f11462000128575b600080fd5b6200008160048036038101906200007b919062000637565b6200015f565b60405162000090919062000686565b60405180910390f35b620000a3620001dc565b604051620000b29190620006e8565b60405180910390f35b620000d96004803603810190620000d391906200075d565b620001e1565b604051620000e891906200099e565b60405180910390f35b6200010f600480360381019062000109919062000a01565b6200031d565b6040516200011f92919062000c96565b60405180910390f35b62000146600480360381019062000140919062000e22565b62000331565b6040516200015692919062000e88565b60405180910390f35b60007f99718b50000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480620001d55750620001d482620004ab565b5b9050919050565b600090565b6060600167ffffffffffffffff81111562000201576200020062000cdb565b5b6040519080825280602002602001820160405280156200023e57816020015b6200022a62000515565b815260200190600190039081620002205790505b5090506040518060a0016040528060016002811115620002635762000262620007ef565b5b81526020018360000160208101906200027d919062000ebc565b73ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020017f1bd70c5aa931fa900de716024b36e36cc236a1ce16d32948668c08aa04e680f2815250816000815181106200030c576200030b62000eee565b5b602002602001018190525092915050565b6060620003296200059e565b935093915050565b60006200033d6200059e565b836040516200034c90620005b8565b62000358919062000f88565b604051809103906000f08015801562000375573d6000803e3d6000fd5b5091506000600167ffffffffffffffff81111562000398576200039762000cdb565b5b604051908082528060200260200182016040528015620003d557816020015b620003c162000515565b815260200190600190039081620003b75790505b5090506040518060a0016040528060006002811115620003fa57620003f9620007ef565b5b81526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018673ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020017f1bd70c5aa931fa900de716024b36e36cc236a1ce16d32948668c08aa04e680f2815250816000815181106200048f576200048e62000eee565b5b6020026020010181905250808260200181905250509250929050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6040518060a0016040528060006002811115620005375762000536620007ef565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600080191681525090565b604051806040016040528060608152602001606081525090565b6133698062000fa683390190565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6200061181620005da565b81146200061d57600080fd5b50565b600081359050620006318162000606565b92915050565b60006020828403121562000650576200064f620005d0565b5b6000620006608482850162000620565b91505092915050565b60008115159050919050565b620006808162000669565b82525050565b60006020820190506200069d600083018462000675565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620006d082620006a3565b9050919050565b620006e281620006c3565b82525050565b6000602082019050620006ff6000830184620006d7565b92915050565b6200071081620006c3565b81146200071c57600080fd5b50565b600081359050620007308162000705565b92915050565b600080fd5b60006060828403121562000754576200075362000736565b5b81905092915050565b60008060408385031215620007775762000776620005d0565b5b600062000787858286016200071f565b925050602083013567ffffffffffffffff811115620007ab57620007aa620005d5565b5b620007b9858286016200073b565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110620008325762000831620007ef565b5b50565b600081905062000845826200081e565b919050565b6000620008578262000835565b9050919050565b62000869816200084a565b82525050565b6200087a81620006c3565b82525050565b6000819050919050565b620008958162000880565b82525050565b60a082016000820151620008b360008501826200085e565b506020820151620008c860208501826200086f565b506040820151620008dd60408501826200086f565b506060820151620008f260608501826200086f565b5060808201516200090760808501826200088a565b50505050565b60006200091b83836200089b565b60a08301905092915050565b6000602082019050919050565b60006200094182620007c3565b6200094d8185620007ce565b93506200095a83620007df565b8060005b83811015620009915781516200097588826200090d565b9750620009828362000927565b9250506001810190506200095e565b5085935050505092915050565b60006020820190508181036000830152620009ba818462000934565b905092915050565b600061ffff82169050919050565b620009db81620009c2565b8114620009e757600080fd5b50565b600081359050620009fb81620009d0565b92915050565b60008060006060848603121562000a1d5762000a1c620005d0565b5b600062000a2d868287016200071f565b935050602062000a4086828701620009ea565b925050604084013567ffffffffffffffff81111562000a645762000a63620005d5565b5b62000a72868287016200073b565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b8381101562000ab857808201518184015260208101905062000a9b565b60008484015250505050565b6000601f19601f8301169050919050565b600062000ae28262000a7c565b62000aee818562000a87565b935062000b0081856020860162000a98565b62000b0b8162000ac4565b840191505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600062000b5083836200086f565b60208301905092915050565b6000602082019050919050565b600062000b768262000b16565b62000b82818562000b21565b935062000b8f8362000b32565b8060005b8381101562000bc657815162000baa888262000b42565b975062000bb78362000b5c565b92505060018101905062000b93565b5085935050505092915050565b600082825260208201905092915050565b600062000bf182620007c3565b62000bfd818562000bd3565b935062000c0a83620007df565b8060005b8381101562000c4157815162000c2588826200090d565b975062000c328362000927565b92505060018101905062000c0e565b5085935050505092915050565b6000604083016000830151848203600086015262000c6d828262000b69565b9150506020830151848203602086015262000c89828262000be4565b9150508091505092915050565b6000604082019050818103600083015262000cb2818562000ad5565b9050818103602083015262000cc8818462000c4e565b90509392505050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000d158262000ac4565b810181811067ffffffffffffffff8211171562000d375762000d3662000cdb565b5b80604052505050565b600062000d4c620005c6565b905062000d5a828262000d0a565b919050565b600067ffffffffffffffff82111562000d7d5762000d7c62000cdb565b5b62000d888262000ac4565b9050602081019050919050565b82818337600083830152505050565b600062000dbb62000db58462000d5f565b62000d40565b90508281526020810184848401111562000dda5762000dd962000cd6565b5b62000de784828562000d95565b509392505050565b600082601f83011262000e075762000e0662000cd1565b5b813562000e1984826020860162000da4565b91505092915050565b6000806040838503121562000e3c5762000e3b620005d0565b5b600062000e4c858286016200071f565b925050602083013567ffffffffffffffff81111562000e705762000e6f620005d5565b5b62000e7e8582860162000def565b9150509250929050565b600060408201905062000e9f6000830185620006d7565b818103602083015262000eb3818462000c4e565b90509392505050565b60006020828403121562000ed55762000ed4620005d0565b5b600062000ee5848285016200071f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000819050919050565b600062000f4862000f4262000f3c84620006a3565b62000f1d565b620006a3565b9050919050565b600062000f5c8262000f27565b9050919050565b600062000f708262000f4f565b9050919050565b62000f828162000f63565b82525050565b600060208201905062000f9f600083018462000f77565b9291505056fe60a060405234801561001057600080fd5b506040516133693803806133698339818101604052810190610032919061015a565b80808073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250505050604051610076906100d8565b604051809103906000f080158015610092573d6000803e3d6000fd5b506000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610187565b612a118061095883390190565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610115826100ea565b9050919050565b60006101278261010a565b9050919050565b6101378161011c565b811461014257600080fd5b50565b6000815190506101548161012e565b92915050565b6000602082840312156101705761016f6100e5565b5b600061017e84828501610145565b91505092915050565b6080516107af6101a960003960008181610190015261027101526107af6000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806301ffc9a71461005c5780631a0d86101461008c5780631c7b4de4146100965780634162169f146100b457806341de6830146100d2575b600080fd5b6100766004803603810190610071919061044b565b6100f0565b6040516100839190610493565b60405180910390f35b61009461016a565b005b61009e610249565b6040516100ab91906104c7565b60405180910390f35b6100bc61026d565b6040516100c99190610561565b60405180910390f35b6100da610295565b6040516100e791906105f3565b60405180910390f35b60007f41de6830000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061016357506101628261029e565b5b9050919050565b7f1bd70c5aa931fa900de716024b36e36cc236a1ce16d32948668c08aa04e680f26101c67f0000000000000000000000000000000000000000000000000000000000000000306101b8610308565b846101c1610310565b61031d565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639cbf9e366040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561022e57600080fd5b505af1158015610242573d6000803e3d6000fd5b5050505050565b7f1bd70c5aa931fa900de716024b36e36cc236a1ce16d32948668c08aa04e680f281565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60006002905090565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600033905090565b3660008036915091509091565b8573ffffffffffffffffffffffffffffffffffffffff1663fdef910686868686866040518663ffffffff1660e01b815260040161035e95949392919061068d565b602060405180830381865afa15801561037b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039f9190610707565b6103e657858585856040517f32dbe3b40000000000000000000000000000000000000000000000000000000081526004016103dd9493929190610734565b60405180910390fd5b505050505050565b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b610428816103f3565b811461043357600080fd5b50565b6000813590506104458161041f565b92915050565b600060208284031215610461576104606103ee565b5b600061046f84828501610436565b91505092915050565b60008115159050919050565b61048d81610478565b82525050565b60006020820190506104a86000830184610484565b92915050565b6000819050919050565b6104c1816104ae565b82525050565b60006020820190506104dc60008301846104b8565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061052761052261051d846104e2565b610502565b6104e2565b9050919050565b60006105398261050c565b9050919050565b600061054b8261052e565b9050919050565b61055b81610540565b82525050565b60006020820190506105766000830184610552565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106105bc576105bb61057c565b5b50565b60008190506105cd826105ab565b919050565b60006105dd826105bf565b9050919050565b6105ed816105d2565b82525050565b600060208201905061060860008301846105e4565b92915050565b6000610619826104e2565b9050919050565b6106298161060e565b82525050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b600061066c838561062f565b9350610679838584610640565b6106828361064f565b840190509392505050565b60006080820190506106a26000830188610620565b6106af6020830187610620565b6106bc60408301866104b8565b81810360608301526106cf818486610660565b90509695505050505050565b6106e481610478565b81146106ef57600080fd5b50565b600081519050610701816106db565b92915050565b60006020828403121561071d5761071c6103ee565b5b600061072b848285016106f2565b91505092915050565b60006080820190506107496000830187610620565b6107566020830186610620565b6107636040830185610620565b61077060608301846104b8565b9594505050505056fea2646970667358221220b3f8dc1a6d3b7ade4ee08f458fdb6e383762323d52d01070caec8fe846c033e764736f6c6343000813003360806040523480156200001157600080fd5b506040518060400160405280600f81526020017f4661726d204c656e646572204e465400000000000000000000000000000000008152506040518060400160405280600381526020017f464c4e000000000000000000000000000000000000000000000000000000000081525081600090816200008f919062000324565b508060019081620000a1919062000324565b5050506200040b565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200012c57607f821691505b602082108103620001425762000141620000e4565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620001ac7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200016d565b620001b886836200016d565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600062000205620001ff620001f984620001d0565b620001da565b620001d0565b9050919050565b6000819050919050565b6200022183620001e4565b6200023962000230826200020c565b8484546200017a565b825550505050565b600090565b6200025062000241565b6200025d81848462000216565b505050565b5b8181101562000285576200027960008262000246565b60018101905062000263565b5050565b601f821115620002d4576200029e8162000148565b620002a9846200015d565b81016020851015620002b9578190505b620002d1620002c8856200015d565b83018262000262565b50505b505050565b600082821c905092915050565b6000620002f960001984600802620002d9565b1980831691505092915050565b6000620003148383620002e6565b9150826002028217905092915050565b6200032f82620000aa565b67ffffffffffffffff8111156200034b576200034a620000b5565b5b62000357825462000113565b6200036482828562000289565b600060209050601f8311600181146200039c576000841562000387578287015190505b62000393858262000306565b86555062000403565b601f198416620003ac8662000148565b60005b82811015620003d657848901518255600182019150602085019450602081019050620003af565b86831015620003f65784890151620003f2601f891682620002e6565b8355505b6001600288020188555050505b505050505050565b6125f6806200041b6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806370a082311161008c578063a22cb46511610066578063a22cb46514610249578063b88d4fde14610265578063c87b56dd14610281578063e985e9c5146102b1576100ea565b806370a08231146101f157806395d89b41146102215780639cbf9e361461023f576100ea565b8063095ea7b3116100c8578063095ea7b31461016d57806323b872dd1461018957806342842e0e146101a55780636352211e146101c1576100ea565b806301ffc9a7146100ef57806306fdde031461011f578063081812fc1461013d575b600080fd5b610109600480360381019061010491906118f2565b6102e1565b604051610116919061193a565b60405180910390f35b610127610342565b60405161013491906119e5565b60405180910390f35b61015760048036038101906101529190611a3d565b6103d4565b6040516101649190611aab565b60405180910390f35b61018760048036038101906101829190611af2565b61041a565b005b6101a3600480360381019061019e9190611b32565b610531565b005b6101bf60048036038101906101ba9190611b32565b610591565b005b6101db60048036038101906101d69190611a3d565b6105b1565b6040516101e89190611aab565b60405180910390f35b61020b60048036038101906102069190611b85565b610637565b6040516102189190611bc1565b60405180910390f35b6102296106ee565b60405161023691906119e5565b60405180910390f35b610247610780565b005b610263600480360381019061025e9190611c08565b6107a5565b005b61027f600480360381019061027a9190611d7d565b6107bb565b005b61029b60048036038101906102969190611a3d565b61081d565b6040516102a891906119e5565b60405180910390f35b6102cb60048036038101906102c69190611e00565b61092f565b6040516102d8919061193a565b60405180910390f35b6000634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061033b575061033a826109c3565b5b9050919050565b60606000805461035190611e6f565b80601f016020809104026020016040519081016040528092919081815260200182805461037d90611e6f565b80156103ca5780601f1061039f576101008083540402835291602001916103ca565b820191906000526020600020905b8154815290600101906020018083116103ad57829003601f168201915b5050505050905090565b60006103df82610aa5565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610425826105b1565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610495576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048c90611f12565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166104b4610af0565b73ffffffffffffffffffffffffffffffffffffffff1614806104e357506104e2816104dd610af0565b61092f565b5b610522576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051990611fa4565b60405180910390fd5b61052c8383610af8565b505050565b61054261053c610af0565b82610bb1565b610581576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057890612036565b60405180910390fd5b61058c838383610c46565b505050565b6105ac838383604051806020016040528060008152506107bb565b505050565b6000806105bd83610f3f565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361062e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610625906120a2565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036106a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069e90612134565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600180546106fd90611e6f565b80601f016020809104026020016040519081016040528092919081815260200182805461072990611e6f565b80156107765780601f1061074b57610100808354040283529160200191610776565b820191906000526020600020905b81548152906001019060200180831161075957829003601f168201915b5050505050905090565b61078a6007610f7c565b60006107966007610f92565b90506107a23382610fa0565b50565b6107b76107b0610af0565b83836111bd565b5050565b6107cc6107c6610af0565b83610bb1565b61080b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080290612036565b60405180910390fd5b61081784848484611329565b50505050565b606061082882610aa5565b600060066000848152602001908152602001600020805461084890611e6f565b80601f016020809104026020016040519081016040528092919081815260200182805461087490611e6f565b80156108c15780601f10610896576101008083540402835291602001916108c1565b820191906000526020600020905b8154815290600101906020018083116108a457829003601f168201915b5050505050905060006108d2611385565b905060008151036108e757819250505061092a565b60008251111561091c578082604051602001610904929190612190565b6040516020818303038152906040529250505061092a565b6109258461139c565b925050505b919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610a8e57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610a9e5750610a9d82611404565b5b9050919050565b610aae8161146e565b610aed576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae4906120a2565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16610b6b836105b1565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080610bbd836105b1565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480610bff5750610bfe818561092f565b5b80610c3d57508373ffffffffffffffffffffffffffffffffffffffff16610c25846103d4565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff16610c66826105b1565b73ffffffffffffffffffffffffffffffffffffffff1614610cbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cb390612226565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610d2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d22906122b8565b60405180910390fd5b610d3883838360016114af565b8273ffffffffffffffffffffffffffffffffffffffff16610d58826105b1565b73ffffffffffffffffffffffffffffffffffffffff1614610dae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610da590612226565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4610f3a83838360016114b5565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6001816000016000828254019250508190555050565b600081600001549050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361100f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100690612324565b60405180910390fd5b6110188161146e565b15611058576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161104f90612390565b60405180910390fd5b6110666000838360016114af565b61106f8161146e565b156110af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a690612390565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46111b96000838360016114b5565b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361122b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611222906123fc565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161131c919061193a565b60405180910390a3505050565b611334848484610c46565b611340848484846114bb565b61137f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113769061248e565b60405180910390fd5b50505050565b606060405180602001604052806000815250905090565b60606113a782610aa5565b60006113b1611385565b905060008151116113d157604051806020016040528060008152506113fc565b806113db84611642565b6040516020016113ec929190612190565b6040516020818303038152906040525b915050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b60008073ffffffffffffffffffffffffffffffffffffffff1661149083610f3f565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b50505050565b50505050565b60006114dc8473ffffffffffffffffffffffffffffffffffffffff16611710565b15611635578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611505610af0565b8786866040518563ffffffff1660e01b81526004016115279493929190612503565b6020604051808303816000875af192505050801561156357506040513d601f19601f820116820180604052508101906115609190612564565b60015b6115e5573d8060008114611593576040519150601f19603f3d011682016040523d82523d6000602084013e611598565b606091505b5060008151036115dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115d49061248e565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161491505061163a565b600190505b949350505050565b60606000600161165184611733565b01905060008167ffffffffffffffff8111156116705761166f611c52565b5b6040519080825280601f01601f1916602001820160405280156116a25781602001600182028036833780820191505090505b509050600082602001820190505b600115611705578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85816116f9576116f8612591565b5b049450600085036116b0575b819350505050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611791577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000838161178757611786612591565b5b0492506040810190505b6d04ee2d6d415b85acef810000000083106117ce576d04ee2d6d415b85acef810000000083816117c4576117c3612591565b5b0492506020810190505b662386f26fc1000083106117fd57662386f26fc1000083816117f3576117f2612591565b5b0492506010810190505b6305f5e1008310611826576305f5e100838161181c5761181b612591565b5b0492506008810190505b612710831061184b57612710838161184157611840612591565b5b0492506004810190505b6064831061186e576064838161186457611863612591565b5b0492506002810190505b600a831061187d576001810190505b80915050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6118cf8161189a565b81146118da57600080fd5b50565b6000813590506118ec816118c6565b92915050565b60006020828403121561190857611907611890565b5b6000611916848285016118dd565b91505092915050565b60008115159050919050565b6119348161191f565b82525050565b600060208201905061194f600083018461192b565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561198f578082015181840152602081019050611974565b60008484015250505050565b6000601f19601f8301169050919050565b60006119b782611955565b6119c18185611960565b93506119d1818560208601611971565b6119da8161199b565b840191505092915050565b600060208201905081810360008301526119ff81846119ac565b905092915050565b6000819050919050565b611a1a81611a07565b8114611a2557600080fd5b50565b600081359050611a3781611a11565b92915050565b600060208284031215611a5357611a52611890565b5b6000611a6184828501611a28565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611a9582611a6a565b9050919050565b611aa581611a8a565b82525050565b6000602082019050611ac06000830184611a9c565b92915050565b611acf81611a8a565b8114611ada57600080fd5b50565b600081359050611aec81611ac6565b92915050565b60008060408385031215611b0957611b08611890565b5b6000611b1785828601611add565b9250506020611b2885828601611a28565b9150509250929050565b600080600060608486031215611b4b57611b4a611890565b5b6000611b5986828701611add565b9350506020611b6a86828701611add565b9250506040611b7b86828701611a28565b9150509250925092565b600060208284031215611b9b57611b9a611890565b5b6000611ba984828501611add565b91505092915050565b611bbb81611a07565b82525050565b6000602082019050611bd66000830184611bb2565b92915050565b611be58161191f565b8114611bf057600080fd5b50565b600081359050611c0281611bdc565b92915050565b60008060408385031215611c1f57611c1e611890565b5b6000611c2d85828601611add565b9250506020611c3e85828601611bf3565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611c8a8261199b565b810181811067ffffffffffffffff82111715611ca957611ca8611c52565b5b80604052505050565b6000611cbc611886565b9050611cc88282611c81565b919050565b600067ffffffffffffffff821115611ce857611ce7611c52565b5b611cf18261199b565b9050602081019050919050565b82818337600083830152505050565b6000611d20611d1b84611ccd565b611cb2565b905082815260208101848484011115611d3c57611d3b611c4d565b5b611d47848285611cfe565b509392505050565b600082601f830112611d6457611d63611c48565b5b8135611d74848260208601611d0d565b91505092915050565b60008060008060808587031215611d9757611d96611890565b5b6000611da587828801611add565b9450506020611db687828801611add565b9350506040611dc787828801611a28565b925050606085013567ffffffffffffffff811115611de857611de7611895565b5b611df487828801611d4f565b91505092959194509250565b60008060408385031215611e1757611e16611890565b5b6000611e2585828601611add565b9250506020611e3685828601611add565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611e8757607f821691505b602082108103611e9a57611e99611e40565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000611efc602183611960565b9150611f0782611ea0565b604082019050919050565b60006020820190508181036000830152611f2b81611eef565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000611f8e603d83611960565b9150611f9982611f32565b604082019050919050565b60006020820190508181036000830152611fbd81611f81565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000612020602d83611960565b915061202b82611fc4565b604082019050919050565b6000602082019050818103600083015261204f81612013565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b600061208c601883611960565b915061209782612056565b602082019050919050565b600060208201905081810360008301526120bb8161207f565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b600061211e602983611960565b9150612129826120c2565b604082019050919050565b6000602082019050818103600083015261214d81612111565b9050919050565b600081905092915050565b600061216a82611955565b6121748185612154565b9350612184818560208601611971565b80840191505092915050565b600061219c828561215f565b91506121a8828461215f565b91508190509392505050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000612210602583611960565b915061221b826121b4565b604082019050919050565b6000602082019050818103600083015261223f81612203565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006122a2602483611960565b91506122ad82612246565b604082019050919050565b600060208201905081810360008301526122d181612295565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b600061230e602083611960565b9150612319826122d8565b602082019050919050565b6000602082019050818103600083015261233d81612301565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b600061237a601c83611960565b915061238582612344565b602082019050919050565b600060208201905081810360008301526123a98161236d565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b60006123e6601983611960565b91506123f1826123b0565b602082019050919050565b60006020820190508181036000830152612415816123d9565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000612478603283611960565b91506124838261241c565b604082019050919050565b600060208201905081810360008301526124a78161246b565b9050919050565b600081519050919050565b600082825260208201905092915050565b60006124d5826124ae565b6124df81856124b9565b93506124ef818560208601611971565b6124f88161199b565b840191505092915050565b60006080820190506125186000830187611a9c565b6125256020830186611a9c565b6125326040830185611bb2565b818103606083015261254481846124ca565b905095945050505050565b60008151905061255e816118c6565b92915050565b60006020828403121561257a57612579611890565b5b60006125888482850161254f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfea2646970667358221220890b833bf6def222dcdf8a7e75cbd7bc6af5953d31717801d0762bff0d318af864736f6c63430008130033a2646970667358221220986948635086e6648dffb15e1abb0c2c2aff0f70ad7b0fa2b0dee8cd6b55877064736f6c63430008130033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH3 0x5E JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FFC9A7 EQ PUSH3 0x63 JUMPI DUP1 PUSH4 0x5C60DA1B EQ PUSH3 0x99 JUMPI DUP1 PUSH4 0x9CB0A124 EQ PUSH3 0xBB JUMPI DUP1 PUSH4 0xA8A9C29E EQ PUSH3 0xF1 JUMPI DUP1 PUSH4 0xF10832F1 EQ PUSH3 0x128 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x81 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH3 0x7B SWAP2 SWAP1 PUSH3 0x637 JUMP JUMPDEST PUSH3 0x15F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x90 SWAP2 SWAP1 PUSH3 0x686 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH3 0xA3 PUSH3 0x1DC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0xB2 SWAP2 SWAP1 PUSH3 0x6E8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH3 0xD9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH3 0xD3 SWAP2 SWAP1 PUSH3 0x75D JUMP JUMPDEST PUSH3 0x1E1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0xE8 SWAP2 SWAP1 PUSH3 0x99E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH3 0x10F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH3 0x109 SWAP2 SWAP1 PUSH3 0xA01 JUMP JUMPDEST PUSH3 0x31D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x11F SWAP3 SWAP2 SWAP1 PUSH3 0xC96 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH3 0x146 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH3 0x140 SWAP2 SWAP1 PUSH3 0xE22 JUMP JUMPDEST PUSH3 0x331 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH3 0x156 SWAP3 SWAP2 SWAP1 PUSH3 0xE88 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x99718B5000000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH3 0x1D5 JUMPI POP PUSH3 0x1D4 DUP3 PUSH3 0x4AB JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x201 JUMPI PUSH3 0x200 PUSH3 0xCDB JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH3 0x23E JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH3 0x22A PUSH3 0x515 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH3 0x220 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x1 PUSH1 0x2 DUP2 GT ISZERO PUSH3 0x263 JUMPI PUSH3 0x262 PUSH3 0x7EF JUMP JUMPDEST JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP4 PUSH1 0x0 ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH3 0x27D SWAP2 SWAP1 PUSH3 0xEBC JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x1BD70C5AA931FA900DE716024B36E36CC236A1CE16D32948668C08AA04E680F2 DUP2 MSTORE POP DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH3 0x30C JUMPI PUSH3 0x30B PUSH3 0xEEE JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH3 0x329 PUSH3 0x59E JUMP JUMPDEST SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x33D PUSH3 0x59E JUMP JUMPDEST DUP4 PUSH1 0x40 MLOAD PUSH3 0x34C SWAP1 PUSH3 0x5B8 JUMP JUMPDEST PUSH3 0x358 SWAP2 SWAP1 PUSH3 0xF88 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 0x375 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP SWAP2 POP PUSH1 0x0 PUSH1 0x1 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x398 JUMPI PUSH3 0x397 PUSH3 0xCDB JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH3 0x3D5 JUMPI DUP2 PUSH1 0x20 ADD JUMPDEST PUSH3 0x3C1 PUSH3 0x515 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 SWAP1 SUB SWAP1 DUP2 PUSH3 0x3B7 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH1 0x2 DUP2 GT ISZERO PUSH3 0x3FA JUMPI PUSH3 0x3F9 PUSH3 0x7EF JUMP JUMPDEST JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x1BD70C5AA931FA900DE716024B36E36CC236A1CE16D32948668C08AA04E680F2 DUP2 MSTORE POP DUP2 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH3 0x48F JUMPI PUSH3 0x48E PUSH3 0xEEE JUMP JUMPDEST JUMPDEST PUSH1 0x20 MUL PUSH1 0x20 ADD ADD DUP2 SWAP1 MSTORE POP DUP1 DUP3 PUSH1 0x20 ADD DUP2 SWAP1 MSTORE POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0xA0 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 PUSH1 0x2 DUP2 GT ISZERO PUSH3 0x537 JUMPI PUSH3 0x536 PUSH3 0x7EF JUMP JUMPDEST JUMPDEST DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP1 NOT AND DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH2 0x3369 DUP1 PUSH3 0xFA6 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x611 DUP2 PUSH3 0x5DA JUMP JUMPDEST DUP2 EQ PUSH3 0x61D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH3 0x631 DUP2 PUSH3 0x606 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x650 JUMPI PUSH3 0x64F PUSH3 0x5D0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x660 DUP5 DUP3 DUP6 ADD PUSH3 0x620 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x680 DUP2 PUSH3 0x669 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH3 0x69D PUSH1 0x0 DUP4 ADD DUP5 PUSH3 0x675 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x6D0 DUP3 PUSH3 0x6A3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x6E2 DUP2 PUSH3 0x6C3 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH3 0x6FF PUSH1 0x0 DUP4 ADD DUP5 PUSH3 0x6D7 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x710 DUP2 PUSH3 0x6C3 JUMP JUMPDEST DUP2 EQ PUSH3 0x71C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH3 0x730 DUP2 PUSH3 0x705 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x754 JUMPI PUSH3 0x753 PUSH3 0x736 JUMP JUMPDEST JUMPDEST DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x777 JUMPI PUSH3 0x776 PUSH3 0x5D0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0x787 DUP6 DUP3 DUP7 ADD PUSH3 0x71F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x7AB JUMPI PUSH3 0x7AA PUSH3 0x5D5 JUMP JUMPDEST JUMPDEST PUSH3 0x7B9 DUP6 DUP3 DUP7 ADD PUSH3 0x73B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x3 DUP2 LT PUSH3 0x832 JUMPI PUSH3 0x831 PUSH3 0x7EF JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH3 0x845 DUP3 PUSH3 0x81E JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x857 DUP3 PUSH3 0x835 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x869 DUP2 PUSH3 0x84A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH3 0x87A DUP2 PUSH3 0x6C3 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x895 DUP2 PUSH3 0x880 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD PUSH1 0x0 DUP3 ADD MLOAD PUSH3 0x8B3 PUSH1 0x0 DUP6 ADD DUP3 PUSH3 0x85E JUMP JUMPDEST POP PUSH1 0x20 DUP3 ADD MLOAD PUSH3 0x8C8 PUSH1 0x20 DUP6 ADD DUP3 PUSH3 0x86F JUMP JUMPDEST POP PUSH1 0x40 DUP3 ADD MLOAD PUSH3 0x8DD PUSH1 0x40 DUP6 ADD DUP3 PUSH3 0x86F JUMP JUMPDEST POP PUSH1 0x60 DUP3 ADD MLOAD PUSH3 0x8F2 PUSH1 0x60 DUP6 ADD DUP3 PUSH3 0x86F JUMP JUMPDEST POP PUSH1 0x80 DUP3 ADD MLOAD PUSH3 0x907 PUSH1 0x80 DUP6 ADD DUP3 PUSH3 0x88A JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x91B DUP4 DUP4 PUSH3 0x89B JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x941 DUP3 PUSH3 0x7C3 JUMP JUMPDEST PUSH3 0x94D DUP2 DUP6 PUSH3 0x7CE JUMP JUMPDEST SWAP4 POP PUSH3 0x95A DUP4 PUSH3 0x7DF JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x991 JUMPI DUP2 MLOAD PUSH3 0x975 DUP9 DUP3 PUSH3 0x90D JUMP JUMPDEST SWAP8 POP PUSH3 0x982 DUP4 PUSH3 0x927 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x95E JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0x9BA DUP2 DUP5 PUSH3 0x934 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x9DB DUP2 PUSH3 0x9C2 JUMP JUMPDEST DUP2 EQ PUSH3 0x9E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH3 0x9FB DUP2 PUSH3 0x9D0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0xA1D JUMPI PUSH3 0xA1C PUSH3 0x5D0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0xA2D DUP7 DUP3 DUP8 ADD PUSH3 0x71F JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH3 0xA40 DUP7 DUP3 DUP8 ADD PUSH3 0x9EA JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0xA64 JUMPI PUSH3 0xA63 PUSH3 0x5D5 JUMP JUMPDEST JUMPDEST PUSH3 0xA72 DUP7 DUP3 DUP8 ADD PUSH3 0x73B JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0xAB8 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0xA9B JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xAE2 DUP3 PUSH3 0xA7C JUMP JUMPDEST PUSH3 0xAEE DUP2 DUP6 PUSH3 0xA87 JUMP JUMPDEST SWAP4 POP PUSH3 0xB00 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH3 0xA98 JUMP JUMPDEST PUSH3 0xB0B DUP2 PUSH3 0xAC4 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xB50 DUP4 DUP4 PUSH3 0x86F JUMP JUMPDEST PUSH1 0x20 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xB76 DUP3 PUSH3 0xB16 JUMP JUMPDEST PUSH3 0xB82 DUP2 DUP6 PUSH3 0xB21 JUMP JUMPDEST SWAP4 POP PUSH3 0xB8F DUP4 PUSH3 0xB32 JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0xBC6 JUMPI DUP2 MLOAD PUSH3 0xBAA DUP9 DUP3 PUSH3 0xB42 JUMP JUMPDEST SWAP8 POP PUSH3 0xBB7 DUP4 PUSH3 0xB5C JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0xB93 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xBF1 DUP3 PUSH3 0x7C3 JUMP JUMPDEST PUSH3 0xBFD DUP2 DUP6 PUSH3 0xBD3 JUMP JUMPDEST SWAP4 POP PUSH3 0xC0A DUP4 PUSH3 0x7DF JUMP JUMPDEST DUP1 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0xC41 JUMPI DUP2 MLOAD PUSH3 0xC25 DUP9 DUP3 PUSH3 0x90D JUMP JUMPDEST SWAP8 POP PUSH3 0xC32 DUP4 PUSH3 0x927 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0xC0E JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP4 ADD PUSH1 0x0 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x0 DUP7 ADD MSTORE PUSH3 0xC6D DUP3 DUP3 PUSH3 0xB69 JUMP JUMPDEST SWAP2 POP POP PUSH1 0x20 DUP4 ADD MLOAD DUP5 DUP3 SUB PUSH1 0x20 DUP7 ADD MSTORE PUSH3 0xC89 DUP3 DUP3 PUSH3 0xBE4 JUMP JUMPDEST SWAP2 POP POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH3 0xCB2 DUP2 DUP6 PUSH3 0xAD5 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH3 0xCC8 DUP2 DUP5 PUSH3 0xC4E JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH3 0xD15 DUP3 PUSH3 0xAC4 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH3 0xD37 JUMPI PUSH3 0xD36 PUSH3 0xCDB JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xD4C PUSH3 0x5C6 JUMP JUMPDEST SWAP1 POP PUSH3 0xD5A DUP3 DUP3 PUSH3 0xD0A JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH3 0xD7D JUMPI PUSH3 0xD7C PUSH3 0xCDB JUMP JUMPDEST JUMPDEST PUSH3 0xD88 DUP3 PUSH3 0xAC4 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xDBB PUSH3 0xDB5 DUP5 PUSH3 0xD5F JUMP JUMPDEST PUSH3 0xD40 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH3 0xDDA JUMPI PUSH3 0xDD9 PUSH3 0xCD6 JUMP JUMPDEST JUMPDEST PUSH3 0xDE7 DUP5 DUP3 DUP6 PUSH3 0xD95 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0xE07 JUMPI PUSH3 0xE06 PUSH3 0xCD1 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH3 0xE19 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH3 0xDA4 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0xE3C JUMPI PUSH3 0xE3B PUSH3 0x5D0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0xE4C DUP6 DUP3 DUP7 ADD PUSH3 0x71F JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0xE70 JUMPI PUSH3 0xE6F PUSH3 0x5D5 JUMP JUMPDEST JUMPDEST PUSH3 0xE7E DUP6 DUP3 DUP7 ADD PUSH3 0xDEF JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH3 0xE9F PUSH1 0x0 DUP4 ADD DUP6 PUSH3 0x6D7 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x20 DUP4 ADD MSTORE PUSH3 0xEB3 DUP2 DUP5 PUSH3 0xC4E JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0xED5 JUMPI PUSH3 0xED4 PUSH3 0x5D0 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH3 0xEE5 DUP5 DUP3 DUP6 ADD PUSH3 0x71F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xF48 PUSH3 0xF42 PUSH3 0xF3C DUP5 PUSH3 0x6A3 JUMP JUMPDEST PUSH3 0xF1D JUMP JUMPDEST PUSH3 0x6A3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xF5C DUP3 PUSH3 0xF27 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0xF70 DUP3 PUSH3 0xF4F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0xF82 DUP2 PUSH3 0xF63 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH3 0xF9F PUSH1 0x0 DUP4 ADD DUP5 PUSH3 0xF77 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x3369 CODESIZE SUB DUP1 PUSH2 0x3369 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH2 0x32 SWAP2 SWAP1 PUSH2 0x15A JUMP JUMPDEST DUP1 DUP1 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x80 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE POP POP POP POP PUSH1 0x40 MLOAD PUSH2 0x76 SWAP1 PUSH2 0xD8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH2 0x92 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP PUSH2 0x187 JUMP JUMPDEST PUSH2 0x2A11 DUP1 PUSH2 0x958 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x115 DUP3 PUSH2 0xEA JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x127 DUP3 PUSH2 0x10A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x137 DUP2 PUSH2 0x11C JUMP JUMPDEST DUP2 EQ PUSH2 0x142 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x154 DUP2 PUSH2 0x12E JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x170 JUMPI PUSH2 0x16F PUSH2 0xE5 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x17E DUP5 DUP3 DUP6 ADD PUSH2 0x145 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x7AF PUSH2 0x1A9 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x190 ADD MSTORE PUSH2 0x271 ADD MSTORE PUSH2 0x7AF PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x57 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x5C JUMPI DUP1 PUSH4 0x1A0D8610 EQ PUSH2 0x8C JUMPI DUP1 PUSH4 0x1C7B4DE4 EQ PUSH2 0x96 JUMPI DUP1 PUSH4 0x4162169F EQ PUSH2 0xB4 JUMPI DUP1 PUSH4 0x41DE6830 EQ PUSH2 0xD2 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x76 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x71 SWAP2 SWAP1 PUSH2 0x44B JUMP JUMPDEST PUSH2 0xF0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x83 SWAP2 SWAP1 PUSH2 0x493 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x94 PUSH2 0x16A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x9E PUSH2 0x249 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xAB SWAP2 SWAP1 PUSH2 0x4C7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xBC PUSH2 0x26D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC9 SWAP2 SWAP1 PUSH2 0x561 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDA PUSH2 0x295 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xE7 SWAP2 SWAP1 PUSH2 0x5F3 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH32 0x41DE683000000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x163 JUMPI POP PUSH2 0x162 DUP3 PUSH2 0x29E JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x1BD70C5AA931FA900DE716024B36E36CC236A1CE16D32948668C08AA04E680F2 PUSH2 0x1C6 PUSH32 0x0 ADDRESS PUSH2 0x1B8 PUSH2 0x308 JUMP JUMPDEST DUP5 PUSH2 0x1C1 PUSH2 0x310 JUMP JUMPDEST PUSH2 0x31D JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x9CBF9E36 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x22E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x242 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH32 0x1BD70C5AA931FA900DE716024B36E36CC236A1CE16D32948668C08AA04E680F2 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x0 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH1 0x0 DUP1 CALLDATASIZE SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0xFDEF9106 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH1 0x40 MLOAD DUP7 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x35E SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x68D JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x37B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x39F SWAP2 SWAP1 PUSH2 0x707 JUMP JUMPDEST PUSH2 0x3E6 JUMPI DUP6 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH32 0x32DBE3B400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x3DD SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x734 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x428 DUP2 PUSH2 0x3F3 JUMP JUMPDEST DUP2 EQ PUSH2 0x433 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x445 DUP2 PUSH2 0x41F JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x461 JUMPI PUSH2 0x460 PUSH2 0x3EE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x46F DUP5 DUP3 DUP6 ADD PUSH2 0x436 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x48D DUP2 PUSH2 0x478 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x4A8 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x484 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4C1 DUP2 PUSH2 0x4AE JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x4DC PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x4B8 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x527 PUSH2 0x522 PUSH2 0x51D DUP5 PUSH2 0x4E2 JUMP JUMPDEST PUSH2 0x502 JUMP JUMPDEST PUSH2 0x4E2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x539 DUP3 PUSH2 0x50C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x54B DUP3 PUSH2 0x52E JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x55B DUP2 PUSH2 0x540 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x576 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x552 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x3 DUP2 LT PUSH2 0x5BC JUMPI PUSH2 0x5BB PUSH2 0x57C JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP PUSH2 0x5CD DUP3 PUSH2 0x5AB JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5DD DUP3 PUSH2 0x5BF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x5ED DUP2 PUSH2 0x5D2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x608 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x5E4 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x619 DUP3 PUSH2 0x4E2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x629 DUP2 PUSH2 0x60E JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x66C DUP4 DUP6 PUSH2 0x62F JUMP JUMPDEST SWAP4 POP PUSH2 0x679 DUP4 DUP6 DUP5 PUSH2 0x640 JUMP JUMPDEST PUSH2 0x682 DUP4 PUSH2 0x64F JUMP JUMPDEST DUP5 ADD SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x6A2 PUSH1 0x0 DUP4 ADD DUP9 PUSH2 0x620 JUMP JUMPDEST PUSH2 0x6AF PUSH1 0x20 DUP4 ADD DUP8 PUSH2 0x620 JUMP JUMPDEST PUSH2 0x6BC PUSH1 0x40 DUP4 ADD DUP7 PUSH2 0x4B8 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x6CF DUP2 DUP5 DUP7 PUSH2 0x660 JUMP JUMPDEST SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x6E4 DUP2 PUSH2 0x478 JUMP JUMPDEST DUP2 EQ PUSH2 0x6EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x701 DUP2 PUSH2 0x6DB JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x71D JUMPI PUSH2 0x71C PUSH2 0x3EE JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x72B DUP5 DUP3 DUP6 ADD PUSH2 0x6F2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x749 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x620 JUMP JUMPDEST PUSH2 0x756 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x620 JUMP JUMPDEST PUSH2 0x763 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x620 JUMP JUMPDEST PUSH2 0x770 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x4B8 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB3 0xF8 0xDC BYTE PUSH14 0x3B7ADE4EE08F458FDB6E38376232 RETURNDATASIZE MSTORE 0xD0 LT PUSH17 0xCAEC8FE846C033E764736F6C6343000813 STOP CALLER PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xF DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x4661726D204C656E646572204E46540000000000000000000000000000000000 DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x464C4E0000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE POP DUP2 PUSH1 0x0 SWAP1 DUP2 PUSH3 0x8F SWAP2 SWAP1 PUSH3 0x324 JUMP JUMPDEST POP DUP1 PUSH1 0x1 SWAP1 DUP2 PUSH3 0xA1 SWAP2 SWAP1 PUSH3 0x324 JUMP JUMPDEST POP POP POP PUSH3 0x40B JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH3 0x12C JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x142 JUMPI PUSH3 0x141 PUSH3 0xE4 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH3 0x1AC PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH3 0x16D JUMP JUMPDEST PUSH3 0x1B8 DUP7 DUP4 PUSH3 0x16D JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x205 PUSH3 0x1FF PUSH3 0x1F9 DUP5 PUSH3 0x1D0 JUMP JUMPDEST PUSH3 0x1DA JUMP JUMPDEST PUSH3 0x1D0 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 0x221 DUP4 PUSH3 0x1E4 JUMP JUMPDEST PUSH3 0x239 PUSH3 0x230 DUP3 PUSH3 0x20C JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH3 0x17A JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH3 0x250 PUSH3 0x241 JUMP JUMPDEST PUSH3 0x25D DUP2 DUP5 DUP5 PUSH3 0x216 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x285 JUMPI PUSH3 0x279 PUSH1 0x0 DUP3 PUSH3 0x246 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH3 0x263 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x2D4 JUMPI PUSH3 0x29E DUP2 PUSH3 0x148 JUMP JUMPDEST PUSH3 0x2A9 DUP5 PUSH3 0x15D JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH3 0x2B9 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH3 0x2D1 PUSH3 0x2C8 DUP6 PUSH3 0x15D JUMP JUMPDEST DUP4 ADD DUP3 PUSH3 0x262 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x2F9 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH3 0x2D9 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH3 0x314 DUP4 DUP4 PUSH3 0x2E6 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0x32F DUP3 PUSH3 0xAA JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH3 0x34B JUMPI PUSH3 0x34A PUSH3 0xB5 JUMP JUMPDEST JUMPDEST PUSH3 0x357 DUP3 SLOAD PUSH3 0x113 JUMP JUMPDEST PUSH3 0x364 DUP3 DUP3 DUP6 PUSH3 0x289 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x39C JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x387 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH3 0x393 DUP6 DUP3 PUSH3 0x306 JUMP JUMPDEST DUP7 SSTORE POP PUSH3 0x403 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH3 0x3AC DUP7 PUSH3 0x148 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x3D6 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH3 0x3AF JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH3 0x3F6 JUMPI DUP5 DUP10 ADD MLOAD PUSH3 0x3F2 PUSH1 0x1F DUP10 AND DUP3 PUSH3 0x2E6 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x25F6 DUP1 PUSH3 0x41B PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xEA JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0x66 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x249 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x265 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x281 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x2B1 JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1F1 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x221 JUMPI DUP1 PUSH4 0x9CBF9E36 EQ PUSH2 0x23F JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0xC8 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x16D JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x189 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x1A5 JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x1C1 JUMPI PUSH2 0xEA JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x11F JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x13D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x109 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x104 SWAP2 SWAP1 PUSH2 0x18F2 JUMP JUMPDEST PUSH2 0x2E1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x116 SWAP2 SWAP1 PUSH2 0x193A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x127 PUSH2 0x342 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x134 SWAP2 SWAP1 PUSH2 0x19E5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x157 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x152 SWAP2 SWAP1 PUSH2 0x1A3D JUMP JUMPDEST PUSH2 0x3D4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x164 SWAP2 SWAP1 PUSH2 0x1AAB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x187 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x182 SWAP2 SWAP1 PUSH2 0x1AF2 JUMP JUMPDEST PUSH2 0x41A JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1A3 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x19E SWAP2 SWAP1 PUSH2 0x1B32 JUMP JUMPDEST PUSH2 0x531 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1BF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1BA SWAP2 SWAP1 PUSH2 0x1B32 JUMP JUMPDEST PUSH2 0x591 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1DB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1D6 SWAP2 SWAP1 PUSH2 0x1A3D JUMP JUMPDEST PUSH2 0x5B1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1E8 SWAP2 SWAP1 PUSH2 0x1AAB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x20B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x206 SWAP2 SWAP1 PUSH2 0x1B85 JUMP JUMPDEST PUSH2 0x637 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x218 SWAP2 SWAP1 PUSH2 0x1BC1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x229 PUSH2 0x6EE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x236 SWAP2 SWAP1 PUSH2 0x19E5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x247 PUSH2 0x780 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x263 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x25E SWAP2 SWAP1 PUSH2 0x1C08 JUMP JUMPDEST PUSH2 0x7A5 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x27F PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x27A SWAP2 SWAP1 PUSH2 0x1D7D JUMP JUMPDEST PUSH2 0x7BB JUMP JUMPDEST STOP JUMPDEST PUSH2 0x29B PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x296 SWAP2 SWAP1 PUSH2 0x1A3D JUMP JUMPDEST PUSH2 0x81D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2A8 SWAP2 SWAP1 PUSH2 0x19E5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2CB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2C6 SWAP2 SWAP1 PUSH2 0x1E00 JUMP JUMPDEST PUSH2 0x92F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2D8 SWAP2 SWAP1 PUSH2 0x193A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 PUSH4 0x49064906 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x33B JUMPI POP PUSH2 0x33A DUP3 PUSH2 0x9C3 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x351 SWAP1 PUSH2 0x1E6F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x37D SWAP1 PUSH2 0x1E6F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3CA JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x39F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3CA JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3AD JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x3DF DUP3 PUSH2 0xAA5 JUMP JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x425 DUP3 PUSH2 0x5B1 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x495 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x48C SWAP1 PUSH2 0x1F12 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x4B4 PUSH2 0xAF0 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x4E3 JUMPI POP PUSH2 0x4E2 DUP2 PUSH2 0x4DD PUSH2 0xAF0 JUMP JUMPDEST PUSH2 0x92F JUMP JUMPDEST JUMPDEST PUSH2 0x522 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x519 SWAP1 PUSH2 0x1FA4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x52C DUP4 DUP4 PUSH2 0xAF8 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x542 PUSH2 0x53C PUSH2 0xAF0 JUMP JUMPDEST DUP3 PUSH2 0xBB1 JUMP JUMPDEST PUSH2 0x581 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x578 SWAP1 PUSH2 0x2036 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x58C DUP4 DUP4 DUP4 PUSH2 0xC46 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x5AC DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x7BB JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x5BD DUP4 PUSH2 0xF3F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x62E JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x625 SWAP1 PUSH2 0x20A2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x6A7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x69E SWAP1 PUSH2 0x2134 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x6FD SWAP1 PUSH2 0x1E6F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x729 SWAP1 PUSH2 0x1E6F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x776 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x74B JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x776 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x759 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x78A PUSH1 0x7 PUSH2 0xF7C JUMP JUMPDEST PUSH1 0x0 PUSH2 0x796 PUSH1 0x7 PUSH2 0xF92 JUMP JUMPDEST SWAP1 POP PUSH2 0x7A2 CALLER DUP3 PUSH2 0xFA0 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 0x7B7 PUSH2 0x7B0 PUSH2 0xAF0 JUMP JUMPDEST DUP4 DUP4 PUSH2 0x11BD JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x7CC PUSH2 0x7C6 PUSH2 0xAF0 JUMP JUMPDEST DUP4 PUSH2 0xBB1 JUMP JUMPDEST PUSH2 0x80B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x802 SWAP1 PUSH2 0x2036 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x817 DUP5 DUP5 DUP5 DUP5 PUSH2 0x1329 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x828 DUP3 PUSH2 0xAA5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH2 0x848 SWAP1 PUSH2 0x1E6F JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x874 SWAP1 PUSH2 0x1E6F JUMP JUMPDEST DUP1 ISZERO PUSH2 0x8C1 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x896 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x8C1 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x8A4 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH2 0x8D2 PUSH2 0x1385 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x8E7 JUMPI DUP2 SWAP3 POP POP POP PUSH2 0x92A JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x91C JUMPI DUP1 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x904 SWAP3 SWAP2 SWAP1 PUSH2 0x2190 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP3 POP POP POP PUSH2 0x92A JUMP JUMPDEST PUSH2 0x925 DUP5 PUSH2 0x139C JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0xA8E JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0xA9E JUMPI POP PUSH2 0xA9D DUP3 PUSH2 0x1404 JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0xAAE DUP2 PUSH2 0x146E JUMP JUMPDEST PUSH2 0xAED JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xAE4 SWAP1 PUSH2 0x20A2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST DUP2 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB6B DUP4 PUSH2 0x5B1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xBBD DUP4 PUSH2 0x5B1 JUMP JUMPDEST SWAP1 POP DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0xBFF JUMPI POP PUSH2 0xBFE DUP2 DUP6 PUSH2 0x92F JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0xC3D JUMPI POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC25 DUP5 PUSH2 0x3D4 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC66 DUP3 PUSH2 0x5B1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCBC JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCB3 SWAP1 PUSH2 0x2226 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xD2B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xD22 SWAP1 PUSH2 0x22B8 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xD38 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x14AF JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xD58 DUP3 PUSH2 0x5B1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xDAE JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xDA5 SWAP1 PUSH2 0x2226 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x4 PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 SSTORE PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0xF3A DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x14B5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x0 ADD PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x100F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1006 SWAP1 PUSH2 0x2324 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1018 DUP2 PUSH2 0x146E JUMP JUMPDEST ISZERO PUSH2 0x1058 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x104F SWAP1 PUSH2 0x2390 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x1066 PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x14AF JUMP JUMPDEST PUSH2 0x106F DUP2 PUSH2 0x146E JUMP JUMPDEST ISZERO PUSH2 0x10AF JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x10A6 SWAP1 PUSH2 0x2390 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 0x11B9 PUSH1 0x0 DUP4 DUP4 PUSH1 0x1 PUSH2 0x14B5 JUMP JUMPDEST POP POP JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x122B JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1222 SWAP1 PUSH2 0x23FC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0x131C SWAP2 SWAP1 PUSH2 0x193A JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x1334 DUP5 DUP5 DUP5 PUSH2 0xC46 JUMP JUMPDEST PUSH2 0x1340 DUP5 DUP5 DUP5 DUP5 PUSH2 0x14BB JUMP JUMPDEST PUSH2 0x137F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1376 SWAP1 PUSH2 0x248E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x13A7 DUP3 PUSH2 0xAA5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x13B1 PUSH2 0x1385 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x13D1 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x13FC JUMP JUMPDEST DUP1 PUSH2 0x13DB DUP5 PUSH2 0x1642 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x13EC SWAP3 SWAP2 SWAP1 PUSH2 0x2190 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1490 DUP4 PUSH2 0xF3F JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x14DC DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x1710 JUMP JUMPDEST ISZERO PUSH2 0x1635 JUMPI DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 PUSH2 0x1505 PUSH2 0xAF0 JUMP JUMPDEST DUP8 DUP7 DUP7 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1527 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2503 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1563 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1560 SWAP2 SWAP1 PUSH2 0x2564 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x15E5 JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1593 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1598 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x15DD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x15D4 SWAP1 PUSH2 0x248E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP2 POP POP PUSH2 0x163A JUMP JUMPDEST PUSH1 0x1 SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x1651 DUP5 PUSH2 0x1733 JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1670 JUMPI PUSH2 0x166F PUSH2 0x1C52 JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x16A2 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x1705 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x16F9 JUMPI PUSH2 0x16F8 PUSH2 0x2591 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 SUB PUSH2 0x16B0 JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x1791 JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x1787 JUMPI PUSH2 0x1786 PUSH2 0x2591 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x17CE JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x17C4 JUMPI PUSH2 0x17C3 PUSH2 0x2591 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x17FD JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x17F3 JUMPI PUSH2 0x17F2 PUSH2 0x2591 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x1826 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x181C JUMPI PUSH2 0x181B PUSH2 0x2591 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x184B JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x1841 JUMPI PUSH2 0x1840 PUSH2 0x2591 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x186E JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x1864 JUMPI PUSH2 0x1863 PUSH2 0x2591 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x187D JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x18CF DUP2 PUSH2 0x189A JUMP JUMPDEST DUP2 EQ PUSH2 0x18DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x18EC DUP2 PUSH2 0x18C6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1908 JUMPI PUSH2 0x1907 PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1916 DUP5 DUP3 DUP6 ADD PUSH2 0x18DD JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1934 DUP2 PUSH2 0x191F JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x194F PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x192B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x198F JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x1974 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19B7 DUP3 PUSH2 0x1955 JUMP JUMPDEST PUSH2 0x19C1 DUP2 DUP6 PUSH2 0x1960 JUMP JUMPDEST SWAP4 POP PUSH2 0x19D1 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1971 JUMP JUMPDEST PUSH2 0x19DA DUP2 PUSH2 0x199B JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x19FF DUP2 DUP5 PUSH2 0x19AC JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1A1A DUP2 PUSH2 0x1A07 JUMP JUMPDEST DUP2 EQ PUSH2 0x1A25 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1A37 DUP2 PUSH2 0x1A11 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1A53 JUMPI PUSH2 0x1A52 PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1A61 DUP5 DUP3 DUP6 ADD PUSH2 0x1A28 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1A95 DUP3 PUSH2 0x1A6A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1AA5 DUP2 PUSH2 0x1A8A JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1AC0 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1A9C JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1ACF DUP2 PUSH2 0x1A8A JUMP JUMPDEST DUP2 EQ PUSH2 0x1ADA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1AEC DUP2 PUSH2 0x1AC6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1B09 JUMPI PUSH2 0x1B08 PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1B17 DUP6 DUP3 DUP7 ADD PUSH2 0x1ADD JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1B28 DUP6 DUP3 DUP7 ADD PUSH2 0x1A28 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1B4B JUMPI PUSH2 0x1B4A PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1B59 DUP7 DUP3 DUP8 ADD PUSH2 0x1ADD JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x1B6A DUP7 DUP3 DUP8 ADD PUSH2 0x1ADD JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x1B7B DUP7 DUP3 DUP8 ADD PUSH2 0x1A28 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1B9B JUMPI PUSH2 0x1B9A PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1BA9 DUP5 DUP3 DUP6 ADD PUSH2 0x1ADD JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1BBB DUP2 PUSH2 0x1A07 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1BD6 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1BB2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x1BE5 DUP2 PUSH2 0x191F JUMP JUMPDEST DUP2 EQ PUSH2 0x1BF0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x1C02 DUP2 PUSH2 0x1BDC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1C1F JUMPI PUSH2 0x1C1E PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1C2D DUP6 DUP3 DUP7 ADD PUSH2 0x1ADD JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1C3E DUP6 DUP3 DUP7 ADD PUSH2 0x1BF3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x1C8A DUP3 PUSH2 0x199B JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x1CA9 JUMPI PUSH2 0x1CA8 PUSH2 0x1C52 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1CBC PUSH2 0x1886 JUMP JUMPDEST SWAP1 POP PUSH2 0x1CC8 DUP3 DUP3 PUSH2 0x1C81 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1CE8 JUMPI PUSH2 0x1CE7 PUSH2 0x1C52 JUMP JUMPDEST JUMPDEST PUSH2 0x1CF1 DUP3 PUSH2 0x199B JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1D20 PUSH2 0x1D1B DUP5 PUSH2 0x1CCD JUMP JUMPDEST PUSH2 0x1CB2 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x1D3C JUMPI PUSH2 0x1D3B PUSH2 0x1C4D JUMP JUMPDEST JUMPDEST PUSH2 0x1D47 DUP5 DUP3 DUP6 PUSH2 0x1CFE JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1D64 JUMPI PUSH2 0x1D63 PUSH2 0x1C48 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x1D74 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x1D0D JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1D97 JUMPI PUSH2 0x1D96 PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1DA5 DUP8 DUP3 DUP9 ADD PUSH2 0x1ADD JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x1DB6 DUP8 DUP3 DUP9 ADD PUSH2 0x1ADD JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x1DC7 DUP8 DUP3 DUP9 ADD PUSH2 0x1A28 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1DE8 JUMPI PUSH2 0x1DE7 PUSH2 0x1895 JUMP JUMPDEST JUMPDEST PUSH2 0x1DF4 DUP8 DUP3 DUP9 ADD PUSH2 0x1D4F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1E17 JUMPI PUSH2 0x1E16 PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x1E25 DUP6 DUP3 DUP7 ADD PUSH2 0x1ADD JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1E36 DUP6 DUP3 DUP7 ADD PUSH2 0x1ADD JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x1E87 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1E9A JUMPI PUSH2 0x1E99 PUSH2 0x1E40 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76616C20746F2063757272656E74206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7200000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1EFC PUSH1 0x21 DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x1F07 DUP3 PUSH2 0x1EA0 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1F2B DUP2 PUSH2 0x1EEF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F76652063616C6C6572206973206E6F7420746F PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6B656E206F776E6572206F7220617070726F76656420666F7220616C6C000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1F8E PUSH1 0x3D DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x1F99 DUP3 PUSH2 0x1F32 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x1FBD DUP2 PUSH2 0x1F81 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2063616C6C6572206973206E6F7420746F6B656E206F776E65 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x72206F7220617070726F76656400000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2020 PUSH1 0x2D DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x202B DUP3 PUSH2 0x1FC4 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x204F DUP2 PUSH2 0x2013 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20696E76616C696420746F6B656E2049440000000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x208C PUSH1 0x18 DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x2097 DUP3 PUSH2 0x2056 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x20BB DUP2 PUSH2 0x207F JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A2061646472657373207A65726F206973206E6F742061207661 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6C6964206F776E65720000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x211E PUSH1 0x29 DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x2129 DUP3 PUSH2 0x20C2 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x214D DUP2 PUSH2 0x2111 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x216A DUP3 PUSH2 0x1955 JUMP JUMPDEST PUSH2 0x2174 DUP2 DUP6 PUSH2 0x2154 JUMP JUMPDEST SWAP4 POP PUSH2 0x2184 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1971 JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x219C DUP3 DUP6 PUSH2 0x215F JUMP JUMPDEST SWAP2 POP PUSH2 0x21A8 DUP3 DUP5 PUSH2 0x215F JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E736665722066726F6D20696E636F727265637420 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x6F776E6572000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2210 PUSH1 0x25 DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x221B DUP3 PUSH2 0x21B4 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x223F DUP2 PUSH2 0x2203 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F20746865207A65726F20616464 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x7265737300000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x22A2 PUSH1 0x24 DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x22AD DUP3 PUSH2 0x2246 JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x22D1 DUP2 PUSH2 0x2295 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A206D696E7420746F20746865207A65726F2061646472657373 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x230E PUSH1 0x20 DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x2319 DUP3 PUSH2 0x22D8 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x233D DUP2 PUSH2 0x2301 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20746F6B656E20616C7265616479206D696E74656400000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x237A PUSH1 0x1C DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x2385 DUP3 PUSH2 0x2344 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x23A9 DUP2 PUSH2 0x236D JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A20617070726F766520746F2063616C6C657200000000000000 PUSH1 0x0 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23E6 PUSH1 0x19 DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x23F1 DUP3 PUSH2 0x23B0 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x2415 DUP2 PUSH2 0x23D9 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4552433732313A207472616E7366657220746F206E6F6E204552433732315265 PUSH1 0x0 DUP3 ADD MSTORE PUSH32 0x63656976657220696D706C656D656E7465720000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2478 PUSH1 0x32 DUP4 PUSH2 0x1960 JUMP JUMPDEST SWAP2 POP PUSH2 0x2483 DUP3 PUSH2 0x241C JUMP JUMPDEST PUSH1 0x40 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x24A7 DUP2 PUSH2 0x246B JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x24D5 DUP3 PUSH2 0x24AE JUMP JUMPDEST PUSH2 0x24DF DUP2 DUP6 PUSH2 0x24B9 JUMP JUMPDEST SWAP4 POP PUSH2 0x24EF DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x1971 JUMP JUMPDEST PUSH2 0x24F8 DUP2 PUSH2 0x199B JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2518 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x1A9C JUMP JUMPDEST PUSH2 0x2525 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x1A9C JUMP JUMPDEST PUSH2 0x2532 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x1BB2 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x2544 DUP2 DUP5 PUSH2 0x24CA JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x255E DUP2 PUSH2 0x18C6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x257A JUMPI PUSH2 0x2579 PUSH2 0x1890 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2588 DUP5 DUP3 DUP6 ADD PUSH2 0x254F JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP10 SIGNEXTEND DUP4 EXTCODESIZE 0xF6 0xDE CALLCODE 0x22 0xDC 0xDF DUP11 PUSH31 0x75CBD7BC6AF5953D31717801D0762BFF0D318AF864736F6C63430008130033 LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP9 PUSH10 0x48635086E6648DFFB15E BYTE 0xBB 0xC 0x2C 0x2A SELFDESTRUCT 0xF PUSH17 0xAD7B0FA2B0DEE8CD6B55877064736F6C63 NUMBER STOP ADDMOD SGT STOP CALLER ","sourceMap":"260:1232:35:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1858:215:7;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1430:60:35;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;928:498;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;773:261:7;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;304:620:35;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;:::-;;;;;;;;1858:215:7;1944:4;1995:30;1979:46;;;:12;:46;;;;:87;;;;2029:37;2053:12;2029:23;:37::i;:::-;1979:87;1960:106;;1858:215;;;:::o;1430:60:35:-;1479:7;1430:60;:::o;928:498::-;1040:56;1160:1;1118:44;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;1104:58;;1186:235;;;;;;;;1241:30;1186:235;;;;;;;;:::i;:::-;;;;;;1286:8;:15;;;;;;;;;;:::i;:::-;1186:235;;;;;;1314:4;1186:235;;;;;;367:1:1;1186:235:35;;;;;;1385:29;1186:235;;;1169:11;1181:1;1169:14;;;;;;;;:::i;:::-;;;;;;;:252;;;;928:498;;;;:::o;773:261:7:-;961:21;984:42;;:::i;:::-;773:261;;;;;;:::o;304:620:35:-;391:14;407:42;;:::i;:::-;497:4;474:29;;;;;:::i;:::-;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;457:47;;511:62;618:1;576:44;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;511:109;;644:225;;;;;;;;699:29;644:225;;;;;;;;:::i;:::-;;;;;;743:6;644:225;;;;;;762:4;644:225;;;;;;367:1:1;644:225:35;;;;;;833:29;644:225;;;627:11;639:1;627:14;;;;;;;;:::i;:::-;;;;;;;:242;;;;908:11;876:17;:29;;:43;;;;451:473;304:620;;;;;:::o;829:155:29:-;914:4;952:25;937:40;;;:11;:40;;;;930:47;;829:155;;;:::o;-1:-1:-1:-;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;;:::o;7:75:36:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:126::-;1555:7;1595:42;1588:5;1584:54;1573:65;;1518:126;;;:::o;1650:96::-;1687:7;1716:24;1734:5;1716:24;:::i;:::-;1705:35;;1650:96;;;:::o;1752:118::-;1839:24;1857:5;1839:24;:::i;:::-;1834:3;1827:37;1752:118;;:::o;1876:222::-;1969:4;2007:2;1996:9;1992:18;1984:26;;2020:71;2088:1;2077:9;2073:17;2064:6;2020:71;:::i;:::-;1876:222;;;;:::o;2104:122::-;2177:24;2195:5;2177:24;:::i;:::-;2170:5;2167:35;2157:63;;2216:1;2213;2206:12;2157:63;2104:122;:::o;2232:139::-;2278:5;2316:6;2303:20;2294:29;;2332:33;2359:5;2332:33;:::i;:::-;2232:139;;;;:::o;2377:117::-;2486:1;2483;2476:12;2540:235;2617:5;2658:2;2649:6;2644:3;2640:16;2636:25;2633:112;;;2664:79;;:::i;:::-;2633:112;2763:6;2754:15;;2540:235;;;;:::o;2781:696::-;2880:6;2888;2937:2;2925:9;2916:7;2912:23;2908:32;2905:119;;;2943:79;;:::i;:::-;2905:119;3063:1;3088:53;3133:7;3124:6;3113:9;3109:22;3088:53;:::i;:::-;3078:63;;3034:117;3218:2;3207:9;3203:18;3190:32;3249:18;3241:6;3238:30;3235:117;;;3271:79;;:::i;:::-;3235:117;3376:84;3452:7;3443:6;3432:9;3428:22;3376:84;:::i;:::-;3366:94;;3161:309;2781:696;;;;;:::o;3483:152::-;3588:6;3622:5;3616:12;3606:22;;3483:152;;;:::o;3641:222::-;3778:11;3812:6;3807:3;3800:19;3852:4;3847:3;3843:14;3828:29;;3641:222;;;;:::o;3869:170::-;3974:4;3997:3;3989:11;;4027:4;4022:3;4018:14;4010:22;;3869:170;;;:::o;4045:180::-;4093:77;4090:1;4083:88;4190:4;4187:1;4180:15;4214:4;4211:1;4204:15;4231:118;4317:1;4310:5;4307:12;4297:46;;4323:18;;:::i;:::-;4297:46;4231:118;:::o;4355:137::-;4405:7;4434:5;4423:16;;4440:46;4480:5;4440:46;:::i;:::-;4355:137;;;:::o;4498:::-;4559:9;4592:37;4623:5;4592:37;:::i;:::-;4579:50;;4498:137;;;:::o;4641:143::-;4729:48;4771:5;4729:48;:::i;:::-;4724:3;4717:61;4641:143;;:::o;4790:108::-;4867:24;4885:5;4867:24;:::i;:::-;4862:3;4855:37;4790:108;;:::o;4904:77::-;4941:7;4970:5;4959:16;;4904:77;;;:::o;4987:108::-;5064:24;5082:5;5064:24;:::i;:::-;5059:3;5052:37;4987:108;;:::o;5197:1074::-;5360:4;5355:3;5351:14;5452:4;5445:5;5441:16;5435:23;5471:74;5539:4;5534:3;5530:14;5516:12;5471:74;:::i;:::-;5375:180;5638:4;5631:5;5627:16;5621:23;5657:63;5714:4;5709:3;5705:14;5691:12;5657:63;:::i;:::-;5565:165;5811:4;5804:5;5800:16;5794:23;5830:63;5887:4;5882:3;5878:14;5864:12;5830:63;:::i;:::-;5740:163;5990:4;5983:5;5979:16;5973:23;6009:63;6066:4;6061:3;6057:14;6043:12;6009:63;:::i;:::-;5913:169;6172:4;6165:5;6161:16;6155:23;6191:63;6248:4;6243:3;6239:14;6225:12;6191:63;:::i;:::-;6092:172;5329:942;5197:1074;;:::o;6277:331::-;6422:10;6443:122;6561:3;6553:6;6443:122;:::i;:::-;6597:4;6592:3;6588:14;6574:28;;6277:331;;;;:::o;6614:151::-;6722:4;6754;6749:3;6745:14;6737:22;;6614:151;;;:::o;6871:1036::-;7066:3;7095:92;7181:5;7095:92;:::i;:::-;7203:124;7320:6;7315:3;7203:124;:::i;:::-;7196:131;;7351:94;7439:5;7351:94;:::i;:::-;7468:7;7499:1;7484:398;7509:6;7506:1;7503:13;7484:398;;;7585:6;7579:13;7612:139;7747:3;7732:13;7612:139;:::i;:::-;7605:146;;7774:98;7865:6;7774:98;:::i;:::-;7764:108;;7544:338;7531:1;7528;7524:9;7519:14;;7484:398;;;7488:14;7898:3;7891:10;;7071:836;;;6871:1036;;;;:::o;7913:525::-;8132:4;8170:2;8159:9;8155:18;8147:26;;8219:9;8213:4;8209:20;8205:1;8194:9;8190:17;8183:47;8247:184;8426:4;8417:6;8247:184;:::i;:::-;8239:192;;7913:525;;;;:::o;8444:89::-;8480:7;8520:6;8513:5;8509:18;8498:29;;8444:89;;;:::o;8539:120::-;8611:23;8628:5;8611:23;:::i;:::-;8604:5;8601:34;8591:62;;8649:1;8646;8639:12;8591:62;8539:120;:::o;8665:137::-;8710:5;8748:6;8735:20;8726:29;;8764:32;8790:5;8764:32;:::i;:::-;8665:137;;;;:::o;8808:839::-;8915:6;8923;8931;8980:2;8968:9;8959:7;8955:23;8951:32;8948:119;;;8986:79;;:::i;:::-;8948:119;9106:1;9131:53;9176:7;9167:6;9156:9;9152:22;9131:53;:::i;:::-;9121:63;;9077:117;9233:2;9259:52;9303:7;9294:6;9283:9;9279:22;9259:52;:::i;:::-;9249:62;;9204:117;9388:2;9377:9;9373:18;9360:32;9419:18;9411:6;9408:30;9405:117;;;9441:79;;:::i;:::-;9405:117;9546:84;9622:7;9613:6;9602:9;9598:22;9546:84;:::i;:::-;9536:94;;9331:309;8808:839;;;;;:::o;9653:98::-;9704:6;9738:5;9732:12;9722:22;;9653:98;;;:::o;9757:168::-;9840:11;9874:6;9869:3;9862:19;9914:4;9909:3;9905:14;9890:29;;9757:168;;;;:::o;9931:246::-;10012:1;10022:113;10036:6;10033:1;10030:13;10022:113;;;10121:1;10116:3;10112:11;10106:18;10102:1;10097:3;10093:11;10086:39;10058:2;10055:1;10051:10;10046:15;;10022:113;;;10169:1;10160:6;10155:3;10151:16;10144:27;9993:184;9931:246;;;:::o;10183:102::-;10224:6;10275:2;10271:7;10266:2;10259:5;10255:14;10251:28;10241:38;;10183:102;;;:::o;10291:373::-;10377:3;10405:38;10437:5;10405:38;:::i;:::-;10459:70;10522:6;10517:3;10459:70;:::i;:::-;10452:77;;10538:65;10596:6;10591:3;10584:4;10577:5;10573:16;10538:65;:::i;:::-;10628:29;10650:6;10628:29;:::i;:::-;10623:3;10619:39;10612:46;;10381:283;10291:373;;;;:::o;10670:114::-;10737:6;10771:5;10765:12;10755:22;;10670:114;;;:::o;10790:174::-;10879:11;10913:6;10908:3;10901:19;10953:4;10948:3;10944:14;10929:29;;10790:174;;;;:::o;10970:132::-;11037:4;11060:3;11052:11;;11090:4;11085:3;11081:14;11073:22;;10970:132;;;:::o;11108:179::-;11177:10;11198:46;11240:3;11232:6;11198:46;:::i;:::-;11276:4;11271:3;11267:14;11253:28;;11108:179;;;;:::o;11293:113::-;11363:4;11395;11390:3;11386:14;11378:22;;11293:113;;;:::o;11442:712::-;11551:3;11580:54;11628:5;11580:54;:::i;:::-;11650:76;11719:6;11714:3;11650:76;:::i;:::-;11643:83;;11750:56;11800:5;11750:56;:::i;:::-;11829:7;11860:1;11845:284;11870:6;11867:1;11864:13;11845:284;;;11946:6;11940:13;11973:63;12032:3;12017:13;11973:63;:::i;:::-;11966:70;;12059:60;12112:6;12059:60;:::i;:::-;12049:70;;11905:224;11892:1;11889;11885:9;11880:14;;11845:284;;;11849:14;12145:3;12138:10;;11556:598;;;11442:712;;;;:::o;12160:212::-;12287:11;12321:6;12316:3;12309:19;12361:4;12356:3;12352:14;12337:29;;12160:212;;;;:::o;12478:1016::-;12663:3;12692:92;12778:5;12692:92;:::i;:::-;12800:114;12907:6;12902:3;12800:114;:::i;:::-;12793:121;;12938:94;13026:5;12938:94;:::i;:::-;13055:7;13086:1;13071:398;13096:6;13093:1;13090:13;13071:398;;;13172:6;13166:13;13199:139;13334:3;13319:13;13199:139;:::i;:::-;13192:146;;13361:98;13452:6;13361:98;:::i;:::-;13351:108;;13131:338;13118:1;13115;13111:9;13106:14;;13071:398;;;13075:14;13485:3;13478:10;;12668:826;;;12478:1016;;;;:::o;13586:841::-;13723:3;13759:4;13754:3;13750:14;13849:4;13842:5;13838:16;13832:23;13902:3;13896:4;13892:14;13885:4;13880:3;13876:14;13869:38;13928:103;14026:4;14012:12;13928:103;:::i;:::-;13920:111;;13774:268;14131:4;14124:5;14120:16;14114:23;14184:3;14178:4;14174:14;14167:4;14162:3;14158:14;14151:38;14210:179;14384:4;14370:12;14210:179;:::i;:::-;14202:187;;14052:348;14417:4;14410:11;;13728:699;13586:841;;;;:::o;14433:606::-;14640:4;14678:2;14667:9;14663:18;14655:26;;14727:9;14721:4;14717:20;14713:1;14702:9;14698:17;14691:47;14755:76;14826:4;14817:6;14755:76;:::i;:::-;14747:84;;14878:9;14872:4;14868:20;14863:2;14852:9;14848:18;14841:48;14906:126;15027:4;15018:6;14906:126;:::i;:::-;14898:134;;14433:606;;;;;:::o;15045:117::-;15154:1;15151;15144:12;15168:117;15277:1;15274;15267:12;15291:180;15339:77;15336:1;15329:88;15436:4;15433:1;15426:15;15460:4;15457:1;15450:15;15477:281;15560:27;15582:4;15560:27;:::i;:::-;15552:6;15548:40;15690:6;15678:10;15675:22;15654:18;15642:10;15639:34;15636:62;15633:88;;;15701:18;;:::i;:::-;15633:88;15741:10;15737:2;15730:22;15520:238;15477:281;;:::o;15764:129::-;15798:6;15825:20;;:::i;:::-;15815:30;;15854:33;15882:4;15874:6;15854:33;:::i;:::-;15764:129;;;:::o;15899:307::-;15960:4;16050:18;16042:6;16039:30;16036:56;;;16072:18;;:::i;:::-;16036:56;16110:29;16132:6;16110:29;:::i;:::-;16102:37;;16194:4;16188;16184:15;16176:23;;15899:307;;;:::o;16212:146::-;16309:6;16304:3;16299;16286:30;16350:1;16341:6;16336:3;16332:16;16325:27;16212:146;;;:::o;16364:423::-;16441:5;16466:65;16482:48;16523:6;16482:48;:::i;:::-;16466:65;:::i;:::-;16457:74;;16554:6;16547:5;16540:21;16592:4;16585:5;16581:16;16630:3;16621:6;16616:3;16612:16;16609:25;16606:112;;;16637:79;;:::i;:::-;16606:112;16727:54;16774:6;16769:3;16764;16727:54;:::i;:::-;16447:340;16364:423;;;;;:::o;16806:338::-;16861:5;16910:3;16903:4;16895:6;16891:17;16887:27;16877:122;;16918:79;;:::i;:::-;16877:122;17035:6;17022:20;17060:78;17134:3;17126:6;17119:4;17111:6;17107:17;17060:78;:::i;:::-;17051:87;;16867:277;16806:338;;;;:::o;17150:652::-;17227:6;17235;17284:2;17272:9;17263:7;17259:23;17255:32;17252:119;;;17290:79;;:::i;:::-;17252:119;17410:1;17435:53;17480:7;17471:6;17460:9;17456:22;17435:53;:::i;:::-;17425:63;;17381:117;17565:2;17554:9;17550:18;17537:32;17596:18;17588:6;17585:30;17582:117;;;17618:79;;:::i;:::-;17582:117;17723:62;17777:7;17768:6;17757:9;17753:22;17723:62;:::i;:::-;17713:72;;17508:287;17150:652;;;;;:::o;17808:519::-;17997:4;18035:2;18024:9;18020:18;18012:26;;18048:71;18116:1;18105:9;18101:17;18092:6;18048:71;:::i;:::-;18166:9;18160:4;18156:20;18151:2;18140:9;18136:18;18129:48;18194:126;18315:4;18306:6;18194:126;:::i;:::-;18186:134;;17808:519;;;;;:::o;18333:329::-;18392:6;18441:2;18429:9;18420:7;18416:23;18412:32;18409:119;;;18447:79;;:::i;:::-;18409:119;18567:1;18592:53;18637:7;18628:6;18617:9;18613:22;18592:53;:::i;:::-;18582:63;;18538:117;18333:329;;;;:::o;18668:180::-;18716:77;18713:1;18706:88;18813:4;18810:1;18803:15;18837:4;18834:1;18827:15;18854:60;18882:3;18903:5;18896:12;;18854:60;;;:::o;18920:142::-;18970:9;19003:53;19021:34;19030:24;19048:5;19030:24;:::i;:::-;19021:34;:::i;:::-;19003:53;:::i;:::-;18990:66;;18920:142;;;:::o;19068:126::-;19118:9;19151:37;19182:5;19151:37;:::i;:::-;19138:50;;19068:126;;;:::o;19200:138::-;19262:9;19295:37;19326:5;19295:37;:::i;:::-;19282:50;;19200:138;;;:::o;19344:155::-;19443:49;19486:5;19443:49;:::i;:::-;19438:3;19431:62;19344:155;;:::o;19505:246::-;19610:4;19648:2;19637:9;19633:18;19625:26;;19661:83;19741:1;19730:9;19726:17;19717:6;19661:83;:::i;:::-;19505:246;;;;:::o"},"gasEstimates":{"creation":{"codeDepositCost":"3444000","executionCost":"3852","totalCost":"3447852"},"external":{"implementation()":"378","prepareInstallation(address,bytes)":"infinite","prepareUninstallation(address,(address,address[],bytes))":"infinite","prepareUpdate(address,uint16,(address,address[],bytes))":"infinite","supportsInterface(bytes4)":"705"}},"methodIdentifiers":{"implementation()":"5c60da1b","prepareInstallation(address,bytes)":"f10832f1","prepareUninstallation(address,(address,address[],bytes))":"9cb0a124","prepareUpdate(address,uint16,(address,address[],bytes))":"a8a9c29e","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"prepareInstallation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"plugin\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"helpers\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"enum PermissionLib.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"where\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"condition\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"permissionId\",\"type\":\"bytes32\"}],\"internalType\":\"struct PermissionLib.MultiTargetPermission[]\",\"name\":\"permissions\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IPluginSetup.PreparedSetupData\",\"name\":\"preparedSetupData\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"plugin\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"currentHelpers\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IPluginSetup.SetupPayload\",\"name\":\"_payload\",\"type\":\"tuple\"}],\"name\":\"prepareUninstallation\",\"outputs\":[{\"components\":[{\"internalType\":\"enum PermissionLib.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"where\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"condition\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"permissionId\",\"type\":\"bytes32\"}],\"internalType\":\"struct PermissionLib.MultiTargetPermission[]\",\"name\":\"permissions\",\"type\":\"tuple[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_currentBuild\",\"type\":\"uint16\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"plugin\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"currentHelpers\",\"type\":\"address[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"internalType\":\"struct IPluginSetup.SetupPayload\",\"name\":\"_payload\",\"type\":\"tuple\"}],\"name\":\"prepareUpdate\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"initData\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"helpers\",\"type\":\"address[]\"},{\"components\":[{\"internalType\":\"enum PermissionLib.Operation\",\"name\":\"operation\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"where\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"condition\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"permissionId\",\"type\":\"bytes32\"}],\"internalType\":\"struct PermissionLib.MultiTargetPermission[]\",\"name\":\"permissions\",\"type\":\"tuple[]\"}],\"internalType\":\"struct IPluginSetup.PreparedSetupData\",\"name\":\"preparedSetupData\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"implementation()\":{\"details\":\"The implementation can be instantiated via the `new` keyword, cloned via the minimal clones pattern (see [ERC-1167](https://eips.ethereum.org/EIPS/eip-1167)), or proxied via the UUPS pattern (see [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822)).\",\"returns\":{\"_0\":\"The address of the plugin implementation contract.\"}},\"prepareUninstallation(address,(address,address[],bytes))\":{\"params\":{\"_dao\":\"The address of the uninstalling DAO.\",\"_payload\":\"The relevant data necessary for the `prepareUninstallation`. See above.\"},\"returns\":{\"permissions\":\"The array of multi-targeted permission operations to be applied by the `PluginSetupProcessor` to the uninstalling DAO.\"}},\"prepareUpdate(address,uint16,(address,address[],bytes))\":{\"params\":{\"_currentBuild\":\"The build number of the plugin to update from.\",\"_dao\":\"The address of the updating DAO.\",\"_payload\":\"The relevant data necessary for the `prepareUpdate`. See above.\"},\"returns\":{\"initData\":\"The initialization data to be passed to upgradeable contracts when the update is applied in the `PluginSetupProcessor`.\",\"preparedSetupData\":\"The deployed plugin's relevant data which consists of helpers and permissions.\"}},\"supportsInterface(bytes4)\":{\"params\":{\"_interfaceId\":\"The ID of the interface.\"},\"returns\":{\"_0\":\"Returns `true` if the interface is supported.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"implementation()\":{\"notice\":\"Returns the plugin implementation address.\"},\"prepareUninstallation(address,(address,address[],bytes))\":{\"notice\":\"Prepares the uninstallation of a plugin.\"},\"prepareUpdate(address,uint16,(address,address[],bytes))\":{\"notice\":\"Prepares the update of a plugin.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Checks if this or the parent contract supports an interface by its ID.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LendPluginSetup.sol\":\"LendPluginSetup\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@aragon/osx/core/dao/IDAO.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\n/// @title IDAO\\n/// @author Aragon Association - 2022-2023\\n/// @notice The interface required for DAOs within the Aragon App DAO framework.\\ninterface IDAO {\\n    /// @notice The action struct to be consumed by the DAO's `execute` function resulting in an external call.\\n    /// @param to The address to call.\\n    /// @param value The native token value to be sent with the call.\\n    /// @param data The bytes-encoded function selector and calldata for the call.\\n    struct Action {\\n        address to;\\n        uint256 value;\\n        bytes data;\\n    }\\n\\n    /// @notice Checks if an address has permission on a contract via a permission identifier and considers if `ANY_ADDRESS` was used in the granting process.\\n    /// @param _where The address of the contract.\\n    /// @param _who The address of a EOA or contract to give the permissions.\\n    /// @param _permissionId The permission identifier.\\n    /// @param _data The optional data passed to the `PermissionCondition` registered.\\n    /// @return Returns true if the address has permission, false if not.\\n    function hasPermission(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId,\\n        bytes memory _data\\n    ) external view returns (bool);\\n\\n    /// @notice Updates the DAO metadata (e.g., an IPFS hash).\\n    /// @param _metadata The IPFS hash of the new metadata object.\\n    function setMetadata(bytes calldata _metadata) external;\\n\\n    /// @notice Emitted when the DAO metadata is updated.\\n    /// @param metadata The IPFS hash of the new metadata object.\\n    event MetadataSet(bytes metadata);\\n\\n    /// @notice Executes a list of actions. If a zero allow-failure map is provided, a failing action reverts the entire execution. If a non-zero allow-failure map is provided, allowed actions can fail without the entire call being reverted.\\n    /// @param _callId The ID of the call. The definition of the value of `callId` is up to the calling contract and can be used, e.g., as a nonce.\\n    /// @param _actions The array of actions.\\n    /// @param _allowFailureMap A bitmap allowing execution to succeed, even if individual actions might revert. If the bit at index `i` is 1, the execution succeeds even if the `i`th action reverts. A failure map value of 0 requires every action to not revert.\\n    /// @return The array of results obtained from the executed actions in `bytes`.\\n    /// @return The resulting failure map containing the actions have actually failed.\\n    function execute(\\n        bytes32 _callId,\\n        Action[] memory _actions,\\n        uint256 _allowFailureMap\\n    ) external returns (bytes[] memory, uint256);\\n\\n    /// @notice Emitted when a proposal is executed.\\n    /// @param actor The address of the caller.\\n    /// @param callId The ID of the call.\\n    /// @param actions The array of actions executed.\\n    /// @param allowFailureMap The allow failure map encoding which actions are allowed to fail.\\n    /// @param failureMap The failure map encoding which actions have failed.\\n    /// @param execResults The array with the results of the executed actions.\\n    /// @dev The value of `callId` is defined by the component/contract calling the execute function. A `Plugin` implementation can use it, for example, as a nonce.\\n    event Executed(\\n        address indexed actor,\\n        bytes32 callId,\\n        Action[] actions,\\n        uint256 allowFailureMap,\\n        uint256 failureMap,\\n        bytes[] execResults\\n    );\\n\\n    /// @notice Emitted when a standard callback is registered.\\n    /// @param interfaceId The ID of the interface.\\n    /// @param callbackSelector The selector of the callback function.\\n    /// @param magicNumber The magic number to be registered for the callback function selector.\\n    event StandardCallbackRegistered(\\n        bytes4 interfaceId,\\n        bytes4 callbackSelector,\\n        bytes4 magicNumber\\n    );\\n\\n    /// @notice Deposits (native) tokens to the DAO contract with a reference string.\\n    /// @param _token The address of the token or address(0) in case of the native token.\\n    /// @param _amount The amount of tokens to deposit.\\n    /// @param _reference The reference describing the deposit reason.\\n    function deposit(address _token, uint256 _amount, string calldata _reference) external payable;\\n\\n    /// @notice Emitted when a token deposit has been made to the DAO.\\n    /// @param sender The address of the sender.\\n    /// @param token The address of the deposited token.\\n    /// @param amount The amount of tokens deposited.\\n    /// @param _reference The reference describing the deposit reason.\\n    event Deposited(\\n        address indexed sender,\\n        address indexed token,\\n        uint256 amount,\\n        string _reference\\n    );\\n\\n    /// @notice Emitted when a native token deposit has been made to the DAO.\\n    /// @dev This event is intended to be emitted in the `receive` function and is therefore bound by the gas limitations for `send`/`transfer` calls introduced by [ERC-2929](https://eips.ethereum.org/EIPS/eip-2929).\\n    /// @param sender The address of the sender.\\n    /// @param amount The amount of native tokens deposited.\\n    event NativeTokenDeposited(address sender, uint256 amount);\\n\\n    /// @notice Setter for the trusted forwarder verifying the meta transaction.\\n    /// @param _trustedForwarder The trusted forwarder address.\\n    function setTrustedForwarder(address _trustedForwarder) external;\\n\\n    /// @notice Getter for the trusted forwarder verifying the meta transaction.\\n    /// @return The trusted forwarder address.\\n    function getTrustedForwarder() external view returns (address);\\n\\n    /// @notice Emitted when a new TrustedForwarder is set on the DAO.\\n    /// @param forwarder the new forwarder address.\\n    event TrustedForwarderSet(address forwarder);\\n\\n    /// @notice Setter for the [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract.\\n    /// @param _signatureValidator The address of the signature validator.\\n    function setSignatureValidator(address _signatureValidator) external;\\n\\n    /// @notice Emitted when the signature validator address is updated.\\n    /// @param signatureValidator The address of the signature validator.\\n    event SignatureValidatorSet(address signatureValidator);\\n\\n    /// @notice Checks whether a signature is valid for the provided hash by forwarding the call to the set [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract.\\n    /// @param _hash The hash of the data to be signed.\\n    /// @param _signature The signature byte array associated with `_hash`.\\n    /// @return Returns the `bytes4` magic value `0x1626ba7e` if the signature is valid.\\n    function isValidSignature(bytes32 _hash, bytes memory _signature) external returns (bytes4);\\n\\n    /// @notice Registers an ERC standard having a callback by registering its [ERC-165](https://eips.ethereum.org/EIPS/eip-165) interface ID and callback function signature.\\n    /// @param _interfaceId The ID of the interface.\\n    /// @param _callbackSelector The selector of the callback function.\\n    /// @param _magicNumber The magic number to be registered for the function signature.\\n    function registerStandardCallback(\\n        bytes4 _interfaceId,\\n        bytes4 _callbackSelector,\\n        bytes4 _magicNumber\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3876d62c73312234c1e2ab4e75cdac2783a6688c3445a67a15b767cd98e01f80\",\"license\":\"AGPL-3.0-or-later\"},\"@aragon/osx/core/permission/PermissionLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\n/// @title PermissionLib\\n/// @author Aragon Association - 2021-2023\\n/// @notice A library containing objects for permission processing.\\nlibrary PermissionLib {\\n    /// @notice A constant expressing that no condition is applied to a permission.\\n    address public constant NO_CONDITION = address(0);\\n\\n    /// @notice The types of permission operations available in the `PermissionManager`.\\n    /// @param Grant The grant operation setting a permission without a condition.\\n    /// @param Revoke The revoke operation removing a permission (that was granted with or without a condition).\\n    /// @param GrantWithCondition The grant operation setting a permission with a condition.\\n    enum Operation {\\n        Grant,\\n        Revoke,\\n        GrantWithCondition\\n    }\\n\\n    /// @notice A struct containing the information for a permission to be applied on a single target contract without a condition.\\n    /// @param operation The permission operation type.\\n    /// @param who The address (EOA or contract) receiving the permission.\\n    /// @param permissionId The permission identifier.\\n    struct SingleTargetPermission {\\n        Operation operation;\\n        address who;\\n        bytes32 permissionId;\\n    }\\n\\n    /// @notice A struct containing the information for a permission to be applied on multiple target contracts, optionally, with a condition.\\n    /// @param operation The permission operation type.\\n    /// @param where The address of the target contract for which `who` receives permission.\\n    /// @param who The address (EOA or contract) receiving the permission.\\n    /// @param condition The `PermissionCondition` that will be asked for authorization on calls connected to the specified permission identifier.\\n    /// @param permissionId The permission identifier.\\n    struct MultiTargetPermission {\\n        Operation operation;\\n        address where;\\n        address who;\\n        address condition;\\n        bytes32 permissionId;\\n    }\\n}\\n\",\"keccak256\":\"0x9b27fa8990e0f1623055187b8ade9363a6c8a1f15aab900e3a6e5cb312545c02\",\"license\":\"AGPL-3.0-or-later\"},\"@aragon/osx/core/plugin/IPlugin.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\n/// @title IPlugin\\n/// @author Aragon Association - 2022-2023\\n/// @notice An interface defining the traits of a plugin.\\ninterface IPlugin {\\n    enum PluginType {\\n        UUPS,\\n        Cloneable,\\n        Constructable\\n    }\\n\\n    /// @notice Returns the plugin's type\\n    function pluginType() external view returns (PluginType);\\n}\\n\",\"keccak256\":\"0xcdb72c04ca35478e4d786fbbe12cf0e6de7d76aa0510028432312697f42c7355\",\"license\":\"AGPL-3.0-or-later\"},\"@aragon/osx/core/plugin/Plugin.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\n\\nimport {IDAO} from \\\"../dao/IDAO.sol\\\";\\nimport {DaoAuthorizable} from \\\"./dao-authorizable/DaoAuthorizable.sol\\\";\\nimport {IPlugin} from \\\"./IPlugin.sol\\\";\\n\\n/// @title Plugin\\n/// @author Aragon Association - 2022-2023\\n/// @notice An abstract, non-upgradeable contract to inherit from when creating a plugin being deployed via the `new` keyword.\\nabstract contract Plugin is IPlugin, ERC165, DaoAuthorizable {\\n    /// @notice Constructs the plugin by storing the associated DAO.\\n    /// @param _dao The DAO contract.\\n    constructor(IDAO _dao) DaoAuthorizable(_dao) {}\\n\\n    /// @inheritdoc IPlugin\\n    function pluginType() public pure override returns (PluginType) {\\n        return PluginType.Constructable;\\n    }\\n\\n    /// @notice Checks if this or the parent contract supports an interface by its ID.\\n    /// @param _interfaceId The ID of the interface.\\n    /// @return Returns `true` if the interface is supported.\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\\n        return _interfaceId == type(IPlugin).interfaceId || super.supportsInterface(_interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0xf4ba8a3d7e3e626ed07619acc9ab616e17615e7ce2983b634a0bba0662897452\",\"license\":\"AGPL-3.0-or-later\"},\"@aragon/osx/core/plugin/dao-authorizable/DaoAuthorizable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\nimport {IDAO} from \\\"../../dao/IDAO.sol\\\";\\nimport {_auth} from \\\"../../utils/auth.sol\\\";\\n\\n/// @title DaoAuthorizable\\n/// @author Aragon Association - 2022-2023\\n/// @notice An abstract contract providing a meta-transaction compatible modifier for non-upgradeable contracts instantiated via the `new` keyword to authorize function calls through an associated DAO.\\nabstract contract DaoAuthorizable is Context {\\n    /// @notice The associated DAO managing the permissions of inheriting contracts.\\n    IDAO private immutable dao_;\\n\\n    /// @notice Constructs the contract by setting the associated DAO.\\n    /// @param _dao The associated DAO address.\\n    constructor(IDAO _dao) {\\n        dao_ = _dao;\\n    }\\n\\n    /// @notice Returns the DAO contract.\\n    /// @return The DAO contract.\\n    function dao() public view returns (IDAO) {\\n        return dao_;\\n    }\\n\\n    /// @notice A modifier to make functions on inheriting contracts authorized. Permissions to call the function are checked through the associated DAO's permission manager.\\n    /// @param _permissionId The permission identifier required to call the method this modifier is applied to.\\n    modifier auth(bytes32 _permissionId) {\\n        _auth(dao_, address(this), _msgSender(), _permissionId, _msgData());\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xfb9de789f0266a61a5cfbd17a247b4ba4212ff091ccd10739318763331bdd154\",\"license\":\"AGPL-3.0-or-later\"},\"@aragon/osx/core/utils/auth.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\nimport {IDAO} from \\\"../dao/IDAO.sol\\\";\\n\\n/// @notice Thrown if a call is unauthorized in the associated DAO.\\n/// @param dao The associated DAO.\\n/// @param where The context in which the authorization reverted.\\n/// @param who The address (EOA or contract) missing the permission.\\n/// @param permissionId The permission identifier.\\nerror DaoUnauthorized(address dao, address where, address who, bytes32 permissionId);\\n\\n/// @notice A free function checking if a caller is granted permissions on a target contract via a permission identifier that redirects the approval to a `PermissionCondition` if this was specified in the setup.\\n/// @param _where The address of the target contract for which `who` receives permission.\\n/// @param _who The address (EOA or contract) owning the permission.\\n/// @param _permissionId The permission identifier.\\n/// @param _data The optional data passed to the `PermissionCondition` registered.\\nfunction _auth(\\n    IDAO _dao,\\n    address _where,\\n    address _who,\\n    bytes32 _permissionId,\\n    bytes calldata _data\\n) view {\\n    if (!_dao.hasPermission(_where, _who, _permissionId, _data))\\n        revert DaoUnauthorized({\\n            dao: address(_dao),\\n            where: _where,\\n            who: _who,\\n            permissionId: _permissionId\\n        });\\n}\\n\",\"keccak256\":\"0x1c9cf22583c8b5a08c6d2c02a68d9f05e58900a9bb27efa3b30abca2ecfabfe4\",\"license\":\"AGPL-3.0-or-later\"},\"@aragon/osx/framework/plugin/setup/IPluginSetup.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\nimport {PermissionLib} from \\\"../../../core/permission/PermissionLib.sol\\\";\\nimport {IDAO} from \\\"../../../core/dao/IDAO.sol\\\";\\n\\n/// @title IPluginSetup\\n/// @author Aragon Association - 2022-2023\\n/// @notice The interface required for a plugin setup contract to be consumed by the `PluginSetupProcessor` for plugin installations, updates, and uninstallations.\\ninterface IPluginSetup {\\n    /// @notice The data associated with a prepared setup.\\n    /// @param helpers The address array of helpers (contracts or EOAs) associated with this plugin version after the installation or update.\\n    /// @param permissions The array of multi-targeted permission operations to be applied by the `PluginSetupProcessor` to the installing or updating DAO.\\n    struct PreparedSetupData {\\n        address[] helpers;\\n        PermissionLib.MultiTargetPermission[] permissions;\\n    }\\n\\n    /// @notice The payload for plugin updates and uninstallations containing the existing contracts as well as optional data to be consumed by the plugin setup.\\n    /// @param plugin The address of the `Plugin`.\\n    /// @param currentHelpers The address array of all current helpers (contracts or EOAs) associated with the plugin to update from.\\n    /// @param data The bytes-encoded data containing the input parameters for the preparation of update/uninstall as specified in the corresponding ABI on the version's metadata.\\n    struct SetupPayload {\\n        address plugin;\\n        address[] currentHelpers;\\n        bytes data;\\n    }\\n\\n    /// @notice Prepares the installation of a plugin.\\n    /// @param _dao The address of the installing DAO.\\n    /// @param _data The bytes-encoded data containing the input parameters for the installation as specified in the plugin's build metadata JSON file.\\n    /// @return plugin The address of the `Plugin` contract being prepared for installation.\\n    /// @return preparedSetupData The deployed plugin's relevant data which consists of helpers and permissions.\\n    function prepareInstallation(\\n        address _dao,\\n        bytes calldata _data\\n    ) external returns (address plugin, PreparedSetupData memory preparedSetupData);\\n\\n    /// @notice Prepares the update of a plugin.\\n    /// @param _dao The address of the updating DAO.\\n    /// @param _currentBuild The build number of the plugin to update from.\\n    /// @param _payload The relevant data necessary for the `prepareUpdate`. See above.\\n    /// @return initData The initialization data to be passed to upgradeable contracts when the update is applied in the `PluginSetupProcessor`.\\n    /// @return preparedSetupData The deployed plugin's relevant data which consists of helpers and permissions.\\n    function prepareUpdate(\\n        address _dao,\\n        uint16 _currentBuild,\\n        SetupPayload calldata _payload\\n    ) external returns (bytes memory initData, PreparedSetupData memory preparedSetupData);\\n\\n    /// @notice Prepares the uninstallation of a plugin.\\n    /// @param _dao The address of the uninstalling DAO.\\n    /// @param _payload The relevant data necessary for the `prepareUninstallation`. See above.\\n    /// @return permissions The array of multi-targeted permission operations to be applied by the `PluginSetupProcessor` to the uninstalling DAO.\\n    function prepareUninstallation(\\n        address _dao,\\n        SetupPayload calldata _payload\\n    ) external returns (PermissionLib.MultiTargetPermission[] memory permissions);\\n\\n    /// @notice Returns the plugin implementation address.\\n    /// @return The address of the plugin implementation contract.\\n    /// @dev The implementation can be instantiated via the `new` keyword, cloned via the minimal clones pattern (see [ERC-1167](https://eips.ethereum.org/EIPS/eip-1167)), or proxied via the UUPS pattern (see [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822)).\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0x81d1e60154e672372318f6fccf337b6094bb8fe1192e2f755b8cc0d645ff5332\",\"license\":\"AGPL-3.0-or-later\"},\"@aragon/osx/framework/plugin/setup/PluginSetup.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {ERC165Checker} from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport {Clones} from \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\nimport {PermissionLib} from \\\"../../../core/permission/PermissionLib.sol\\\";\\nimport {createERC1967Proxy as createERC1967} from \\\"../../../utils/Proxy.sol\\\";\\nimport {IPluginSetup} from \\\"./IPluginSetup.sol\\\";\\n\\n/// @title PluginSetup\\n/// @author Aragon Association - 2022-2023\\n/// @notice An abstract contract that developers have to inherit from to write the setup of a plugin.\\nabstract contract PluginSetup is ERC165, IPluginSetup {\\n    /// @inheritdoc IPluginSetup\\n    function prepareUpdate(\\n        address _dao,\\n        uint16 _currentBuild,\\n        SetupPayload calldata _payload\\n    )\\n        external\\n        virtual\\n        override\\n        returns (bytes memory initData, PreparedSetupData memory preparedSetupData)\\n    {}\\n\\n    /// @notice A convenience function to create an [ERC-1967](https://eips.ethereum.org/EIPS/eip-1967) proxy contract pointing to an implementation and being associated to a DAO.\\n    /// @param _implementation The address of the implementation contract to which the proxy is pointing to.\\n    /// @param _data The data to initialize the storage of the proxy contract.\\n    /// @return The address of the created proxy contract.\\n    function createERC1967Proxy(\\n        address _implementation,\\n        bytes memory _data\\n    ) internal returns (address) {\\n        return createERC1967(_implementation, _data);\\n    }\\n\\n    /// @notice Checks if this or the parent contract supports an interface by its ID.\\n    /// @param _interfaceId The ID of the interface.\\n    /// @return Returns `true` if the interface is supported.\\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\\n        return\\n            _interfaceId == type(IPluginSetup).interfaceId || super.supportsInterface(_interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x04ff3ec8a5b121ef3972dbb8140b7cf313f9ed514f8471841e3dcf5304ef6950\",\"license\":\"AGPL-3.0-or-later\"},\"@aragon/osx/utils/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\nimport \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\n\\n/// @notice Free function to create a [ERC-1967](https://eips.ethereum.org/EIPS/eip-1967) proxy contract based on the passed base contract address.\\n/// @param _logic The base contract address.\\n/// @param _data The constructor arguments for this contract.\\n/// @return The address of the proxy contract created.\\n/// @dev Initializes the upgradeable proxy with an initial implementation specified by _logic. If _data is non-empty, it\\u2019s used as data in a delegate call to _logic. This will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity constructor (see [OpenZeppelin ERC1967Proxy-constructor](https://docs.openzeppelin.com/contracts/4.x/api/proxy#ERC1967Proxy-constructor-address-bytes-)).\\nfunction createERC1967Proxy(address _logic, bytes memory _data) returns (address) {\\n    return address(new ERC1967Proxy(_logic, _data));\\n}\\n\",\"keccak256\":\"0x9d871292dfac2f42957e4d10eec56fd74dda0bd7803c01e849d2e9f5e2799fff\",\"license\":\"AGPL-3.0-or-later\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1967.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\\n *\\n * _Available since v4.8.3._\\n */\\ninterface IERC1967 {\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Emitted when the beacon is changed.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n}\\n\",\"keccak256\":\"0x3cbef5ebc24b415252e2f8c0c9254555d30d9f085603b4b80d9b5ed20ab87e90\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0x2a9dadb806be80dd451821f1f1190eb9aa6f6edae85b185db29d60767cc0c5f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x01f055f5c26ba25d7f83e9aa9ba877fbea4d0bf22227de046ea67494bc932999\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/IERC1967.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract ERC1967Upgrade is IERC1967 {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3b21ae06bf5957f73fa16754b0669c77b7abd8ba6c072d35c3281d446fdb86c2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../interfaces/IERC4906.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == bytes4(0x49064906) || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n\\n        emit MetadataUpdate(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7942989e3525aec1672469e4c65fb33fbd19c785c9cadbcb70fcbe1fe8bfdd37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant _INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, _INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeWithSelector(IERC165.supportsInterface.selector, interfaceId);\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x5a08ad61f4e82b8a3323562661a86fb10b10190848073fdc13d4ac43710ffba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/LendNFTPlugin.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.19;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\n\\n\\nimport {Plugin, IDAO} from '@aragon/osx/core/plugin/Plugin.sol';\\n\\ncontract FactoryNFT is ERC721URIStorage { \\n\\n  using Counters for Counters.Counter; \\n  Counters.Counter private _tokenIds;\\n\\n  constructor() ERC721(\\\"Farm Lender NFT\\\", \\\"FLN\\\") {}\\n\\n  function createToken() public {\\n      _tokenIds.increment();\\n      uint256 newItemId = _tokenIds.current();\\n\\n      _mint(msg.sender, newItemId);\\n  }    \\n}\\n\\ncontract LendNFTPlugin is Plugin {\\n  // Permissions are what connects everything together. \\n  // Addresses who have been granted the GREET_PERMISSION will be \\n  // able to call on functions with the modifier `auth(GREET_PERMISSION_ID)`. \\n  // These will be granted in the PluginSetup.sol contract up next.\\n  bytes32 public constant GREET_PERMISSION_ID = keccak256('GREET_PERMISSION');\\n\\n  FactoryNFT private factory_NFT;\\n\\n  constructor(IDAO _dao) Plugin(_dao) {\\n    factory_NFT = new FactoryNFT();\\n  }\\n\\n  function lend_money() external auth(GREET_PERMISSION_ID) {\\n    factory_NFT.createToken();\\n  }\\n\\n}\\n\",\"keccak256\":\"0xfac6751644136bd6684464647bd73f0598b10723e8d810075e4d9aff347ac83f\",\"license\":\"AGPL-3.0-or-later\"},\"contracts/LendPluginSetup.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\npragma solidity 0.8.19;\\n\\nimport {PluginSetup} from '@aragon/osx/framework/plugin/setup/PluginSetup.sol';\\nimport {PermissionLib} from '@aragon/osx/core/permission/PermissionLib.sol';\\n\\nimport './LendNFTPlugin.sol';\\n\\ncontract LendPluginSetup is PluginSetup {\\n  function prepareInstallation(\\n    address _dao,\\n    bytes memory\\n  ) external returns (address plugin, PreparedSetupData memory preparedSetupData) {\\n    plugin = address(new LendNFTPlugin(IDAO(_dao)));\\n\\n    PermissionLib.MultiTargetPermission[]\\n      memory permissions = new PermissionLib.MultiTargetPermission[](1);\\n\\n    permissions[0] = PermissionLib.MultiTargetPermission({\\n      operation: PermissionLib.Operation.Grant,\\n      where: plugin,\\n      who: _dao,\\n      condition: PermissionLib.NO_CONDITION,\\n      permissionId: keccak256('GREET_PERMISSION')\\n    });\\n\\n    preparedSetupData.permissions = permissions;\\n  }\\n\\n  function prepareUninstallation(\\n    address _dao,\\n    SetupPayload calldata _payload\\n  ) external pure returns (PermissionLib.MultiTargetPermission[] memory permissions) {\\n    permissions = new PermissionLib.MultiTargetPermission[](1);\\n\\n    permissions[0] = PermissionLib.MultiTargetPermission({\\n      operation: PermissionLib.Operation.Revoke,\\n      where: _payload.plugin,\\n      who: _dao,\\n      condition: PermissionLib.NO_CONDITION,\\n      permissionId: keccak256('GREET_PERMISSION')\\n    });\\n  }\\n\\n  function implementation() external view returns (address) {}\\n}\",\"keccak256\":\"0xfc799b0623354c9418c229e27ee8a7088174e83536bdd355e625895e9d522cf0\",\"license\":\"AGPL-3.0-or-later\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"implementation()":{"notice":"Returns the plugin implementation address."},"prepareUninstallation(address,(address,address[],bytes))":{"notice":"Prepares the uninstallation of a plugin."},"prepareUpdate(address,uint16,(address,address[],bytes))":{"notice":"Prepares the update of a plugin."},"supportsInterface(bytes4)":{"notice":"Checks if this or the parent contract supports an interface by its ID."}},"version":1}}}}}}